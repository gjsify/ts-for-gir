---
description: Development yarn workflow and contribution
globs: 
alwaysApply: false
---
# Development Workflow

## Generator Development Cycle
1. **Modify generator code** in `/packages/generator-typescript/src/`
2. **Update templates** in `/packages/templates/templates/`
3. **Test generation**: `yarn start generate Gtk-4.0 --verbose`
4. **Validate output**: Check `/types/@girs/gtk-4.0/`

## Key Files to Modify

### For Type Improvements
- `/packages/generator-typescript/src/type-definition-generator.ts` - Main type generation logic
- `/packages/lib/src/gir-module.ts` - Module processing and conflict resolution
- `/packages/lib/src/transformation/*.ts` - Name and type transformations

### For Template Changes
- `/packages/templates/templates/*.d.ts` - EJS templates
- Use `<%=` for variables, `<%-` for unescaped output
- Access generator context via template variables

### For New Features
1. Extend `GeneratorBase` in `/packages/generator-base/`
2. Implement in `/packages/generator-typescript/`
3. Add new templates if needed
4. Update config types in `/packages/lib/src/types/`

## Testing Changes
```bash
# Quick test with single module
yarn start generate GLib-2.0 --verbose

# Test the the type generation generally
yarn test:locally

# Test examples
yarn build:examples
yarn check:examples

# Full test suite
yarn test
```