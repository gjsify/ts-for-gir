<?xml version="1.0"?>
<!-- UMockdev-1.0.gir generated by valac 0.56.17, do not modify. -->
<repository version="1.2" xmlns="http://www.gtk.org/introspection/core/1.0" xmlns:c="http://www.gtk.org/introspection/c/1.0" xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
<include name="GObject" version="2.0"/>
<package name="umockdev"/>
<c:include name="umockdev.h"/>
<namespace name="UMockdev" version="1.0" c:prefix="UMockdev" c:identifier-prefixes="UMockdev" c:symbol-prefixes="umockdev">
	<enumeration name="Error" c:type="UMockdevError" glib:type-name="UMockdevError" glib:get-type="umockdev_error_get_type" glib:error-domain="umockdev-error-quark">
		<member name="parse" c:identifier="UMOCKDEV_ERROR_PARSE" value="0"/>
		<member name="value" c:identifier="UMOCKDEV_ERROR_VALUE" value="1"/>
	</enumeration>
	<class name="Testbed" c:type="UMockdevTestbed" c:symbol-prefix="testbed" glib:type-name="UMockdevTestbed" glib:get-type="umockdev_testbed_get_type" glib:type-struct="TestbedClass" parent="GObject.Object">
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<constructor name="new" c:identifier="umockdev_testbed_new">
			<return-value transfer-ownership="full">
				<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
			</return-value>
		</constructor>
		<method name="get_root_dir" c:identifier="umockdev_testbed_get_root_dir">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="get_sys_dir" c:identifier="umockdev_testbed_get_sys_dir">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_attribute" c:identifier="umockdev_testbed_set_attribute">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
				<parameter name="devpath" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<method name="set_attribute_binary" c:identifier="umockdev_testbed_set_attribute_binary">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
				<parameter name="devpath" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="value" transfer-ownership="none">
					<array length="3" c:type="guint8*">
						<type name="guint8" c:type="guint8"/>
					</array>
				</parameter>
				<parameter name="value_length1" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
		<method name="set_attribute_int" c:identifier="umockdev_testbed_set_attribute_int">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
				<parameter name="devpath" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
		<method name="set_attribute_hex" c:identifier="umockdev_testbed_set_attribute_hex">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
				<parameter name="devpath" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</parameter>
			</parameters>
		</method>
		<method name="set_attribute_link" c:identifier="umockdev_testbed_set_attribute_link">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
				<parameter name="devpath" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<method name="get_property" c:identifier="umockdev_testbed_get_property">
			<return-value transfer-ownership="full" nullable="1">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
				<parameter name="devpath" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<method name="set_property" c:identifier="umockdev_testbed_set_property">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
				<parameter name="devpath" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<method name="set_property_int" c:identifier="umockdev_testbed_set_property_int">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
				<parameter name="devpath" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
		<method name="set_property_hex" c:identifier="umockdev_testbed_set_property_hex">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
				<parameter name="devpath" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</parameter>
			</parameters>
		</method>
		<method name="add_devicev" c:identifier="umockdev_testbed_add_devicev">
			<return-value transfer-ownership="full" nullable="1">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
				<parameter name="subsystem" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="parent" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="attributes" transfer-ownership="none">
					<array c:type="gchar**">
						<type name="utf8" c:type="gchar*"/>
					</array>
				</parameter>
				<parameter name="properties" transfer-ownership="none">
					<array c:type="gchar**">
						<type name="utf8" c:type="gchar*"/>
					</array>
				</parameter>
			</parameters>
		</method>
		<method name="add_device" c:identifier="umockdev_testbed_add_device" introspectable="0">
			<return-value transfer-ownership="full" nullable="1">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
				<parameter name="subsystem" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="parent" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="..." transfer-ownership="none">
					<varargs/>
				</parameter>
			</parameters>
		</method>
		<method name="remove_device" c:identifier="umockdev_testbed_remove_device">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
				<parameter name="syspath" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<method name="add_from_string" c:identifier="umockdev_testbed_add_from_string" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
				<parameter name="data" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<method name="add_from_file" c:identifier="umockdev_testbed_add_from_file" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
				<parameter name="path" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<method name="uevent" c:identifier="umockdev_testbed_uevent">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
				<parameter name="devpath" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="action" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<method name="attach_ioctl" c:identifier="umockdev_testbed_attach_ioctl" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
				<parameter name="dev" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="handler" transfer-ownership="none">
					<type name="UMockdev.IoctlBase" c:type="UMockdevIoctlBase*"/>
				</parameter>
			</parameters>
		</method>
		<method name="detach_ioctl" c:identifier="umockdev_testbed_detach_ioctl" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
				<parameter name="dev" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<method name="load_ioctl" c:identifier="umockdev_testbed_load_ioctl" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
				<parameter name="dev" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="recordfile" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<method name="load_pcap" c:identifier="umockdev_testbed_load_pcap" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
				<parameter name="sysfs" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="recordfile" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<method name="load_script" c:identifier="umockdev_testbed_load_script" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
				<parameter name="dev" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="recordfile" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<method name="load_socket_script" c:identifier="umockdev_testbed_load_socket_script" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
				<parameter name="path" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="type" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
				<parameter name="recordfile" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<method name="load_evemu_events" c:identifier="umockdev_testbed_load_evemu_events" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
				<parameter name="dev" transfer-ownership="none" nullable="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="eventsfile" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<method name="disable" c:identifier="umockdev_testbed_disable">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="enable" c:identifier="umockdev_testbed_enable">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="clear" c:identifier="umockdev_testbed_clear">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="get_dev_fd" c:identifier="umockdev_testbed_get_dev_fd">
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.Testbed" c:type="UMockdevTestbed*"/>
				</instance-parameter>
				<parameter name="devnode" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<field name="priv" readable="0" private="1">
			<type name="TestbedPrivate" c:type="UMockdevTestbedPrivate*"/>
		</field>
	</class>
	<record name="TestbedClass" c:type="UMockdevTestbedClass" glib:is-gtype-struct-for="Testbed">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="TestbedPrivate" c:type="UMockdevTestbedPrivate" disguised="1"/>
	<class name="IoctlData" c:type="UMockdevIoctlData" c:symbol-prefix="ioctl_data" glib:type-name="UMockdevIoctlData" glib:get-type="umockdev_ioctl_data_get_type" glib:type-struct="IoctlDataClass" parent="GObject.Object">
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="data" writable="1">
			<array c:type="guint8*">
				<type name="guint8" c:type="guint8"/>
			</array>
		</field>
		<field name="data_length1">
			<type name="gint" c:type="gint"/>
		</field>
		<field name="client_addr" writable="1">
			<type name="gulong" c:type="gulong"/>
		</field>
		<method name="compat_ref" c:identifier="umockdev_ioctl_data_ref">
			<return-value transfer-ownership="full" nullable="1">
				<type name="UMockdev.IoctlData" c:type="UMockdevIoctlData*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.IoctlData" c:type="UMockdevIoctlData*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="compat_unref" c:identifier="umockdev_ioctl_data_unref">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.IoctlData" c:type="UMockdevIoctlData*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="resolve" c:identifier="umockdev_ioctl_data_resolve" throws="1">
			<return-value transfer-ownership="full" nullable="1">
				<type name="UMockdev.IoctlData" c:type="UMockdevIoctlData*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.IoctlData" c:type="UMockdevIoctlData*"/>
				</instance-parameter>
				<parameter name="offset" transfer-ownership="none">
					<type name="gulong" c:type="gsize"/>
				</parameter>
				<parameter name="len" transfer-ownership="none">
					<type name="gulong" c:type="gsize"/>
				</parameter>
			</parameters>
		</method>
		<method name="set_ptr" c:identifier="umockdev_ioctl_data_set_ptr">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.IoctlData" c:type="UMockdevIoctlData*"/>
				</instance-parameter>
				<parameter name="offset" transfer-ownership="none">
					<type name="gulong" c:type="gsize"/>
				</parameter>
				<parameter name="child" transfer-ownership="none">
					<type name="UMockdev.IoctlData" c:type="UMockdevIoctlData*"/>
				</parameter>
			</parameters>
		</method>
		<method name="reload" c:identifier="umockdev_ioctl_data_reload" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.IoctlData" c:type="UMockdevIoctlData*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="update" c:identifier="umockdev_ioctl_data_update">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.IoctlData" c:type="UMockdevIoctlData*"/>
				</instance-parameter>
				<parameter name="offset" transfer-ownership="none">
					<type name="gulong" c:type="gsize"/>
				</parameter>
				<parameter name="new_data" transfer-ownership="none">
					<array length="2" c:type="guint8*">
						<type name="guint8" c:type="guint8"/>
					</array>
				</parameter>
				<parameter name="new_data_length1" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
		<method name="retrieve" c:identifier="umockdev_ioctl_data_retrieve">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.IoctlData" c:type="UMockdevIoctlData*"/>
				</instance-parameter>
				<parameter name="read_data" direction="out" transfer-ownership="full">
					<array length="1" c:type="guint8**">
						<type name="guint8" c:type="guint8"/>
					</array>
				</parameter>
				<parameter name="read_data_length1" direction="out" transfer-ownership="none">
					<type name="gint" c:type="gint*"/>
				</parameter>
			</parameters>
		</method>
		<field name="priv" readable="0" private="1">
			<type name="IoctlDataPrivate" c:type="UMockdevIoctlDataPrivate*"/>
		</field>
	</class>
	<record name="IoctlDataClass" c:type="UMockdevIoctlDataClass" glib:is-gtype-struct-for="IoctlData">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="IoctlDataPrivate" c:type="UMockdevIoctlDataPrivate" disguised="1"/>
	<class name="IoctlClient" c:type="UMockdevIoctlClient" c:symbol-prefix="ioctl_client" glib:type-name="UMockdevIoctlClient" glib:get-type="umockdev_ioctl_client_get_type" glib:type-struct="IoctlClientClass" parent="GObject.Object">
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<property name="devnode">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_devnode" c:identifier="umockdev_ioctl_client_get_devnode">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.IoctlClient" c:type="UMockdevIoctlClient*"/>
				</instance-parameter>
			</parameters>
		</method>
		<property name="request">
			<type name="gulong" c:type="gulong"/>
		</property>
		<method name="get_request" c:identifier="umockdev_ioctl_client_get_request">
			<return-value transfer-ownership="none">
				<type name="gulong" c:type="gulong"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.IoctlClient" c:type="UMockdevIoctlClient*"/>
				</instance-parameter>
			</parameters>
		</method>
		<property name="arg">
			<type name="UMockdev.IoctlData" c:type="UMockdevIoctlData*"/>
		</property>
		<method name="get_arg" c:identifier="umockdev_ioctl_client_get_arg">
			<return-value transfer-ownership="none">
				<type name="UMockdev.IoctlData" c:type="UMockdevIoctlData*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.IoctlClient" c:type="UMockdevIoctlClient*"/>
				</instance-parameter>
			</parameters>
		</method>
		<property name="connected">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_connected" c:identifier="umockdev_ioctl_client_get_connected">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.IoctlClient" c:type="UMockdevIoctlClient*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="execute" c:identifier="umockdev_ioctl_client_execute" throws="1">
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.IoctlClient" c:type="UMockdevIoctlClient*"/>
				</instance-parameter>
				<parameter name="errno_" direction="out" transfer-ownership="full">
					<type name="gint" c:type="gint*"/>
				</parameter>
			</parameters>
		</method>
		<method name="complete" c:identifier="umockdev_ioctl_client_complete">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.IoctlClient" c:type="UMockdevIoctlClient*"/>
				</instance-parameter>
				<parameter name="res" transfer-ownership="none">
					<type name="glong" c:type="glong"/>
				</parameter>
				<parameter name="errno_" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
		<method name="abort" c:identifier="umockdev_ioctl_client_abort">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.IoctlClient" c:type="UMockdevIoctlClient*"/>
				</instance-parameter>
			</parameters>
		</method>
		<field name="priv" readable="0" private="1">
			<type name="IoctlClientPrivate" c:type="UMockdevIoctlClientPrivate*"/>
		</field>
	</class>
	<record name="IoctlClientClass" c:type="UMockdevIoctlClientClass" glib:is-gtype-struct-for="IoctlClient">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="IoctlClientPrivate" c:type="UMockdevIoctlClientPrivate" disguised="1"/>
	<class name="IoctlBase" c:type="UMockdevIoctlBase" c:symbol-prefix="ioctl_base" glib:type-name="UMockdevIoctlBase" glib:get-type="umockdev_ioctl_base_get_type" glib:type-struct="IoctlBaseClass" parent="GObject.Object">
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<method name="handle_ioctl" c:identifier="umockdev_ioctl_base_handle_ioctl">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.IoctlBase" c:type="UMockdevIoctlBase*"/>
				</instance-parameter>
				<parameter name="client" transfer-ownership="none">
					<type name="UMockdev.IoctlClient" c:type="UMockdevIoctlClient*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="handle_ioctl" invoker="handle_ioctl">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.IoctlBase" c:type="UMockdevIoctlBase*"/>
				</instance-parameter>
				<parameter name="client" transfer-ownership="none">
					<type name="UMockdev.IoctlClient" c:type="UMockdevIoctlClient*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="handle_read" c:identifier="umockdev_ioctl_base_handle_read">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.IoctlBase" c:type="UMockdevIoctlBase*"/>
				</instance-parameter>
				<parameter name="client" transfer-ownership="none">
					<type name="UMockdev.IoctlClient" c:type="UMockdevIoctlClient*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="handle_read" invoker="handle_read">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.IoctlBase" c:type="UMockdevIoctlBase*"/>
				</instance-parameter>
				<parameter name="client" transfer-ownership="none">
					<type name="UMockdev.IoctlClient" c:type="UMockdevIoctlClient*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="handle_write" c:identifier="umockdev_ioctl_base_handle_write">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.IoctlBase" c:type="UMockdevIoctlBase*"/>
				</instance-parameter>
				<parameter name="client" transfer-ownership="none">
					<type name="UMockdev.IoctlClient" c:type="UMockdevIoctlClient*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="handle_write" invoker="handle_write">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.IoctlBase" c:type="UMockdevIoctlBase*"/>
				</instance-parameter>
				<parameter name="client" transfer-ownership="none">
					<type name="UMockdev.IoctlClient" c:type="UMockdevIoctlClient*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method name="client_connected" invoker="client_connected">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.IoctlBase" c:type="UMockdevIoctlBase*"/>
				</instance-parameter>
				<parameter name="client" transfer-ownership="none">
					<type name="UMockdev.IoctlClient" c:type="UMockdevIoctlClient*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<glib:signal name="client-connected">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<parameter name="client" transfer-ownership="none">
					<type name="UMockdev.IoctlClient" c:type="UMockdevIoctlClient*"/>
				</parameter>
			</parameters>
		</glib:signal>
		<virtual-method name="client_vanished" invoker="client_vanished">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="UMockdev.IoctlBase" c:type="UMockdevIoctlBase*"/>
				</instance-parameter>
				<parameter name="client" transfer-ownership="none">
					<type name="UMockdev.IoctlClient" c:type="UMockdevIoctlClient*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<glib:signal name="client-vanished">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<parameter name="client" transfer-ownership="none">
					<type name="UMockdev.IoctlClient" c:type="UMockdevIoctlClient*"/>
				</parameter>
			</parameters>
		</glib:signal>
		<constructor name="new" c:identifier="umockdev_ioctl_base_new">
			<return-value transfer-ownership="full">
				<type name="UMockdev.IoctlBase" c:type="UMockdevIoctlBase*"/>
			</return-value>
		</constructor>
		<field name="priv" readable="0" private="1">
			<type name="IoctlBasePrivate" c:type="UMockdevIoctlBasePrivate*"/>
		</field>
	</class>
	<record name="IoctlBaseClass" c:type="UMockdevIoctlBaseClass" glib:is-gtype-struct-for="IoctlBase">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
		<field name="handle_ioctl">
			<callback name="handle_ioctl" c:type="handle_ioctl">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="UMockdev.IoctlBase" c:type="UMockdevIoctlBase*"/>
					</parameter>
					<parameter name="client" transfer-ownership="none">
						<type name="UMockdev.IoctlClient" c:type="UMockdevIoctlClient*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="handle_read">
			<callback name="handle_read" c:type="handle_read">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="UMockdev.IoctlBase" c:type="UMockdevIoctlBase*"/>
					</parameter>
					<parameter name="client" transfer-ownership="none">
						<type name="UMockdev.IoctlClient" c:type="UMockdevIoctlClient*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="handle_write">
			<callback name="handle_write" c:type="handle_write">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="UMockdev.IoctlBase" c:type="UMockdevIoctlBase*"/>
					</parameter>
					<parameter name="client" transfer-ownership="none">
						<type name="UMockdev.IoctlClient" c:type="UMockdevIoctlClient*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="client_connected">
			<callback name="ioctl_base_client_connected" c:type="ioctl_base_client_connected">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="UMockdev.IoctlBase" c:type="UMockdevIoctlBase*"/>
					</parameter>
					<parameter name="client" transfer-ownership="none">
						<type name="UMockdev.IoctlClient" c:type="UMockdevIoctlClient*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="client_vanished">
			<callback name="ioctl_base_client_vanished" c:type="ioctl_base_client_vanished">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="UMockdev.IoctlBase" c:type="UMockdevIoctlBase*"/>
					</parameter>
					<parameter name="client" transfer-ownership="none">
						<type name="UMockdev.IoctlClient" c:type="UMockdevIoctlClient*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<record name="IoctlBasePrivate" c:type="UMockdevIoctlBasePrivate" disguised="1"/>
	<function name="in_mock_environment" c:identifier="umockdev_in_mock_environment">
		<return-value transfer-ownership="full">
			<type name="gboolean" c:type="gboolean"/>
		</return-value>
	</function>
</namespace>
</repository>
