<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Gio" version="2.0"/>
  <include name="Gtk" version="4.0"/>
  <include name="GtkSource" version="5"/>
  <package name="libspelling-1"/>
  <c:include name="libspelling.h"/>
  <namespace name="Spelling"
             version="1"
             shared-library="libspelling-1.so.2"
             c:identifier-prefixes="Spelling"
             c:symbol-prefixes="spelling">
    <class name="Checker"
           c:symbol-prefix="checker"
           c:type="SpellingChecker"
           parent="GObject.Object"
           final="1"
           glib:type-name="SpellingChecker"
           glib:get-type="spelling_checker_get_type"
           glib:type-struct="CheckerClass">
      <doc xml:space="preserve"
           filename="lib/spelling-checker.c"
           line="30">`SpellingChecker` is the core class of libspelling. It provides high-level
APIs for spellchecking.</doc>
      <source-position filename="lib/spelling-checker.h" line="38"/>
      <constructor name="new" c:identifier="spelling_checker_new">
        <doc xml:space="preserve"
             filename="lib/spelling-checker.c"
             line="56">Create a new `SpellingChecker`.</doc>
        <source-position filename="lib/spelling-checker.h" line="43"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/spelling-checker.c"
               line="63">a newly created `SpellingChecker`</doc>
          <type name="Checker" c:type="SpellingChecker*"/>
        </return-value>
        <parameters>
          <parameter name="provider"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/spelling-checker.c"
                 line="58">the `SpellingProvider` to use, or %NULL for the default one</doc>
            <type name="Provider" c:type="SpellingProvider*"/>
          </parameter>
          <parameter name="language"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="lib/spelling-checker.c"
                 line="59">the language to use, or %NULL for the default one</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_default" c:identifier="spelling_checker_get_default">
        <doc xml:space="preserve"
             filename="lib/spelling-checker.c"
             line="359">Gets a default `SpellingChecker` using the default provider and language.</doc>
        <source-position filename="lib/spelling-checker.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/spelling-checker.c"
               line="364">a `SpellingChecker`</doc>
          <type name="Checker" c:type="SpellingChecker*"/>
        </return-value>
      </function>
      <method name="add_word" c:identifier="spelling_checker_add_word">
        <doc xml:space="preserve"
             filename="lib/spelling-checker.c"
             line="304">Adds @word to the active dictionary.</doc>
        <source-position filename="lib/spelling-checker.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-checker.c"
                 line="306">a `SpellingChecker`</doc>
            <type name="Checker" c:type="SpellingChecker*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-checker.c"
                 line="307">a word to be added</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_word" c:identifier="spelling_checker_check_word">
        <doc xml:space="preserve"
             filename="lib/spelling-checker.c"
             line="252">Checks if the active dictionary contains @word.</doc>
        <source-position filename="lib/spelling-checker.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/spelling-checker.c"
               line="260">%TRUE if the dictionary contains the word</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-checker.c"
                 line="254">a `SpellingChecker`</doc>
            <type name="Checker" c:type="SpellingChecker*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-checker.c"
                 line="255">a word to be checked</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="word_len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-checker.c"
                 line="256">length of the word, in bytes</doc>
            <type name="gssize" c:type="gssize"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_extra_word_chars"
              c:identifier="spelling_checker_get_extra_word_chars">
        <doc xml:space="preserve"
             filename="lib/spelling-checker.c"
             line="340">Gets the extra word characters of the active dictionary.</doc>
        <source-position filename="lib/spelling-checker.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/spelling-checker.c"
               line="346">extra word characters</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-checker.c"
                 line="342">a `SpellingChecker`</doc>
            <type name="Checker" c:type="SpellingChecker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_language"
              c:identifier="spelling_checker_get_language"
              glib:get-property="language">
        <doc xml:space="preserve"
             filename="lib/spelling-checker.c"
             line="197">Gets the language being used by the spell checker.</doc>
        <source-position filename="lib/spelling-checker.h" line="48"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="lib/spelling-checker.c"
               line="202">a string describing the current language.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Checker" c:type="SpellingChecker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_provider"
              c:identifier="spelling_checker_get_provider"
              glib:get-property="provider">
        <doc xml:space="preserve"
             filename="lib/spelling-checker.c"
             line="235">Gets the spell provider used by the spell checker.

Currently, only Enchant-2 is supported.</doc>
        <source-position filename="lib/spelling-checker.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/spelling-checker.c"
               line="242">a `SpellingProvider`</doc>
          <type name="Provider" c:type="SpellingProvider*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Checker" c:type="SpellingChecker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ignore_word" c:identifier="spelling_checker_ignore_word">
        <doc xml:space="preserve"
             filename="lib/spelling-checker.c"
             line="322">Requests the active dictionary to ignore @word.</doc>
        <source-position filename="lib/spelling-checker.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-checker.c"
                 line="324">a `SpellingChecker`</doc>
            <type name="Checker" c:type="SpellingChecker*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-checker.c"
                 line="325">a word to be ignored</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_corrections"
              c:identifier="spelling_checker_list_corrections">
        <doc xml:space="preserve"
             filename="lib/spelling-checker.c"
             line="281">Retrieves a list of possible corrections for @word.</doc>
        <source-position filename="lib/spelling-checker.h" line="57"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="lib/spelling-checker.c"
               line="288">
  A list of possible corrections, or %NULL.</doc>
          <array c:type="char**">
            <type name="utf8" c:type="char*"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-checker.c"
                 line="283">a `SpellingChecker`</doc>
            <type name="Checker" c:type="SpellingChecker*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-checker.c"
                 line="284">a word to be checked</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_language"
              c:identifier="spelling_checker_set_language"
              glib:set-property="language">
        <doc xml:space="preserve"
             filename="lib/spelling-checker.c"
             line="212">Sets the language code to use when communicating with the provider,
such as `en_US`.</doc>
        <source-position filename="lib/spelling-checker.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-checker.c"
                 line="214">a `SpellingChecker`</doc>
            <type name="Checker" c:type="SpellingChecker*"/>
          </instance-parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-checker.c"
                 line="215">the language to use</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="language"
                writable="1"
                transfer-ownership="none"
                setter="set_language"
                getter="get_language"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/spelling-checker.c"
             line="163">The "language" to use when checking words with the configured
`SpellingProvider`. For example, `en_US`.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="provider"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_provider">
        <doc xml:space="preserve"
             filename="lib/spelling-checker.c"
             line="174">The "provider" property contains the provider that is providing
information to the spell checker.

Currently, only Enchant is supported, and requires using the
`SpellingEnchantProvider`. Setting this to %NULL will get
the default provider.</doc>
        <type name="Provider"/>
      </property>
    </class>
    <record name="CheckerClass"
            c:type="SpellingCheckerClass"
            glib:is-gtype-struct-for="Checker">
      <source-position filename="lib/spelling-checker.h" line="38"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <function-macro name="DEPRECATED_FOR"
                    c:identifier="SPELLING_DEPRECATED_FOR"
                    introspectable="0">
      <source-position filename="lib/spelling-version-macros.h" line="40"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_1_0_FOR"
                    c:identifier="SPELLING_DEPRECATED_IN_1_0_FOR"
                    introspectable="0">
      <source-position filename="lib/spelling-version-macros.h" line="102"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DICTIONARY"
                    c:identifier="SPELLING_DICTIONARY"
                    introspectable="0">
      <source-position filename="lib/spelling-dictionary.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DICTIONARY_CLASS"
                    c:identifier="SPELLING_DICTIONARY_CLASS"
                    introspectable="0">
      <source-position filename="lib/spelling-dictionary.h" line="38"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Dictionary"
           c:symbol-prefix="dictionary"
           c:type="SpellingDictionary"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="SpellingDictionary"
           glib:get-type="spelling_dictionary_get_type"
           glib:type-struct="DictionaryClass">
      <doc xml:space="preserve"
           filename="lib/spelling-dictionary.c"
           line="27">Abstract base class for spellchecking dictionaries.</doc>
      <source-position filename="lib/spelling-dictionary.h" line="41"/>
      <method name="add_word" c:identifier="spelling_dictionary_add_word">
        <doc xml:space="preserve"
             filename="lib/spelling-dictionary.c"
             line="231">Adds @word to the dictionary.</doc>
        <source-position filename="lib/spelling-dictionary.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-dictionary.c"
                 line="233">a `SpellingDictionary`</doc>
            <type name="Dictionary" c:type="SpellingDictionary*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-dictionary.c"
                 line="234">a word to be added</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="contains_word"
              c:identifier="spelling_dictionary_contains_word">
        <doc xml:space="preserve"
             filename="lib/spelling-dictionary.c"
             line="166">Checks if the dictionary contains @word.</doc>
        <source-position filename="lib/spelling-dictionary.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/spelling-dictionary.c"
               line="174">%TRUE if the dictionary contains the word</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-dictionary.c"
                 line="168">a `SpellingDictionary`</doc>
            <type name="Dictionary" c:type="SpellingDictionary*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-dictionary.c"
                 line="169">a word to be checked</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="word_len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-dictionary.c"
                 line="170">length of the word, in bytes</doc>
            <type name="gssize" c:type="gssize"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_code"
              c:identifier="spelling_dictionary_get_code"
              glib:get-property="code">
        <doc xml:space="preserve"
             filename="lib/spelling-dictionary.c"
             line="150">Gets the language code of the dictionary, or %NULL if undefined.</doc>
        <source-position filename="lib/spelling-dictionary.h" line="46"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="lib/spelling-dictionary.c"
               line="156">the language code of the dictionary</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-dictionary.c"
                 line="152">a `SpellingDictionary`</doc>
            <type name="Dictionary" c:type="SpellingDictionary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_extra_word_chars"
              c:identifier="spelling_dictionary_get_extra_word_chars">
        <doc xml:space="preserve"
             filename="lib/spelling-dictionary.c"
             line="275">Gets the extra word characters of the dictionary.</doc>
        <source-position filename="lib/spelling-dictionary.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/spelling-dictionary.c"
               line="281">extra word characters</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-dictionary.c"
                 line="277">a `SpellingDictionary`</doc>
            <type name="Dictionary" c:type="SpellingDictionary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ignore_word"
              c:identifier="spelling_dictionary_ignore_word">
        <doc xml:space="preserve"
             filename="lib/spelling-dictionary.c"
             line="253">Requests the dictionary to ignore @word.</doc>
        <source-position filename="lib/spelling-dictionary.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-dictionary.c"
                 line="255">a `SpellingDictionary`</doc>
            <type name="Dictionary" c:type="SpellingDictionary*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-dictionary.c"
                 line="256">a word to be ignored</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_corrections"
              c:identifier="spelling_dictionary_list_corrections">
        <doc xml:space="preserve"
             filename="lib/spelling-dictionary.c"
             line="196">Retrieves a list of possible corrections for @word.</doc>
        <source-position filename="lib/spelling-dictionary.h" line="52"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="lib/spelling-dictionary.c"
               line="204">
  A list of possible corrections, or %NULL.</doc>
          <array c:type="char**">
            <type name="utf8" c:type="char*"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-dictionary.c"
                 line="198">a `SpellingDictionary`</doc>
            <type name="Dictionary" c:type="SpellingDictionary*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-dictionary.c"
                 line="199">a word to be checked</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="word_len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-dictionary.c"
                 line="200">the length of @word, or -1 if @word is zero-terminated</doc>
            <type name="gssize" c:type="gssize"/>
          </parameter>
        </parameters>
      </method>
      <property name="code"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_code"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/spelling-dictionary.c"
             line="129">The language code, for example `en_US`.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="DictionaryClass"
            c:type="SpellingDictionaryClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="Dictionary">
      <source-position filename="lib/spelling-dictionary.h" line="41"/>
    </record>
    <function-macro name="IS_DICTIONARY"
                    c:identifier="SPELLING_IS_DICTIONARY"
                    introspectable="0">
      <source-position filename="lib/spelling-dictionary.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PROVIDER"
                    c:identifier="SPELLING_IS_PROVIDER"
                    introspectable="0">
      <source-position filename="lib/spelling-provider.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Language"
           c:symbol-prefix="language"
           c:type="SpellingLanguage"
           parent="GObject.Object"
           final="1"
           glib:type-name="SpellingLanguage"
           glib:get-type="spelling_language_get_type"
           glib:type-struct="LanguageClass">
      <doc xml:space="preserve"
           filename="lib/spelling-language.c"
           line="26">Represents a spellchecking language.</doc>
      <source-position filename="lib/spelling-language.h" line="37"/>
      <method name="get_code"
              c:identifier="spelling_language_get_code"
              glib:get-property="code">
        <doc xml:space="preserve"
             filename="lib/spelling-language.c"
             line="200">Gets the code of the language, or %NULL if undefined.</doc>
        <source-position filename="lib/spelling-language.h" line="44"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="lib/spelling-language.c"
               line="206">the code of the language</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-language.c"
                 line="202">a `SpellingLanguage`</doc>
            <type name="Language" c:type="SpellingLanguage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_group"
              c:identifier="spelling_language_get_group"
              glib:get-property="group">
        <doc xml:space="preserve"
             filename="lib/spelling-language.c"
             line="216">Gets the group of the language, or %NULL if undefined.</doc>
        <source-position filename="lib/spelling-language.h" line="40"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="lib/spelling-language.c"
               line="222">the group of the language</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-language.c"
                 line="218">a `SpellingLanguage`</doc>
            <type name="Language" c:type="SpellingLanguage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="spelling_language_get_name"
              glib:get-property="name">
        <doc xml:space="preserve"
             filename="lib/spelling-language.c"
             line="184">Gets the name of the language, or %NULL if undefined.</doc>
        <source-position filename="lib/spelling-language.h" line="42"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="lib/spelling-language.c"
               line="190">the name of the language</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-language.c"
                 line="186">a `SpellingLanguage`</doc>
            <type name="Language" c:type="SpellingLanguage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="code"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_code"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/spelling-language.c"
             line="156">The language code.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="group"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_group"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/spelling-language.c"
             line="166">A group for sorting, usually the country name.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/spelling-language.c"
             line="146">The name of the language.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="LanguageClass"
            c:type="SpellingLanguageClass"
            glib:is-gtype-struct-for="Language">
      <source-position filename="lib/spelling-language.h" line="37"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <function-macro name="PROVIDER"
                    c:identifier="SPELLING_PROVIDER"
                    introspectable="0">
      <source-position filename="lib/spelling-provider.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PROVIDER_CLASS"
                    c:identifier="SPELLING_PROVIDER_CLASS"
                    introspectable="0">
      <source-position filename="lib/spelling-provider.h" line="38"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Provider"
           c:symbol-prefix="provider"
           c:type="SpellingProvider"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="SpellingProvider"
           glib:get-type="spelling_provider_get_type"
           glib:type-struct="ProviderClass">
      <doc xml:space="preserve"
           filename="lib/spelling-provider.c"
           line="32">Abstract base class for spellchecking providers.</doc>
      <source-position filename="lib/spelling-provider.h" line="41"/>
      <function name="get_default"
                c:identifier="spelling_provider_get_default">
        <doc xml:space="preserve"
             filename="lib/spelling-provider.c"
             line="141">Gets the default spell provider.</doc>
        <source-position filename="lib/spelling-provider.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/spelling-provider.c"
               line="146">a `SpellingProvider`</doc>
          <type name="Provider" c:type="SpellingProvider*"/>
        </return-value>
      </function>
      <method name="get_default_code"
              c:identifier="spelling_provider_get_default_code">
        <doc xml:space="preserve"
             filename="lib/spelling-provider.c"
             line="235">Gets the default language code for the detected system locales, or %NULL
if the provider doesn't support any of them.</doc>
        <source-position filename="lib/spelling-provider.h" line="48"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="lib/spelling-provider.c"
               line="242">the default language code</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-provider.c"
                 line="237">a `SpellingProvider`</doc>
            <type name="Provider" c:type="SpellingProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display_name"
              c:identifier="spelling_provider_get_display_name"
              glib:get-property="display-name">
        <doc xml:space="preserve"
             filename="lib/spelling-provider.c"
             line="125">Gets the display name of the provider, or %NULL if undefined.</doc>
        <source-position filename="lib/spelling-provider.h" line="50"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="lib/spelling-provider.c"
               line="131">the display name of the provider</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-provider.c"
                 line="127">a `SpellingProvider`</doc>
            <type name="Provider" c:type="SpellingProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_languages"
              c:identifier="spelling_provider_list_languages">
        <doc xml:space="preserve"
             filename="lib/spelling-provider.c"
             line="187">Gets a `GListModel` of languages supported by the provider.</doc>
        <source-position filename="lib/spelling-provider.h" line="55"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/spelling-provider.c"
               line="193">a `GListModel` of `SpellingLanguage`</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-provider.c"
                 line="189">a `SpellingProvider`</doc>
            <type name="Provider" c:type="SpellingProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_dictionary"
              c:identifier="spelling_provider_load_dictionary">
        <doc xml:space="preserve"
             filename="lib/spelling-provider.c"
             line="209">Gets a `SpellingDictionary` for the requested language, or %NULL
if the language is not supported.</doc>
        <source-position filename="lib/spelling-provider.h" line="57"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="lib/spelling-provider.c"
               line="217">a `SpellingDictionary` or %NULL</doc>
          <type name="Dictionary" c:type="SpellingDictionary*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-provider.c"
                 line="211">a `SpellingProvider`</doc>
            <type name="Provider" c:type="SpellingProvider*"/>
          </instance-parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-provider.c"
                 line="212">the language to load such as `en_US`.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="supports_language"
              c:identifier="spelling_provider_supports_language">
        <doc xml:space="preserve"
             filename="lib/spelling-provider.c"
             line="168">Checks of @language is supported by the provider.</doc>
        <source-position filename="lib/spelling-provider.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/spelling-provider.c"
               line="175">%TRUE if @language is supported, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-provider.c"
                 line="170">a `SpellingProvider`</doc>
            <type name="Provider" c:type="SpellingProvider*"/>
          </instance-parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-provider.c"
                 line="171">the language such as `en_US`.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="display-name"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_display_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/spelling-provider.c"
             line="105">The display name.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="ProviderClass"
            c:type="SpellingProviderClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="Provider">
      <source-position filename="lib/spelling-provider.h" line="41"/>
    </record>
    <class name="TextBufferAdapter"
           c:symbol-prefix="text_buffer_adapter"
           c:type="SpellingTextBufferAdapter"
           parent="GObject.Object"
           final="1"
           glib:type-name="SpellingTextBufferAdapter"
           glib:get-type="spelling_text_buffer_adapter_get_type"
           glib:type-struct="TextBufferAdapterClass">
      <doc xml:space="preserve"
           filename="lib/spelling-text-buffer-adapter.c"
           line="33">`SpellingTextBufferAdapter` implements helpers to easily add spellchecking
capabilities to a `GtkSourceBuffer`.</doc>
      <source-position filename="lib/spelling-text-buffer-adapter.h"
                       line="34"/>
      <implements name="Gio.ActionGroup"/>
      <constructor name="new" c:identifier="spelling_text_buffer_adapter_new">
        <doc xml:space="preserve"
             filename="lib/spelling-text-buffer-adapter.c"
             line="436">Create a new `SpellingTextBufferAdapter`.</doc>
        <source-position filename="lib/spelling-text-buffer-adapter.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="lib/spelling-text-buffer-adapter.c"
               line="443">a newly created `SpellingTextBufferAdapter`</doc>
          <type name="TextBufferAdapter" c:type="SpellingTextBufferAdapter*"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-text-buffer-adapter.c"
                 line="438">a `GtkSourceBuffer`</doc>
            <type name="GtkSource.Buffer" c:type="GtkSourceBuffer*"/>
          </parameter>
          <parameter name="checker" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-text-buffer-adapter.c"
                 line="439">a `SpellingChecker`</doc>
            <type name="Checker" c:type="SpellingChecker*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_buffer"
              c:identifier="spelling_text_buffer_adapter_get_buffer"
              glib:get-property="buffer">
        <doc xml:space="preserve"
             filename="lib/spelling-text-buffer-adapter.c"
             line="1059">Gets the underlying buffer for the adapter.</doc>
        <source-position filename="lib/spelling-text-buffer-adapter.h"
                         line="40"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="lib/spelling-text-buffer-adapter.c"
               line="1065">a `GtkSourceBuffer`</doc>
          <type name="GtkSource.Buffer" c:type="GtkSourceBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-text-buffer-adapter.c"
                 line="1061">a `SpellingTextBufferAdapter`</doc>
            <type name="TextBufferAdapter"
                  c:type="SpellingTextBufferAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_checker"
              c:identifier="spelling_text_buffer_adapter_get_checker"
              glib:get-property="checker">
        <doc xml:space="preserve"
             filename="lib/spelling-text-buffer-adapter.c"
             line="981">Gets the checker used by the adapter.</doc>
        <source-position filename="lib/spelling-text-buffer-adapter.h"
                         line="47"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="lib/spelling-text-buffer-adapter.c"
               line="987">a `SpellingChecker` or %NULL</doc>
          <type name="Checker" c:type="SpellingChecker*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-text-buffer-adapter.c"
                 line="983">a `SpellingTextBufferAdapter`</doc>
            <type name="TextBufferAdapter"
                  c:type="SpellingTextBufferAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enabled"
              c:identifier="spelling_text_buffer_adapter_get_enabled"
              glib:get-property="enabled">
        <doc xml:space="preserve"
             filename="lib/spelling-text-buffer-adapter.c"
             line="1143">Gets if the spellcheck is enabled.</doc>
        <source-position filename="lib/spelling-text-buffer-adapter.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/spelling-text-buffer-adapter.c"
               line="1149">%TRUE if enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-text-buffer-adapter.c"
                 line="1145">a `SpellingTextBufferAdapter`</doc>
            <type name="TextBufferAdapter"
                  c:type="SpellingTextBufferAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_language"
              c:identifier="spelling_text_buffer_adapter_get_language"
              glib:get-property="language">
        <doc xml:space="preserve"
             filename="lib/spelling-text-buffer-adapter.c"
             line="1080">Gets the checker language.</doc>
        <source-position filename="lib/spelling-text-buffer-adapter.h"
                         line="52"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="lib/spelling-text-buffer-adapter.c"
               line="1086">a language code</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-text-buffer-adapter.c"
                 line="1082">a `SpellingTextBufferAdapter`</doc>
            <type name="TextBufferAdapter"
                  c:type="SpellingTextBufferAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_menu_model"
              c:identifier="spelling_text_buffer_adapter_get_menu_model">
        <doc xml:space="preserve"
             filename="lib/spelling-text-buffer-adapter.c"
             line="1162">Gets the menu model containing corrections</doc>
        <source-position filename="lib/spelling-text-buffer-adapter.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="lib/spelling-text-buffer-adapter.c"
               line="1168">a `GMenuModel`</doc>
          <type name="Gio.MenuModel" c:type="GMenuModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-text-buffer-adapter.c"
                 line="1164">a `SpellingTextBufferAdapter`</doc>
            <type name="TextBufferAdapter"
                  c:type="SpellingTextBufferAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tag"
              c:identifier="spelling_text_buffer_adapter_get_tag">
        <doc xml:space="preserve"
             filename="lib/spelling-text-buffer-adapter.c"
             line="1127">Gets the tag used for potentially misspelled words.</doc>
        <source-position filename="lib/spelling-text-buffer-adapter.h"
                         line="59"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="lib/spelling-text-buffer-adapter.c"
               line="1133">a `GtkTextTag` or %NULL</doc>
          <type name="Gtk.TextTag" c:type="GtkTextTag*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-text-buffer-adapter.c"
                 line="1129">a `SpellingTextBufferAdapter`</doc>
            <type name="TextBufferAdapter"
                  c:type="SpellingTextBufferAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="invalidate_all"
              c:identifier="spelling_text_buffer_adapter_invalidate_all">
        <doc xml:space="preserve"
             filename="lib/spelling-text-buffer-adapter.c"
             line="458">Invalidate the spelling engine, to force parsing again.

Invalidation is automatically done on [property@GtkSource.Buffer:loading]
change.</doc>
        <source-position filename="lib/spelling-text-buffer-adapter.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-text-buffer-adapter.c"
                 line="460">a `SpellingTextBufferAdapter`</doc>
            <type name="TextBufferAdapter"
                  c:type="SpellingTextBufferAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_checker"
              c:identifier="spelling_text_buffer_adapter_set_checker"
              glib:set-property="checker">
        <doc xml:space="preserve"
             filename="lib/spelling-text-buffer-adapter.c"
             line="1013">Set the [class@Spelling.Checker] used for spellchecking.</doc>
        <source-position filename="lib/spelling-text-buffer-adapter.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-text-buffer-adapter.c"
                 line="1015">a `SpellingTextBufferAdapter`</doc>
            <type name="TextBufferAdapter"
                  c:type="SpellingTextBufferAdapter*"/>
          </instance-parameter>
          <parameter name="checker" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-text-buffer-adapter.c"
                 line="1016">a `SpellingChecker`</doc>
            <type name="Checker" c:type="SpellingChecker*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enabled"
              c:identifier="spelling_text_buffer_adapter_set_enabled"
              glib:set-property="enabled">
        <doc xml:space="preserve"
             filename="lib/spelling-text-buffer-adapter.c"
             line="686">If %TRUE spellcheck is enabled.</doc>
        <source-position filename="lib/spelling-text-buffer-adapter.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-text-buffer-adapter.c"
                 line="688">a `SpellingTextBufferAdapter`</doc>
            <type name="TextBufferAdapter"
                  c:type="SpellingTextBufferAdapter*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-text-buffer-adapter.c"
                 line="689">whether the spellcheck is enabled</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_language"
              c:identifier="spelling_text_buffer_adapter_set_language"
              glib:set-property="language">
        <doc xml:space="preserve"
             filename="lib/spelling-text-buffer-adapter.c"
             line="1096">Sets the language code to use by the checker, such as `en_US`.</doc>
        <source-position filename="lib/spelling-text-buffer-adapter.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-text-buffer-adapter.c"
                 line="1098">a `SpellingTextBufferAdapter`</doc>
            <type name="TextBufferAdapter"
                  c:type="SpellingTextBufferAdapter*"/>
          </instance-parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-text-buffer-adapter.c"
                 line="1099">the language to use</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_corrections"
              c:identifier="spelling_text_buffer_adapter_update_corrections">
        <doc xml:space="preserve"
             filename="lib/spelling-text-buffer-adapter.c"
             line="1276">Looks at the current cursor position and updates the list of
corrections based on the current word.

Use this to force an update immediately rather than after the
automatic timeout caused by cursor movements.</doc>
        <source-position filename="lib/spelling-text-buffer-adapter.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="lib/spelling-text-buffer-adapter.c"
                 line="1278">a `SpellingTextBufferAdapter`</doc>
            <type name="TextBufferAdapter"
                  c:type="SpellingTextBufferAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="buffer"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_buffer">
        <doc xml:space="preserve"
             filename="lib/spelling-text-buffer-adapter.c"
             line="910">The [class@GtkSource.Buffer].</doc>
        <type name="GtkSource.Buffer"/>
      </property>
      <property name="checker"
                writable="1"
                transfer-ownership="none"
                setter="set_checker"
                getter="get_checker">
        <doc xml:space="preserve"
             filename="lib/spelling-text-buffer-adapter.c"
             line="920">The [class@Spelling.Checker].</doc>
        <type name="Checker"/>
      </property>
      <property name="enabled"
                writable="1"
                transfer-ownership="none"
                setter="set_enabled"
                getter="get_enabled"
                default-value="TRUE">
        <doc xml:space="preserve"
             filename="lib/spelling-text-buffer-adapter.c"
             line="930">Whether spellcheck is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="language"
                writable="1"
                transfer-ownership="none"
                setter="set_language"
                getter="get_language"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="lib/spelling-text-buffer-adapter.c"
             line="940">The language code, such as `en_US`.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="TextBufferAdapterClass"
            c:type="SpellingTextBufferAdapterClass"
            glib:is-gtype-struct-for="TextBufferAdapter">
      <source-position filename="lib/spelling-text-buffer-adapter.h"
                       line="34"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <function-macro name="UNAVAILABLE"
                    c:identifier="SPELLING_UNAVAILABLE"
                    introspectable="0">
      <source-position filename="lib/spelling-version-macros.h" line="41"/>
      <parameters>
        <parameter name="maj">
        </parameter>
        <parameter name="min">
        </parameter>
      </parameters>
    </function-macro>
    <function name="init" c:identifier="spelling_init">
      <doc xml:space="preserve"
           filename="lib/spelling-init.c"
           line="57">Call this function before using any other libspelling functions in your
applications. It will initialize everything needed to operate the library.</doc>
      <source-position filename="lib/spelling-init.h" line="32"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
  </namespace>
</repository>
