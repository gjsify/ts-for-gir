<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Gio" version="2.0"/>
  <package name="udisks2"/>
  <c:include name="udisks/udisks.h"/>
  <namespace name="UDisks"
             version="2.0"
             shared-library="libudisks2.so.0"
             c:identifier-prefixes="UDisks"
             c:symbol-prefixes="udisks">
    <function-macro name="BLOCK"
                    c:identifier="UDISKS_BLOCK"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2447"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_GET_IFACE"
                    c:identifier="UDISKS_BLOCK_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2449"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_LVM2"
                    c:identifier="UDISKS_BLOCK_LVM2"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7367"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_LVM2_GET_IFACE"
                    c:identifier="UDISKS_BLOCK_LVM2_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7369"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_LVM2_PROXY"
                    c:identifier="UDISKS_BLOCK_LVM2_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7402"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_LVM2_PROXY_CLASS"
                    c:identifier="UDISKS_BLOCK_LVM2_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7403"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_LVM2_PROXY_GET_CLASS"
                    c:identifier="UDISKS_BLOCK_LVM2_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7404"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_LVM2_SKELETON"
                    c:identifier="UDISKS_BLOCK_LVM2_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7472"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_LVM2_SKELETON_CLASS"
                    c:identifier="UDISKS_BLOCK_LVM2_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7473"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_LVM2_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_BLOCK_LVM2_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7474"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_PROXY"
                    c:identifier="UDISKS_BLOCK_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2953"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_PROXY_CLASS"
                    c:identifier="UDISKS_BLOCK_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2954"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_PROXY_GET_CLASS"
                    c:identifier="UDISKS_BLOCK_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2955"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_SKELETON"
                    c:identifier="UDISKS_BLOCK_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3023"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_SKELETON_CLASS"
                    c:identifier="UDISKS_BLOCK_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3024"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BLOCK_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_BLOCK_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3025"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Block"
               c:symbol-prefix="block"
               c:type="UDisksBlock"
               glib:type-name="UDisksBlock"
               glib:get-type="udisks_block_get_type"
               glib:type-struct="BlockIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="24974">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="2570"/>
      <function name="interface_info"
                c:identifier="udisks_block_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24788">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="2578"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24793">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_block_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24801">Overrides all #GObject properties in the #UDisksBlock interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="2579"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24809">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24803">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="24804">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_configuration"
                      invoker="get_configuration"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26260">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2513"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26270">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26262">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_crypto_backing_device"
                      invoker="get_crypto_backing_device"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26313">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.CryptoBackingDevice"&gt;"CryptoBackingDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_crypto_backing_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2515"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26323">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26315">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_device"
                      invoker="get_device"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25507">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Device"&gt;"Device"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2517"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25517">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25509">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_device_number"
                      invoker="get_device_number"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25666">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.DeviceNumber"&gt;"DeviceNumber"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2519"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25674">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25668">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_drive" invoker="get_drive" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25824">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Drive"&gt;"Drive"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_drive() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2521"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25834">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25826">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_auto"
                      invoker="get_hint_auto"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26465">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintAuto"&gt;"HintAuto"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2523"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26473">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26467">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_icon_name"
                      invoker="get_hint_icon_name"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26551">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIconName"&gt;"HintIconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_hint_icon_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2525"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26561">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26553">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_ignore"
                      invoker="get_hint_ignore"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26432">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIgnore"&gt;"HintIgnore"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2527"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26440">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26434">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_name"
                      invoker="get_hint_name"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26498">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;"HintName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_hint_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2529"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26508">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26500">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_partitionable"
                      invoker="get_hint_partitionable"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26366">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintPartitionable"&gt;"HintPartitionable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2531"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26374">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26368">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_symbolic_icon_name"
                      invoker="get_hint_symbolic_icon_name"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26604">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSymbolicIconName"&gt;"HintSymbolicIconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_hint_symbolic_icon_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2555"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26614">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26606">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_system"
                      invoker="get_hint_system"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26399">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSystem"&gt;"HintSystem"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2533"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26407">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26401">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id"
                      invoker="get_id"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25699">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Id"&gt;"Id"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2557"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25709">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25701">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id_label"
                      invoker="get_id_label"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26154">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdLabel"&gt;"IdLabel"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_label() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2535"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26164">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26156">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id_type"
                      invoker="get_id_type"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26048">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdType"&gt;"IdType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_type() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2537"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26058">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26050">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id_usage"
                      invoker="get_id_usage"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25995">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUsage"&gt;"IdUsage"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_usage() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2539"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26005">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25997">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id_uuid"
                      invoker="get_id_uuid"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26207">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUUID"&gt;"IdUUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2541"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26217">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26209">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id_version"
                      invoker="get_id_version"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26101">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdVersion"&gt;"IdVersion"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_version() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2543"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26111">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26103">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_mdraid"
                      invoker="get_mdraid"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25877">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaid"&gt;"MDRaid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_mdraid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2559"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25887">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25879">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_mdraid_member"
                      invoker="get_mdraid_member"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25936">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaidMember"&gt;"MDRaidMember"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_mdraid_member() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2561"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25946">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25938">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_preferred_device"
                      invoker="get_preferred_device"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25560">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.PreferredDevice"&gt;"PreferredDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_preferred_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2545"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25570">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25562">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_read_only"
                      invoker="get_read_only"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25791">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.ReadOnly"&gt;"ReadOnly"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2547"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25799">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25793">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size" invoker="get_size" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25758">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2549"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25766">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25760">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_symlinks"
                      invoker="get_symlinks"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25613">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Symlinks"&gt;"Symlinks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_symlinks() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2551"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25623">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25615">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_userspace_mount_options"
                      invoker="get_userspace_mount_options"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26663">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.UserspaceMountOptions"&gt;"UserspaceMountOptions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_userspace_mount_options() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2553"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26673">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26665">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_add_configuration_item">
        <source-position filename="udisks-generated.h" line="2460"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_format">
        <source-position filename="udisks-generated.h" line="2466"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_secret_configuration">
        <source-position filename="udisks-generated.h" line="2472"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_open_device">
        <source-position filename="udisks-generated.h" line="2563"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list" transfer-ownership="none">
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="arg_mode" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_open_for_backup">
        <source-position filename="udisks-generated.h" line="2477"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list" transfer-ownership="none">
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_open_for_benchmark">
        <source-position filename="udisks-generated.h" line="2483"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list" transfer-ownership="none">
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_open_for_restore">
        <source-position filename="udisks-generated.h" line="2489"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list" transfer-ownership="none">
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_remove_configuration_item">
        <source-position filename="udisks-generated.h" line="2495"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_rescan">
        <source-position filename="udisks-generated.h" line="2501"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_update_configuration_item">
        <source-position filename="udisks-generated.h" line="2506"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_old_item" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_new_item" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_add_configuration_item"
              c:identifier="udisks_block_call_add_configuration_item">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26716">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.AddConfigurationItem"&gt;AddConfigurationItem()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_add_configuration_item_finish() to get the result of the operation.

See udisks_block_call_add_configuration_item_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2635"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26718">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26719">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26720">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26721">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26722">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26723">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_configuration_item_finish"
              c:identifier="udisks_block_call_add_configuration_item_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26752">Finishes an operation started with udisks_block_call_add_configuration_item().</doc>
        <source-position filename="udisks-generated.h" line="2643"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26760">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26754">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26755">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_add_configuration_item().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_configuration_item_sync"
              c:identifier="udisks_block_call_add_configuration_item_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26779">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.AddConfigurationItem"&gt;AddConfigurationItem()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_add_configuration_item() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2648"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26791">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26781">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26782">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26783">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26784">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_format" c:identifier="udisks_block_call_format">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27138">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Format"&gt;Format()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_format_finish() to get the result of the operation.

See udisks_block_call_format_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2717"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27140">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27141">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27142">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27143">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27144">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27145">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_format_finish"
              c:identifier="udisks_block_call_format_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27174">Finishes an operation started with udisks_block_call_format().</doc>
        <source-position filename="udisks-generated.h" line="2725"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27182">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27176">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27177">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_format().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_format_sync"
              c:identifier="udisks_block_call_format_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27201">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Format"&gt;Format()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_format() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2730"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27213">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27203">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27204">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27205">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27206">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_secret_configuration"
              c:identifier="udisks_block_call_get_secret_configuration">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27034">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.GetSecretConfiguration"&gt;GetSecretConfiguration()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_get_secret_configuration_finish() to get the result of the operation.

See udisks_block_call_get_secret_configuration_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2697"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27036">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27037">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27038">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27039">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27040">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_secret_configuration_finish"
              c:identifier="udisks_block_call_get_secret_configuration_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27067">Finishes an operation started with udisks_block_call_get_secret_configuration().</doc>
        <source-position filename="udisks-generated.h" line="2704"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27076">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27069">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="out_configuration"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27070">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27071">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_get_secret_configuration().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_secret_configuration_sync"
              c:identifier="udisks_block_call_get_secret_configuration_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27097">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.GetSecretConfiguration"&gt;GetSecretConfiguration()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_get_secret_configuration() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2710"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27109">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27099">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27100">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_configuration"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27101">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27102">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_device"
              c:identifier="udisks_block_call_open_device"
              version="2.7.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27587">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenDevice"&gt;OpenDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_open_device_finish() to get the result of the operation.

See udisks_block_call_open_device_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2809"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27589">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27590">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27591">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27592">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27593">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27594">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27595">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_device_finish"
              c:identifier="udisks_block_call_open_device_finish"
              version="2.7.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27628">Finishes an operation started with udisks_block_call_open_device().</doc>
        <source-position filename="udisks-generated.h" line="2818"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27638">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27630">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27631">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27632">Return location for a #GUnixFDList or %NULL to ignore.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27633">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_open_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_device_sync"
              c:identifier="udisks_block_call_open_device_sync"
              version="2.7.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27662">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenDevice"&gt;OpenDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_open_device() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2825"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27677">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27664">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27665">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27666">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27667">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27668">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27669">Return location for a #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27670">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_backup"
              c:identifier="udisks_block_call_open_for_backup">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27242">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBackup"&gt;OpenForBackup()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_open_for_backup_finish() to get the result of the operation.

See udisks_block_call_open_for_backup_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2737"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27244">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27245">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27246">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27247">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27248">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27249">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_backup_finish"
              c:identifier="udisks_block_call_open_for_backup_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27278">Finishes an operation started with udisks_block_call_open_for_backup().</doc>
        <source-position filename="udisks-generated.h" line="2745"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27288">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27280">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27281">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27282">Return location for a #GUnixFDList or %NULL to ignore.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27283">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_open_for_backup().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_backup_sync"
              c:identifier="udisks_block_call_open_for_backup_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27310">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBackup"&gt;OpenForBackup()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_open_for_backup() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2752"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27324">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27312">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27313">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27314">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27315">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27316">Return location for a #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27317">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_benchmark"
              c:identifier="udisks_block_call_open_for_benchmark">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27472">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBenchmark"&gt;OpenForBenchmark()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_open_for_benchmark_finish() to get the result of the operation.

See udisks_block_call_open_for_benchmark_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2785"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27474">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27475">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27476">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27477">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27478">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27479">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_benchmark_finish"
              c:identifier="udisks_block_call_open_for_benchmark_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27508">Finishes an operation started with udisks_block_call_open_for_benchmark().</doc>
        <source-position filename="udisks-generated.h" line="2793"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27518">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27510">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27511">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27512">Return location for a #GUnixFDList or %NULL to ignore.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27513">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_open_for_benchmark().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_benchmark_sync"
              c:identifier="udisks_block_call_open_for_benchmark_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27540">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBenchmark"&gt;OpenForBenchmark()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_open_for_benchmark() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2800"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27554">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27542">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27543">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27544">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27545">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27546">Return location for a #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27547">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_restore"
              c:identifier="udisks_block_call_open_for_restore">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27357">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForRestore"&gt;OpenForRestore()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_open_for_restore_finish() to get the result of the operation.

See udisks_block_call_open_for_restore_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2761"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27359">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27360">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27361">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27362">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27363">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27364">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_restore_finish"
              c:identifier="udisks_block_call_open_for_restore_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27393">Finishes an operation started with udisks_block_call_open_for_restore().</doc>
        <source-position filename="udisks-generated.h" line="2769"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27403">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27395">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27396">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27397">Return location for a #GUnixFDList or %NULL to ignore.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27398">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_open_for_restore().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_for_restore_sync"
              c:identifier="udisks_block_call_open_for_restore_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27425">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForRestore"&gt;OpenForRestore()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_open_for_restore() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2776"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27439">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27427">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27428">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27429">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="out_fd"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27430">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27431">Return location for a #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27432">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_configuration_item"
              c:identifier="udisks_block_call_remove_configuration_item">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26820">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.RemoveConfigurationItem"&gt;RemoveConfigurationItem()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_remove_configuration_item_finish() to get the result of the operation.

See udisks_block_call_remove_configuration_item_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2655"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26822">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26823">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26824">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26825">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26826">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26827">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_configuration_item_finish"
              c:identifier="udisks_block_call_remove_configuration_item_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26856">Finishes an operation started with udisks_block_call_remove_configuration_item().</doc>
        <source-position filename="udisks-generated.h" line="2663"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26864">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26858">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26859">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_remove_configuration_item().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_configuration_item_sync"
              c:identifier="udisks_block_call_remove_configuration_item_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26883">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.RemoveConfigurationItem"&gt;RemoveConfigurationItem()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_remove_configuration_item() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2668"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26895">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26885">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26886">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26887">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26888">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rescan" c:identifier="udisks_block_call_rescan">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27714">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Rescan"&gt;Rescan()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_rescan_finish() to get the result of the operation.

See udisks_block_call_rescan_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2835"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27716">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27717">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27718">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27719">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27720">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rescan_finish"
              c:identifier="udisks_block_call_rescan_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27747">Finishes an operation started with udisks_block_call_rescan().</doc>
        <source-position filename="udisks-generated.h" line="2842"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27755">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27749">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27750">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_rescan().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rescan_sync"
              c:identifier="udisks_block_call_rescan_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27774">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Rescan"&gt;Rescan()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_rescan() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2847"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27785">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27776">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27777">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27778">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_update_configuration_item"
              c:identifier="udisks_block_call_update_configuration_item">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26924">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.UpdateConfigurationItem"&gt;UpdateConfigurationItem()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_call_update_configuration_item_finish() to get the result of the operation.

See udisks_block_call_update_configuration_item_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2675"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26926">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_old_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26927">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_new_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26928">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26929">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26930">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26931">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26932">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_update_configuration_item_finish"
              c:identifier="udisks_block_call_update_configuration_item_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26963">Finishes an operation started with udisks_block_call_update_configuration_item().</doc>
        <source-position filename="udisks-generated.h" line="2684"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26971">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26965">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26966">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_call_update_configuration_item().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_update_configuration_item_sync"
              c:identifier="udisks_block_call_update_configuration_item_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26990">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.UpdateConfigurationItem"&gt;UpdateConfigurationItem()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_block_call_update_configuration_item() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2689"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="27003">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26992">A #UDisksBlockProxy.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="arg_old_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26993">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_new_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26994">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26995">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26996">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_add_configuration_item"
              c:identifier="udisks_block_complete_add_configuration_item">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27812">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.AddConfigurationItem"&gt;AddConfigurationItem()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2583"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27814">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27815">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_format"
              c:identifier="udisks_block_complete_format">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27887">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Format"&gt;Format()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2600"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27889">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27890">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_secret_configuration"
              c:identifier="udisks_block_complete_get_secret_configuration">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27866">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.GetSecretConfiguration"&gt;GetSecretConfiguration()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2595"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27868">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27869">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="configuration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27870">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_open_device"
              c:identifier="udisks_block_complete_open_device"
              version="2.7.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27977">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenDevice"&gt;OpenDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2622"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27979">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27980">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27981">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27982">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_open_for_backup"
              c:identifier="udisks_block_complete_open_for_backup">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27905">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBackup"&gt;OpenForBackup()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2604"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27907">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27908">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27909">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27910">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_open_for_benchmark"
              c:identifier="udisks_block_complete_open_for_benchmark">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27953">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBenchmark"&gt;OpenForBenchmark()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2616"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27955">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27956">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27957">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27958">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_open_for_restore"
              c:identifier="udisks_block_complete_open_for_restore">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27929">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForRestore"&gt;OpenForRestore()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2610"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27931">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27932">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27933">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27934">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_remove_configuration_item"
              c:identifier="udisks_block_complete_remove_configuration_item">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27830">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.RemoveConfigurationItem"&gt;RemoveConfigurationItem()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2587"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27832">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27833">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_rescan"
              c:identifier="udisks_block_complete_rescan">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28003">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Rescan"&gt;Rescan()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2628"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28005">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28006">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_update_configuration_item"
              c:identifier="udisks_block_complete_update_configuration_item">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="27848">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.UpdateConfigurationItem"&gt;UpdateConfigurationItem()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2591"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27850">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="27851">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_configuration"
              c:identifier="udisks_block_dup_configuration"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26280">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2914"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26288">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26282">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_crypto_backing_device"
              c:identifier="udisks_block_dup_crypto_backing_device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26333">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.CryptoBackingDevice"&gt;"CryptoBackingDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2918"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26341">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26335">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_device"
              c:identifier="udisks_block_dup_device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25527">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Device"&gt;"Device"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2857"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25535">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25529">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_drive"
              c:identifier="udisks_block_dup_drive"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25844">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Drive"&gt;"Drive"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2882"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25852">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25846">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_hint_icon_name"
              c:identifier="udisks_block_dup_hint_icon_name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26571">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIconName"&gt;"HintIconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2938"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26579">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26573">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_hint_name"
              c:identifier="udisks_block_dup_hint_name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26518">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;"HintName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2934"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26526">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26520">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_hint_symbolic_icon_name"
              c:identifier="udisks_block_dup_hint_symbolic_icon_name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26626">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSymbolicIconName"&gt;"HintSymbolicIconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2942"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26634">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26628">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id"
              c:identifier="udisks_block_dup_id"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25721">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Id"&gt;"Id"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2872"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25729">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25723">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id_label"
              c:identifier="udisks_block_dup_id_label"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26174">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdLabel"&gt;"IdLabel"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2906"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26182">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26176">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id_type"
              c:identifier="udisks_block_dup_id_type"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26068">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdType"&gt;"IdType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2898"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26076">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26070">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id_usage"
              c:identifier="udisks_block_dup_id_usage"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26015">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUsage"&gt;"IdUsage"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2894"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26023">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26017">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id_uuid"
              c:identifier="udisks_block_dup_id_uuid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26227">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUUID"&gt;"IdUUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2910"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26235">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26229">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id_version"
              c:identifier="udisks_block_dup_id_version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26121">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdVersion"&gt;"IdVersion"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2902"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26129">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26123">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_mdraid"
              c:identifier="udisks_block_dup_mdraid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25899">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaid"&gt;"MDRaid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2886"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25907">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25901">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_mdraid_member"
              c:identifier="udisks_block_dup_mdraid_member"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25958">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaidMember"&gt;"MDRaidMember"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2890"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25966">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25960">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_preferred_device"
              c:identifier="udisks_block_dup_preferred_device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25580">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.PreferredDevice"&gt;"PreferredDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2861"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25588">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25582">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_symlinks"
              c:identifier="udisks_block_dup_symlinks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25633">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Symlinks"&gt;"Symlinks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2865"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25641">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25635">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_userspace_mount_options"
              c:identifier="udisks_block_dup_userspace_mount_options"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26683">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.UserspaceMountOptions"&gt;"UserspaceMountOptions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2946"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26691">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26685">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_configuration"
              c:identifier="udisks_block_get_configuration"
              glib:get-property="configuration"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26260">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2913"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26270">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26262">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_crypto_backing_device"
              c:identifier="udisks_block_get_crypto_backing_device"
              glib:get-property="crypto-backing-device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26313">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.CryptoBackingDevice"&gt;"CryptoBackingDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_crypto_backing_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2917"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26323">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26315">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_device"
              c:identifier="udisks_block_get_device"
              glib:get-property="device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25507">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Device"&gt;"Device"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2856"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25517">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25509">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_device_number"
              c:identifier="udisks_block_get_device_number"
              glib:get-property="device-number"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25666">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.DeviceNumber"&gt;"DeviceNumber"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2868"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25674">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25668">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_drive"
              c:identifier="udisks_block_get_drive"
              glib:get-property="drive"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25824">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Drive"&gt;"Drive"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_drive() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2881"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25834">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25826">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_auto"
              c:identifier="udisks_block_get_hint_auto"
              glib:get-property="hint-auto"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26465">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintAuto"&gt;"HintAuto"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2930"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26473">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26467">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_icon_name"
              c:identifier="udisks_block_get_hint_icon_name"
              glib:get-property="hint-icon-name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26551">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIconName"&gt;"HintIconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_hint_icon_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2937"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26561">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26553">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_ignore"
              c:identifier="udisks_block_get_hint_ignore"
              glib:get-property="hint-ignore"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26432">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIgnore"&gt;"HintIgnore"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2927"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26440">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26434">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_name"
              c:identifier="udisks_block_get_hint_name"
              glib:get-property="hint-name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26498">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;"HintName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_hint_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2933"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26508">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26500">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_partitionable"
              c:identifier="udisks_block_get_hint_partitionable"
              glib:get-property="hint-partitionable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26366">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintPartitionable"&gt;"HintPartitionable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2921"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26374">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26368">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_symbolic_icon_name"
              c:identifier="udisks_block_get_hint_symbolic_icon_name"
              glib:get-property="hint-symbolic-icon-name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26604">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSymbolicIconName"&gt;"HintSymbolicIconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_hint_symbolic_icon_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2941"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26614">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26606">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_system"
              c:identifier="udisks_block_get_hint_system"
              glib:get-property="hint-system"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26399">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSystem"&gt;"HintSystem"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2924"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26407">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26401">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="udisks_block_get_id"
              glib:get-property="id"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25699">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Id"&gt;"Id"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2871"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25709">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25701">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id_label"
              c:identifier="udisks_block_get_id_label"
              glib:get-property="id-label"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26154">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdLabel"&gt;"IdLabel"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_label() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2905"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26164">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26156">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id_type"
              c:identifier="udisks_block_get_id_type"
              glib:get-property="id-type"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26048">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdType"&gt;"IdType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_type() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2897"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26058">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26050">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id_usage"
              c:identifier="udisks_block_get_id_usage"
              glib:get-property="id-usage"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25995">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUsage"&gt;"IdUsage"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_usage() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2893"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26005">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25997">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id_uuid"
              c:identifier="udisks_block_get_id_uuid"
              glib:get-property="id-uuid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26207">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUUID"&gt;"IdUUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2909"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26217">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26209">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id_version"
              c:identifier="udisks_block_get_id_version"
              glib:get-property="id-version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26101">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdVersion"&gt;"IdVersion"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_id_version() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2901"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26111">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26103">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mdraid"
              c:identifier="udisks_block_get_mdraid"
              glib:get-property="mdraid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25877">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaid"&gt;"MDRaid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_mdraid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2885"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25887">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25879">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mdraid_member"
              c:identifier="udisks_block_get_mdraid_member"
              glib:get-property="mdraid-member"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25936">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaidMember"&gt;"MDRaidMember"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_mdraid_member() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2889"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25946">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25938">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_preferred_device"
              c:identifier="udisks_block_get_preferred_device"
              glib:get-property="preferred-device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25560">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.PreferredDevice"&gt;"PreferredDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_preferred_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2860"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25570">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25562">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_read_only"
              c:identifier="udisks_block_get_read_only"
              glib:get-property="read-only"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25791">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.ReadOnly"&gt;"ReadOnly"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2878"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25799">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25793">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_block_get_size"
              glib:get-property="size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25758">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2875"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25766">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25760">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_symlinks"
              c:identifier="udisks_block_get_symlinks"
              glib:get-property="symlinks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25613">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Symlinks"&gt;"Symlinks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_symlinks() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2864"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25623">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25615">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_userspace_mount_options"
              c:identifier="udisks_block_get_userspace_mount_options"
              glib:get-property="userspace-mount-options"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26663">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.UserspaceMountOptions"&gt;"UserspaceMountOptions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_dup_userspace_mount_options() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2945"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="26673">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26665">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_configuration"
              c:identifier="udisks_block_set_configuration"
              glib:set-property="configuration"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26298">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2915"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26300">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26301">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_crypto_backing_device"
              c:identifier="udisks_block_set_crypto_backing_device"
              glib:set-property="crypto-backing-device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26351">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.CryptoBackingDevice"&gt;"CryptoBackingDevice"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2919"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26353">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26354">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_device"
              c:identifier="udisks_block_set_device"
              glib:set-property="device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25545">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Device"&gt;"Device"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2858"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25547">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25548">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_device_number"
              c:identifier="udisks_block_set_device_number"
              glib:set-property="device-number"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25684">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.DeviceNumber"&gt;"DeviceNumber"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2869"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25686">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25687">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_drive"
              c:identifier="udisks_block_set_drive"
              glib:set-property="drive"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25862">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Drive"&gt;"Drive"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2883"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25864">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25865">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_auto"
              c:identifier="udisks_block_set_hint_auto"
              glib:set-property="hint-auto"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26483">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintAuto"&gt;"HintAuto"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2931"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26485">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26486">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_icon_name"
              c:identifier="udisks_block_set_hint_icon_name"
              glib:set-property="hint-icon-name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26589">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIconName"&gt;"HintIconName"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2939"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26591">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26592">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_ignore"
              c:identifier="udisks_block_set_hint_ignore"
              glib:set-property="hint-ignore"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26450">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIgnore"&gt;"HintIgnore"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2928"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26452">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26453">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_name"
              c:identifier="udisks_block_set_hint_name"
              glib:set-property="hint-name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26536">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;"HintName"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2935"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26538">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26539">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_partitionable"
              c:identifier="udisks_block_set_hint_partitionable"
              glib:set-property="hint-partitionable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26384">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintPartitionable"&gt;"HintPartitionable"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2922"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26386">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26387">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_symbolic_icon_name"
              c:identifier="udisks_block_set_hint_symbolic_icon_name"
              glib:set-property="hint-symbolic-icon-name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26646">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSymbolicIconName"&gt;"HintSymbolicIconName"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2943"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26648">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26649">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_system"
              c:identifier="udisks_block_set_hint_system"
              glib:set-property="hint-system"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26417">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSystem"&gt;"HintSystem"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2925"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26419">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26420">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id"
              c:identifier="udisks_block_set_id"
              glib:set-property="id"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25741">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Id"&gt;"Id"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2873"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25743">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25744">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id_label"
              c:identifier="udisks_block_set_id_label"
              glib:set-property="id-label"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26192">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdLabel"&gt;"IdLabel"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2907"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26194">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26195">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id_type"
              c:identifier="udisks_block_set_id_type"
              glib:set-property="id-type"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26086">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdType"&gt;"IdType"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2899"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26088">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26089">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id_usage"
              c:identifier="udisks_block_set_id_usage"
              glib:set-property="id-usage"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26033">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUsage"&gt;"IdUsage"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2895"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26035">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26036">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id_uuid"
              c:identifier="udisks_block_set_id_uuid"
              glib:set-property="id-uuid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26245">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUUID"&gt;"IdUUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2911"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26247">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26248">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id_version"
              c:identifier="udisks_block_set_id_version"
              glib:set-property="id-version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26139">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdVersion"&gt;"IdVersion"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2903"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26141">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26142">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mdraid"
              c:identifier="udisks_block_set_mdraid"
              glib:set-property="mdraid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25919">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaid"&gt;"MDRaid"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2887"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25921">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25922">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mdraid_member"
              c:identifier="udisks_block_set_mdraid_member"
              glib:set-property="mdraid-member"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25978">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaidMember"&gt;"MDRaidMember"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2891"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25980">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25981">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_preferred_device"
              c:identifier="udisks_block_set_preferred_device"
              glib:set-property="preferred-device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25598">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.PreferredDevice"&gt;"PreferredDevice"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2862"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25600">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25601">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_read_only"
              c:identifier="udisks_block_set_read_only"
              glib:set-property="read-only"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25809">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.ReadOnly"&gt;"ReadOnly"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2879"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25811">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25812">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_block_set_size"
              glib:set-property="size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25776">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2876"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25778">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25779">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_symlinks"
              c:identifier="udisks_block_set_symlinks"
              glib:set-property="symlinks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25651">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Symlinks"&gt;"Symlinks"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2866"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25653">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25654">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_userspace_mount_options"
              c:identifier="udisks_block_set_userspace_mount_options"
              glib:set-property="userspace-mount-options"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="26701">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.UserspaceMountOptions"&gt;"UserspaceMountOptions"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2947"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26703">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26704">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <property name="configuration"
                writable="1"
                transfer-ownership="none"
                setter="set_configuration"
                getter="get_configuration">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25413">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Configuration"&gt;"Configuration"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="crypto-backing-device"
                writable="1"
                transfer-ownership="none"
                setter="set_crypto_backing_device"
                getter="get_crypto_backing_device"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25422">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.CryptoBackingDevice"&gt;"CryptoBackingDevice"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="device"
                writable="1"
                transfer-ownership="none"
                setter="set_device"
                getter="get_device"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25272">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Device"&gt;"Device"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="device-number"
                writable="1"
                transfer-ownership="none"
                setter="set_device_number"
                getter="get_device_number"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25299">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.DeviceNumber"&gt;"DeviceNumber"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="drive"
                writable="1"
                transfer-ownership="none"
                setter="set_drive"
                getter="get_drive"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25337">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Drive"&gt;"Drive"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hint-auto"
                writable="1"
                transfer-ownership="none"
                setter="set_hint_auto"
                getter="get_hint_auto"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25458">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintAuto"&gt;"HintAuto"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hint-icon-name"
                writable="1"
                transfer-ownership="none"
                setter="set_hint_icon_name"
                getter="get_hint_icon_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25476">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIconName"&gt;"HintIconName"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hint-ignore"
                writable="1"
                transfer-ownership="none"
                setter="set_hint_ignore"
                getter="get_hint_ignore"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25449">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintIgnore"&gt;"HintIgnore"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hint-name"
                writable="1"
                transfer-ownership="none"
                setter="set_hint_name"
                getter="get_hint_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25467">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;"HintName"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hint-partitionable"
                writable="1"
                transfer-ownership="none"
                setter="set_hint_partitionable"
                getter="get_hint_partitionable"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25431">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintPartitionable"&gt;"HintPartitionable"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hint-symbolic-icon-name"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_hint_symbolic_icon_name"
                getter="get_hint_symbolic_icon_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25485">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSymbolicIconName"&gt;"HintSymbolicIconName"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hint-system"
                writable="1"
                transfer-ownership="none"
                setter="set_hint_system"
                getter="get_hint_system"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25440">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintSystem"&gt;"HintSystem"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="id"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_id"
                getter="get_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25308">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Id"&gt;"Id"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id-label"
                writable="1"
                transfer-ownership="none"
                setter="set_id_label"
                getter="get_id_label"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25395">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdLabel"&gt;"IdLabel"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id-type"
                writable="1"
                transfer-ownership="none"
                setter="set_id_type"
                getter="get_id_type"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25377">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdType"&gt;"IdType"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id-usage"
                writable="1"
                transfer-ownership="none"
                setter="set_id_usage"
                getter="get_id_usage"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25368">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUsage"&gt;"IdUsage"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id-uuid"
                writable="1"
                transfer-ownership="none"
                setter="set_id_uuid"
                getter="get_id_uuid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25404">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdUUID"&gt;"IdUUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id-version"
                writable="1"
                transfer-ownership="none"
                setter="set_id_version"
                getter="get_id_version"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25386">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.IdVersion"&gt;"IdVersion"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mdraid"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_mdraid"
                getter="get_mdraid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25346">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaid"&gt;"MDRaid"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mdraid-member"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_mdraid_member"
                getter="get_mdraid_member"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25357">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.MDRaidMember"&gt;"MDRaidMember"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="preferred-device"
                writable="1"
                transfer-ownership="none"
                setter="set_preferred_device"
                getter="get_preferred_device"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25281">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.PreferredDevice"&gt;"PreferredDevice"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="read-only"
                writable="1"
                transfer-ownership="none"
                setter="set_read_only"
                getter="get_read_only"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25328">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.ReadOnly"&gt;"ReadOnly"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="size"
                writable="1"
                transfer-ownership="none"
                setter="set_size"
                getter="get_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25319">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="symlinks"
                writable="1"
                transfer-ownership="none"
                setter="set_symlinks"
                getter="get_symlinks">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25290">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.Symlinks"&gt;"Symlinks"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="userspace-mount-options"
                writable="1"
                transfer-ownership="none"
                setter="set_userspace_mount_options"
                getter="get_userspace_mount_options">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25496">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block.UserspaceMountOptions"&gt;"UserspaceMountOptions"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <glib:signal name="handle-add-configuration-item" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25029">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.AddConfigurationItem"&gt;AddConfigurationItem()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_add_configuration_item() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25040">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25032">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25033">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25034">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-format" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25125">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Format"&gt;Format()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_format() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25136">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25128">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25129">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25130">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-secret-configuration" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25102">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.GetSecretConfiguration"&gt;GetSecretConfiguration()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_get_secret_configuration() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25112">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25105">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25106">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-open-device" when="last" version="2.7.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25221">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenDevice"&gt;OpenDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_open_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25233">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25224">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25225">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList"/>
          </parameter>
          <parameter name="arg_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25226">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25227">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-open-for-backup" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25149">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBackup"&gt;OpenForBackup()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_open_for_backup() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25160">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25152">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25153">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25154">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-open-for-benchmark" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25197">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForBenchmark"&gt;OpenForBenchmark()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_open_for_benchmark() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25208">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25200">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25201">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25202">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-open-for-restore" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25173">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.OpenForRestore"&gt;OpenForRestore()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_open_for_restore() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25184">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25176">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25177">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25178">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-remove-configuration-item" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25053">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.RemoveConfigurationItem"&gt;RemoveConfigurationItem()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_remove_configuration_item() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25064">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25056">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25057">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25058">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-rescan" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25248">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.Rescan"&gt;Rescan()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_rescan() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25258">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25251">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25252">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-update-configuration-item" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="25077">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Block.UpdateConfigurationItem"&gt;UpdateConfigurationItem()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_block_complete_update_configuration_item() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="25089">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25080">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_old_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25081">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_new_item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25082">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25083">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="BlockIface"
            c:type="UDisksBlockIface"
            glib:is-gtype-struct-for="Block">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="24980">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="2570"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24982">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_add_configuration_item">
        <callback name="handle_add_configuration_item">
          <source-position filename="udisks-generated.h" line="2460"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_item" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_format">
        <callback name="handle_format">
          <source-position filename="udisks-generated.h" line="2466"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_secret_configuration">
        <callback name="handle_get_secret_configuration">
          <source-position filename="udisks-generated.h" line="2472"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_open_for_backup">
        <callback name="handle_open_for_backup">
          <source-position filename="udisks-generated.h" line="2477"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="fd_list" transfer-ownership="none">
              <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_open_for_benchmark">
        <callback name="handle_open_for_benchmark">
          <source-position filename="udisks-generated.h" line="2483"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="fd_list" transfer-ownership="none">
              <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_open_for_restore">
        <callback name="handle_open_for_restore">
          <source-position filename="udisks-generated.h" line="2489"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="fd_list" transfer-ownership="none">
              <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_remove_configuration_item">
        <callback name="handle_remove_configuration_item">
          <source-position filename="udisks-generated.h" line="2495"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_item" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_rescan">
        <callback name="handle_rescan">
          <source-position filename="udisks-generated.h" line="2501"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_update_configuration_item">
        <callback name="handle_update_configuration_item">
          <source-position filename="udisks-generated.h" line="2506"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_old_item" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_new_item" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_configuration">
        <callback name="get_configuration">
          <source-position filename="udisks-generated.h" line="2513"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26270">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="26262">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_crypto_backing_device">
        <callback name="get_crypto_backing_device">
          <source-position filename="udisks-generated.h" line="2515"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26323">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="26315">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_device">
        <callback name="get_device">
          <source-position filename="udisks-generated.h" line="2517"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25517">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25509">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_device_number">
        <callback name="get_device_number">
          <source-position filename="udisks-generated.h" line="2519"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25674">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25668">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_drive">
        <callback name="get_drive">
          <source-position filename="udisks-generated.h" line="2521"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25834">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25826">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_auto">
        <callback name="get_hint_auto">
          <source-position filename="udisks-generated.h" line="2523"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26473">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="26467">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_icon_name">
        <callback name="get_hint_icon_name">
          <source-position filename="udisks-generated.h" line="2525"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26561">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="26553">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_ignore">
        <callback name="get_hint_ignore">
          <source-position filename="udisks-generated.h" line="2527"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26440">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="26434">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_name">
        <callback name="get_hint_name">
          <source-position filename="udisks-generated.h" line="2529"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26508">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="26500">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_partitionable">
        <callback name="get_hint_partitionable">
          <source-position filename="udisks-generated.h" line="2531"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26374">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="26368">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_system">
        <callback name="get_hint_system">
          <source-position filename="udisks-generated.h" line="2533"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26407">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="26401">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id_label">
        <callback name="get_id_label">
          <source-position filename="udisks-generated.h" line="2535"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26164">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="26156">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id_type">
        <callback name="get_id_type">
          <source-position filename="udisks-generated.h" line="2537"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26058">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="26050">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id_usage">
        <callback name="get_id_usage">
          <source-position filename="udisks-generated.h" line="2539"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26005">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25997">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id_uuid">
        <callback name="get_id_uuid">
          <source-position filename="udisks-generated.h" line="2541"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26217">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="26209">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id_version">
        <callback name="get_id_version">
          <source-position filename="udisks-generated.h" line="2543"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26111">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="26103">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_preferred_device">
        <callback name="get_preferred_device">
          <source-position filename="udisks-generated.h" line="2545"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25570">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25562">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_read_only">
        <callback name="get_read_only">
          <source-position filename="udisks-generated.h" line="2547"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25799">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25793">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <source-position filename="udisks-generated.h" line="2549"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25766">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25760">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_symlinks">
        <callback name="get_symlinks">
          <source-position filename="udisks-generated.h" line="2551"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25623">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25615">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_userspace_mount_options">
        <callback name="get_userspace_mount_options">
          <source-position filename="udisks-generated.h" line="2553"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26673">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="26665">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_symbolic_icon_name">
        <callback name="get_hint_symbolic_icon_name">
          <source-position filename="udisks-generated.h" line="2555"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="26614">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="26606">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id">
        <callback name="get_id">
          <source-position filename="udisks-generated.h" line="2557"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25709">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25701">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_mdraid">
        <callback name="get_mdraid">
          <source-position filename="udisks-generated.h" line="2559"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25887">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25879">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_mdraid_member">
        <callback name="get_mdraid_member">
          <source-position filename="udisks-generated.h" line="2561"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="25946">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="25938">A #UDisksBlock.</doc>
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_open_device">
        <callback name="handle_open_device">
          <source-position filename="udisks-generated.h" line="2563"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Block" c:type="UDisksBlock*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="fd_list" transfer-ownership="none">
              <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
            </parameter>
            <parameter name="arg_mode" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="BlockLVM2"
               c:symbol-prefix="block_lvm2"
               c:type="UDisksBlockLVM2"
               version="2.0.0"
               glib:type-name="UDisksBlockLVM2"
               glib:get-type="udisks_block_lvm2_get_type"
               glib:type-struct="BlockLVM2Iface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="63283">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="7381"/>
      <function name="interface_info"
                c:identifier="udisks_block_lvm2_interface_info"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63247">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="7389"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="63252">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_block_lvm2_override_properties"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63262">Overrides all #GObject properties in the #UDisksBlockLVM2 interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="7390"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="63270">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63264">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63265">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_logical_volume"
                      invoker="get_logical_volume"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63321">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block-LVM2.LogicalVolume"&gt;"LogicalVolume"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_lvm2_dup_logical_volume() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="7379"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="63331">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63323">A #UDisksBlockLVM2.</doc>
            <type name="BlockLVM2" c:type="UDisksBlockLVM2*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="dup_logical_volume"
              c:identifier="udisks_block_lvm2_dup_logical_volume"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63343">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block-LVM2.LogicalVolume"&gt;"LogicalVolume"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="7395"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="63351">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63345">A #UDisksBlockLVM2.</doc>
            <type name="BlockLVM2" c:type="UDisksBlockLVM2*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_logical_volume"
              c:identifier="udisks_block_lvm2_get_logical_volume"
              glib:get-property="logical-volume"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63321">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block-LVM2.LogicalVolume"&gt;"LogicalVolume"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_block_lvm2_dup_logical_volume() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="7394"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="63331">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63323">A #UDisksBlockLVM2.</doc>
            <type name="BlockLVM2" c:type="UDisksBlockLVM2*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_logical_volume"
              c:identifier="udisks_block_lvm2_set_logical_volume"
              glib:set-property="logical-volume"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63363">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block-LVM2.LogicalVolume"&gt;"LogicalVolume"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="7396"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63365">A #UDisksBlockLVM2.</doc>
            <type name="BlockLVM2" c:type="UDisksBlockLVM2*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63366">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="logical-volume"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_logical_volume"
                getter="get_logical_volume"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63308">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Block-LVM2.LogicalVolume"&gt;"LogicalVolume"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </interface>
    <record name="BlockLVM2Iface"
            c:type="UDisksBlockLVM2Iface"
            glib:is-gtype-struct-for="BlockLVM2"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="63291">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="7381"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63293">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_logical_volume">
        <callback name="get_logical_volume">
          <source-position filename="udisks-generated.h" line="7379"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63331">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="63323">A #UDisksBlockLVM2.</doc>
              <type name="BlockLVM2" c:type="UDisksBlockLVM2*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="BlockLVM2Proxy"
           c:symbol-prefix="block_lvm2_proxy"
           c:type="UDisksBlockLVM2Proxy"
           version="2.0.0"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksBlockLVM2Proxy"
           glib:get-type="udisks_block_lvm2_proxy_get_type"
           glib:type-struct="BlockLVM2ProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="63382">The #UDisksBlockLVM2Proxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="7422"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="BlockLVM2"/>
      <constructor name="new_finish"
                   c:identifier="udisks_block_lvm2_proxy_new_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63648">Finishes an operation started with udisks_block_lvm2_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="7438"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="63655">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockLVM2Proxy" c:type="UDisksBlockLVM2*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63650">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_lvm2_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_block_lvm2_proxy_new_for_bus_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63744">Finishes an operation started with udisks_block_lvm2_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="7457"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="63751">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockLVM2Proxy" c:type="UDisksBlockLVM2*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63746">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_lvm2_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_block_lvm2_proxy_new_for_bus_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63771">Like udisks_block_lvm2_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_block_lvm2_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7460"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="63786">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockLVM2Proxy" c:type="UDisksBlockLVM2*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63773">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63774">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63775">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63776">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63777">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_block_lvm2_proxy_new_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63675">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_block_lvm2_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7441"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="63690">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockLVM2Proxy" c:type="UDisksBlockLVM2*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63677">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63678">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63679">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63680">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63681">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_block_lvm2_proxy_new"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63616">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_lvm2_proxy_new_finish() to get the result of the operation.

See udisks_block_lvm2_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7430"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63618">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63619">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63620">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63621">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63622">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63623">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63624">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_block_lvm2_proxy_new_for_bus"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63712">Like udisks_block_lvm2_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_lvm2_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_block_lvm2_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7449"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63714">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63715">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63716">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63717">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63718">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63719">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="63720">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="BlockLVM2ProxyPrivate"
              c:type="UDisksBlockLVM2ProxyPrivate*"/>
      </field>
    </class>
    <record name="BlockLVM2ProxyClass"
            c:type="UDisksBlockLVM2ProxyClass"
            glib:is-gtype-struct-for="BlockLVM2Proxy"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="63390">Class structure for #UDisksBlockLVM2Proxy.</doc>
      <source-position filename="udisks-generated.h" line="7422"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63392">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="BlockLVM2ProxyPrivate"
            c:type="UDisksBlockLVM2ProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="7410"/>
    </record>
    <class name="BlockLVM2Skeleton"
           c:symbol-prefix="block_lvm2_skeleton"
           c:type="UDisksBlockLVM2Skeleton"
           version="2.0.0"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksBlockLVM2Skeleton"
           glib:get-type="udisks_block_lvm2_skeleton_get_type"
           glib:type-struct="BlockLVM2SkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="63810">The #UDisksBlockLVM2Skeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="7492"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="BlockLVM2"/>
      <constructor name="new"
                   c:identifier="udisks_block_lvm2_skeleton_new"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64267">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="7500"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64272">The skeleton object.</doc>
          <type name="BlockLVM2Skeleton" c:type="UDisksBlockLVM2*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="BlockLVM2SkeletonPrivate"
              c:type="UDisksBlockLVM2SkeletonPrivate*"/>
      </field>
    </class>
    <record name="BlockLVM2SkeletonClass"
            c:type="UDisksBlockLVM2SkeletonClass"
            glib:is-gtype-struct-for="BlockLVM2Skeleton"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="63818">Class structure for #UDisksBlockLVM2Skeleton.</doc>
      <source-position filename="udisks-generated.h" line="7492"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63820">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="BlockLVM2SkeletonPrivate"
            c:type="UDisksBlockLVM2SkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="7480"/>
    </record>
    <class name="BlockProxy"
           c:symbol-prefix="block_proxy"
           c:type="UDisksBlockProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksBlockProxy"
           glib:get-type="udisks_block_proxy_get_type"
           glib:type-struct="BlockProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="28023">The #UDisksBlockProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="2973"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Block"/>
      <constructor name="new_finish"
                   c:identifier="udisks_block_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28673">Finishes an operation started with udisks_block_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="2989"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="28680">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockProxy" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28675">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_block_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28763">Finishes an operation started with udisks_block_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="3008"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="28770">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockProxy" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28765">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_block_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_block_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28788">Like udisks_block_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_block_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3011"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="28803">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockProxy" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28790">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28791">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28792">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28793">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28794">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_block_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28698">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_block_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2992"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="28713">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="BlockProxy" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28700">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28701">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28702">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28703">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28704">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_block_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28643">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_proxy_new_finish() to get the result of the operation.

See udisks_block_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2981"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28645">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28646">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28647">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28648">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28649">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28650">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28651">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_block_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28733">Like udisks_block_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_block_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_block_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3000"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28735">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28736">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28737">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28738">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28739">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28740">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="28741">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="BlockProxyPrivate" c:type="UDisksBlockProxyPrivate*"/>
      </field>
    </class>
    <record name="BlockProxyClass"
            c:type="UDisksBlockProxyClass"
            glib:is-gtype-struct-for="BlockProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="28029">Class structure for #UDisksBlockProxy.</doc>
      <source-position filename="udisks-generated.h" line="2973"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28031">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="BlockProxyPrivate"
            c:type="UDisksBlockProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="2961"/>
    </record>
    <class name="BlockSkeleton"
           c:symbol-prefix="block_skeleton"
           c:type="UDisksBlockSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksBlockSkeleton"
           glib:get-type="udisks_block_skeleton_get_type"
           glib:type-struct="BlockSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="28825">The #UDisksBlockSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="3043"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Block"/>
      <constructor name="new" c:identifier="udisks_block_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29590">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="3051"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29595">The skeleton object.</doc>
          <type name="BlockSkeleton" c:type="UDisksBlock*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="BlockSkeletonPrivate"
              c:type="UDisksBlockSkeletonPrivate*"/>
      </field>
    </class>
    <record name="BlockSkeletonClass"
            c:type="UDisksBlockSkeletonClass"
            glib:is-gtype-struct-for="BlockSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="28831">Class structure for #UDisksBlockSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="3043"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="28833">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="BlockSkeletonPrivate"
            c:type="UDisksBlockSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="3031"/>
    </record>
    <function-macro name="CHECK_VERSION"
                    c:identifier="UDISKS_CHECK_VERSION"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="udisksversion.h"
           line="53">Macro to check against the version of the libudisks2 library that
is being compiled against.</doc>
      <source-position filename="udisksversion.h" line="65"/>
      <parameters>
        <parameter name="major">
          <doc xml:space="preserve"
               filename="udisksversion.h"
               line="55">The major version to check for.</doc>
        </parameter>
        <parameter name="minor">
          <doc xml:space="preserve"
               filename="udisksversion.h"
               line="56">the minor version to check for.</doc>
        </parameter>
        <parameter name="micro">
          <doc xml:space="preserve"
               filename="udisksversion.h"
               line="57">The micro version to check for.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CLIENT"
                    c:identifier="UDISKS_CLIENT"
                    introspectable="0">
      <source-position filename="udisksclient.h" line="34"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CLIENT_GET_CLASS"
                    c:identifier="UDISKS_CLIENT_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisksclient.h" line="36"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Client"
           c:symbol-prefix="client"
           c:type="UDisksClient"
           parent="GObject.Object"
           glib:type-name="UDisksClient"
           glib:get-type="udisks_client_get_type">
      <doc xml:space="preserve"
           filename="udisksclient.c"
           line="30">#UDisksClient is used for accessing the UDisks service from a
client program.</doc>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="udisks_client_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="393">Finishes an operation started with udisks_client_new().</doc>
        <source-position filename="udisksclient.h" line="42"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="400">A #UDisksClient or %NULL if @error is set. Free
with g_object_unref() when done with it.</doc>
          <type name="Client" c:type="UDisksClient*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="395">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_connection_finish"
                   c:identifier="udisks_client_new_for_connection_finish"
                   version="2.9.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="410">Finishes an operation started with udisks_client_new_for_connection().</doc>
        <source-position filename="udisksclient.h" line="48"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="417">A #UDisksClient or %NULL if @error is set. Free
with g_object_unref() when done with it.</doc>
          <type name="Client" c:type="UDisksClient*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="412">A #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_client_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="429">Synchronously gets a #UDisksClient for the local system.</doc>
        <source-position filename="udisksclient.h" line="50"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="436">A #UDisksClient or %NULL if @error is set. Free
with g_object_unref() when done with it.</doc>
          <type name="Client" c:type="UDisksClient*"/>
        </return-value>
        <parameters>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="431">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_job_description_from_operation"
                c:identifier="udisks_client_get_job_description_from_operation">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2707">Gets a human-readable and localized text string describing a
a job @operation.

For known job operation types, see the documentation for the
&lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Operation"&gt;Job:Operation&lt;/link&gt;
D-Bus property.</doc>
        <source-position filename="udisksclient.h" line="159"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="2718">A string that should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="operation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2709">A job operation name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new" c:identifier="udisks_client_new">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="321">Asynchronously gets a #UDisksClient. When the operation is
finished, @callback will be invoked in the &lt;link
linkend="g-main-context-push-thread-default"&gt;thread-default main
loop&lt;/link&gt; of the thread you are calling this method from.</doc>
        <source-position filename="udisksclient.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="323">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="324">Function that will be called when the result is ready.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="325">Data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_connection"
                c:identifier="udisks_client_new_for_connection"
                version="2.9.0">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="345">Like #udisks_client_new() but takes a #GDBusConnection which will be used
when connecting to the UDisks daemon over D-Bus. This is useful for unit
tests which may want to use #GTestDBus to create a D-Bus daemon on the
session bus.</doc>
        <source-position filename="udisksclient.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="347">a #GDBusConnection. If %NULL, a system bus
  connection will be used.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="349">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="350">Function that will be called when the result is ready.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="351">Data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_all_blocks_for_mdraid"
              c:identifier="udisks_client_get_all_blocks_for_mdraid"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1086">Gets all RAID devices (e.g. &lt;filename&gt;/dev/md0&lt;/filename&gt; and &lt;filename&gt;/dev/md1&lt;/filename&gt;) for @raid.

This is usually only useful in &lt;ulink
url="http://en.wikipedia.org/wiki/Split-brain_(computing)"&gt;split-brain
situations&lt;/ulink&gt; — see udisks_client_get_block_for_mdraid() for
an example — and is normally used only to convey the problem in an
user interface.</doc>
        <source-position filename="udisksclient.h" line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1099">A list of #UDisksBlock instances. The
  returned list should be freed with g_list_free() after each
  element has been freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Block"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1088">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="raid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1089">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_block_for_dev"
              c:identifier="udisks_client_get_block_for_dev">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="776">Gets the #UDisksBlock corresponding to @block_device_number, if any.</doc>
        <source-position filename="udisksclient.h" line="62"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="783">A #UDisksBlock or %NULL if not found.</doc>
          <type name="Block" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="778">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="block_device_number" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="779">A #dev_t to get a #UDisksBlock for.</doc>
            <type name="guint64" c:type="dev_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_block_for_drive"
              c:identifier="udisks_client_get_block_for_drive">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="869">Gets a block device corresponding to @drive. The returned block
device, if any, is for the whole disk drive, e.g. a partition block
device is never returned.

Set @get_physical to %TRUE if you need a block device that you can
send low-level SCSI commands with (for multipath, this returns one
of the physical paths). Set it to %FALSE if you need a block device
that you can read/write data with (for multipath, this returns the
mapped device).</doc>
        <source-position filename="udisksclient.h" line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="885">A #UDisksBlock or %NULL if the requested
kind of block device is not available - use g_object_unref() to
free the returned object.</doc>
          <type name="Block" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="871">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="drive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="872">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </parameter>
          <parameter name="get_physical" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="873">%TRUE to get a physical device, %FALSE to get the logical device.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_block_for_label"
              c:identifier="udisks_client_get_block_for_label">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="685">Gets all the #UDisksBlock instances with the given label, if any.</doc>
        <source-position filename="udisksclient.h" line="64"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="692">A list of #UDisksBlock instances. The
  returned list should be freed with g_list_free() after each
  element has been freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Block"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="687">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="688">The label.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_block_for_mdraid"
              c:identifier="udisks_client_get_block_for_mdraid"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1045">Gets the RAID device (e.g. &lt;filename&gt;/dev/md0&lt;/filename&gt;) for @raid.

In the case of a &lt;ulink
url="http://en.wikipedia.org/wiki/Split-brain_(computing)"&gt;split-brain
syndrome&lt;/ulink&gt;, it is undefined which RAID device is
returned. For example this can happen if
&lt;filename&gt;/dev/sda&lt;/filename&gt; and &lt;filename&gt;/dev/sdb&lt;/filename&gt; are
components of a two-disk RAID-1 and &lt;filename&gt;/dev/md0&lt;/filename&gt;
and &lt;filename&gt;/dev/md1&lt;/filename&gt; are two degraded arrays, each one
using exactly one of the two devices. Use
udisks_client_get_all_blocks_for_mdraid() to get all RAID devices.</doc>
        <source-position filename="udisksclient.h" line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1062">A #UDisksBlock or %NULL if no RAID device is running.</doc>
          <type name="Block" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1047">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="raid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1048">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_block_for_uuid"
              c:identifier="udisks_client_get_block_for_uuid">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="729">Gets all the #UDisksBlock instances with the given uuid, if any.</doc>
        <source-position filename="udisksclient.h" line="66"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="736">A list of #UDisksBlock instances. The
  returned list should be freed with g_list_free() after each
  element has been freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Block"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="731">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="732">The uuid.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cleartext_block"
              c:identifier="udisks_client_get_cleartext_block">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1267">If @block is an unlocked encrypted device, gets the cleartext device.</doc>
        <source-position filename="udisksclient.h" line="77"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1274">A #UDisksBlock or %NULL. Free with
g_object_unref() when done with it.</doc>
          <type name="Block" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1269">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1270">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_drive_for_block"
              c:identifier="udisks_client_get_drive_for_block">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="923">Gets the #UDisksDrive that @block belongs to, if any.</doc>
        <source-position filename="udisksclient.h" line="72"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="930">A #UDisksDrive or %NULL if there is no
#UDisksDrive for @block - free the returned object with
g_object_unref().</doc>
          <type name="Drive" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="925">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="926">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_drive_info"
              c:identifier="udisks_client_get_drive_info"
              deprecated="1"
              deprecated-version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="979">Gets information about a #UDisksDrive object that is suitable to
present in an user interface. The returned strings are localized.</doc>
        <doc-deprecated xml:space="preserve">Use udisks_client_get_object_info() instead.</doc-deprecated>
        <source-position filename="udisksclient.h" line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="981">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="drive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="982">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </parameter>
          <parameter name="out_name"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="983">Return location for name or %NULL.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_description"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="984">Return location for description or %NULL.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_drive_icon"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="985">Return location for icon representing the drive or %NULL.</doc>
            <type name="Gio.Icon" c:type="GIcon**"/>
          </parameter>
          <parameter name="out_media_description"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="986">Return location for description of the media or %NULL.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_media_icon"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="987">Return location for icon representing the media or %NULL.</doc>
            <type name="Gio.Icon" c:type="GIcon**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_drive_siblings"
              c:identifier="udisks_client_get_drive_siblings"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1316">Gets all siblings for @drive.</doc>
        <source-position filename="udisksclient.h" line="97"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1323">A list of #UDisksDrive instances. The
  returned list should be freed with g_list_free() after each element has been
  freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Drive"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1318">A #UDisksClient</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="drive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1319">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_id_for_display"
              c:identifier="udisks_client_get_id_for_display">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2075">Gets a human readable localized string for @usage, @type and @version.</doc>
        <source-position filename="udisksclient.h" line="128"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="2085">A string that should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2077">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="usage" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2078">Usage id e.g. "filesystem" or "crypto".</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2079">Type e.g. "ext4" or "crypto_LUKS"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="version" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2080">Version.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="long_string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2081">Whether to produce a long string.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_job_description"
              c:identifier="udisks_client_get_job_description">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2772">Gets a human-readable and localized text string describing the
operation of @job.

For known job types, see the documentation for the
&lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Operation"&gt;Job:Operation&lt;/link&gt;
D-Bus property.</doc>
        <source-position filename="udisksclient.h" line="161"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="2784">A string that should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2774">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="job" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2775">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_jobs_for_object"
              c:identifier="udisks_client_get_jobs_for_object">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1507">Gets all the #UDisksJob instances that reference @object, if any.</doc>
        <source-position filename="udisksclient.h" line="100"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1514">A list of #UDisksJob instances. The
  returned list should be freed with g_list_free() after each
  element has been freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Job"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1509">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1510">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_loop_for_block"
              c:identifier="udisks_client_get_loop_for_block">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1449">Gets the corresponding loop interface for @block.

This only works if @block itself is a loop device or a partition of
a loop device.</doc>
        <source-position filename="udisksclient.h" line="91"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1459">A #UDisksLoop or %NULL. Free with g_object_unref().</doc>
          <type name="Loop" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1451">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1452">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_manager"
              c:identifier="udisks_client_get_manager"
              glib:get-property="manager">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="584">Gets the #UDisksManager interface on the well-known
&lt;literal&gt;/org/freedesktop/UDisks2/Manager&lt;/literal&gt; object.</doc>
        <source-position filename="udisksclient.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="591">A #UDisksManager or %NULL if the udisksd
daemon is not currently running. Do not free, the instance is owned
by @client.</doc>
          <type name="Manager" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="586">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mdraid_for_block"
              c:identifier="udisks_client_get_mdraid_for_block"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="952">Gets the #UDisksMDRaid that @block is the block device for, if any.</doc>
        <source-position filename="udisksclient.h" line="74"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="959">A #UDisksMDRaid or %NULL if there is no
  #UDisksMDRaid for @block or @block is not a MD-RAID block
  device. Free the returned object with g_object_unref().</doc>
          <type name="MDRaid" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="954">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="955">A #UDisksBlock.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_media_compat_for_display"
              c:identifier="udisks_client_get_media_compat_for_display">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1864">Gets a human-readable string of the media described by
@media_compat. The returned information is localized.</doc>
        <source-position filename="udisksclient.h" line="124"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1872">A string that should be freed with g_free() or
%NULL if unknown.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1866">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="media_compat" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1867">An array of media types.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_members_for_mdraid"
              c:identifier="udisks_client_get_members_for_mdraid"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1116">Gets the physical block devices that are part of @raid.</doc>
        <source-position filename="udisksclient.h" line="85"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1123">A list of #UDisksBlock instances. The
  returned list should be freed with g_list_free() after each
  element has been freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Block"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1118">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="raid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1119">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_object" c:identifier="udisks_client_get_object">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="640">Convenience function for looking up an #UDisksObject for @object_path.</doc>
        <source-position filename="udisksclient.h" line="57"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="647">A #UDisksObject corresponding to
@object_path or %NULL if not found. The returned object must be
freed with g_object_unref().</doc>
          <type name="Object" c:type="UDisksObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="642">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="643">Object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_object_info"
              c:identifier="udisks_client_get_object_info"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="884">Gets information about a #UDisksObject instance that is suitable to
present in an user interface. Information is returned in the
#UDisksObjectInfo object and is localized.</doc>
        <source-position filename="udisksclient.h" line="112"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="893">A #UDisksObjectInfo instance that should be freed with g_object_unref().</doc>
          <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="886">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="887">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_object_manager"
              c:identifier="udisks_client_get_object_manager"
              glib:get-property="object-manager">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="568">Gets the #GDBusObjectManager used by @client.</doc>
        <source-position filename="udisksclient.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="574">A #GDBusObjectManager. Do not free, the
instance is owned by @client.</doc>
          <type name="Gio.DBusObjectManager" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="570">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_partition_info"
              c:identifier="udisks_client_get_partition_info">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1158">Gets information about @partition that is suitable to present in an
user interface in a single line of text.

The returned string is localized and includes things like the
partition type, flags (if any) and name (if any).</doc>
        <source-position filename="udisksclient.h" line="115"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1169">A string that should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1160">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1161"># #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_table"
              c:identifier="udisks_client_get_partition_table">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1419">Gets the #UDisksPartitionTable corresponding to @partition.</doc>
        <source-position filename="udisksclient.h" line="88"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1426">A #UDisksPartitionTable. Free with g_object_unref().</doc>
          <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1421">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1422">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_table_subtype_for_display"
              c:identifier="udisks_client_get_partition_table_subtype_for_display">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2256">Gets a human readable localized string for @partition_table_type and @partition_table_subtype.</doc>
        <source-position filename="udisksclient.h" line="155"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="2264">A description of @partition_table_type and
@partition_table_subtype or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2258">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition_table_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2259">A partition table type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="partition_table_subtype" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2260">A partition table type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_table_subtypes"
              c:identifier="udisks_client_get_partition_table_subtypes">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2289">Gets all known subtypes for @partition_table_type.</doc>
        <source-position filename="udisksclient.h" line="135"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="2296">A %NULL-terminated array of
strings. Only the container should be freed with g_free().</doc>
          <array c:type="const gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2291">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition_table_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2292">A partition table type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_table_type_for_display"
              c:identifier="udisks_client_get_partition_table_type_for_display">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2201">Gets a human readable localized string for @partition_table_type.</doc>
        <source-position filename="udisksclient.h" line="152"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="2208">A description of @partition_table_type or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2203">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition_table_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2204">A partition table type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_type_and_subtype_for_display"
              c:identifier="udisks_client_get_partition_type_and_subtype_for_display"
              version="2.1.1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2662">Like udisks_client_get_partition_type_for_display() but also takes
the partition table subtype into account, if available. This is
useful in scenarios where different subtypes is using the same
partition type.</doc>
        <source-position filename="udisksclient.h" line="146"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="2674">A description of @partition_type or %NULL if
unknown.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2664">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition_table_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2665">A partitioning type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="partition_table_subtype" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2666">A partitioning subtype or %NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="partition_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2667">A partition type.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_type_for_display"
              c:identifier="udisks_client_get_partition_type_for_display">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2629">Gets a human readable localized string for @partiton_table_type and @partition_type.</doc>
        <source-position filename="udisksclient.h" line="142"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="2637">A description of @partition_type or %NULL if
unknown.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2631">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition_table_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2632">A partitioning type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="partition_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2633">A partition type.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partition_type_infos"
              c:identifier="udisks_client_get_partition_type_infos">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2591">Gets information about all known partition types for @partition_table_type and @partition_table_subtype.</doc>
        <source-position filename="udisksclient.h" line="138"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="2599">A list of
  #UDisksPartitionTypeInfo instances. The returned list should be freed
  with g_list_free() after freeing each element with udisks_partition_type_info_free().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="PartitionTypeInfo"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2593">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="partition_table_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2594">A partition table type e.g. 'dos' or 'gpt'.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="partition_table_subtype"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2595">A partition table subtype or %NULL to get all known types.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_partitions"
              c:identifier="udisks_client_get_partitions">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1370">Gets all partitions of @table.</doc>
        <source-position filename="udisksclient.h" line="94"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1377">A list of #UDisksPartition instances. The
  returned list should be freed with g_list_free() after each
  element has been freed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Partition"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1372">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="table" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1373">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_size_for_display"
              c:identifier="udisks_client_get_size_for_display">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1802">Utility function to get a human-readable string that represents @size.</doc>
        <source-position filename="udisksclient.h" line="119"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="1811">A string that should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1804">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1805">Size in bytes</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="use_pow2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1806">Whether power-of-two units should be used instead of power-of-ten units.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="long_string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1807">Whether to produce a long string.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_object" c:identifier="udisks_client_peek_object">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="659">Like udisks_client_get_object() but doesn't increase the reference
count on the returned #UDisksObject.

&lt;warning&gt;The returned object is only valid until removed so it is only safe to use this function on the thread where @client was constructed. Use udisks_client_get_object() if on another thread.&lt;/warning&gt;</doc>
        <source-position filename="udisksclient.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksclient.c"
               line="669">A #UDisksObject corresponding to
@object_path or %NULL if not found.</doc>
          <type name="Object" c:type="UDisksObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="661">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="662">Object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="queue_changed"
              c:identifier="udisks_client_queue_changed"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="1586">Queues up a #UDisksClient::changed signal and rate-limit it. See
the documentation for the #UDisksClient::changed property for more
information.</doc>
        <source-position filename="udisksclient.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="1588">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="settle" c:identifier="udisks_client_settle">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="614">Blocks until all pending D-Bus messages have been delivered. Also
emits the (rate-limited) #UDisksClient::changed signal if changes
are currently pending.

This is useful in two situations: 1. when using synchronous method
calls since e.g. D-Bus signals received while waiting for the reply
are queued up and dispatched after the synchronous call ends; and
2. when using asynchronous calls where the return value references
a newly created object (such as the &lt;link
linkend="gdbus-method-org-freedesktop-UDisks2-Manager.LoopSetup"&gt;Manager.LoopSetup()&lt;/link&gt; method).</doc>
        <source-position filename="udisksclient.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="616">A #UDisksClient.</doc>
            <type name="Client" c:type="UDisksClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="bus-connection"
                version="2.9.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="270">The #GDBusConnection used to create the #UDisksClient:object-manager, or
%NULL if one wasn't specified during construction of the #UDisksClient (in
which case a system bus connection is used).</doc>
        <type name="Gio.DBusConnection"/>
      </property>
      <property name="manager" transfer-ownership="none" getter="get_manager">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="255">The #UDisksManager interface on the well-known
&lt;literal&gt;/org/freedesktop/UDisks2/Manager&lt;/literal&gt; object</doc>
        <type name="Manager"/>
      </property>
      <property name="object-manager"
                transfer-ownership="none"
                getter="get_object_manager">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="241">The #GDBusObjectManager used by the #UDisksClient instance.</doc>
        <type name="Gio.DBusObjectManager"/>
      </property>
      <glib:signal name="changed" when="last">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="289">This signal is emitted either when an object or interface is
added or removed a when property has changed. Additionally,
multiple received signals are coalesced into a single signal that
is rate-limited to fire at most every 100ms.

Note that calling udisks_client_settle() will cause this signal
to fire if any changes are outstanding.

For greater detail, connect to the
#GDBusObjectManager::object-added,
#GDBusObjectManager::object-removed,
#GDBusObjectManager::interface-added,
#GDBusObjectManager::interface-removed,
#GDBusObjectManagerClient::interface-proxy-properties-changed and
signals on the #UDisksClient:object-manager object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <function-macro name="DRIVE"
                    c:identifier="UDISKS_DRIVE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="759"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_ATA"
                    c:identifier="UDISKS_DRIVE_ATA"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1142"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_ATA_GET_IFACE"
                    c:identifier="UDISKS_DRIVE_ATA_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1144"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_ATA_PROXY"
                    c:identifier="UDISKS_DRIVE_ATA_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1559"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_ATA_PROXY_CLASS"
                    c:identifier="UDISKS_DRIVE_ATA_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1560"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_ATA_PROXY_GET_CLASS"
                    c:identifier="UDISKS_DRIVE_ATA_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1561"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_ATA_SKELETON"
                    c:identifier="UDISKS_DRIVE_ATA_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1629"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_ATA_SKELETON_CLASS"
                    c:identifier="UDISKS_DRIVE_ATA_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1630"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_ATA_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_DRIVE_ATA_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1631"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_GET_IFACE"
                    c:identifier="UDISKS_DRIVE_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="761"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM"
                    c:identifier="UDISKS_DRIVE_LSM"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6761"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_GET_IFACE"
                    c:identifier="UDISKS_DRIVE_LSM_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6763"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_LOCAL"
                    c:identifier="UDISKS_DRIVE_LSM_LOCAL"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6947"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_LOCAL_GET_IFACE"
                    c:identifier="UDISKS_DRIVE_LSM_LOCAL_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6949"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_LOCAL_PROXY"
                    c:identifier="UDISKS_DRIVE_LSM_LOCAL_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7088"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_LOCAL_PROXY_CLASS"
                    c:identifier="UDISKS_DRIVE_LSM_LOCAL_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7089"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_LOCAL_PROXY_GET_CLASS"
                    c:identifier="UDISKS_DRIVE_LSM_LOCAL_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7090"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_LOCAL_SKELETON"
                    c:identifier="UDISKS_DRIVE_LSM_LOCAL_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7158"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_LOCAL_SKELETON_CLASS"
                    c:identifier="UDISKS_DRIVE_LSM_LOCAL_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7159"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_LOCAL_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_DRIVE_LSM_LOCAL_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7160"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_PROXY"
                    c:identifier="UDISKS_DRIVE_LSM_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6842"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_PROXY_CLASS"
                    c:identifier="UDISKS_DRIVE_LSM_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6843"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_PROXY_GET_CLASS"
                    c:identifier="UDISKS_DRIVE_LSM_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6844"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_SKELETON"
                    c:identifier="UDISKS_DRIVE_LSM_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6912"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_SKELETON_CLASS"
                    c:identifier="UDISKS_DRIVE_LSM_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6913"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_LSM_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_DRIVE_LSM_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6914"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_PROXY"
                    c:identifier="UDISKS_DRIVE_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1037"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_PROXY_CLASS"
                    c:identifier="UDISKS_DRIVE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1038"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_PROXY_GET_CLASS"
                    c:identifier="UDISKS_DRIVE_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1039"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_SKELETON"
                    c:identifier="UDISKS_DRIVE_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1107"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_SKELETON_CLASS"
                    c:identifier="UDISKS_DRIVE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1108"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DRIVE_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_DRIVE_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1109"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Drive"
               c:symbol-prefix="drive"
               c:type="UDisksDrive"
               glib:type-name="UDisksDrive"
               glib:get-type="udisks_drive_get_type"
               glib:type-struct="DriveIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="7934">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="846"/>
      <function name="interface_info"
                c:identifier="udisks_drive_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="7835">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="854"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="7840">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_drive_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="7848">Overrides all #GObject properties in the #UDisksDrive interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="855"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="7856">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7850">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7851">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_can_power_off"
                      invoker="get_can_power_off"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9457">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.CanPowerOff"&gt;"CanPowerOff"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="842"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9465">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9459">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_configuration"
                      invoker="get_configuration"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8644">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="783"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8654">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8646">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_connection_bus"
                      invoker="get_connection_bus"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9232">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.ConnectionBus"&gt;"ConnectionBus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_connection_bus() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="785"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9242">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9234">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_ejectable"
                      invoker="get_ejectable"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9371">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Ejectable"&gt;"Ejectable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="787"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9379">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9373">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id" invoker="get_id" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8591">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Id"&gt;"Id"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_id() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="789"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8601">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8593">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_media" invoker="get_media" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8697">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Media"&gt;"Media"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_media() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="791"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8707">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8699">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_media_available"
                      invoker="get_media_available"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8836">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaAvailable"&gt;"MediaAvailable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="793"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8844">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8838">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_media_change_detected"
                      invoker="get_media_change_detected"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8869">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaChangeDetected"&gt;"MediaChangeDetected"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="795"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8877">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8871">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_media_compatibility"
                      invoker="get_media_compatibility"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8750">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaCompatibility"&gt;"MediaCompatibility"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_media_compatibility() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="797"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8760">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8752">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_media_removable"
                      invoker="get_media_removable"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8803">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaRemovable"&gt;"MediaRemovable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="799"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8811">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8805">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_model" invoker="get_model" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8379">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Model"&gt;"Model"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_model() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="801"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8389">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8381">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_optical"
                      invoker="get_optical"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9001">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Optical"&gt;"Optical"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="803"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9009">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9003">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_optical_blank"
                      invoker="get_optical_blank"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9034">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalBlank"&gt;"OpticalBlank"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="805"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9042">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9036">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_optical_num_audio_tracks"
                      invoker="get_optical_num_audio_tracks"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9100">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumAudioTracks"&gt;"OpticalNumAudioTracks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="807"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9108">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9102">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_optical_num_data_tracks"
                      invoker="get_optical_num_data_tracks"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9133">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumDataTracks"&gt;"OpticalNumDataTracks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="809"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9141">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9135">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_optical_num_sessions"
                      invoker="get_optical_num_sessions"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9166">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumSessions"&gt;"OpticalNumSessions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="811"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9174">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9168">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_optical_num_tracks"
                      invoker="get_optical_num_tracks"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9067">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumTracks"&gt;"OpticalNumTracks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="813"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9075">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9069">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_removable"
                      invoker="get_removable"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9338">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Removable"&gt;"Removable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="815"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9346">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9340">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_revision"
                      invoker="get_revision"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8432">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Revision"&gt;"Revision"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_revision() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="817"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8442">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8434">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_rotation_rate"
                      invoker="get_rotation_rate"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9199">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.RotationRate"&gt;"RotationRate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="819"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9207">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9201">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_seat" invoker="get_seat" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9285">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Seat"&gt;"Seat"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_seat() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="821"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9295">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9287">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_serial"
                      invoker="get_serial"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8485">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Serial"&gt;"Serial"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_serial() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="823"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8495">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8487">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sibling_id"
                      invoker="get_sibling_id"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9494">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SiblingId"&gt;"SiblingId"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_sibling_id() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="844"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9504">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9496">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size" invoker="get_size" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8902">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="825"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8910">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8904">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sort_key"
                      invoker="get_sort_key"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9404">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SortKey"&gt;"SortKey"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_sort_key() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="827"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9414">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9406">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_time_detected"
                      invoker="get_time_detected"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8935">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeDetected"&gt;"TimeDetected"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="829"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8943">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8937">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_time_media_detected"
                      invoker="get_time_media_detected"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8968">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeMediaDetected"&gt;"TimeMediaDetected"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="831"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8976">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8970">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_vendor"
                      invoker="get_vendor"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8326">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Vendor"&gt;"Vendor"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_vendor() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="833"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8336">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8328">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_wwn" invoker="get_wwn" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8538">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.WWN"&gt;"WWN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_wwn() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="835"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8548">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8540">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_eject">
        <source-position filename="udisks-generated.h" line="772"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_power_off">
        <source-position filename="udisks-generated.h" line="837"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_configuration">
        <source-position filename="udisks-generated.h" line="777"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_eject" c:identifier="udisks_drive_call_eject">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9553">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.Eject"&gt;Eject()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_call_eject_finish() to get the result of the operation.

See udisks_drive_call_eject_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="874"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9555">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9556">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9557">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9558">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9559">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_eject_finish"
              c:identifier="udisks_drive_call_eject_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9586">Finishes an operation started with udisks_drive_call_eject().</doc>
        <source-position filename="udisks-generated.h" line="881"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9594">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9588">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9589">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_call_eject().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_eject_sync"
              c:identifier="udisks_drive_call_eject_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9613">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.Eject"&gt;Eject()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_call_eject() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="886"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9624">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9615">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9616">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9617">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_power_off"
              c:identifier="udisks_drive_call_power_off"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9755">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.PowerOff"&gt;PowerOff()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_call_power_off_finish() to get the result of the operation.

See udisks_drive_call_power_off_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="912"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9757">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9758">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9759">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9760">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9761">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_power_off_finish"
              c:identifier="udisks_drive_call_power_off_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9790">Finishes an operation started with udisks_drive_call_power_off().</doc>
        <source-position filename="udisks-generated.h" line="919"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9798">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9792">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9793">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_call_power_off().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_power_off_sync"
              c:identifier="udisks_drive_call_power_off_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9819">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.PowerOff"&gt;PowerOff()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_call_power_off() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="924"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9830">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9821">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9822">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9823">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_configuration"
              c:identifier="udisks_drive_call_set_configuration">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9651">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.SetConfiguration"&gt;SetConfiguration()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_call_set_configuration_finish() to get the result of the operation.

See udisks_drive_call_set_configuration_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="892"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9653">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9654">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9655">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9656">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9657">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9658">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_configuration_finish"
              c:identifier="udisks_drive_call_set_configuration_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9687">Finishes an operation started with udisks_drive_call_set_configuration().</doc>
        <source-position filename="udisks-generated.h" line="900"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9695">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9689">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9690">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_call_set_configuration().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_configuration_sync"
              c:identifier="udisks_drive_call_set_configuration_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9714">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.SetConfiguration"&gt;SetConfiguration()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_call_set_configuration() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="905"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9726">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9716">A #UDisksDriveProxy.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9717">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9718">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9719">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_eject" c:identifier="udisks_drive_complete_eject">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9859">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.Eject"&gt;Eject()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="859"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9861">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9862">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_power_off"
              c:identifier="udisks_drive_complete_power_off"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9895">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.PowerOff"&gt;PowerOff()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="867"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9897">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9898">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_configuration"
              c:identifier="udisks_drive_complete_set_configuration">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9877">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.SetConfiguration"&gt;SetConfiguration()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="863"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9879">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9880">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_configuration"
              c:identifier="udisks_drive_dup_configuration"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8664">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="958"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8672">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8666">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_connection_bus"
              c:identifier="udisks_drive_dup_connection_bus"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9252">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.ConnectionBus"&gt;"ConnectionBus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1009"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9260">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9254">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id"
              c:identifier="udisks_drive_dup_id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8611">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Id"&gt;"Id"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="954"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8619">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8613">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_media"
              c:identifier="udisks_drive_dup_media"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8717">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Media"&gt;"Media"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="962"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8725">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8719">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_media_compatibility"
              c:identifier="udisks_drive_dup_media_compatibility"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8770">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaCompatibility"&gt;"MediaCompatibility"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="966"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8778">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8772">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_model"
              c:identifier="udisks_drive_dup_model"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8399">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Model"&gt;"Model"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="938"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8407">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8401">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_revision"
              c:identifier="udisks_drive_dup_revision"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8452">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Revision"&gt;"Revision"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="942"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8460">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8454">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_seat"
              c:identifier="udisks_drive_dup_seat"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9305">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Seat"&gt;"Seat"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1013"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9313">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9307">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_serial"
              c:identifier="udisks_drive_dup_serial"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8505">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Serial"&gt;"Serial"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="946"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8513">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8507">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_sibling_id"
              c:identifier="udisks_drive_dup_sibling_id"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9516">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SiblingId"&gt;"SiblingId"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1030"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9524">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9518">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_sort_key"
              c:identifier="udisks_drive_dup_sort_key"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9424">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SortKey"&gt;"SortKey"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1023"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9432">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9426">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_vendor"
              c:identifier="udisks_drive_dup_vendor"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8346">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Vendor"&gt;"Vendor"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="934"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8354">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8348">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_wwn"
              c:identifier="udisks_drive_dup_wwn"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8558">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.WWN"&gt;"WWN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="950"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8566">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8560">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_power_off"
              c:identifier="udisks_drive_get_can_power_off"
              glib:get-property="can-power-off"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9457">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.CanPowerOff"&gt;"CanPowerOff"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1026"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9465">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9459">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_configuration"
              c:identifier="udisks_drive_get_configuration"
              glib:get-property="configuration"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8644">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="957"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8654">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8646">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connection_bus"
              c:identifier="udisks_drive_get_connection_bus"
              glib:get-property="connection-bus"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9232">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.ConnectionBus"&gt;"ConnectionBus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_connection_bus() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1008"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9242">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9234">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ejectable"
              c:identifier="udisks_drive_get_ejectable"
              glib:get-property="ejectable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9371">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Ejectable"&gt;"Ejectable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1019"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9379">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9373">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="udisks_drive_get_id"
              glib:get-property="id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8591">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Id"&gt;"Id"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_id() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="953"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8601">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8593">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media"
              c:identifier="udisks_drive_get_media"
              glib:get-property="media"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8697">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Media"&gt;"Media"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_media() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="961"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8707">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8699">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_available"
              c:identifier="udisks_drive_get_media_available"
              glib:get-property="media-available"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8836">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaAvailable"&gt;"MediaAvailable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="972"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8844">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8838">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_change_detected"
              c:identifier="udisks_drive_get_media_change_detected"
              glib:get-property="media-change-detected"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8869">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaChangeDetected"&gt;"MediaChangeDetected"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="975"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8877">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8871">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_compatibility"
              c:identifier="udisks_drive_get_media_compatibility"
              glib:get-property="media-compatibility"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8750">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaCompatibility"&gt;"MediaCompatibility"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_media_compatibility() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="965"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8760">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8752">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_removable"
              c:identifier="udisks_drive_get_media_removable"
              glib:get-property="media-removable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8803">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaRemovable"&gt;"MediaRemovable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="969"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8811">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8805">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_model"
              c:identifier="udisks_drive_get_model"
              glib:get-property="model"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8379">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Model"&gt;"Model"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_model() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="937"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8389">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8381">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_optical"
              c:identifier="udisks_drive_get_optical"
              glib:get-property="optical"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9001">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Optical"&gt;"Optical"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="987"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9009">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9003">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_optical_blank"
              c:identifier="udisks_drive_get_optical_blank"
              glib:get-property="optical-blank"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9034">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalBlank"&gt;"OpticalBlank"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="990"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9042">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9036">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_optical_num_audio_tracks"
              c:identifier="udisks_drive_get_optical_num_audio_tracks"
              glib:get-property="optical-num-audio-tracks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9100">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumAudioTracks"&gt;"OpticalNumAudioTracks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="996"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9108">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9102">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_optical_num_data_tracks"
              c:identifier="udisks_drive_get_optical_num_data_tracks"
              glib:get-property="optical-num-data-tracks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9133">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumDataTracks"&gt;"OpticalNumDataTracks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="999"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9141">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9135">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_optical_num_sessions"
              c:identifier="udisks_drive_get_optical_num_sessions"
              glib:get-property="optical-num-sessions"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9166">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumSessions"&gt;"OpticalNumSessions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1002"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9174">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9168">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_optical_num_tracks"
              c:identifier="udisks_drive_get_optical_num_tracks"
              glib:get-property="optical-num-tracks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9067">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumTracks"&gt;"OpticalNumTracks"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="993"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9075">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9069">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_removable"
              c:identifier="udisks_drive_get_removable"
              glib:get-property="removable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9338">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Removable"&gt;"Removable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1016"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9346">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9340">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_revision"
              c:identifier="udisks_drive_get_revision"
              glib:get-property="revision"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8432">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Revision"&gt;"Revision"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_revision() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="941"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8442">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8434">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rotation_rate"
              c:identifier="udisks_drive_get_rotation_rate"
              glib:get-property="rotation-rate"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9199">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.RotationRate"&gt;"RotationRate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1005"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9207">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9201">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_seat"
              c:identifier="udisks_drive_get_seat"
              glib:get-property="seat"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9285">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Seat"&gt;"Seat"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_seat() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1012"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9295">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9287">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_serial"
              c:identifier="udisks_drive_get_serial"
              glib:get-property="serial"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8485">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Serial"&gt;"Serial"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_serial() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="945"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8495">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8487">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sibling_id"
              c:identifier="udisks_drive_get_sibling_id"
              glib:get-property="sibling-id"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9494">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SiblingId"&gt;"SiblingId"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_sibling_id() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1029"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9504">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9496">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_drive_get_size"
              glib:get-property="size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8902">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="978"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8910">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8904">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sort_key"
              c:identifier="udisks_drive_get_sort_key"
              glib:get-property="sort-key"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9404">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SortKey"&gt;"SortKey"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_sort_key() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1022"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="9414">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9406">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_time_detected"
              c:identifier="udisks_drive_get_time_detected"
              glib:get-property="time-detected"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8935">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeDetected"&gt;"TimeDetected"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="981"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8943">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8937">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_time_media_detected"
              c:identifier="udisks_drive_get_time_media_detected"
              glib:get-property="time-media-detected"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8968">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeMediaDetected"&gt;"TimeMediaDetected"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="984"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8976">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8970">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vendor"
              c:identifier="udisks_drive_get_vendor"
              glib:get-property="vendor"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8326">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Vendor"&gt;"Vendor"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_vendor() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="933"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8336">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8328">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wwn"
              c:identifier="udisks_drive_get_wwn"
              glib:get-property="wwn"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8538">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.WWN"&gt;"WWN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_dup_wwn() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="949"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8548">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8540">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_can_power_off"
              c:identifier="udisks_drive_set_can_power_off"
              glib:set-property="can-power-off"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9477">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.CanPowerOff"&gt;"CanPowerOff"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1027"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9479">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9480">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_configuration"
              c:identifier="udisks_drive_set_configuration"
              glib:set-property="configuration"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8682">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Configuration"&gt;"Configuration"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="959"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8684">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8685">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_connection_bus"
              c:identifier="udisks_drive_set_connection_bus"
              glib:set-property="connection-bus"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9270">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.ConnectionBus"&gt;"ConnectionBus"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1010"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9272">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9273">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ejectable"
              c:identifier="udisks_drive_set_ejectable"
              glib:set-property="ejectable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9389">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Ejectable"&gt;"Ejectable"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1020"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9391">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9392">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id"
              c:identifier="udisks_drive_set_id"
              glib:set-property="id"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8629">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Id"&gt;"Id"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="955"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8631">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8632">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_media"
              c:identifier="udisks_drive_set_media"
              glib:set-property="media"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8735">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Media"&gt;"Media"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="963"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8737">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8738">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_media_available"
              c:identifier="udisks_drive_set_media_available"
              glib:set-property="media-available"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8854">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaAvailable"&gt;"MediaAvailable"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="973"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8856">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8857">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_media_change_detected"
              c:identifier="udisks_drive_set_media_change_detected"
              glib:set-property="media-change-detected"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8887">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaChangeDetected"&gt;"MediaChangeDetected"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="976"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8889">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8890">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_media_compatibility"
              c:identifier="udisks_drive_set_media_compatibility"
              glib:set-property="media-compatibility"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8788">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaCompatibility"&gt;"MediaCompatibility"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="967"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8790">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8791">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_media_removable"
              c:identifier="udisks_drive_set_media_removable"
              glib:set-property="media-removable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8821">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaRemovable"&gt;"MediaRemovable"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="970"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8823">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8824">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_model"
              c:identifier="udisks_drive_set_model"
              glib:set-property="model"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8417">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Model"&gt;"Model"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="939"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8419">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8420">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_optical"
              c:identifier="udisks_drive_set_optical"
              glib:set-property="optical"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9019">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Optical"&gt;"Optical"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="988"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9021">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9022">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_optical_blank"
              c:identifier="udisks_drive_set_optical_blank"
              glib:set-property="optical-blank"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9052">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalBlank"&gt;"OpticalBlank"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="991"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9054">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9055">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_optical_num_audio_tracks"
              c:identifier="udisks_drive_set_optical_num_audio_tracks"
              glib:set-property="optical-num-audio-tracks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9118">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumAudioTracks"&gt;"OpticalNumAudioTracks"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="997"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9120">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9121">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_optical_num_data_tracks"
              c:identifier="udisks_drive_set_optical_num_data_tracks"
              glib:set-property="optical-num-data-tracks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9151">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumDataTracks"&gt;"OpticalNumDataTracks"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1000"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9153">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9154">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_optical_num_sessions"
              c:identifier="udisks_drive_set_optical_num_sessions"
              glib:set-property="optical-num-sessions"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9184">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumSessions"&gt;"OpticalNumSessions"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1003"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9186">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9187">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_optical_num_tracks"
              c:identifier="udisks_drive_set_optical_num_tracks"
              glib:set-property="optical-num-tracks"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9085">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumTracks"&gt;"OpticalNumTracks"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="994"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9087">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9088">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_removable"
              c:identifier="udisks_drive_set_removable"
              glib:set-property="removable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9356">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Removable"&gt;"Removable"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1017"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9358">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9359">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_revision"
              c:identifier="udisks_drive_set_revision"
              glib:set-property="revision"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8470">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Revision"&gt;"Revision"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="943"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8472">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8473">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rotation_rate"
              c:identifier="udisks_drive_set_rotation_rate"
              glib:set-property="rotation-rate"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9217">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.RotationRate"&gt;"RotationRate"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1006"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9219">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9220">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_seat"
              c:identifier="udisks_drive_set_seat"
              glib:set-property="seat"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9323">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Seat"&gt;"Seat"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1014"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9325">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9326">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_serial"
              c:identifier="udisks_drive_set_serial"
              glib:set-property="serial"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8523">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Serial"&gt;"Serial"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="947"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8525">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8526">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sibling_id"
              c:identifier="udisks_drive_set_sibling_id"
              glib:set-property="sibling-id"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9536">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SiblingId"&gt;"SiblingId"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1031"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9538">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9539">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_drive_set_size"
              glib:set-property="size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8920">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="979"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8922">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8923">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sort_key"
              c:identifier="udisks_drive_set_sort_key"
              glib:set-property="sort-key"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9442">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SortKey"&gt;"SortKey"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1024"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9444">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9445">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_time_detected"
              c:identifier="udisks_drive_set_time_detected"
              glib:set-property="time-detected"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8953">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeDetected"&gt;"TimeDetected"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="982"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8955">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8956">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_time_media_detected"
              c:identifier="udisks_drive_set_time_media_detected"
              glib:set-property="time-media-detected"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8986">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeMediaDetected"&gt;"TimeMediaDetected"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="985"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8988">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8989">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vendor"
              c:identifier="udisks_drive_set_vendor"
              glib:set-property="vendor"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8364">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Vendor"&gt;"Vendor"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="935"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8366">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8367">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_wwn"
              c:identifier="udisks_drive_set_wwn"
              glib:set-property="wwn"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8576">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.WWN"&gt;"WWN"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="951"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8578">A #UDisksDrive.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8579">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="can-power-off"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_can_power_off"
                getter="get_can_power_off"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8302">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.CanPowerOff"&gt;"CanPowerOff"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="configuration"
                writable="1"
                transfer-ownership="none"
                setter="set_configuration"
                getter="get_configuration">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8113">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Configuration"&gt;"Configuration"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="connection-bus"
                writable="1"
                transfer-ownership="none"
                setter="set_connection_bus"
                getter="get_connection_bus"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8257">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.ConnectionBus"&gt;"ConnectionBus"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ejectable"
                writable="1"
                transfer-ownership="none"
                setter="set_ejectable"
                getter="get_ejectable"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8284">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Ejectable"&gt;"Ejectable"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="id"
                writable="1"
                transfer-ownership="none"
                setter="set_id"
                getter="get_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8104">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Id"&gt;"Id"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="media"
                writable="1"
                transfer-ownership="none"
                setter="set_media"
                getter="get_media"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8122">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Media"&gt;"Media"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="media-available"
                writable="1"
                transfer-ownership="none"
                setter="set_media_available"
                getter="get_media_available"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8149">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaAvailable"&gt;"MediaAvailable"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="media-change-detected"
                writable="1"
                transfer-ownership="none"
                setter="set_media_change_detected"
                getter="get_media_change_detected"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8158">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaChangeDetected"&gt;"MediaChangeDetected"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="media-compatibility"
                writable="1"
                transfer-ownership="none"
                setter="set_media_compatibility"
                getter="get_media_compatibility">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8131">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaCompatibility"&gt;"MediaCompatibility"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="media-removable"
                writable="1"
                transfer-ownership="none"
                setter="set_media_removable"
                getter="get_media_removable"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8140">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.MediaRemovable"&gt;"MediaRemovable"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="model"
                writable="1"
                transfer-ownership="none"
                setter="set_model"
                getter="get_model"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8068">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Model"&gt;"Model"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="optical"
                writable="1"
                transfer-ownership="none"
                setter="set_optical"
                getter="get_optical"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8194">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Optical"&gt;"Optical"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="optical-blank"
                writable="1"
                transfer-ownership="none"
                setter="set_optical_blank"
                getter="get_optical_blank"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8203">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalBlank"&gt;"OpticalBlank"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="optical-num-audio-tracks"
                writable="1"
                transfer-ownership="none"
                setter="set_optical_num_audio_tracks"
                getter="get_optical_num_audio_tracks"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8221">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumAudioTracks"&gt;"OpticalNumAudioTracks"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="optical-num-data-tracks"
                writable="1"
                transfer-ownership="none"
                setter="set_optical_num_data_tracks"
                getter="get_optical_num_data_tracks"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8230">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumDataTracks"&gt;"OpticalNumDataTracks"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="optical-num-sessions"
                writable="1"
                transfer-ownership="none"
                setter="set_optical_num_sessions"
                getter="get_optical_num_sessions"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8239">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumSessions"&gt;"OpticalNumSessions"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="optical-num-tracks"
                writable="1"
                transfer-ownership="none"
                setter="set_optical_num_tracks"
                getter="get_optical_num_tracks"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8212">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.OpticalNumTracks"&gt;"OpticalNumTracks"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="removable"
                writable="1"
                transfer-ownership="none"
                setter="set_removable"
                getter="get_removable"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8275">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Removable"&gt;"Removable"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="revision"
                writable="1"
                transfer-ownership="none"
                setter="set_revision"
                getter="get_revision"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8077">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Revision"&gt;"Revision"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="rotation-rate"
                writable="1"
                transfer-ownership="none"
                setter="set_rotation_rate"
                getter="get_rotation_rate"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8248">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.RotationRate"&gt;"RotationRate"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="seat"
                writable="1"
                transfer-ownership="none"
                setter="set_seat"
                getter="get_seat"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8266">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Seat"&gt;"Seat"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="serial"
                writable="1"
                transfer-ownership="none"
                setter="set_serial"
                getter="get_serial"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8086">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Serial"&gt;"Serial"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="sibling-id"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_sibling_id"
                getter="get_sibling_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8313">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SiblingId"&gt;"SiblingId"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="size"
                writable="1"
                transfer-ownership="none"
                setter="set_size"
                getter="get_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8167">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="sort-key"
                writable="1"
                transfer-ownership="none"
                setter="set_sort_key"
                getter="get_sort_key"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8293">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.SortKey"&gt;"SortKey"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="time-detected"
                writable="1"
                transfer-ownership="none"
                setter="set_time_detected"
                getter="get_time_detected"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8176">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeDetected"&gt;"TimeDetected"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="time-media-detected"
                writable="1"
                transfer-ownership="none"
                setter="set_time_media_detected"
                getter="get_time_media_detected"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8185">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.TimeMediaDetected"&gt;"TimeMediaDetected"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="vendor"
                writable="1"
                transfer-ownership="none"
                setter="set_vendor"
                getter="get_vendor"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8059">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.Vendor"&gt;"Vendor"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="wwn"
                writable="1"
                transfer-ownership="none"
                setter="set_wwn"
                getter="get_wwn"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8095">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive.WWN"&gt;"WWN"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-eject" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="7986">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.Eject"&gt;Eject()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_complete_eject() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="7996">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7989">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="7990">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-power-off" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8033">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.PowerOff"&gt;PowerOff()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_complete_power_off() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8043">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8036">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8037">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-configuration" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="8009">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive.SetConfiguration"&gt;SetConfiguration()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_complete_set_configuration() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="8020">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8012">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8013">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8014">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <interface name="DriveAta"
               c:symbol-prefix="drive_ata"
               c:type="UDisksDriveAta"
               glib:type-name="UDisksDriveAta"
               glib:get-type="udisks_drive_ata_get_type"
               glib:type-struct="DriveAtaIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="12533">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="1252"/>
      <function name="interface_info"
                c:identifier="udisks_drive_ata_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12360">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="1260"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12365">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_drive_ata_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12373">Overrides all #GObject properties in the #UDisksDriveAta interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="1261"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12381">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12375">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12376">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_aam_enabled"
                      invoker="get_aam_enabled"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13582">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamEnabled"&gt;"AamEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1196"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13590">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13584">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_aam_supported"
                      invoker="get_aam_supported"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13549">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamSupported"&gt;"AamSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1198"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13557">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13551">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_aam_vendor_recommended_value"
                      invoker="get_aam_vendor_recommended_value"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13615">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamVendorRecommendedValue"&gt;"AamVendorRecommendedValue"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1200"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13623">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13617">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_apm_enabled"
                      invoker="get_apm_enabled"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13516">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmEnabled"&gt;"ApmEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1202"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13524">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13518">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_apm_supported"
                      invoker="get_apm_supported"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13483">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmSupported"&gt;"ApmSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1204"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13491">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13485">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_pm_enabled"
                      invoker="get_pm_enabled"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13450">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmEnabled"&gt;"PmEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1206"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13458">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13452">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_pm_supported"
                      invoker="get_pm_supported"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13417">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmSupported"&gt;"PmSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1208"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13425">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13419">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_read_lookahead_enabled"
                      invoker="get_read_lookahead_enabled"
                      version="2.1.7"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13759">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadEnabled"&gt;"ReadLookaheadEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1248"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13767">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13761">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_read_lookahead_supported"
                      invoker="get_read_lookahead_supported"
                      version="2.1.7"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13722">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadSupported"&gt;"ReadLookaheadSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1250"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13730">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13724">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_security_enhanced_erase_unit_minutes"
                      invoker="get_security_enhanced_erase_unit_minutes"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13829">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEnhancedEraseUnitMinutes"&gt;"SecurityEnhancedEraseUnitMinutes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1210"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13837">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13831">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_security_erase_unit_minutes"
                      invoker="get_security_erase_unit_minutes"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13796">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnitMinutes"&gt;"SecurityEraseUnitMinutes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1212"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13804">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13798">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_security_frozen"
                      invoker="get_security_frozen"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13862">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityFrozen"&gt;"SecurityFrozen"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1214"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13870">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13864">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_enabled"
                      invoker="get_smart_enabled"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13067">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartEnabled"&gt;"SmartEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1216"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13075">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13069">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_failing"
                      invoker="get_smart_failing"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13133">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartFailing"&gt;"SmartFailing"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1218"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13141">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13135">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_num_attributes_failed_in_the_past"
                      invoker="get_smart_num_attributes_failed_in_the_past"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13265">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailedInThePast"&gt;"SmartNumAttributesFailedInThePast"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1220"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13273">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13267">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_num_attributes_failing"
                      invoker="get_smart_num_attributes_failing"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13232">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailing"&gt;"SmartNumAttributesFailing"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1222"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13240">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13234">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_num_bad_sectors"
                      invoker="get_smart_num_bad_sectors"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13298">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumBadSectors"&gt;"SmartNumBadSectors"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1224"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13306">The property value.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13300">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_power_on_seconds"
                      invoker="get_smart_power_on_seconds"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13166">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartPowerOnSeconds"&gt;"SmartPowerOnSeconds"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1226"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13174">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13168">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_selftest_percent_remaining"
                      invoker="get_smart_selftest_percent_remaining"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13384">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestPercentRemaining"&gt;"SmartSelftestPercentRemaining"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1228"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13392">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13386">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_selftest_status"
                      invoker="get_smart_selftest_status"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13331">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_ata_dup_smart_selftest_status() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1230"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13341">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13333">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_supported"
                      invoker="get_smart_supported"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13034">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSupported"&gt;"SmartSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1232"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13042">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13036">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_temperature"
                      invoker="get_smart_temperature"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13199">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartTemperature"&gt;"SmartTemperature"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1234"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13207">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13201">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_updated"
                      invoker="get_smart_updated"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13100">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartUpdated"&gt;"SmartUpdated"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1236"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13108">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13102">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_write_cache_enabled"
                      invoker="get_write_cache_enabled"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13685">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheEnabled"&gt;"WriteCacheEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1244"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13693">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13687">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_write_cache_supported"
                      invoker="get_write_cache_supported"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13648">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheSupported"&gt;"WriteCacheSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1246"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13656">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13650">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_pm_get_state">
        <source-position filename="udisks-generated.h" line="1155"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_pm_standby">
        <source-position filename="udisks-generated.h" line="1160"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_pm_wakeup">
        <source-position filename="udisks-generated.h" line="1165"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_security_erase_unit">
        <source-position filename="udisks-generated.h" line="1170"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_get_attributes">
        <source-position filename="udisks-generated.h" line="1175"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_selftest_abort">
        <source-position filename="udisks-generated.h" line="1180"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_selftest_start">
        <source-position filename="udisks-generated.h" line="1185"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_set_enabled">
        <source-position filename="udisks-generated.h" line="1238"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_update">
        <source-position filename="udisks-generated.h" line="1191"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_pm_get_state"
              c:identifier="udisks_drive_ata_call_pm_get_state">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14409">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmGetState"&gt;PmGetState()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_call_pm_get_state_finish() to get the result of the operation.

See udisks_drive_ata_call_pm_get_state_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1402"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14411">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14412">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14413">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14414">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14415">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_get_state_finish"
              c:identifier="udisks_drive_ata_call_pm_get_state_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14442">Finishes an operation started with udisks_drive_ata_call_pm_get_state().</doc>
        <source-position filename="udisks-generated.h" line="1409"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14451">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14444">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="out_state"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14445">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint8" c:type="guchar*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14446">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_pm_get_state().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_get_state_sync"
              c:identifier="udisks_drive_ata_call_pm_get_state_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14472">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmGetState"&gt;PmGetState()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_pm_get_state() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1415"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14484">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14474">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14475">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_state"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14476">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint8" c:type="guchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14477">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_standby"
              c:identifier="udisks_drive_ata_call_pm_standby">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14513">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmStandby"&gt;PmStandby()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_call_pm_standby_finish() to get the result of the operation.

See udisks_drive_ata_call_pm_standby_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1422"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14515">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14516">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14517">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14518">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14519">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_standby_finish"
              c:identifier="udisks_drive_ata_call_pm_standby_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14546">Finishes an operation started with udisks_drive_ata_call_pm_standby().</doc>
        <source-position filename="udisks-generated.h" line="1429"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14554">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14548">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14549">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_pm_standby().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_standby_sync"
              c:identifier="udisks_drive_ata_call_pm_standby_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14573">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmStandby"&gt;PmStandby()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_pm_standby() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1434"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14584">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14575">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14576">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14577">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_wakeup"
              c:identifier="udisks_drive_ata_call_pm_wakeup">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14611">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmWakeup"&gt;PmWakeup()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_call_pm_wakeup_finish() to get the result of the operation.

See udisks_drive_ata_call_pm_wakeup_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1440"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14613">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14614">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14615">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14616">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14617">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_wakeup_finish"
              c:identifier="udisks_drive_ata_call_pm_wakeup_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14644">Finishes an operation started with udisks_drive_ata_call_pm_wakeup().</doc>
        <source-position filename="udisks-generated.h" line="1447"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14652">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14646">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14647">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_pm_wakeup().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_pm_wakeup_sync"
              c:identifier="udisks_drive_ata_call_pm_wakeup_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14671">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmWakeup"&gt;PmWakeup()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_pm_wakeup() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1452"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14682">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14673">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14674">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14675">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_security_erase_unit"
              c:identifier="udisks_drive_ata_call_security_erase_unit">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14709">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnit"&gt;SecurityEraseUnit()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_call_security_erase_unit_finish() to get the result of the operation.

See udisks_drive_ata_call_security_erase_unit_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1458"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14711">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14712">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14713">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14714">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14715">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_security_erase_unit_finish"
              c:identifier="udisks_drive_ata_call_security_erase_unit_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14742">Finishes an operation started with udisks_drive_ata_call_security_erase_unit().</doc>
        <source-position filename="udisks-generated.h" line="1465"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14750">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14744">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14745">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_security_erase_unit().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_security_erase_unit_sync"
              c:identifier="udisks_drive_ata_call_security_erase_unit_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14769">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnit"&gt;SecurityEraseUnit()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_security_erase_unit() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1470"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14780">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14771">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14772">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14773">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_get_attributes"
              c:identifier="udisks_drive_ata_call_smart_get_attributes">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13993">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartGetAttributes"&gt;SmartGetAttributes()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_call_smart_get_attributes_finish() to get the result of the operation.

See udisks_drive_ata_call_smart_get_attributes_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1324"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13995">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13996">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13997">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13998">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13999">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_get_attributes_finish"
              c:identifier="udisks_drive_ata_call_smart_get_attributes_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14026">Finishes an operation started with udisks_drive_ata_call_smart_get_attributes().</doc>
        <source-position filename="udisks-generated.h" line="1331"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14035">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14028">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="out_attributes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14029">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14030">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_smart_get_attributes().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_get_attributes_sync"
              c:identifier="udisks_drive_ata_call_smart_get_attributes_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14056">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartGetAttributes"&gt;SmartGetAttributes()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_smart_get_attributes() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1337"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14068">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14058">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14059">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_attributes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14060">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14061">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_abort"
              c:identifier="udisks_drive_ata_call_smart_selftest_abort">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14201">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestAbort"&gt;SmartSelftestAbort()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_call_smart_selftest_abort_finish() to get the result of the operation.

See udisks_drive_ata_call_smart_selftest_abort_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1364"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14203">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14204">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14205">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14206">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14207">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_abort_finish"
              c:identifier="udisks_drive_ata_call_smart_selftest_abort_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14234">Finishes an operation started with udisks_drive_ata_call_smart_selftest_abort().</doc>
        <source-position filename="udisks-generated.h" line="1371"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14242">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14236">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14237">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_smart_selftest_abort().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_abort_sync"
              c:identifier="udisks_drive_ata_call_smart_selftest_abort_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14261">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestAbort"&gt;SmartSelftestAbort()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_smart_selftest_abort() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1376"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14272">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14263">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14264">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14265">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_start"
              c:identifier="udisks_drive_ata_call_smart_selftest_start">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14097">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStart"&gt;SmartSelftestStart()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_call_smart_selftest_start_finish() to get the result of the operation.

See udisks_drive_ata_call_smart_selftest_start_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1344"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14099">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14100">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14101">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14102">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14103">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14104">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_start_finish"
              c:identifier="udisks_drive_ata_call_smart_selftest_start_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14133">Finishes an operation started with udisks_drive_ata_call_smart_selftest_start().</doc>
        <source-position filename="udisks-generated.h" line="1352"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14141">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14135">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14136">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_smart_selftest_start().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_start_sync"
              c:identifier="udisks_drive_ata_call_smart_selftest_start_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14160">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStart"&gt;SmartSelftestStart()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_smart_selftest_start() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1357"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14172">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14162">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14163">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14164">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14165">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_set_enabled"
              c:identifier="udisks_drive_ata_call_smart_set_enabled"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14299">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSetEnabled"&gt;SmartSetEnabled()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_call_smart_set_enabled_finish() to get the result of the operation.

See udisks_drive_ata_call_smart_set_enabled_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1382"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14301">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14302">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14303">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14304">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14305">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14306">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_set_enabled_finish"
              c:identifier="udisks_drive_ata_call_smart_set_enabled_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14337">Finishes an operation started with udisks_drive_ata_call_smart_set_enabled().</doc>
        <source-position filename="udisks-generated.h" line="1390"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14345">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14339">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14340">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_smart_set_enabled().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_set_enabled_sync"
              c:identifier="udisks_drive_ata_call_smart_set_enabled_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14366">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSetEnabled"&gt;SmartSetEnabled()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_smart_set_enabled() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1395"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="14378">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14368">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14369">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14370">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14371">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_update"
              c:identifier="udisks_drive_ata_call_smart_update">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13895">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartUpdate"&gt;SmartUpdate()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_call_smart_update_finish() to get the result of the operation.

See udisks_drive_ata_call_smart_update_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1306"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13897">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13898">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13899">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13900">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13901">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_update_finish"
              c:identifier="udisks_drive_ata_call_smart_update_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13928">Finishes an operation started with udisks_drive_ata_call_smart_update().</doc>
        <source-position filename="udisks-generated.h" line="1313"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13936">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13930">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13931">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_call_smart_update().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_update_sync"
              c:identifier="udisks_drive_ata_call_smart_update_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13955">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartUpdate"&gt;SmartUpdate()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_ata_call_smart_update() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1318"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13966">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13957">A #UDisksDriveAtaProxy.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13958">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13959">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_pm_get_state"
              c:identifier="udisks_drive_ata_complete_pm_get_state">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14902">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmGetState"&gt;PmGetState()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1286"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14904">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14905">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14906">Parameter to return.</doc>
            <type name="guint8" c:type="guchar"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_pm_standby"
              c:identifier="udisks_drive_ata_complete_pm_standby">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14923">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmStandby"&gt;PmStandby()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1291"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14925">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14926">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_pm_wakeup"
              c:identifier="udisks_drive_ata_complete_pm_wakeup">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14941">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmWakeup"&gt;PmWakeup()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1295"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14943">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14944">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_security_erase_unit"
              c:identifier="udisks_drive_ata_complete_security_erase_unit">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14959">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnit"&gt;SecurityEraseUnit()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1299"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14961">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14962">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_get_attributes"
              c:identifier="udisks_drive_ata_complete_smart_get_attributes">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14825">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartGetAttributes"&gt;SmartGetAttributes()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1269"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14827">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14828">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14829">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_selftest_abort"
              c:identifier="udisks_drive_ata_complete_smart_selftest_abort">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14864">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestAbort"&gt;SmartSelftestAbort()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1278"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14866">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14867">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_selftest_start"
              c:identifier="udisks_drive_ata_complete_smart_selftest_start">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14846">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStart"&gt;SmartSelftestStart()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1274"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14848">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14849">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_set_enabled"
              c:identifier="udisks_drive_ata_complete_smart_set_enabled"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14882">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSetEnabled"&gt;SmartSetEnabled()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1282"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14884">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14885">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_update"
              c:identifier="udisks_drive_ata_complete_smart_update">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14807">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartUpdate"&gt;SmartUpdate()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1265"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14809">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="14810">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_smart_selftest_status"
              c:identifier="udisks_drive_ata_dup_smart_selftest_status"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13351">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1507"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13359">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13353">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_aam_enabled"
              c:identifier="udisks_drive_ata_get_aam_enabled"
              glib:get-property="aam-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13582">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamEnabled"&gt;"AamEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1528"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13590">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13584">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_aam_supported"
              c:identifier="udisks_drive_ata_get_aam_supported"
              glib:get-property="aam-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13549">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamSupported"&gt;"AamSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1525"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13557">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13551">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_aam_vendor_recommended_value"
              c:identifier="udisks_drive_ata_get_aam_vendor_recommended_value"
              glib:get-property="aam-vendor-recommended-value"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13615">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamVendorRecommendedValue"&gt;"AamVendorRecommendedValue"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1531"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13623">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13617">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_apm_enabled"
              c:identifier="udisks_drive_ata_get_apm_enabled"
              glib:get-property="apm-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13516">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmEnabled"&gt;"ApmEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1522"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13524">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13518">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_apm_supported"
              c:identifier="udisks_drive_ata_get_apm_supported"
              glib:get-property="apm-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13483">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmSupported"&gt;"ApmSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1519"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13491">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13485">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pm_enabled"
              c:identifier="udisks_drive_ata_get_pm_enabled"
              glib:get-property="pm-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13450">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmEnabled"&gt;"PmEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1516"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13458">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13452">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pm_supported"
              c:identifier="udisks_drive_ata_get_pm_supported"
              glib:get-property="pm-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13417">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmSupported"&gt;"PmSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1513"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13425">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13419">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_read_lookahead_enabled"
              c:identifier="udisks_drive_ata_get_read_lookahead_enabled"
              glib:get-property="read-lookahead-enabled"
              version="2.1.7"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13759">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadEnabled"&gt;"ReadLookaheadEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1543"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13767">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13761">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_read_lookahead_supported"
              c:identifier="udisks_drive_ata_get_read_lookahead_supported"
              glib:get-property="read-lookahead-supported"
              version="2.1.7"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13722">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadSupported"&gt;"ReadLookaheadSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1540"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13730">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13724">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_security_enhanced_erase_unit_minutes"
              c:identifier="udisks_drive_ata_get_security_enhanced_erase_unit_minutes"
              glib:get-property="security-enhanced-erase-unit-minutes"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13829">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEnhancedEraseUnitMinutes"&gt;"SecurityEnhancedEraseUnitMinutes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1549"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13837">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13831">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_security_erase_unit_minutes"
              c:identifier="udisks_drive_ata_get_security_erase_unit_minutes"
              glib:get-property="security-erase-unit-minutes"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13796">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnitMinutes"&gt;"SecurityEraseUnitMinutes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1546"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13804">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13798">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_security_frozen"
              c:identifier="udisks_drive_ata_get_security_frozen"
              glib:get-property="security-frozen"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13862">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityFrozen"&gt;"SecurityFrozen"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1552"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13870">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13864">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_enabled"
              c:identifier="udisks_drive_ata_get_smart_enabled"
              glib:get-property="smart-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13067">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartEnabled"&gt;"SmartEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1482"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13075">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13069">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_failing"
              c:identifier="udisks_drive_ata_get_smart_failing"
              glib:get-property="smart-failing"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13133">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartFailing"&gt;"SmartFailing"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1488"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13141">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13135">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_num_attributes_failed_in_the_past"
              c:identifier="udisks_drive_ata_get_smart_num_attributes_failed_in_the_past"
              glib:get-property="smart-num-attributes-failed-in-the-past"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13265">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailedInThePast"&gt;"SmartNumAttributesFailedInThePast"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1500"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13273">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13267">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_num_attributes_failing"
              c:identifier="udisks_drive_ata_get_smart_num_attributes_failing"
              glib:get-property="smart-num-attributes-failing"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13232">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailing"&gt;"SmartNumAttributesFailing"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1497"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13240">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13234">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_num_bad_sectors"
              c:identifier="udisks_drive_ata_get_smart_num_bad_sectors"
              glib:get-property="smart-num-bad-sectors"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13298">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumBadSectors"&gt;"SmartNumBadSectors"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1503"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13306">The property value.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13300">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_power_on_seconds"
              c:identifier="udisks_drive_ata_get_smart_power_on_seconds"
              glib:get-property="smart-power-on-seconds"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13166">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartPowerOnSeconds"&gt;"SmartPowerOnSeconds"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1491"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13174">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13168">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_selftest_percent_remaining"
              c:identifier="udisks_drive_ata_get_smart_selftest_percent_remaining"
              glib:get-property="smart-selftest-percent-remaining"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13384">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestPercentRemaining"&gt;"SmartSelftestPercentRemaining"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1510"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13392">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13386">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_selftest_status"
              c:identifier="udisks_drive_ata_get_smart_selftest_status"
              glib:get-property="smart-selftest-status"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13331">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_ata_dup_smart_selftest_status() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1506"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13341">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13333">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_supported"
              c:identifier="udisks_drive_ata_get_smart_supported"
              glib:get-property="smart-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13034">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSupported"&gt;"SmartSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1479"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13042">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13036">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_temperature"
              c:identifier="udisks_drive_ata_get_smart_temperature"
              glib:get-property="smart-temperature"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13199">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartTemperature"&gt;"SmartTemperature"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1494"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13207">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13201">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_updated"
              c:identifier="udisks_drive_ata_get_smart_updated"
              glib:get-property="smart-updated"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13100">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartUpdated"&gt;"SmartUpdated"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1485"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13108">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13102">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_write_cache_enabled"
              c:identifier="udisks_drive_ata_get_write_cache_enabled"
              glib:get-property="write-cache-enabled"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13685">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheEnabled"&gt;"WriteCacheEnabled"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1537"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13693">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13687">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_write_cache_supported"
              c:identifier="udisks_drive_ata_get_write_cache_supported"
              glib:get-property="write-cache-supported"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13648">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheSupported"&gt;"WriteCacheSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1534"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="13656">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13650">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_aam_enabled"
              c:identifier="udisks_drive_ata_set_aam_enabled"
              glib:set-property="aam-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13600">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamEnabled"&gt;"AamEnabled"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1529"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13602">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13603">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_aam_supported"
              c:identifier="udisks_drive_ata_set_aam_supported"
              glib:set-property="aam-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13567">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamSupported"&gt;"AamSupported"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1526"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13569">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13570">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_aam_vendor_recommended_value"
              c:identifier="udisks_drive_ata_set_aam_vendor_recommended_value"
              glib:set-property="aam-vendor-recommended-value"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13633">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamVendorRecommendedValue"&gt;"AamVendorRecommendedValue"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1532"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13635">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13636">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_apm_enabled"
              c:identifier="udisks_drive_ata_set_apm_enabled"
              glib:set-property="apm-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13534">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmEnabled"&gt;"ApmEnabled"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1523"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13536">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13537">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_apm_supported"
              c:identifier="udisks_drive_ata_set_apm_supported"
              glib:set-property="apm-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13501">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmSupported"&gt;"ApmSupported"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1520"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13503">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13504">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pm_enabled"
              c:identifier="udisks_drive_ata_set_pm_enabled"
              glib:set-property="pm-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13468">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmEnabled"&gt;"PmEnabled"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1517"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13470">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13471">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pm_supported"
              c:identifier="udisks_drive_ata_set_pm_supported"
              glib:set-property="pm-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13435">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmSupported"&gt;"PmSupported"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1514"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13437">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13438">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_read_lookahead_enabled"
              c:identifier="udisks_drive_ata_set_read_lookahead_enabled"
              glib:set-property="read-lookahead-enabled"
              version="2.1.7"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13779">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadEnabled"&gt;"ReadLookaheadEnabled"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1544"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13781">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13782">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_read_lookahead_supported"
              c:identifier="udisks_drive_ata_set_read_lookahead_supported"
              glib:set-property="read-lookahead-supported"
              version="2.1.7"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13742">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadSupported"&gt;"ReadLookaheadSupported"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1541"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13744">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13745">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_security_enhanced_erase_unit_minutes"
              c:identifier="udisks_drive_ata_set_security_enhanced_erase_unit_minutes"
              glib:set-property="security-enhanced-erase-unit-minutes"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13847">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEnhancedEraseUnitMinutes"&gt;"SecurityEnhancedEraseUnitMinutes"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1550"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13849">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13850">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_security_erase_unit_minutes"
              c:identifier="udisks_drive_ata_set_security_erase_unit_minutes"
              glib:set-property="security-erase-unit-minutes"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13814">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnitMinutes"&gt;"SecurityEraseUnitMinutes"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1547"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13816">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13817">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_security_frozen"
              c:identifier="udisks_drive_ata_set_security_frozen"
              glib:set-property="security-frozen"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13880">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityFrozen"&gt;"SecurityFrozen"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1553"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13882">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13883">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_enabled"
              c:identifier="udisks_drive_ata_set_smart_enabled"
              glib:set-property="smart-enabled"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13085">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartEnabled"&gt;"SmartEnabled"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1483"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13087">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13088">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_failing"
              c:identifier="udisks_drive_ata_set_smart_failing"
              glib:set-property="smart-failing"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13151">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartFailing"&gt;"SmartFailing"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1489"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13153">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13154">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_num_attributes_failed_in_the_past"
              c:identifier="udisks_drive_ata_set_smart_num_attributes_failed_in_the_past"
              glib:set-property="smart-num-attributes-failed-in-the-past"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13283">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailedInThePast"&gt;"SmartNumAttributesFailedInThePast"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1501"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13285">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13286">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_num_attributes_failing"
              c:identifier="udisks_drive_ata_set_smart_num_attributes_failing"
              glib:set-property="smart-num-attributes-failing"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13250">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailing"&gt;"SmartNumAttributesFailing"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1498"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13252">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13253">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_num_bad_sectors"
              c:identifier="udisks_drive_ata_set_smart_num_bad_sectors"
              glib:set-property="smart-num-bad-sectors"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13316">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumBadSectors"&gt;"SmartNumBadSectors"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1504"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13318">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13319">The value to set.</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_power_on_seconds"
              c:identifier="udisks_drive_ata_set_smart_power_on_seconds"
              glib:set-property="smart-power-on-seconds"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13184">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartPowerOnSeconds"&gt;"SmartPowerOnSeconds"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1492"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13186">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13187">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_selftest_percent_remaining"
              c:identifier="udisks_drive_ata_set_smart_selftest_percent_remaining"
              glib:set-property="smart-selftest-percent-remaining"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13402">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestPercentRemaining"&gt;"SmartSelftestPercentRemaining"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1511"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13404">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13405">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_selftest_status"
              c:identifier="udisks_drive_ata_set_smart_selftest_status"
              glib:set-property="smart-selftest-status"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13369">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1508"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13371">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13372">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_supported"
              c:identifier="udisks_drive_ata_set_smart_supported"
              glib:set-property="smart-supported"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13052">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSupported"&gt;"SmartSupported"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1480"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13054">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13055">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_temperature"
              c:identifier="udisks_drive_ata_set_smart_temperature"
              glib:set-property="smart-temperature"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13217">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartTemperature"&gt;"SmartTemperature"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1495"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13219">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13220">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_updated"
              c:identifier="udisks_drive_ata_set_smart_updated"
              glib:set-property="smart-updated"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13118">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartUpdated"&gt;"SmartUpdated"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1486"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13120">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13121">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_write_cache_enabled"
              c:identifier="udisks_drive_ata_set_write_cache_enabled"
              glib:set-property="write-cache-enabled"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13705">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheEnabled"&gt;"WriteCacheEnabled"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1538"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13707">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13708">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_write_cache_supported"
              c:identifier="udisks_drive_ata_set_write_cache_supported"
              glib:set-property="write-cache-supported"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13668">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheSupported"&gt;"WriteCacheSupported"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1535"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13670">A #UDisksDriveAta.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13671">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="aam-enabled"
                writable="1"
                transfer-ownership="none"
                setter="set_aam_enabled"
                getter="get_aam_enabled"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12943">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamEnabled"&gt;"AamEnabled"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="aam-supported"
                writable="1"
                transfer-ownership="none"
                setter="set_aam_supported"
                getter="get_aam_supported"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12934">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamSupported"&gt;"AamSupported"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="aam-vendor-recommended-value"
                writable="1"
                transfer-ownership="none"
                setter="set_aam_vendor_recommended_value"
                getter="get_aam_vendor_recommended_value"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12952">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.AamVendorRecommendedValue"&gt;"AamVendorRecommendedValue"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="apm-enabled"
                writable="1"
                transfer-ownership="none"
                setter="set_apm_enabled"
                getter="get_apm_enabled"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12925">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmEnabled"&gt;"ApmEnabled"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="apm-supported"
                writable="1"
                transfer-ownership="none"
                setter="set_apm_supported"
                getter="get_apm_supported"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12916">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ApmSupported"&gt;"ApmSupported"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="pm-enabled"
                writable="1"
                transfer-ownership="none"
                setter="set_pm_enabled"
                getter="get_pm_enabled"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12907">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmEnabled"&gt;"PmEnabled"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="pm-supported"
                writable="1"
                transfer-ownership="none"
                setter="set_pm_supported"
                getter="get_pm_supported"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12898">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.PmSupported"&gt;"PmSupported"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="read-lookahead-enabled"
                version="2.1.7"
                writable="1"
                transfer-ownership="none"
                setter="set_read_lookahead_enabled"
                getter="get_read_lookahead_enabled"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12994">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadEnabled"&gt;"ReadLookaheadEnabled"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="read-lookahead-supported"
                version="2.1.7"
                writable="1"
                transfer-ownership="none"
                setter="set_read_lookahead_supported"
                getter="get_read_lookahead_supported"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12983">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.ReadLookaheadSupported"&gt;"ReadLookaheadSupported"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="security-enhanced-erase-unit-minutes"
                writable="1"
                transfer-ownership="none"
                setter="set_security_enhanced_erase_unit_minutes"
                getter="get_security_enhanced_erase_unit_minutes"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13014">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEnhancedEraseUnitMinutes"&gt;"SecurityEnhancedEraseUnitMinutes"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="security-erase-unit-minutes"
                writable="1"
                transfer-ownership="none"
                setter="set_security_erase_unit_minutes"
                getter="get_security_erase_unit_minutes"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13005">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnitMinutes"&gt;"SecurityEraseUnitMinutes"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="security-frozen"
                writable="1"
                transfer-ownership="none"
                setter="set_security_frozen"
                getter="get_security_frozen"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="13023">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SecurityFrozen"&gt;"SecurityFrozen"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="smart-enabled"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_enabled"
                getter="get_smart_enabled"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12808">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartEnabled"&gt;"SmartEnabled"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="smart-failing"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_failing"
                getter="get_smart_failing"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12826">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartFailing"&gt;"SmartFailing"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="smart-num-attributes-failed-in-the-past"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_num_attributes_failed_in_the_past"
                getter="get_smart_num_attributes_failed_in_the_past"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12862">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailedInThePast"&gt;"SmartNumAttributesFailedInThePast"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="smart-num-attributes-failing"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_num_attributes_failing"
                getter="get_smart_num_attributes_failing"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12853">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumAttributesFailing"&gt;"SmartNumAttributesFailing"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="smart-num-bad-sectors"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_num_bad_sectors"
                getter="get_smart_num_bad_sectors"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12871">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartNumBadSectors"&gt;"SmartNumBadSectors"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="smart-power-on-seconds"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_power_on_seconds"
                getter="get_smart_power_on_seconds"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12835">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartPowerOnSeconds"&gt;"SmartPowerOnSeconds"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="smart-selftest-percent-remaining"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_selftest_percent_remaining"
                getter="get_smart_selftest_percent_remaining"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12889">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestPercentRemaining"&gt;"SmartSelftestPercentRemaining"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="smart-selftest-status"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_selftest_status"
                getter="get_smart_selftest_status"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12880">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="smart-supported"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_supported"
                getter="get_smart_supported"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12799">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartSupported"&gt;"SmartSupported"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="smart-temperature"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_temperature"
                getter="get_smart_temperature"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12844">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartTemperature"&gt;"SmartTemperature"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="smart-updated"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_updated"
                getter="get_smart_updated"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12817">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.SmartUpdated"&gt;"SmartUpdated"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="write-cache-enabled"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_write_cache_enabled"
                getter="get_write_cache_enabled"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12972">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheEnabled"&gt;"WriteCacheEnabled"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="write-cache-supported"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_write_cache_supported"
                getter="get_write_cache_supported"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12961">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-Ata.WriteCacheSupported"&gt;"WriteCacheSupported"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="handle-pm-get-state" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12706">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmGetState"&gt;PmGetState()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_pm_get_state() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12716">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12709">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12710">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-pm-standby" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12729">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmStandby"&gt;PmStandby()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_pm_standby() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12739">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12732">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12733">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-pm-wakeup" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12752">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.PmWakeup"&gt;PmWakeup()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_pm_wakeup() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12762">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12755">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12756">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-security-erase-unit" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12775">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SecurityEraseUnit"&gt;SecurityEraseUnit()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_security_erase_unit() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12785">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12778">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12779">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-get-attributes" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12610">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartGetAttributes"&gt;SmartGetAttributes()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_smart_get_attributes() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12620">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12613">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12614">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-selftest-abort" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12657">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestAbort"&gt;SmartSelftestAbort()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_smart_selftest_abort() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12667">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12660">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12661">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-selftest-start" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12633">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSelftestStart"&gt;SmartSelftestStart()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_smart_selftest_start() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12644">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12636">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12637">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12638">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-set-enabled" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12680">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartSetEnabled"&gt;SmartSetEnabled()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_smart_set_enabled() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12691">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12683">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12684">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12685">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-update" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12587">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-Ata.SmartUpdate"&gt;SmartUpdate()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_ata_complete_smart_update() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12597">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12590">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="12591">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="DriveAtaIface"
            c:type="UDisksDriveAtaIface"
            glib:is-gtype-struct-for="DriveAta">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="12539">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="1252"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12541">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_pm_get_state">
        <callback name="handle_pm_get_state">
          <source-position filename="udisks-generated.h" line="1155"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_pm_standby">
        <callback name="handle_pm_standby">
          <source-position filename="udisks-generated.h" line="1160"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_pm_wakeup">
        <callback name="handle_pm_wakeup">
          <source-position filename="udisks-generated.h" line="1165"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_security_erase_unit">
        <callback name="handle_security_erase_unit">
          <source-position filename="udisks-generated.h" line="1170"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_get_attributes">
        <callback name="handle_smart_get_attributes">
          <source-position filename="udisks-generated.h" line="1175"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_selftest_abort">
        <callback name="handle_smart_selftest_abort">
          <source-position filename="udisks-generated.h" line="1180"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_selftest_start">
        <callback name="handle_smart_selftest_start">
          <source-position filename="udisks-generated.h" line="1185"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_update">
        <callback name="handle_smart_update">
          <source-position filename="udisks-generated.h" line="1191"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_aam_enabled">
        <callback name="get_aam_enabled">
          <source-position filename="udisks-generated.h" line="1196"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13590">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13584">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_aam_supported">
        <callback name="get_aam_supported">
          <source-position filename="udisks-generated.h" line="1198"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13557">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13551">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_aam_vendor_recommended_value">
        <callback name="get_aam_vendor_recommended_value">
          <source-position filename="udisks-generated.h" line="1200"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13623">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13617">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_apm_enabled">
        <callback name="get_apm_enabled">
          <source-position filename="udisks-generated.h" line="1202"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13524">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13518">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_apm_supported">
        <callback name="get_apm_supported">
          <source-position filename="udisks-generated.h" line="1204"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13491">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13485">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_pm_enabled">
        <callback name="get_pm_enabled">
          <source-position filename="udisks-generated.h" line="1206"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13458">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13452">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_pm_supported">
        <callback name="get_pm_supported">
          <source-position filename="udisks-generated.h" line="1208"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13425">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13419">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_security_enhanced_erase_unit_minutes">
        <callback name="get_security_enhanced_erase_unit_minutes">
          <source-position filename="udisks-generated.h" line="1210"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13837">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13831">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_security_erase_unit_minutes">
        <callback name="get_security_erase_unit_minutes">
          <source-position filename="udisks-generated.h" line="1212"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13804">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13798">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_security_frozen">
        <callback name="get_security_frozen">
          <source-position filename="udisks-generated.h" line="1214"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13870">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13864">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_enabled">
        <callback name="get_smart_enabled">
          <source-position filename="udisks-generated.h" line="1216"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13075">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13069">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_failing">
        <callback name="get_smart_failing">
          <source-position filename="udisks-generated.h" line="1218"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13141">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13135">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_num_attributes_failed_in_the_past">
        <callback name="get_smart_num_attributes_failed_in_the_past">
          <source-position filename="udisks-generated.h" line="1220"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13273">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13267">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_num_attributes_failing">
        <callback name="get_smart_num_attributes_failing">
          <source-position filename="udisks-generated.h" line="1222"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13240">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13234">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_num_bad_sectors">
        <callback name="get_smart_num_bad_sectors">
          <source-position filename="udisks-generated.h" line="1224"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13306">The property value.</doc>
            <type name="gint64" c:type="gint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13300">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_power_on_seconds">
        <callback name="get_smart_power_on_seconds">
          <source-position filename="udisks-generated.h" line="1226"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13174">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13168">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_selftest_percent_remaining">
        <callback name="get_smart_selftest_percent_remaining">
          <source-position filename="udisks-generated.h" line="1228"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13392">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13386">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_selftest_status">
        <callback name="get_smart_selftest_status">
          <source-position filename="udisks-generated.h" line="1230"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13341">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13333">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_supported">
        <callback name="get_smart_supported">
          <source-position filename="udisks-generated.h" line="1232"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13042">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13036">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_temperature">
        <callback name="get_smart_temperature">
          <source-position filename="udisks-generated.h" line="1234"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13207">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13201">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_updated">
        <callback name="get_smart_updated">
          <source-position filename="udisks-generated.h" line="1236"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13108">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13102">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_set_enabled">
        <callback name="handle_smart_set_enabled">
          <source-position filename="udisks-generated.h" line="1238"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_value" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_write_cache_enabled">
        <callback name="get_write_cache_enabled">
          <source-position filename="udisks-generated.h" line="1244"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13693">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13687">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_write_cache_supported">
        <callback name="get_write_cache_supported">
          <source-position filename="udisks-generated.h" line="1246"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13656">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13650">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_read_lookahead_enabled">
        <callback name="get_read_lookahead_enabled">
          <source-position filename="udisks-generated.h" line="1248"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13767">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13761">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_read_lookahead_supported">
        <callback name="get_read_lookahead_supported">
          <source-position filename="udisks-generated.h" line="1250"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="13730">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="13724">A #UDisksDriveAta.</doc>
              <type name="DriveAta" c:type="UDisksDriveAta*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DriveAtaProxy"
           c:symbol-prefix="drive_ata_proxy"
           c:type="UDisksDriveAtaProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksDriveAtaProxy"
           glib:get-type="udisks_drive_ata_proxy_get_type"
           glib:type-struct="DriveAtaProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="14979">The #UDisksDriveAtaProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="1579"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="DriveAta"/>
      <constructor name="new_finish"
                   c:identifier="udisks_drive_ata_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15623">Finishes an operation started with udisks_drive_ata_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="1595"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15630">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveAtaProxy" c:type="UDisksDriveAta*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15625">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_drive_ata_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15713">Finishes an operation started with udisks_drive_ata_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="1614"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15720">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveAtaProxy" c:type="UDisksDriveAta*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15715">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_ata_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_drive_ata_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15738">Like udisks_drive_ata_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_drive_ata_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1617"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15753">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveAtaProxy" c:type="UDisksDriveAta*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15740">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15741">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15742">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15743">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15744">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_drive_ata_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15648">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_drive_ata_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1598"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="15663">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveAtaProxy" c:type="UDisksDriveAta*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15650">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15651">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15652">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15653">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15654">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_drive_ata_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15593">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_proxy_new_finish() to get the result of the operation.

See udisks_drive_ata_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1587"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15595">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15596">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15597">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15598">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15599">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15600">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15601">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_drive_ata_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15683">Like udisks_drive_ata_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_ata_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_drive_ata_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1606"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15685">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15686">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15687">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15688">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15689">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15690">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="15691">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DriveAtaProxyPrivate"
              c:type="UDisksDriveAtaProxyPrivate*"/>
      </field>
    </class>
    <record name="DriveAtaProxyClass"
            c:type="UDisksDriveAtaProxyClass"
            glib:is-gtype-struct-for="DriveAtaProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="14985">Class structure for #UDisksDriveAtaProxy.</doc>
      <source-position filename="udisks-generated.h" line="1579"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="14987">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DriveAtaProxyPrivate"
            c:type="UDisksDriveAtaProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="1567"/>
    </record>
    <class name="DriveAtaSkeleton"
           c:symbol-prefix="drive_ata_skeleton"
           c:type="UDisksDriveAtaSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksDriveAtaSkeleton"
           glib:get-type="udisks_drive_ata_skeleton_get_type"
           glib:type-struct="DriveAtaSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="15775">The #UDisksDriveAtaSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="1649"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DriveAta"/>
      <constructor name="new" c:identifier="udisks_drive_ata_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16540">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="1657"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="16545">The skeleton object.</doc>
          <type name="DriveAtaSkeleton" c:type="UDisksDriveAta*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DriveAtaSkeletonPrivate"
              c:type="UDisksDriveAtaSkeletonPrivate*"/>
      </field>
    </class>
    <record name="DriveAtaSkeletonClass"
            c:type="UDisksDriveAtaSkeletonClass"
            glib:is-gtype-struct-for="DriveAtaSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="15781">Class structure for #UDisksDriveAtaSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="1649"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="15783">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DriveAtaSkeletonPrivate"
            c:type="UDisksDriveAtaSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="1637"/>
    </record>
    <record name="DriveIface"
            c:type="UDisksDriveIface"
            glib:is-gtype-struct-for="Drive">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="7940">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="846"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="7942">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_eject">
        <callback name="handle_eject">
          <source-position filename="udisks-generated.h" line="772"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_configuration">
        <callback name="handle_set_configuration">
          <source-position filename="udisks-generated.h" line="777"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_value" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_configuration">
        <callback name="get_configuration">
          <source-position filename="udisks-generated.h" line="783"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8654">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8646">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_connection_bus">
        <callback name="get_connection_bus">
          <source-position filename="udisks-generated.h" line="785"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9242">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9234">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_ejectable">
        <callback name="get_ejectable">
          <source-position filename="udisks-generated.h" line="787"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9379">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9373">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id">
        <callback name="get_id">
          <source-position filename="udisks-generated.h" line="789"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8601">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8593">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_media">
        <callback name="get_media">
          <source-position filename="udisks-generated.h" line="791"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8707">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8699">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_media_available">
        <callback name="get_media_available">
          <source-position filename="udisks-generated.h" line="793"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8844">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8838">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_media_change_detected">
        <callback name="get_media_change_detected">
          <source-position filename="udisks-generated.h" line="795"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8877">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8871">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_media_compatibility">
        <callback name="get_media_compatibility">
          <source-position filename="udisks-generated.h" line="797"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8760">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8752">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_media_removable">
        <callback name="get_media_removable">
          <source-position filename="udisks-generated.h" line="799"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8811">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8805">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_model">
        <callback name="get_model">
          <source-position filename="udisks-generated.h" line="801"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8389">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8381">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_optical">
        <callback name="get_optical">
          <source-position filename="udisks-generated.h" line="803"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9009">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9003">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_optical_blank">
        <callback name="get_optical_blank">
          <source-position filename="udisks-generated.h" line="805"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9042">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9036">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_optical_num_audio_tracks">
        <callback name="get_optical_num_audio_tracks">
          <source-position filename="udisks-generated.h" line="807"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9108">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9102">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_optical_num_data_tracks">
        <callback name="get_optical_num_data_tracks">
          <source-position filename="udisks-generated.h" line="809"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9141">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9135">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_optical_num_sessions">
        <callback name="get_optical_num_sessions">
          <source-position filename="udisks-generated.h" line="811"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9174">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9168">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_optical_num_tracks">
        <callback name="get_optical_num_tracks">
          <source-position filename="udisks-generated.h" line="813"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9075">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9069">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_removable">
        <callback name="get_removable">
          <source-position filename="udisks-generated.h" line="815"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9346">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9340">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_revision">
        <callback name="get_revision">
          <source-position filename="udisks-generated.h" line="817"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8442">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8434">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_rotation_rate">
        <callback name="get_rotation_rate">
          <source-position filename="udisks-generated.h" line="819"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9207">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9201">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_seat">
        <callback name="get_seat">
          <source-position filename="udisks-generated.h" line="821"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9295">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9287">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_serial">
        <callback name="get_serial">
          <source-position filename="udisks-generated.h" line="823"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8495">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8487">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <source-position filename="udisks-generated.h" line="825"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8910">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8904">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sort_key">
        <callback name="get_sort_key">
          <source-position filename="udisks-generated.h" line="827"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9414">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9406">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_time_detected">
        <callback name="get_time_detected">
          <source-position filename="udisks-generated.h" line="829"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8943">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8937">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_time_media_detected">
        <callback name="get_time_media_detected">
          <source-position filename="udisks-generated.h" line="831"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8976">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8970">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_vendor">
        <callback name="get_vendor">
          <source-position filename="udisks-generated.h" line="833"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8336">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8328">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_wwn">
        <callback name="get_wwn">
          <source-position filename="udisks-generated.h" line="835"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="8548">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="8540">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_power_off">
        <callback name="handle_power_off">
          <source-position filename="udisks-generated.h" line="837"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_can_power_off">
        <callback name="get_can_power_off">
          <source-position filename="udisks-generated.h" line="842"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9465">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9459">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sibling_id">
        <callback name="get_sibling_id">
          <source-position filename="udisks-generated.h" line="844"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="9504">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="9496">A #UDisksDrive.</doc>
              <type name="Drive" c:type="UDisksDrive*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="DriveLSM"
               c:symbol-prefix="drive_lsm"
               c:type="UDisksDriveLSM"
               version="2.3.0"
               glib:type-name="UDisksDriveLSM"
               glib:get-type="udisks_drive_lsm_get_type"
               glib:type-struct="DriveLSMIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="58979">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LSM.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LSM&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="6793"/>
      <function name="interface_info"
                c:identifier="udisks_drive_lsm_interface_info"
                version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58934">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LSM.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LSM&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="6801"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="58939">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_drive_lsm_override_properties"
                version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58949">Overrides all #GObject properties in the #UDisksDriveLSM interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="6802"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="58957">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58951">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58952">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_is_ok"
                      invoker="get_is_ok"
                      version="2.3.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59125">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsOK"&gt;"IsOK"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6773"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59133">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59127">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_is_raid_degraded"
                      invoker="get_is_raid_degraded"
                      version="2.3.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59162">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidDegraded"&gt;"IsRaidDegraded"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6775"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59170">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59164">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_is_raid_error"
                      invoker="get_is_raid_error"
                      version="2.3.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59199">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidError"&gt;"IsRaidError"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6777"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59207">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59201">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_is_raid_reconstructing"
                      invoker="get_is_raid_reconstructing"
                      version="2.3.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59273">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidReconstructing"&gt;"IsRaidReconstructing"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6779"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59281">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59275">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_is_raid_verifying"
                      invoker="get_is_raid_verifying"
                      version="2.3.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59236">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidVerifying"&gt;"IsRaidVerifying"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6781"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59244">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59238">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_min_io_size"
                      invoker="get_min_io_size"
                      version="2.3.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59428">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.MinIoSize"&gt;"MinIoSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6783"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59436">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59430">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_opt_io_size"
                      invoker="get_opt_io_size"
                      version="2.3.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59465">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.OptIoSize"&gt;"OptIoSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6785"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59473">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59467">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_raid_disk_count"
                      invoker="get_raid_disk_count"
                      version="2.3.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59502">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.RaidDiskCount"&gt;"RaidDiskCount"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6787"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59510">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59504">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_raid_type"
                      invoker="get_raid_type"
                      version="2.3.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59310">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.RaidType"&gt;"RaidType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_lsm_dup_raid_type() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6789"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59320">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59312">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_status_info"
                      invoker="get_status_info"
                      version="2.3.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59369">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.StatusInfo"&gt;"StatusInfo"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_lsm_dup_status_info() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6791"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59379">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59371">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="dup_raid_type"
              c:identifier="udisks_drive_lsm_dup_raid_type"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59332">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.RaidType"&gt;"RaidType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6822"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59340">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59334">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_status_info"
              c:identifier="udisks_drive_lsm_dup_status_info"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59391">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.StatusInfo"&gt;"StatusInfo"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6826"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59399">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59393">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_ok"
              c:identifier="udisks_drive_lsm_get_is_ok"
              glib:get-property="is-ok"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59125">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsOK"&gt;"IsOK"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6806"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59133">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59127">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_raid_degraded"
              c:identifier="udisks_drive_lsm_get_is_raid_degraded"
              glib:get-property="is-raid-degraded"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59162">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidDegraded"&gt;"IsRaidDegraded"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6809"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59170">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59164">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_raid_error"
              c:identifier="udisks_drive_lsm_get_is_raid_error"
              glib:get-property="is-raid-error"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59199">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidError"&gt;"IsRaidError"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6812"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59207">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59201">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_raid_reconstructing"
              c:identifier="udisks_drive_lsm_get_is_raid_reconstructing"
              glib:get-property="is-raid-reconstructing"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59273">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidReconstructing"&gt;"IsRaidReconstructing"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6818"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59281">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59275">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_raid_verifying"
              c:identifier="udisks_drive_lsm_get_is_raid_verifying"
              glib:get-property="is-raid-verifying"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59236">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidVerifying"&gt;"IsRaidVerifying"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6815"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59244">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59238">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_min_io_size"
              c:identifier="udisks_drive_lsm_get_min_io_size"
              glib:get-property="min-io-size"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59428">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.MinIoSize"&gt;"MinIoSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6829"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59436">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59430">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_opt_io_size"
              c:identifier="udisks_drive_lsm_get_opt_io_size"
              glib:get-property="opt-io-size"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59465">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.OptIoSize"&gt;"OptIoSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6832"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59473">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59467">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_raid_disk_count"
              c:identifier="udisks_drive_lsm_get_raid_disk_count"
              glib:get-property="raid-disk-count"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59502">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.RaidDiskCount"&gt;"RaidDiskCount"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6835"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59510">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59504">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_raid_type"
              c:identifier="udisks_drive_lsm_get_raid_type"
              glib:get-property="raid-type"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59310">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.RaidType"&gt;"RaidType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_lsm_dup_raid_type() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6821"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59320">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59312">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status_info"
              c:identifier="udisks_drive_lsm_get_status_info"
              glib:get-property="status-info"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59369">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.StatusInfo"&gt;"StatusInfo"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_drive_lsm_dup_status_info() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6825"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59379">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59371">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_is_ok"
              c:identifier="udisks_drive_lsm_set_is_ok"
              glib:set-property="is-ok"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59145">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsOK"&gt;"IsOK"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6807"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59147">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59148">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_raid_degraded"
              c:identifier="udisks_drive_lsm_set_is_raid_degraded"
              glib:set-property="is-raid-degraded"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59182">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidDegraded"&gt;"IsRaidDegraded"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6810"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59184">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59185">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_raid_error"
              c:identifier="udisks_drive_lsm_set_is_raid_error"
              glib:set-property="is-raid-error"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59219">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidError"&gt;"IsRaidError"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6813"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59221">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59222">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_raid_reconstructing"
              c:identifier="udisks_drive_lsm_set_is_raid_reconstructing"
              glib:set-property="is-raid-reconstructing"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59293">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidReconstructing"&gt;"IsRaidReconstructing"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6819"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59295">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59296">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_raid_verifying"
              c:identifier="udisks_drive_lsm_set_is_raid_verifying"
              glib:set-property="is-raid-verifying"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59256">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidVerifying"&gt;"IsRaidVerifying"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6816"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59258">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59259">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_min_io_size"
              c:identifier="udisks_drive_lsm_set_min_io_size"
              glib:set-property="min-io-size"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59448">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.MinIoSize"&gt;"MinIoSize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6830"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59450">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59451">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_opt_io_size"
              c:identifier="udisks_drive_lsm_set_opt_io_size"
              glib:set-property="opt-io-size"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59485">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.OptIoSize"&gt;"OptIoSize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6833"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59487">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59488">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_raid_disk_count"
              c:identifier="udisks_drive_lsm_set_raid_disk_count"
              glib:set-property="raid-disk-count"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59522">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.RaidDiskCount"&gt;"RaidDiskCount"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6836"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59524">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59525">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_raid_type"
              c:identifier="udisks_drive_lsm_set_raid_type"
              glib:set-property="raid-type"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59352">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.RaidType"&gt;"RaidType"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6823"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59354">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59355">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_status_info"
              c:identifier="udisks_drive_lsm_set_status_info"
              glib:set-property="status-info"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59411">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.StatusInfo"&gt;"StatusInfo"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6827"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59413">A #UDisksDriveLSM.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59414">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="is-ok"
                version="2.3.0"
                writable="1"
                transfer-ownership="none"
                setter="set_is_ok"
                getter="get_is_ok"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59013">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsOK"&gt;"IsOK"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="is-raid-degraded"
                version="2.3.0"
                writable="1"
                transfer-ownership="none"
                setter="set_is_raid_degraded"
                getter="get_is_raid_degraded"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59024">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidDegraded"&gt;"IsRaidDegraded"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="is-raid-error"
                version="2.3.0"
                writable="1"
                transfer-ownership="none"
                setter="set_is_raid_error"
                getter="get_is_raid_error"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59035">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidError"&gt;"IsRaidError"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="is-raid-reconstructing"
                version="2.3.0"
                writable="1"
                transfer-ownership="none"
                setter="set_is_raid_reconstructing"
                getter="get_is_raid_reconstructing"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59057">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidReconstructing"&gt;"IsRaidReconstructing"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="is-raid-verifying"
                version="2.3.0"
                writable="1"
                transfer-ownership="none"
                setter="set_is_raid_verifying"
                getter="get_is_raid_verifying"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59046">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.IsRaidVerifying"&gt;"IsRaidVerifying"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="min-io-size"
                version="2.3.0"
                writable="1"
                transfer-ownership="none"
                setter="set_min_io_size"
                getter="get_min_io_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59090">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.MinIoSize"&gt;"MinIoSize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="opt-io-size"
                version="2.3.0"
                writable="1"
                transfer-ownership="none"
                setter="set_opt_io_size"
                getter="get_opt_io_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59101">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.OptIoSize"&gt;"OptIoSize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="raid-disk-count"
                version="2.3.0"
                writable="1"
                transfer-ownership="none"
                setter="set_raid_disk_count"
                getter="get_raid_disk_count"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59112">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.RaidDiskCount"&gt;"RaidDiskCount"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="raid-type"
                version="2.3.0"
                writable="1"
                transfer-ownership="none"
                setter="set_raid_type"
                getter="get_raid_type"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59068">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.RaidType"&gt;"RaidType"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="status-info"
                version="2.3.0"
                writable="1"
                transfer-ownership="none"
                setter="set_status_info"
                getter="get_status_info"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59079">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Drive-LSM.StatusInfo"&gt;"StatusInfo"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </interface>
    <record name="DriveLSMIface"
            c:type="UDisksDriveLSMIface"
            glib:is-gtype-struct-for="DriveLSM"
            version="2.3.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="58987">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LSM.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LSM&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="6793"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58989">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_is_ok">
        <callback name="get_is_ok">
          <source-position filename="udisks-generated.h" line="6773"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59133">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="59127">A #UDisksDriveLSM.</doc>
              <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_is_raid_degraded">
        <callback name="get_is_raid_degraded">
          <source-position filename="udisks-generated.h" line="6775"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59170">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="59164">A #UDisksDriveLSM.</doc>
              <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_is_raid_error">
        <callback name="get_is_raid_error">
          <source-position filename="udisks-generated.h" line="6777"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59207">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="59201">A #UDisksDriveLSM.</doc>
              <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_is_raid_reconstructing">
        <callback name="get_is_raid_reconstructing">
          <source-position filename="udisks-generated.h" line="6779"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59281">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="59275">A #UDisksDriveLSM.</doc>
              <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_is_raid_verifying">
        <callback name="get_is_raid_verifying">
          <source-position filename="udisks-generated.h" line="6781"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59244">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="59238">A #UDisksDriveLSM.</doc>
              <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_min_io_size">
        <callback name="get_min_io_size">
          <source-position filename="udisks-generated.h" line="6783"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59436">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="59430">A #UDisksDriveLSM.</doc>
              <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_opt_io_size">
        <callback name="get_opt_io_size">
          <source-position filename="udisks-generated.h" line="6785"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59473">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="59467">A #UDisksDriveLSM.</doc>
              <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_raid_disk_count">
        <callback name="get_raid_disk_count">
          <source-position filename="udisks-generated.h" line="6787"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59510">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="59504">A #UDisksDriveLSM.</doc>
              <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_raid_type">
        <callback name="get_raid_type">
          <source-position filename="udisks-generated.h" line="6789"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59320">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="59312">A #UDisksDriveLSM.</doc>
              <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_status_info">
        <callback name="get_status_info">
          <source-position filename="udisks-generated.h" line="6791"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59379">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="59371">A #UDisksDriveLSM.</doc>
              <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DriveLSMProxy"
           c:symbol-prefix="drive_lsm_proxy"
           c:type="UDisksDriveLSMProxy"
           version="2.3.0"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksDriveLSMProxy"
           glib:get-type="udisks_drive_lsm_proxy_get_type"
           glib:type-struct="DriveLSMProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="59541">The #UDisksDriveLSMProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="6862"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="DriveLSM"/>
      <constructor name="new_finish"
                   c:identifier="udisks_drive_lsm_proxy_new_finish"
                   version="2.3.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59951">Finishes an operation started with udisks_drive_lsm_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="6878"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59958">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveLSMProxy" c:type="UDisksDriveLSM*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59953">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_lsm_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_drive_lsm_proxy_new_for_bus_finish"
                   version="2.3.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60047">Finishes an operation started with udisks_drive_lsm_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="6897"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="60054">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveLSMProxy" c:type="UDisksDriveLSM*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60049">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_lsm_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_drive_lsm_proxy_new_for_bus_sync"
                   version="2.3.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60074">Like udisks_drive_lsm_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_drive_lsm_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6900"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="60089">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveLSMProxy" c:type="UDisksDriveLSM*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60076">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60077">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60078">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60079">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60080">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_drive_lsm_proxy_new_sync"
                   version="2.3.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59978">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LSM.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LSM&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_drive_lsm_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6881"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="59993">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveLSMProxy" c:type="UDisksDriveLSM*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59980">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59981">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59982">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59983">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59984">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_drive_lsm_proxy_new"
                version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59919">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LSM.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LSM&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_lsm_proxy_new_finish() to get the result of the operation.

See udisks_drive_lsm_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6870"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59921">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59922">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59923">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59924">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59925">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59926">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="59927">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_drive_lsm_proxy_new_for_bus"
                version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60015">Like udisks_drive_lsm_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_lsm_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_drive_lsm_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6889"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60017">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60018">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60019">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60020">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60021">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60022">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60023">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DriveLSMProxyPrivate"
              c:type="UDisksDriveLSMProxyPrivate*"/>
      </field>
    </class>
    <record name="DriveLSMProxyClass"
            c:type="UDisksDriveLSMProxyClass"
            glib:is-gtype-struct-for="DriveLSMProxy"
            version="2.3.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="59549">Class structure for #UDisksDriveLSMProxy.</doc>
      <source-position filename="udisks-generated.h" line="6862"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="59551">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DriveLSMProxyPrivate"
            c:type="UDisksDriveLSMProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="6850"/>
    </record>
    <class name="DriveLSMSkeleton"
           c:symbol-prefix="drive_lsm_skeleton"
           c:type="UDisksDriveLSMSkeleton"
           version="2.3.0"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksDriveLSMSkeleton"
           glib:get-type="udisks_drive_lsm_skeleton_get_type"
           glib:type-struct="DriveLSMSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="60113">The #UDisksDriveLSMSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="6932"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DriveLSM"/>
      <constructor name="new"
                   c:identifier="udisks_drive_lsm_skeleton_new"
                   version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60687">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LSM.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LSM&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="6940"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="60692">The skeleton object.</doc>
          <type name="DriveLSMSkeleton" c:type="UDisksDriveLSM*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DriveLSMSkeletonPrivate"
              c:type="UDisksDriveLSMSkeletonPrivate*"/>
      </field>
    </class>
    <record name="DriveLSMSkeletonClass"
            c:type="UDisksDriveLSMSkeletonClass"
            glib:is-gtype-struct-for="DriveLSMSkeleton"
            version="2.3.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="60121">Class structure for #UDisksDriveLSMSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="6932"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60123">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DriveLSMSkeletonPrivate"
            c:type="UDisksDriveLSMSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="6920"/>
    </record>
    <interface name="DriveLsmLocal"
               c:symbol-prefix="drive_lsm_local"
               c:type="UDisksDriveLsmLocal"
               glib:type-name="UDisksDriveLsmLocal"
               glib:get-type="udisks_drive_lsm_local_get_type"
               glib:type-struct="DriveLsmLocalIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="60943">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LsmLocal.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LsmLocal&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="6979"/>
      <function name="interface_info"
                c:identifier="udisks_drive_lsm_local_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60860">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LsmLocal.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LsmLocal&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="6987"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="60865">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_drive_lsm_local_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60873">Overrides all #GObject properties in the #UDisksDriveLsmLocal interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="6988"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="60881">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60875">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60876">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_turn_fault_ledoff">
        <source-position filename="udisks-generated.h" line="6959"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_turn_fault_ledon">
        <source-position filename="udisks-generated.h" line="6964"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_turn_ident_ledoff">
        <source-position filename="udisks-generated.h" line="6969"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_turn_ident_ledon">
        <source-position filename="udisks-generated.h" line="6974"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_turn_fault_ledoff"
              c:identifier="udisks_drive_lsm_local_call_turn_fault_ledoff"
              version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61381">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnFaultLEDOff"&gt;TurnFaultLEDOff()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_lsm_local_call_turn_fault_ledoff_finish() to get the result of the operation.

See udisks_drive_lsm_local_call_turn_fault_ledoff_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7065"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61383">A #UDisksDriveLsmLocalProxy.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61384">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61385">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61386">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61387">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_turn_fault_ledoff_finish"
              c:identifier="udisks_drive_lsm_local_call_turn_fault_ledoff_finish"
              version="2.6.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61416">Finishes an operation started with udisks_drive_lsm_local_call_turn_fault_ledoff().</doc>
        <source-position filename="udisks-generated.h" line="7072"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="61424">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61418">A #UDisksDriveLsmLocalProxy.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61419">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_lsm_local_call_turn_fault_ledoff().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_turn_fault_ledoff_sync"
              c:identifier="udisks_drive_lsm_local_call_turn_fault_ledoff_sync"
              version="2.6.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61445">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnFaultLEDOff"&gt;TurnFaultLEDOff()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_lsm_local_call_turn_fault_ledoff() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7077"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="61456">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61447">A #UDisksDriveLsmLocalProxy.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61448">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61449">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_turn_fault_ledon"
              c:identifier="udisks_drive_lsm_local_call_turn_fault_ledon"
              version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61277">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnFaultLEDOn"&gt;TurnFaultLEDOn()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_lsm_local_call_turn_fault_ledon_finish() to get the result of the operation.

See udisks_drive_lsm_local_call_turn_fault_ledon_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7047"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61279">A #UDisksDriveLsmLocalProxy.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61280">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61281">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61282">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61283">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_turn_fault_ledon_finish"
              c:identifier="udisks_drive_lsm_local_call_turn_fault_ledon_finish"
              version="2.6.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61312">Finishes an operation started with udisks_drive_lsm_local_call_turn_fault_ledon().</doc>
        <source-position filename="udisks-generated.h" line="7054"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="61320">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61314">A #UDisksDriveLsmLocalProxy.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61315">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_lsm_local_call_turn_fault_ledon().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_turn_fault_ledon_sync"
              c:identifier="udisks_drive_lsm_local_call_turn_fault_ledon_sync"
              version="2.6.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61341">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnFaultLEDOn"&gt;TurnFaultLEDOn()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_lsm_local_call_turn_fault_ledon() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7059"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="61352">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61343">A #UDisksDriveLsmLocalProxy.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61344">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61345">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_turn_ident_ledoff"
              c:identifier="udisks_drive_lsm_local_call_turn_ident_ledoff"
              version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61173">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnIdentLEDOff"&gt;TurnIdentLEDOff()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_lsm_local_call_turn_ident_ledoff_finish() to get the result of the operation.

See udisks_drive_lsm_local_call_turn_ident_ledoff_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7029"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61175">A #UDisksDriveLsmLocalProxy.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61176">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61177">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61178">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61179">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_turn_ident_ledoff_finish"
              c:identifier="udisks_drive_lsm_local_call_turn_ident_ledoff_finish"
              version="2.6.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61208">Finishes an operation started with udisks_drive_lsm_local_call_turn_ident_ledoff().</doc>
        <source-position filename="udisks-generated.h" line="7036"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="61216">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61210">A #UDisksDriveLsmLocalProxy.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61211">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_lsm_local_call_turn_ident_ledoff().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_turn_ident_ledoff_sync"
              c:identifier="udisks_drive_lsm_local_call_turn_ident_ledoff_sync"
              version="2.6.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61237">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnIdentLEDOff"&gt;TurnIdentLEDOff()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_lsm_local_call_turn_ident_ledoff() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7041"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="61248">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61239">A #UDisksDriveLsmLocalProxy.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61240">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61241">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_turn_ident_ledon"
              c:identifier="udisks_drive_lsm_local_call_turn_ident_ledon"
              version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61069">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnIdentLEDOn"&gt;TurnIdentLEDOn()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_lsm_local_call_turn_ident_ledon_finish() to get the result of the operation.

See udisks_drive_lsm_local_call_turn_ident_ledon_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7011"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61071">A #UDisksDriveLsmLocalProxy.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61072">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61073">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61074">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61075">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_turn_ident_ledon_finish"
              c:identifier="udisks_drive_lsm_local_call_turn_ident_ledon_finish"
              version="2.6.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61104">Finishes an operation started with udisks_drive_lsm_local_call_turn_ident_ledon().</doc>
        <source-position filename="udisks-generated.h" line="7018"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="61112">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61106">A #UDisksDriveLsmLocalProxy.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61107">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_lsm_local_call_turn_ident_ledon().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_turn_ident_ledon_sync"
              c:identifier="udisks_drive_lsm_local_call_turn_ident_ledon_sync"
              version="2.6.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61133">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnIdentLEDOn"&gt;TurnIdentLEDOn()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_drive_lsm_local_call_turn_ident_ledon() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7023"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="61144">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61135">A #UDisksDriveLsmLocalProxy.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61136">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61137">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_turn_fault_ledoff"
              c:identifier="udisks_drive_lsm_local_complete_turn_fault_ledoff"
              version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61545">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnFaultLEDOff"&gt;TurnFaultLEDOff()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7004"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61547">A #UDisksDriveLsmLocal.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61548">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_turn_fault_ledon"
              c:identifier="udisks_drive_lsm_local_complete_turn_fault_ledon"
              version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61525">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnFaultLEDOn"&gt;TurnFaultLEDOn()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7000"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61527">A #UDisksDriveLsmLocal.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61528">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_turn_ident_ledoff"
              c:identifier="udisks_drive_lsm_local_complete_turn_ident_ledoff"
              version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61505">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnIdentLEDOff"&gt;TurnIdentLEDOff()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6996"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61507">A #UDisksDriveLsmLocal.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61508">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_turn_ident_ledon"
              c:identifier="udisks_drive_lsm_local_complete_turn_ident_ledon"
              version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61485">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnIdentLEDOn"&gt;TurnIdentLEDOn()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6992"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61487">A #UDisksDriveLsmLocal.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61488">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-turn-fault-ledoff" when="last" version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61042">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnFaultLEDOff"&gt;TurnFaultLEDOff()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_lsm_local_complete_turn_fault_ledoff() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="61052">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61045">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61046">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-turn-fault-ledon" when="last" version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61017">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnFaultLEDOn"&gt;TurnFaultLEDOn()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_lsm_local_complete_turn_fault_ledon() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="61027">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61020">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61021">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-turn-ident-ledoff" when="last" version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60992">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnIdentLEDOff"&gt;TurnIdentLEDOff()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_lsm_local_complete_turn_ident_ledoff() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="61002">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60995">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60996">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-turn-ident-ledon" when="last" version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60967">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Drive-LsmLocal.TurnIdentLEDOn"&gt;TurnIdentLEDOn()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_drive_lsm_local_complete_turn_ident_ledon() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="60977">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60970">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="60971">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="DriveLsmLocalIface"
            c:type="UDisksDriveLsmLocalIface"
            glib:is-gtype-struct-for="DriveLsmLocal">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="60949">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LsmLocal.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LsmLocal&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="6979"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60951">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_turn_fault_ledoff">
        <callback name="handle_turn_fault_ledoff">
          <source-position filename="udisks-generated.h" line="6959"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_turn_fault_ledon">
        <callback name="handle_turn_fault_ledon">
          <source-position filename="udisks-generated.h" line="6964"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_turn_ident_ledoff">
        <callback name="handle_turn_ident_ledoff">
          <source-position filename="udisks-generated.h" line="6969"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_turn_ident_ledon">
        <callback name="handle_turn_ident_ledon">
          <source-position filename="udisks-generated.h" line="6974"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DriveLsmLocalProxy"
           c:symbol-prefix="drive_lsm_local_proxy"
           c:type="UDisksDriveLsmLocalProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksDriveLsmLocalProxy"
           glib:get-type="udisks_drive_lsm_local_proxy_get_type"
           glib:type-struct="DriveLsmLocalProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="61567">The #UDisksDriveLsmLocalProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="7108"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="DriveLsmLocal"/>
      <constructor name="new_finish"
                   c:identifier="udisks_drive_lsm_local_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61758">Finishes an operation started with udisks_drive_lsm_local_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="7124"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="61765">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveLsmLocalProxy" c:type="UDisksDriveLsmLocal*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61760">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_lsm_local_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_drive_lsm_local_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61848">Finishes an operation started with udisks_drive_lsm_local_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="7143"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="61855">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveLsmLocalProxy" c:type="UDisksDriveLsmLocal*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61850">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_lsm_local_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_drive_lsm_local_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61873">Like udisks_drive_lsm_local_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_drive_lsm_local_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7146"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="61888">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveLsmLocalProxy" c:type="UDisksDriveLsmLocal*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61875">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61876">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61877">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61878">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61879">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_drive_lsm_local_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61783">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LsmLocal.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LsmLocal&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_drive_lsm_local_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7127"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="61798">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveLsmLocalProxy" c:type="UDisksDriveLsmLocal*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61785">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61786">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61787">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61788">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61789">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_drive_lsm_local_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61728">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LsmLocal.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LsmLocal&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_lsm_local_proxy_new_finish() to get the result of the operation.

See udisks_drive_lsm_local_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61730">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61731">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61732">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61733">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61734">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61735">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61736">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_drive_lsm_local_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61818">Like udisks_drive_lsm_local_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_lsm_local_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_drive_lsm_local_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7135"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61820">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61821">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61822">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61823">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61824">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61825">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="61826">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DriveLsmLocalProxyPrivate"
              c:type="UDisksDriveLsmLocalProxyPrivate*"/>
      </field>
    </class>
    <record name="DriveLsmLocalProxyClass"
            c:type="UDisksDriveLsmLocalProxyClass"
            glib:is-gtype-struct-for="DriveLsmLocalProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="61573">Class structure for #UDisksDriveLsmLocalProxy.</doc>
      <source-position filename="udisks-generated.h" line="7108"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61575">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DriveLsmLocalProxyPrivate"
            c:type="UDisksDriveLsmLocalProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="7096"/>
    </record>
    <class name="DriveLsmLocalSkeleton"
           c:symbol-prefix="drive_lsm_local_skeleton"
           c:type="UDisksDriveLsmLocalSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksDriveLsmLocalSkeleton"
           glib:get-type="udisks_drive_lsm_local_skeleton_get_type"
           glib:type-struct="DriveLsmLocalSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="61910">The #UDisksDriveLsmLocalSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="7178"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="DriveLsmLocal"/>
      <constructor name="new"
                   c:identifier="udisks_drive_lsm_local_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62181">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LsmLocal.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LsmLocal&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="7186"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="62186">The skeleton object.</doc>
          <type name="DriveLsmLocalSkeleton" c:type="UDisksDriveLsmLocal*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DriveLsmLocalSkeletonPrivate"
              c:type="UDisksDriveLsmLocalSkeletonPrivate*"/>
      </field>
    </class>
    <record name="DriveLsmLocalSkeletonClass"
            c:type="UDisksDriveLsmLocalSkeletonClass"
            glib:is-gtype-struct-for="DriveLsmLocalSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="61916">Class structure for #UDisksDriveLsmLocalSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="7178"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="61918">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DriveLsmLocalSkeletonPrivate"
            c:type="UDisksDriveLsmLocalSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="7166"/>
    </record>
    <class name="DriveProxy"
           c:symbol-prefix="drive_proxy"
           c:type="UDisksDriveProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksDriveProxy"
           glib:get-type="udisks_drive_proxy_get_type"
           glib:type-struct="DriveProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="9917">The #UDisksDriveProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="1057"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Drive"/>
      <constructor name="new_finish"
                   c:identifier="udisks_drive_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10627">Finishes an operation started with udisks_drive_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="1073"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10634">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveProxy" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10629">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_drive_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10717">Finishes an operation started with udisks_drive_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="1092"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10724">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveProxy" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10719">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_drive_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_drive_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10742">Like udisks_drive_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_drive_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1095"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10757">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveProxy" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10744">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10745">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10746">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10747">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10748">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_drive_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10652">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_drive_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1076"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="10667">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DriveProxy" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10654">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10655">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10656">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10657">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10658">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_drive_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10597">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_proxy_new_finish() to get the result of the operation.

See udisks_drive_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1065"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10599">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10600">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10601">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10602">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10603">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10604">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10605">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_drive_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10687">Like udisks_drive_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_drive_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_drive_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1084"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10689">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10690">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10691">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10692">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10693">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10694">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="10695">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DriveProxyPrivate" c:type="UDisksDriveProxyPrivate*"/>
      </field>
    </class>
    <record name="DriveProxyClass"
            c:type="UDisksDriveProxyClass"
            glib:is-gtype-struct-for="DriveProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="9923">Class structure for #UDisksDriveProxy.</doc>
      <source-position filename="udisks-generated.h" line="1057"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="9925">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DriveProxyPrivate"
            c:type="UDisksDriveProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="1045"/>
    </record>
    <class name="DriveSkeleton"
           c:symbol-prefix="drive_skeleton"
           c:type="UDisksDriveSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksDriveSkeleton"
           glib:get-type="udisks_drive_skeleton_get_type"
           glib:type-struct="DriveSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="10779">The #UDisksDriveSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="1127"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Drive"/>
      <constructor name="new" c:identifier="udisks_drive_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="11596">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="1135"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="11601">The skeleton object.</doc>
          <type name="DriveSkeleton" c:type="UDisksDrive*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DriveSkeletonPrivate"
              c:type="UDisksDriveSkeletonPrivate*"/>
      </field>
    </class>
    <record name="DriveSkeletonClass"
            c:type="UDisksDriveSkeletonClass"
            glib:is-gtype-struct-for="DriveSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="10785">Class structure for #UDisksDriveSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="1127"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="10787">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DriveSkeletonPrivate"
            c:type="UDisksDriveSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="1115"/>
    </record>
    <function-macro name="ENCRYPTED"
                    c:identifier="UDISKS_ENCRYPTED"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4319"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENCRYPTED_GET_IFACE"
                    c:identifier="UDISKS_ENCRYPTED_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4321"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENCRYPTED_PROXY"
                    c:identifier="UDISKS_ENCRYPTED_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4501"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENCRYPTED_PROXY_CLASS"
                    c:identifier="UDISKS_ENCRYPTED_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4502"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENCRYPTED_PROXY_GET_CLASS"
                    c:identifier="UDISKS_ENCRYPTED_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4503"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENCRYPTED_SKELETON"
                    c:identifier="UDISKS_ENCRYPTED_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4571"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENCRYPTED_SKELETON_CLASS"
                    c:identifier="UDISKS_ENCRYPTED_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4572"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ENCRYPTED_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_ENCRYPTED_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4573"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="ERROR_NUM_ENTRIES"
              value="27"
              c:type="UDISKS_ERROR_NUM_ENTRIES">
      <source-position filename="udisksenums.h" line="84"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <interface name="Encrypted"
               c:symbol-prefix="encrypted"
               c:type="UDisksEncrypted"
               glib:type-name="UDisksEncrypted"
               glib:get-type="udisks_encrypted_get_type"
               glib:type-struct="EncryptedIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="39492">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="4364"/>
      <function name="interface_info"
                c:identifier="udisks_encrypted_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39405">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="4372"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39410">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_encrypted_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39418">Overrides all #GObject properties in the #UDisksEncrypted interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="4373"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39426">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39420">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39421">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_child_configuration"
                      invoker="get_child_configuration"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39657">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_encrypted_dup_child_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4350"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39667">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39659">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_cleartext_device"
                      invoker="get_cleartext_device"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39796">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.CleartextDevice"&gt;"CleartextDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_encrypted_dup_cleartext_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4352"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39806">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39798">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hint_encryption_type"
                      invoker="get_hint_encryption_type"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39710">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.HintEncryptionType"&gt;"HintEncryptionType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_encrypted_dup_hint_encryption_type() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4354"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39720">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39712">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_metadata_size"
                      invoker="get_metadata_size"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39763">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.MetadataSize"&gt;"MetadataSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4356"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39771">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39765">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_change_passphrase">
        <source-position filename="udisks-generated.h" line="4332"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_new_passphrase" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_lock">
        <source-position filename="udisks-generated.h" line="4339"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_resize">
        <source-position filename="udisks-generated.h" line="4358"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_unlock">
        <source-position filename="udisks-generated.h" line="4344"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_change_passphrase"
              c:identifier="udisks_encrypted_call_change_passphrase">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40057">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.ChangePassphrase"&gt;ChangePassphrase()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_encrypted_call_change_passphrase_finish() to get the result of the operation.

See udisks_encrypted_call_change_passphrase_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4437"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40059">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40060">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_new_passphrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40061">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40062">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40063">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40064">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40065">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_change_passphrase_finish"
              c:identifier="udisks_encrypted_call_change_passphrase_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40096">Finishes an operation started with udisks_encrypted_call_change_passphrase().</doc>
        <source-position filename="udisks-generated.h" line="4446"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="40104">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40098">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40099">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_encrypted_call_change_passphrase().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_change_passphrase_sync"
              c:identifier="udisks_encrypted_call_change_passphrase_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40123">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.ChangePassphrase"&gt;ChangePassphrase()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_encrypted_call_change_passphrase() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4451"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="40136">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40125">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40126">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_new_passphrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40127">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40128">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40129">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_lock" c:identifier="udisks_encrypted_call_lock">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39959">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Lock"&gt;Lock()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_encrypted_call_lock_finish() to get the result of the operation.

See udisks_encrypted_call_lock_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4419"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39961">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39962">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39963">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39964">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39965">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_lock_finish"
              c:identifier="udisks_encrypted_call_lock_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39992">Finishes an operation started with udisks_encrypted_call_lock().</doc>
        <source-position filename="udisks-generated.h" line="4426"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="40000">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39994">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39995">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_encrypted_call_lock().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_lock_sync"
              c:identifier="udisks_encrypted_call_lock_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40019">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Lock"&gt;Lock()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_encrypted_call_lock() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4431"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="40030">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40021">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40022">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40023">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize"
              c:identifier="udisks_encrypted_call_resize"
              version="2.8.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40167">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_encrypted_call_resize_finish() to get the result of the operation.

See udisks_encrypted_call_resize_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4459"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40169">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40170">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40171">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40172">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40173">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40174">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_finish"
              c:identifier="udisks_encrypted_call_resize_finish"
              version="2.8.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40205">Finishes an operation started with udisks_encrypted_call_resize().</doc>
        <source-position filename="udisks-generated.h" line="4467"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="40213">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40207">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40208">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_encrypted_call_resize().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_sync"
              c:identifier="udisks_encrypted_call_resize_sync"
              version="2.8.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40234">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_encrypted_call_resize() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4472"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="40246">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40236">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40237">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40238">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40239">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_unlock" c:identifier="udisks_encrypted_call_unlock">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39849">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Unlock"&gt;Unlock()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_encrypted_call_unlock_finish() to get the result of the operation.

See udisks_encrypted_call_unlock_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4397"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39851">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39852">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39853">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39854">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39855">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39856">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_unlock_finish"
              c:identifier="udisks_encrypted_call_unlock_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39885">Finishes an operation started with udisks_encrypted_call_unlock().</doc>
        <source-position filename="udisks-generated.h" line="4405"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39894">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39887">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="out_cleartext_device"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39888">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39889">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_encrypted_call_unlock().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_unlock_sync"
              c:identifier="udisks_encrypted_call_unlock_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39915">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Unlock"&gt;Unlock()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_encrypted_call_unlock() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4411"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39928">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39917">A #UDisksEncryptedProxy.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39918">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39919">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_cleartext_device"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39920">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39921">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_change_passphrase"
              c:identifier="udisks_encrypted_complete_change_passphrase">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40316">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.ChangePassphrase"&gt;ChangePassphrase()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4386"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40318">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40319">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_lock"
              c:identifier="udisks_encrypted_complete_lock">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40298">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Lock"&gt;Lock()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4382"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40300">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40301">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_resize"
              c:identifier="udisks_encrypted_complete_resize"
              version="2.8.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40334">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Resize"&gt;Resize()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4390"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40336">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40337">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_unlock"
              c:identifier="udisks_encrypted_complete_unlock">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40277">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Unlock"&gt;Unlock()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4377"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40279">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40280">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="cleartext_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40281">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_child_configuration"
              c:identifier="udisks_encrypted_dup_child_configuration"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39677">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4483"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39685">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39679">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_cleartext_device"
              c:identifier="udisks_encrypted_dup_cleartext_device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39816">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.CleartextDevice"&gt;"CleartextDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4494"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39824">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39818">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_hint_encryption_type"
              c:identifier="udisks_encrypted_dup_hint_encryption_type"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39730">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.HintEncryptionType"&gt;"HintEncryptionType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4487"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39738">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39732">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_child_configuration"
              c:identifier="udisks_encrypted_get_child_configuration"
              glib:get-property="child-configuration"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39657">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_encrypted_dup_child_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4482"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39667">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39659">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cleartext_device"
              c:identifier="udisks_encrypted_get_cleartext_device"
              glib:get-property="cleartext-device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39796">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.CleartextDevice"&gt;"CleartextDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_encrypted_dup_cleartext_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4493"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39806">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39798">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint_encryption_type"
              c:identifier="udisks_encrypted_get_hint_encryption_type"
              glib:get-property="hint-encryption-type"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39710">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.HintEncryptionType"&gt;"HintEncryptionType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_encrypted_dup_hint_encryption_type() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4486"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39720">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39712">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metadata_size"
              c:identifier="udisks_encrypted_get_metadata_size"
              glib:get-property="metadata-size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39763">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.MetadataSize"&gt;"MetadataSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4490"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39771">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39765">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_child_configuration"
              c:identifier="udisks_encrypted_set_child_configuration"
              glib:set-property="child-configuration"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39695">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4484"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39697">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39698">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cleartext_device"
              c:identifier="udisks_encrypted_set_cleartext_device"
              glib:set-property="cleartext-device"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39834">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.CleartextDevice"&gt;"CleartextDevice"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4495"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39836">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39837">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint_encryption_type"
              c:identifier="udisks_encrypted_set_hint_encryption_type"
              glib:set-property="hint-encryption-type"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39748">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.HintEncryptionType"&gt;"HintEncryptionType"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4488"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39750">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39751">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metadata_size"
              c:identifier="udisks_encrypted_set_metadata_size"
              glib:set-property="metadata-size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39781">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.MetadataSize"&gt;"MetadataSize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4491"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39783">A #UDisksEncrypted.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39784">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <property name="child-configuration"
                writable="1"
                transfer-ownership="none"
                setter="set_child_configuration"
                getter="get_child_configuration">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39619">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="cleartext-device"
                writable="1"
                transfer-ownership="none"
                setter="set_cleartext_device"
                getter="get_cleartext_device"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39646">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.CleartextDevice"&gt;"CleartextDevice"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hint-encryption-type"
                writable="1"
                transfer-ownership="none"
                setter="set_hint_encryption_type"
                getter="get_hint_encryption_type"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39628">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.HintEncryptionType"&gt;"HintEncryptionType"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="metadata-size"
                writable="1"
                transfer-ownership="none"
                setter="set_metadata_size"
                getter="get_metadata_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39637">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Encrypted.MetadataSize"&gt;"MetadataSize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <glib:signal name="handle-change-passphrase" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39567">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.ChangePassphrase"&gt;ChangePassphrase()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_encrypted_complete_change_passphrase() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39579">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39570">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39571">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_new_passphrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39572">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39573">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-lock" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39544">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Lock"&gt;Lock()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_encrypted_complete_lock() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39554">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39547">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39548">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-resize" when="last" version="2.8.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39592">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Resize"&gt;Resize()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_encrypted_complete_resize() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39603">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39595">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39596">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39597">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-unlock" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39520">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Encrypted.Unlock"&gt;Unlock()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_encrypted_complete_unlock() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39531">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39523">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_passphrase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39524">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39525">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="EncryptedIface"
            c:type="UDisksEncryptedIface"
            glib:is-gtype-struct-for="Encrypted">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="39498">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="4364"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39500">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_change_passphrase">
        <callback name="handle_change_passphrase">
          <source-position filename="udisks-generated.h" line="4332"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_passphrase" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_new_passphrase" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_lock">
        <callback name="handle_lock">
          <source-position filename="udisks-generated.h" line="4339"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_unlock">
        <callback name="handle_unlock">
          <source-position filename="udisks-generated.h" line="4344"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_passphrase" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_child_configuration">
        <callback name="get_child_configuration">
          <source-position filename="udisks-generated.h" line="4350"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39667">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="39659">A #UDisksEncrypted.</doc>
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_cleartext_device">
        <callback name="get_cleartext_device">
          <source-position filename="udisks-generated.h" line="4352"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39806">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="39798">A #UDisksEncrypted.</doc>
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hint_encryption_type">
        <callback name="get_hint_encryption_type">
          <source-position filename="udisks-generated.h" line="4354"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39720">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="39712">A #UDisksEncrypted.</doc>
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_metadata_size">
        <callback name="get_metadata_size">
          <source-position filename="udisks-generated.h" line="4356"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="39771">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="39765">A #UDisksEncrypted.</doc>
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_resize">
        <callback name="handle_resize">
          <source-position filename="udisks-generated.h" line="4358"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Encrypted" c:type="UDisksEncrypted*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="EncryptedProxy"
           c:symbol-prefix="encrypted_proxy"
           c:type="UDisksEncryptedProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksEncryptedProxy"
           glib:get-type="udisks_encrypted_proxy_get_type"
           glib:type-struct="EncryptedProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="40356">The #UDisksEncryptedProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="4521"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Encrypted"/>
      <constructor name="new_finish"
                   c:identifier="udisks_encrypted_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40662">Finishes an operation started with udisks_encrypted_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="4537"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="40669">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="EncryptedProxy" c:type="UDisksEncrypted*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40664">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_encrypted_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_encrypted_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40752">Finishes an operation started with udisks_encrypted_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="4556"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="40759">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="EncryptedProxy" c:type="UDisksEncrypted*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40754">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_encrypted_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_encrypted_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40777">Like udisks_encrypted_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_encrypted_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4559"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="40792">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="EncryptedProxy" c:type="UDisksEncrypted*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40779">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40780">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40781">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40782">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40783">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_encrypted_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40687">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_encrypted_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4540"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="40702">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="EncryptedProxy" c:type="UDisksEncrypted*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40689">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40690">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40691">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40692">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40693">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_encrypted_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40632">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_encrypted_proxy_new_finish() to get the result of the operation.

See udisks_encrypted_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4529"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40634">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40635">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40636">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40637">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40638">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40639">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40640">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_encrypted_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40722">Like udisks_encrypted_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_encrypted_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_encrypted_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4548"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40724">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40725">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40726">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40727">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40728">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40729">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="40730">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="EncryptedProxyPrivate"
              c:type="UDisksEncryptedProxyPrivate*"/>
      </field>
    </class>
    <record name="EncryptedProxyClass"
            c:type="UDisksEncryptedProxyClass"
            glib:is-gtype-struct-for="EncryptedProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="40362">Class structure for #UDisksEncryptedProxy.</doc>
      <source-position filename="udisks-generated.h" line="4521"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40364">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="EncryptedProxyPrivate"
            c:type="UDisksEncryptedProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="4509"/>
    </record>
    <class name="EncryptedSkeleton"
           c:symbol-prefix="encrypted_skeleton"
           c:type="UDisksEncryptedSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksEncryptedSkeleton"
           glib:get-type="udisks_encrypted_skeleton_get_type"
           glib:type-struct="EncryptedSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="40814">The #UDisksEncryptedSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="4591"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Encrypted"/>
      <constructor name="new" c:identifier="udisks_encrypted_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41306">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="4599"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41311">The skeleton object.</doc>
          <type name="EncryptedSkeleton" c:type="UDisksEncrypted*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="EncryptedSkeletonPrivate"
              c:type="UDisksEncryptedSkeletonPrivate*"/>
      </field>
    </class>
    <record name="EncryptedSkeletonClass"
            c:type="UDisksEncryptedSkeletonClass"
            glib:is-gtype-struct-for="EncryptedSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="40820">Class structure for #UDisksEncryptedSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="4591"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="40822">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="EncryptedSkeletonPrivate"
            c:type="UDisksEncryptedSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="4579"/>
    </record>
    <enumeration name="Error"
                 glib:type-name="UDisksError"
                 glib:get-type="udisks_error_get_type"
                 c:type="UDisksError"
                 glib:error-domain="udisks-error-quark">
      <doc xml:space="preserve"
           filename="udisksenums.h"
           line="32">Error codes for the #UDISKS_ERROR error domain and the
corresponding D-Bus error names.</doc>
      <member name="failed"
              value="0"
              c:identifier="UDISKS_ERROR_FAILED"
              glib:nick="failed"
              glib:name="UDISKS_ERROR_FAILED">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="34">The operation failed.</doc>
      </member>
      <member name="cancelled"
              value="1"
              c:identifier="UDISKS_ERROR_CANCELLED"
              glib:nick="cancelled"
              glib:name="UDISKS_ERROR_CANCELLED">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="35">The operation was cancelled.</doc>
      </member>
      <member name="already_cancelled"
              value="2"
              c:identifier="UDISKS_ERROR_ALREADY_CANCELLED"
              glib:nick="already-cancelled"
              glib:name="UDISKS_ERROR_ALREADY_CANCELLED">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="36">The operation has already been cancelled.</doc>
      </member>
      <member name="not_authorized"
              value="3"
              c:identifier="UDISKS_ERROR_NOT_AUTHORIZED"
              glib:nick="not-authorized"
              glib:name="UDISKS_ERROR_NOT_AUTHORIZED">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="37">Not authorized to perform the requested operation.</doc>
      </member>
      <member name="not_authorized_can_obtain"
              value="4"
              c:identifier="UDISKS_ERROR_NOT_AUTHORIZED_CAN_OBTAIN"
              glib:nick="not-authorized-can-obtain"
              glib:name="UDISKS_ERROR_NOT_AUTHORIZED_CAN_OBTAIN">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="38">Like %UDISKS_ERROR_NOT_AUTHORIZED but authorization can be obtained through e.g. authentication.</doc>
      </member>
      <member name="not_authorized_dismissed"
              value="5"
              c:identifier="UDISKS_ERROR_NOT_AUTHORIZED_DISMISSED"
              glib:nick="not-authorized-dismissed"
              glib:name="UDISKS_ERROR_NOT_AUTHORIZED_DISMISSED">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="39">Like %UDISKS_ERROR_NOT_AUTHORIZED but an authentication was shown and the user dismissed it.</doc>
      </member>
      <member name="already_mounted"
              value="6"
              c:identifier="UDISKS_ERROR_ALREADY_MOUNTED"
              glib:nick="already-mounted"
              glib:name="UDISKS_ERROR_ALREADY_MOUNTED">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="40">The device is already mounted.</doc>
      </member>
      <member name="not_mounted"
              value="7"
              c:identifier="UDISKS_ERROR_NOT_MOUNTED"
              glib:nick="not-mounted"
              glib:name="UDISKS_ERROR_NOT_MOUNTED">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="41">The device is not mounted.</doc>
      </member>
      <member name="option_not_permitted"
              value="8"
              c:identifier="UDISKS_ERROR_OPTION_NOT_PERMITTED"
              glib:nick="option-not-permitted"
              glib:name="UDISKS_ERROR_OPTION_NOT_PERMITTED">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="42">Not permitted to use the requested option.</doc>
      </member>
      <member name="mounted_by_other_user"
              value="9"
              c:identifier="UDISKS_ERROR_MOUNTED_BY_OTHER_USER"
              glib:nick="mounted-by-other-user"
              glib:name="UDISKS_ERROR_MOUNTED_BY_OTHER_USER">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="43">The device is mounted by another user.</doc>
      </member>
      <member name="already_unmounting"
              value="10"
              c:identifier="UDISKS_ERROR_ALREADY_UNMOUNTING"
              glib:nick="already-unmounting"
              glib:name="UDISKS_ERROR_ALREADY_UNMOUNTING">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="44">The device is already unmounting.</doc>
      </member>
      <member name="not_supported"
              value="11"
              c:identifier="UDISKS_ERROR_NOT_SUPPORTED"
              glib:nick="not-supported"
              glib:name="UDISKS_ERROR_NOT_SUPPORTED">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="45">The operation is not supported due to missing driver/tool support.</doc>
      </member>
      <member name="timed_out"
              value="12"
              c:identifier="UDISKS_ERROR_TIMED_OUT"
              glib:nick="timed-out"
              glib:name="UDISKS_ERROR_TIMED_OUT">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="46">The operation timed out.</doc>
      </member>
      <member name="would_wakeup"
              value="13"
              c:identifier="UDISKS_ERROR_WOULD_WAKEUP"
              glib:nick="would-wakeup"
              glib:name="UDISKS_ERROR_WOULD_WAKEUP">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="47">The operation would wake up a disk that is in a deep-sleep state.</doc>
      </member>
      <member name="device_busy"
              value="14"
              c:identifier="UDISKS_ERROR_DEVICE_BUSY"
              glib:nick="device-busy"
              glib:name="UDISKS_ERROR_DEVICE_BUSY">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="48">Attempting to unmount a device that is busy.</doc>
      </member>
      <member name="iscsi_daemon_transport_failed"
              value="15"
              c:identifier="UDISKS_ERROR_ISCSI_DAEMON_TRANSPORT_FAILED"
              glib:nick="iscsi-daemon-transport-failed"
              glib:name="UDISKS_ERROR_ISCSI_DAEMON_TRANSPORT_FAILED">
      </member>
      <member name="iscsi_host_not_found"
              value="16"
              c:identifier="UDISKS_ERROR_ISCSI_HOST_NOT_FOUND"
              glib:nick="iscsi-host-not-found"
              glib:name="UDISKS_ERROR_ISCSI_HOST_NOT_FOUND">
      </member>
      <member name="iscsi_idmb"
              value="17"
              c:identifier="UDISKS_ERROR_ISCSI_IDMB"
              glib:nick="iscsi-idmb"
              glib:name="UDISKS_ERROR_ISCSI_IDMB">
      </member>
      <member name="iscsi_login_failed"
              value="18"
              c:identifier="UDISKS_ERROR_ISCSI_LOGIN_FAILED"
              glib:nick="iscsi-login-failed"
              glib:name="UDISKS_ERROR_ISCSI_LOGIN_FAILED">
      </member>
      <member name="iscsi_login_auth_failed"
              value="19"
              c:identifier="UDISKS_ERROR_ISCSI_LOGIN_AUTH_FAILED"
              glib:nick="iscsi-login-auth-failed"
              glib:name="UDISKS_ERROR_ISCSI_LOGIN_AUTH_FAILED">
      </member>
      <member name="iscsi_login_fatal"
              value="20"
              c:identifier="UDISKS_ERROR_ISCSI_LOGIN_FATAL"
              glib:nick="iscsi-login-fatal"
              glib:name="UDISKS_ERROR_ISCSI_LOGIN_FATAL">
      </member>
      <member name="iscsi_logout_failed"
              value="21"
              c:identifier="UDISKS_ERROR_ISCSI_LOGOUT_FAILED"
              glib:nick="iscsi-logout-failed"
              glib:name="UDISKS_ERROR_ISCSI_LOGOUT_FAILED">
      </member>
      <member name="iscsi_no_firmware"
              value="22"
              c:identifier="UDISKS_ERROR_ISCSI_NO_FIRMWARE"
              glib:nick="iscsi-no-firmware"
              glib:name="UDISKS_ERROR_ISCSI_NO_FIRMWARE">
      </member>
      <member name="iscsi_no_objects_found"
              value="23"
              c:identifier="UDISKS_ERROR_ISCSI_NO_OBJECTS_FOUND"
              glib:nick="iscsi-no-objects-found"
              glib:name="UDISKS_ERROR_ISCSI_NO_OBJECTS_FOUND">
      </member>
      <member name="iscsi_not_connected"
              value="24"
              c:identifier="UDISKS_ERROR_ISCSI_NOT_CONNECTED"
              glib:nick="iscsi-not-connected"
              glib:name="UDISKS_ERROR_ISCSI_NOT_CONNECTED">
      </member>
      <member name="iscsi_transport_failed"
              value="25"
              c:identifier="UDISKS_ERROR_ISCSI_TRANSPORT_FAILED"
              glib:nick="iscsi-transport-failed"
              glib:name="UDISKS_ERROR_ISCSI_TRANSPORT_FAILED">
      </member>
      <member name="iscsi_unknown_discovery_type"
              value="26"
              c:identifier="UDISKS_ERROR_ISCSI_UNKNOWN_DISCOVERY_TYPE"
              glib:nick="iscsi-unknown-discovery-type"
              glib:name="UDISKS_ERROR_ISCSI_UNKNOWN_DISCOVERY_TYPE">
      </member>
      <function name="quark" c:identifier="udisks_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <function-macro name="FILESYSTEM"
                    c:identifier="UDISKS_FILESYSTEM"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3673"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_BTRFS"
                    c:identifier="UDISKS_FILESYSTEM_BTRFS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5655"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_BTRFS_GET_IFACE"
                    c:identifier="UDISKS_FILESYSTEM_BTRFS_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5657"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_BTRFS_PROXY"
                    c:identifier="UDISKS_FILESYSTEM_BTRFS_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5992"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_BTRFS_PROXY_CLASS"
                    c:identifier="UDISKS_FILESYSTEM_BTRFS_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5993"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_BTRFS_PROXY_GET_CLASS"
                    c:identifier="UDISKS_FILESYSTEM_BTRFS_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5994"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_BTRFS_SKELETON"
                    c:identifier="UDISKS_FILESYSTEM_BTRFS_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6062"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_BTRFS_SKELETON_CLASS"
                    c:identifier="UDISKS_FILESYSTEM_BTRFS_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6063"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_BTRFS_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_FILESYSTEM_BTRFS_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6064"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_GET_IFACE"
                    c:identifier="UDISKS_FILESYSTEM_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3675"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_PROXY"
                    c:identifier="UDISKS_FILESYSTEM_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3954"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_PROXY_CLASS"
                    c:identifier="UDISKS_FILESYSTEM_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3955"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_PROXY_GET_CLASS"
                    c:identifier="UDISKS_FILESYSTEM_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3956"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_SKELETON"
                    c:identifier="UDISKS_FILESYSTEM_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4024"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_SKELETON_CLASS"
                    c:identifier="UDISKS_FILESYSTEM_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4025"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILESYSTEM_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_FILESYSTEM_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4026"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Filesystem"
               c:symbol-prefix="filesystem"
               c:type="UDisksFilesystem"
               glib:type-name="UDisksFilesystem"
               glib:get-type="udisks_filesystem_get_type"
               glib:type-struct="FilesystemIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="35041">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="3733"/>
      <function name="interface_info"
                c:identifier="udisks_filesystem_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34904">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="3741"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="34909">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_filesystem_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34917">Overrides all #GObject properties in the #UDisksFilesystem interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="3742"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="34925">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="34919">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="34920">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_mount_points"
                      invoker="get_mount_points"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35289">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.MountPoints"&gt;"MountPoints"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_filesystem_dup_mount_points() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3702"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35299">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35291">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size" invoker="get_size" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35342">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3704"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35350">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35344">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_check">
        <source-position filename="udisks-generated.h" line="3706"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_mount">
        <source-position filename="udisks-generated.h" line="3686"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_repair">
        <source-position filename="udisks-generated.h" line="3711"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_resize">
        <source-position filename="udisks-generated.h" line="3716"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_label">
        <source-position filename="udisks-generated.h" line="3691"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_uuid">
        <source-position filename="udisks-generated.h" line="3727"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_uuid" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_take_ownership">
        <source-position filename="udisks-generated.h" line="3722"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_unmount">
        <source-position filename="udisks-generated.h" line="3697"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_check"
              c:identifier="udisks_filesystem_call_check"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35901">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Check"&gt;Check()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_call_check_finish() to get the result of the operation.

See udisks_filesystem_call_check_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3882"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35903">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35904">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35905">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35906">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35907">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_check_finish"
              c:identifier="udisks_filesystem_call_check_finish"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35936">Finishes an operation started with udisks_filesystem_call_check().</doc>
        <source-position filename="udisks-generated.h" line="3889"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35945">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35938">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="out_consistent"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35939">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35940">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_call_check().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_check_sync"
              c:identifier="udisks_filesystem_call_check_sync"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35968">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Check"&gt;Check()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_call_check() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3895"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35980">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35970">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35971">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_consistent"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35972">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35973">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_mount" c:identifier="udisks_filesystem_call_mount">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35589">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Mount"&gt;Mount()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_call_mount_finish() to get the result of the operation.

See udisks_filesystem_call_mount_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3824"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35591">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35592">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35593">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35594">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35595">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_mount_finish"
              c:identifier="udisks_filesystem_call_mount_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35622">Finishes an operation started with udisks_filesystem_call_mount().</doc>
        <source-position filename="udisks-generated.h" line="3831"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35631">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35624">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="out_mount_path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35625">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35626">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_call_mount().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_mount_sync"
              c:identifier="udisks_filesystem_call_mount_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35652">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Mount"&gt;Mount()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_call_mount() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3837"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35664">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35654">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35655">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_mount_path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35656">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35657">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_repair"
              c:identifier="udisks_filesystem_call_repair"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36011">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Repair"&gt;Repair()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_call_repair_finish() to get the result of the operation.

See udisks_filesystem_call_repair_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3902"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36013">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36014">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36015">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36016">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36017">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_repair_finish"
              c:identifier="udisks_filesystem_call_repair_finish"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36046">Finishes an operation started with udisks_filesystem_call_repair().</doc>
        <source-position filename="udisks-generated.h" line="3909"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="36055">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36048">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="out_repaired"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36049">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36050">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_call_repair().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_repair_sync"
              c:identifier="udisks_filesystem_call_repair_sync"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36078">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Repair"&gt;Repair()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_call_repair() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3915"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="36090">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36080">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36081">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_repaired"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36082">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36083">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize"
              c:identifier="udisks_filesystem_call_resize"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35791">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_call_resize_finish() to get the result of the operation.

See udisks_filesystem_call_resize_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3862"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35793">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35794">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35795">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35796">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35797">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35798">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_finish"
              c:identifier="udisks_filesystem_call_resize_finish"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35829">Finishes an operation started with udisks_filesystem_call_resize().</doc>
        <source-position filename="udisks-generated.h" line="3870"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35837">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35831">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35832">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_call_resize().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_sync"
              c:identifier="udisks_filesystem_call_resize_sync"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35858">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_call_resize() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3875"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35870">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35860">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35861">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35862">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35863">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_label"
              c:identifier="udisks_filesystem_call_set_label">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35375">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_call_set_label_finish() to get the result of the operation.

See udisks_filesystem_call_set_label_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3784"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35377">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35378">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35379">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35380">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35381">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35382">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_label_finish"
              c:identifier="udisks_filesystem_call_set_label_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35411">Finishes an operation started with udisks_filesystem_call_set_label().</doc>
        <source-position filename="udisks-generated.h" line="3792"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35419">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35413">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35414">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_call_set_label().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_label_sync"
              c:identifier="udisks_filesystem_call_set_label_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35438">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_call_set_label() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3797"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35450">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35440">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35441">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35442">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35443">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_uuid"
              c:identifier="udisks_filesystem_call_set_uuid"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35479">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.SetUUID"&gt;SetUUID()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_call_set_uuid_finish() to get the result of the operation.

See udisks_filesystem_call_set_uuid_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3804"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35481">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35482">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35483">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35484">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35485">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35486">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_uuid_finish"
              c:identifier="udisks_filesystem_call_set_uuid_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35517">Finishes an operation started with udisks_filesystem_call_set_uuid().</doc>
        <source-position filename="udisks-generated.h" line="3812"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35525">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35519">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35520">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_call_set_uuid().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_uuid_sync"
              c:identifier="udisks_filesystem_call_set_uuid_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35546">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.SetUUID"&gt;SetUUID()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_call_set_uuid() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3817"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35558">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35548">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35549">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35550">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35551">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_take_ownership"
              c:identifier="udisks_filesystem_call_take_ownership"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36121">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.TakeOwnership"&gt;TakeOwnership()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_call_take_ownership_finish() to get the result of the operation.

See udisks_filesystem_call_take_ownership_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3922"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36123">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36124">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36125">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36126">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36127">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_take_ownership_finish"
              c:identifier="udisks_filesystem_call_take_ownership_finish"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36156">Finishes an operation started with udisks_filesystem_call_take_ownership().</doc>
        <source-position filename="udisks-generated.h" line="3929"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="36164">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36158">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36159">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_call_take_ownership().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_take_ownership_sync"
              c:identifier="udisks_filesystem_call_take_ownership_sync"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36185">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.TakeOwnership"&gt;TakeOwnership()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_call_take_ownership() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3934"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="36196">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36187">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36188">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36189">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_unmount"
              c:identifier="udisks_filesystem_call_unmount">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35693">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Unmount"&gt;Unmount()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_call_unmount_finish() to get the result of the operation.

See udisks_filesystem_call_unmount_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3844"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35695">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35696">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35697">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35698">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35699">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_unmount_finish"
              c:identifier="udisks_filesystem_call_unmount_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35726">Finishes an operation started with udisks_filesystem_call_unmount().</doc>
        <source-position filename="udisks-generated.h" line="3851"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35734">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35728">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35729">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_call_unmount().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_unmount_sync"
              c:identifier="udisks_filesystem_call_unmount_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35753">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Unmount"&gt;Unmount()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_call_unmount() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3856"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35764">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35755">A #UDisksFilesystemProxy.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35756">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35757">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_check"
              c:identifier="udisks_filesystem_complete_check"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36322">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Check"&gt;Check()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3767"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36324">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36325">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="consistent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36326">Parameter to return.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_mount"
              c:identifier="udisks_filesystem_complete_mount">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36263">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Mount"&gt;Mount()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3754"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36265">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36266">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="mount_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36267">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_repair"
              c:identifier="udisks_filesystem_complete_repair"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36345">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Repair"&gt;Repair()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3772"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36347">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36348">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="repaired" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36349">Parameter to return.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_resize"
              c:identifier="udisks_filesystem_complete_resize"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36302">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Resize"&gt;Resize()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3763"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36304">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36305">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_label"
              c:identifier="udisks_filesystem_complete_set_label">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36225">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3746"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36227">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36228">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_uuid"
              c:identifier="udisks_filesystem_complete_set_uuid"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36243">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.SetUUID"&gt;SetUUID()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3750"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36245">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36246">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_take_ownership"
              c:identifier="udisks_filesystem_complete_take_ownership"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36368">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.TakeOwnership"&gt;TakeOwnership()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3777"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36370">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36371">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_unmount"
              c:identifier="udisks_filesystem_complete_unmount">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36284">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Unmount"&gt;Unmount()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3759"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36286">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36287">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_mount_points"
              c:identifier="udisks_filesystem_dup_mount_points"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35309">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.MountPoints"&gt;"MountPoints"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3944"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35317">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35311">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mount_points"
              c:identifier="udisks_filesystem_get_mount_points"
              glib:get-property="mount-points"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35289">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.MountPoints"&gt;"MountPoints"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_filesystem_dup_mount_points() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3943"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35299">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35291">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_filesystem_get_size"
              glib:get-property="size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35342">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3947"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35350">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35344">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_mount_points"
              c:identifier="udisks_filesystem_set_mount_points"
              glib:set-property="mount-points"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35327">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.MountPoints"&gt;"MountPoints"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3945"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35329">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35330">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_filesystem_set_size"
              glib:set-property="size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35360">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3948"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35362">A #UDisksFilesystem.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35363">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <property name="mount-points"
                writable="1"
                transfer-ownership="none"
                setter="set_mount_points"
                getter="get_mount_points">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35269">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.MountPoints"&gt;"MountPoints"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="size"
                writable="1"
                transfer-ownership="none"
                setter="set_size"
                getter="get_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35278">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <glib:signal name="handle-check" when="last" version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35193">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Check"&gt;Check()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_complete_check() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35203">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35196">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35197">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-mount" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35121">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Mount"&gt;Mount()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_complete_mount() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35131">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35124">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35125">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-repair" when="last" version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35218">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Repair"&gt;Repair()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_complete_repair() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35228">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35221">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35222">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-resize" when="last" version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35167">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Resize"&gt;Resize()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_complete_resize() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35178">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35170">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35171">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35172">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-label" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35071">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_complete_set_label() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35082">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35074">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35075">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35076">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-uuid" when="last" version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35095">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.SetUUID"&gt;SetUUID()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_complete_set_uuid() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35106">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35098">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35099">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35100">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-take-ownership" when="last" version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35243">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.TakeOwnership"&gt;TakeOwnership()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_complete_take_ownership() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35253">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35246">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35247">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-unmount" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35144">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem.Unmount"&gt;Unmount()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_complete_unmount() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="35154">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35147">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35148">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <interface name="FilesystemBTRFS"
               c:symbol-prefix="filesystem_btrfs"
               c:type="UDisksFilesystemBTRFS"
               version="2.1.3"
               glib:type-name="UDisksFilesystemBTRFS"
               glib:get-type="udisks_filesystem_btrfs_get_type"
               glib:type-struct="FilesystemBTRFSIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="50798">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="5731"/>
      <function name="interface_info"
                c:identifier="udisks_filesystem_btrfs_interface_info"
                version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50642">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="5739"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50647">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_filesystem_btrfs_override_properties"
                version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50657">Overrides all #GObject properties in the #UDisksFilesystemBTRFS interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="5740"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50665">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50659">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50660">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_label"
                      invoker="get_label"
                      version="2.1.3"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51117">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.label"&gt;"label"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_filesystem_btrfs_dup_label() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5700"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51127">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51119">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_num_devices"
                      invoker="get_num_devices"
                      version="2.1.3"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51235">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.num_devices"&gt;"num_devices"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5702"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51243">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51237">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_used"
                      invoker="get_used"
                      version="2.1.3"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51272">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.used"&gt;"used"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5704"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51280">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51274">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_uuid"
                      invoker="get_uuid"
                      version="2.1.3"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51176">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.uuid"&gt;"uuid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_filesystem_btrfs_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5706"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51186">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51178">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_add_device">
        <source-position filename="udisks-generated.h" line="5708"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_snapshot">
        <source-position filename="udisks-generated.h" line="5668"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_source" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_dest" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_ro" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_subvolume">
        <source-position filename="udisks-generated.h" line="5676"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_subvolumes">
        <source-position filename="udisks-generated.h" line="5682"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_snapshots_only" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_remove_device">
        <source-position filename="udisks-generated.h" line="5714"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_remove_subvolume">
        <source-position filename="udisks-generated.h" line="5688"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_repair">
        <source-position filename="udisks-generated.h" line="5720"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_resize">
        <source-position filename="udisks-generated.h" line="5725"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_label">
        <source-position filename="udisks-generated.h" line="5694"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_add_device"
              c:identifier="udisks_filesystem_btrfs_call_add_device"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51309">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_call_add_device_finish() to get the result of the operation.

See udisks_filesystem_btrfs_call_add_device_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5785"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51311">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51312">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51313">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51314">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51315">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51316">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_device_finish"
              c:identifier="udisks_filesystem_btrfs_call_add_device_finish"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51347">Finishes an operation started with udisks_filesystem_btrfs_call_add_device().</doc>
        <source-position filename="udisks-generated.h" line="5793"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51355">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51349">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51350">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_call_add_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_device_sync"
              c:identifier="udisks_filesystem_btrfs_call_add_device_sync"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51376">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_call_add_device() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5798"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51388">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51378">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51379">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51380">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51381">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_snapshot"
              c:identifier="udisks_filesystem_btrfs_call_create_snapshot"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51871">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.CreateSnapshot"&gt;CreateSnapshot()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_call_create_snapshot_finish() to get the result of the operation.

See udisks_filesystem_btrfs_call_create_snapshot_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5889"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51873">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51874">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51875">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_ro" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51876">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51877">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51878">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51879">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51880">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_snapshot_finish"
              c:identifier="udisks_filesystem_btrfs_call_create_snapshot_finish"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51915">Finishes an operation started with udisks_filesystem_btrfs_call_create_snapshot().</doc>
        <source-position filename="udisks-generated.h" line="5899"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51923">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51917">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51918">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_call_create_snapshot().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_snapshot_sync"
              c:identifier="udisks_filesystem_btrfs_call_create_snapshot_sync"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51944">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.CreateSnapshot"&gt;CreateSnapshot()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_call_create_snapshot() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5904"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51958">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51946">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51947">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51948">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_ro" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51949">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51950">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51951">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_subvolume"
              c:identifier="udisks_filesystem_btrfs_call_create_subvolume"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51529">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.CreateSubvolume"&gt;CreateSubvolume()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_call_create_subvolume_finish() to get the result of the operation.

See udisks_filesystem_btrfs_call_create_subvolume_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5825"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51531">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51532">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51533">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51534">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51535">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51536">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_subvolume_finish"
              c:identifier="udisks_filesystem_btrfs_call_create_subvolume_finish"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51567">Finishes an operation started with udisks_filesystem_btrfs_call_create_subvolume().</doc>
        <source-position filename="udisks-generated.h" line="5833"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51575">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51569">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51570">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_call_create_subvolume().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_subvolume_sync"
              c:identifier="udisks_filesystem_btrfs_call_create_subvolume_sync"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51596">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.CreateSubvolume"&gt;CreateSubvolume()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_call_create_subvolume() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5838"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51608">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51598">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51599">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51600">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51601">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_subvolumes"
              c:identifier="udisks_filesystem_btrfs_call_get_subvolumes"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51749">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.GetSubvolumes"&gt;GetSubvolumes()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_call_get_subvolumes_finish() to get the result of the operation.

See udisks_filesystem_btrfs_call_get_subvolumes_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5865"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51751">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_snapshots_only" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51752">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51753">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51754">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51755">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51756">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_subvolumes_finish"
              c:identifier="udisks_filesystem_btrfs_call_get_subvolumes_finish"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51787">Finishes an operation started with udisks_filesystem_btrfs_call_get_subvolumes().</doc>
        <source-position filename="udisks-generated.h" line="5873"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51797">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51789">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="out_subvolumes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51790">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_subvolumes_cnt"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51791">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51792">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_call_get_subvolumes().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_subvolumes_sync"
              c:identifier="udisks_filesystem_btrfs_call_get_subvolumes_sync"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51822">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.GetSubvolumes"&gt;GetSubvolumes()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_call_get_subvolumes() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5880"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51836">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51824">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_snapshots_only" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51825">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51826">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_subvolumes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51827">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_subvolumes_cnt"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51828">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51829">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device"
              c:identifier="udisks_filesystem_btrfs_call_remove_device"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51419">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_call_remove_device_finish() to get the result of the operation.

See udisks_filesystem_btrfs_call_remove_device_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5805"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51421">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51422">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51423">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51424">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51425">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51426">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device_finish"
              c:identifier="udisks_filesystem_btrfs_call_remove_device_finish"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51457">Finishes an operation started with udisks_filesystem_btrfs_call_remove_device().</doc>
        <source-position filename="udisks-generated.h" line="5813"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51465">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51459">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51460">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_call_remove_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device_sync"
              c:identifier="udisks_filesystem_btrfs_call_remove_device_sync"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51486">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_call_remove_device() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5818"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51498">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51488">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51489">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51490">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51491">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_subvolume"
              c:identifier="udisks_filesystem_btrfs_call_remove_subvolume"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51639">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.RemoveSubvolume"&gt;RemoveSubvolume()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_call_remove_subvolume_finish() to get the result of the operation.

See udisks_filesystem_btrfs_call_remove_subvolume_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5845"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51641">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51642">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51643">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51644">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51645">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51646">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_subvolume_finish"
              c:identifier="udisks_filesystem_btrfs_call_remove_subvolume_finish"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51677">Finishes an operation started with udisks_filesystem_btrfs_call_remove_subvolume().</doc>
        <source-position filename="udisks-generated.h" line="5853"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51685">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51679">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51680">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_call_remove_subvolume().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_subvolume_sync"
              c:identifier="udisks_filesystem_btrfs_call_remove_subvolume_sync"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51706">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.RemoveSubvolume"&gt;RemoveSubvolume()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_call_remove_subvolume() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5858"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51718">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51708">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51709">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51710">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51711">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_repair"
              c:identifier="udisks_filesystem_btrfs_call_repair"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51993">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.Repair"&gt;Repair()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_call_repair_finish() to get the result of the operation.

See udisks_filesystem_btrfs_call_repair_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5913"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51995">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51996">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51997">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51998">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51999">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_repair_finish"
              c:identifier="udisks_filesystem_btrfs_call_repair_finish"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52028">Finishes an operation started with udisks_filesystem_btrfs_call_repair().</doc>
        <source-position filename="udisks-generated.h" line="5920"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="52036">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52030">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52031">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_call_repair().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_repair_sync"
              c:identifier="udisks_filesystem_btrfs_call_repair_sync"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52057">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.Repair"&gt;Repair()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_call_repair() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5925"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="52068">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52059">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52060">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52061">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize"
              c:identifier="udisks_filesystem_btrfs_call_resize"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52097">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_call_resize_finish() to get the result of the operation.

See udisks_filesystem_btrfs_call_resize_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5931"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52099">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52100">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52101">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52102">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52103">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52104">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_finish"
              c:identifier="udisks_filesystem_btrfs_call_resize_finish"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52135">Finishes an operation started with udisks_filesystem_btrfs_call_resize().</doc>
        <source-position filename="udisks-generated.h" line="5939"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="52143">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52137">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52138">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_call_resize().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_sync"
              c:identifier="udisks_filesystem_btrfs_call_resize_sync"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52164">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_call_resize() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5944"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="52176">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52166">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52167">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52168">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52169">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_label"
              c:identifier="udisks_filesystem_btrfs_call_set_label"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52207">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_call_set_label_finish() to get the result of the operation.

See udisks_filesystem_btrfs_call_set_label_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5951"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52209">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52210">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52211">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52212">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52213">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52214">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_label_finish"
              c:identifier="udisks_filesystem_btrfs_call_set_label_finish"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52245">Finishes an operation started with udisks_filesystem_btrfs_call_set_label().</doc>
        <source-position filename="udisks-generated.h" line="5959"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="52253">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52247">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52248">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_call_set_label().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_label_sync"
              c:identifier="udisks_filesystem_btrfs_call_set_label_sync"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52274">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_call_set_label() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5964"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="52286">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52276">A #UDisksFilesystemBTRFSProxy.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52277">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52278">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52279">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_add_device"
              c:identifier="udisks_filesystem_btrfs_complete_add_device"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52317">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5744"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52319">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52320">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_snapshot"
              c:identifier="udisks_filesystem_btrfs_complete_create_snapshot"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52423">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.CreateSnapshot"&gt;CreateSnapshot()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5766"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52425">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52426">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_subvolume"
              c:identifier="udisks_filesystem_btrfs_complete_create_subvolume"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52357">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.CreateSubvolume"&gt;CreateSubvolume()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5752"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52359">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52360">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_subvolumes"
              c:identifier="udisks_filesystem_btrfs_complete_get_subvolumes"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52397">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.GetSubvolumes"&gt;GetSubvolumes()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5760"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52399">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52400">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="subvolumes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52401">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="subvolumes_cnt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52402">Parameter to return.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_remove_device"
              c:identifier="udisks_filesystem_btrfs_complete_remove_device"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52337">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5748"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52339">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52340">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_remove_subvolume"
              c:identifier="udisks_filesystem_btrfs_complete_remove_subvolume"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52377">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.RemoveSubvolume"&gt;RemoveSubvolume()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5756"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52379">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52380">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_repair"
              c:identifier="udisks_filesystem_btrfs_complete_repair"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52443">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.Repair"&gt;Repair()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5770"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52445">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52446">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_resize"
              c:identifier="udisks_filesystem_btrfs_complete_resize"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52463">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.Resize"&gt;Resize()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5774"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52465">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52466">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_label"
              c:identifier="udisks_filesystem_btrfs_complete_set_label"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52483">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5778"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52485">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52486">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_label"
              c:identifier="udisks_filesystem_btrfs_dup_label"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51139">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.label"&gt;"label"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5975"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51147">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51141">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_uuid"
              c:identifier="udisks_filesystem_btrfs_dup_uuid"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51198">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.uuid"&gt;"uuid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5979"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51206">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51200">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_label"
              c:identifier="udisks_filesystem_btrfs_get_label"
              glib:get-property="label"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51117">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.label"&gt;"label"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_filesystem_btrfs_dup_label() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5974"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51127">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51119">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_devices"
              c:identifier="udisks_filesystem_btrfs_get_num_devices"
              glib:get-property="num-devices"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51235">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.num_devices"&gt;"num_devices"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5982"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51243">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51237">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_used"
              c:identifier="udisks_filesystem_btrfs_get_used"
              glib:get-property="used"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51272">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.used"&gt;"used"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5985"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51280">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51274">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid"
              c:identifier="udisks_filesystem_btrfs_get_uuid"
              glib:get-property="uuid"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51176">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.uuid"&gt;"uuid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_filesystem_btrfs_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5978"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51186">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51178">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_label"
              c:identifier="udisks_filesystem_btrfs_set_label"
              glib:set-property="label"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51159">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.label"&gt;"label"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5976"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51161">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51162">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_num_devices"
              c:identifier="udisks_filesystem_btrfs_set_num_devices"
              glib:set-property="num-devices"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51255">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.num_devices"&gt;"num_devices"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5983"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51257">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51258">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_used"
              c:identifier="udisks_filesystem_btrfs_set_used"
              glib:set-property="used"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51292">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.used"&gt;"used"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5986"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51294">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51295">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uuid"
              c:identifier="udisks_filesystem_btrfs_set_uuid"
              glib:set-property="uuid"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51218">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.uuid"&gt;"uuid"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5980"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51220">A #UDisksFilesystemBTRFS.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51221">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="label"
                version="2.1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_label"
                getter="get_label"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51071">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.label"&gt;"label"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="num-devices"
                version="2.1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_num_devices"
                getter="get_num_devices"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51093">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.num_devices"&gt;"num_devices"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="used"
                version="2.1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_used"
                getter="get_used"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51104">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.used"&gt;"used"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="uuid"
                version="2.1.3"
                writable="1"
                transfer-ownership="none"
                setter="set_uuid"
                getter="get_uuid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51082">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Filesystem-BTRFS.uuid"&gt;"uuid"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-add-device" when="last" version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50835">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_btrfs_complete_add_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50846">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50838">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50839">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50840">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-snapshot" when="last" version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50965">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.CreateSnapshot"&gt;CreateSnapshot()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_btrfs_complete_create_snapshot() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50978">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50968">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50969">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50970">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_ro" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50971">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50972">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-subvolume" when="last" version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50887">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.CreateSubvolume"&gt;CreateSubvolume()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_btrfs_complete_create_subvolume() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50898">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50890">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50891">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50892">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-subvolumes" when="last" version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50939">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.GetSubvolumes"&gt;GetSubvolumes()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_btrfs_complete_get_subvolumes() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50950">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50942">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_snapshots_only" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50943">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50944">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-remove-device" when="last" version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50861">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_btrfs_complete_remove_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50872">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50864">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50865">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50866">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-remove-subvolume" when="last" version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50913">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.RemoveSubvolume"&gt;RemoveSubvolume()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_btrfs_complete_remove_subvolume() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50924">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50916">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50917">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50918">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-repair" when="last" version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50993">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.Repair"&gt;Repair()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_btrfs_complete_repair() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51003">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50996">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="50997">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-resize" when="last" version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51018">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.Resize"&gt;Resize()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_btrfs_complete_resize() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51029">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51021">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51022">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51023">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-label" when="last" version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="51044">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Filesystem-BTRFS.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_filesystem_btrfs_complete_set_label() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="51055">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51047">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51048">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51049">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="FilesystemBTRFSIface"
            c:type="UDisksFilesystemBTRFSIface"
            glib:is-gtype-struct-for="FilesystemBTRFS"
            version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="50806">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="5731"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50808">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_create_snapshot">
        <callback name="handle_create_snapshot">
          <source-position filename="udisks-generated.h" line="5668"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_source" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_dest" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_ro" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_create_subvolume">
        <callback name="handle_create_subvolume">
          <source-position filename="udisks-generated.h" line="5676"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_subvolumes">
        <callback name="handle_get_subvolumes">
          <source-position filename="udisks-generated.h" line="5682"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_snapshots_only" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_remove_subvolume">
        <callback name="handle_remove_subvolume">
          <source-position filename="udisks-generated.h" line="5688"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_label">
        <callback name="handle_set_label">
          <source-position filename="udisks-generated.h" line="5694"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_label" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_label">
        <callback name="get_label">
          <source-position filename="udisks-generated.h" line="5700"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51127">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="51119">A #UDisksFilesystemBTRFS.</doc>
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_num_devices">
        <callback name="get_num_devices">
          <source-position filename="udisks-generated.h" line="5702"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51243">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="51237">A #UDisksFilesystemBTRFS.</doc>
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_used">
        <callback name="get_used">
          <source-position filename="udisks-generated.h" line="5704"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51280">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="51274">A #UDisksFilesystemBTRFS.</doc>
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_uuid">
        <callback name="get_uuid">
          <source-position filename="udisks-generated.h" line="5706"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="51186">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="51178">A #UDisksFilesystemBTRFS.</doc>
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_add_device">
        <callback name="handle_add_device">
          <source-position filename="udisks-generated.h" line="5708"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_device" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_remove_device">
        <callback name="handle_remove_device">
          <source-position filename="udisks-generated.h" line="5714"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_device" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_repair">
        <callback name="handle_repair">
          <source-position filename="udisks-generated.h" line="5720"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_resize">
        <callback name="handle_resize">
          <source-position filename="udisks-generated.h" line="5725"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="FilesystemBTRFSProxy"
           c:symbol-prefix="filesystem_btrfs_proxy"
           c:type="UDisksFilesystemBTRFSProxy"
           version="2.1.3"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksFilesystemBTRFSProxy"
           glib:get-type="udisks_filesystem_btrfs_proxy_get_type"
           glib:type-struct="FilesystemBTRFSProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="52505">The #UDisksFilesystemBTRFSProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="6012"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="FilesystemBTRFS"/>
      <constructor name="new_finish"
                   c:identifier="udisks_filesystem_btrfs_proxy_new_finish"
                   version="2.1.3"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52819">Finishes an operation started with udisks_filesystem_btrfs_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="6028"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="52826">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemBTRFSProxy" c:type="UDisksFilesystemBTRFS*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52821">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_filesystem_btrfs_proxy_new_for_bus_finish"
                   version="2.1.3"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52915">Finishes an operation started with udisks_filesystem_btrfs_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="6047"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="52922">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemBTRFSProxy" c:type="UDisksFilesystemBTRFS*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52917">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_btrfs_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_filesystem_btrfs_proxy_new_for_bus_sync"
                   version="2.1.3"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52942">Like udisks_filesystem_btrfs_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6050"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="52957">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemBTRFSProxy" c:type="UDisksFilesystemBTRFS*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52944">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52945">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52946">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52947">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52948">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_filesystem_btrfs_proxy_new_sync"
                   version="2.1.3"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52846">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_filesystem_btrfs_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6031"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="52861">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemBTRFSProxy" c:type="UDisksFilesystemBTRFS*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52848">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52849">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52850">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52851">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52852">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_filesystem_btrfs_proxy_new"
                version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52787">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_proxy_new_finish() to get the result of the operation.

See udisks_filesystem_btrfs_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6020"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52789">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52790">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52791">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52792">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52793">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52794">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52795">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_filesystem_btrfs_proxy_new_for_bus"
                version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52883">Like udisks_filesystem_btrfs_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_btrfs_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_filesystem_btrfs_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6039"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52885">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52886">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52887">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52888">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52889">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52890">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="52891">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="FilesystemBTRFSProxyPrivate"
              c:type="UDisksFilesystemBTRFSProxyPrivate*"/>
      </field>
    </class>
    <record name="FilesystemBTRFSProxyClass"
            c:type="UDisksFilesystemBTRFSProxyClass"
            glib:is-gtype-struct-for="FilesystemBTRFSProxy"
            version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="52513">Class structure for #UDisksFilesystemBTRFSProxy.</doc>
      <source-position filename="udisks-generated.h" line="6012"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52515">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="FilesystemBTRFSProxyPrivate"
            c:type="UDisksFilesystemBTRFSProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="6000"/>
    </record>
    <class name="FilesystemBTRFSSkeleton"
           c:symbol-prefix="filesystem_btrfs_skeleton"
           c:type="UDisksFilesystemBTRFSSkeleton"
           version="2.1.3"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksFilesystemBTRFSSkeleton"
           glib:get-type="udisks_filesystem_btrfs_skeleton_get_type"
           glib:type-struct="FilesystemBTRFSSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="52981">The #UDisksFilesystemBTRFSSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="6082"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="FilesystemBTRFS"/>
      <constructor name="new"
                   c:identifier="udisks_filesystem_btrfs_skeleton_new"
                   version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="53477">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="6090"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="53482">The skeleton object.</doc>
          <type name="FilesystemBTRFSSkeleton"
                c:type="UDisksFilesystemBTRFS*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="FilesystemBTRFSSkeletonPrivate"
              c:type="UDisksFilesystemBTRFSSkeletonPrivate*"/>
      </field>
    </class>
    <record name="FilesystemBTRFSSkeletonClass"
            c:type="UDisksFilesystemBTRFSSkeletonClass"
            glib:is-gtype-struct-for="FilesystemBTRFSSkeleton"
            version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="52989">Class structure for #UDisksFilesystemBTRFSSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="6082"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="52991">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="FilesystemBTRFSSkeletonPrivate"
            c:type="UDisksFilesystemBTRFSSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="6070"/>
    </record>
    <record name="FilesystemIface"
            c:type="UDisksFilesystemIface"
            glib:is-gtype-struct-for="Filesystem">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="35047">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="3733"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="35049">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_mount">
        <callback name="handle_mount">
          <source-position filename="udisks-generated.h" line="3686"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_label">
        <callback name="handle_set_label">
          <source-position filename="udisks-generated.h" line="3691"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_label" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_unmount">
        <callback name="handle_unmount">
          <source-position filename="udisks-generated.h" line="3697"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_mount_points">
        <callback name="get_mount_points">
          <source-position filename="udisks-generated.h" line="3702"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35299">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="35291">A #UDisksFilesystem.</doc>
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <source-position filename="udisks-generated.h" line="3704"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="35350">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="35344">A #UDisksFilesystem.</doc>
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_check">
        <callback name="handle_check">
          <source-position filename="udisks-generated.h" line="3706"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_repair">
        <callback name="handle_repair">
          <source-position filename="udisks-generated.h" line="3711"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_resize">
        <callback name="handle_resize">
          <source-position filename="udisks-generated.h" line="3716"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_take_ownership">
        <callback name="handle_take_ownership">
          <source-position filename="udisks-generated.h" line="3722"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_uuid">
        <callback name="handle_set_uuid">
          <source-position filename="udisks-generated.h" line="3727"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Filesystem" c:type="UDisksFilesystem*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_uuid" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="FilesystemProxy"
           c:symbol-prefix="filesystem_proxy"
           c:type="UDisksFilesystemProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksFilesystemProxy"
           glib:get-type="udisks_filesystem_proxy_get_type"
           glib:type-struct="FilesystemProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="36390">The #UDisksFilesystemProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="3974"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Filesystem"/>
      <constructor name="new_finish"
                   c:identifier="udisks_filesystem_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36670">Finishes an operation started with udisks_filesystem_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="3990"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="36677">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemProxy" c:type="UDisksFilesystem*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36672">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_filesystem_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36760">Finishes an operation started with udisks_filesystem_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="4009"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="36767">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemProxy" c:type="UDisksFilesystem*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36762">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_filesystem_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_filesystem_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36785">Like udisks_filesystem_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_filesystem_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4012"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="36800">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemProxy" c:type="UDisksFilesystem*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36787">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36788">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36789">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36790">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36791">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_filesystem_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36695">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_filesystem_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3993"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="36710">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="FilesystemProxy" c:type="UDisksFilesystem*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36697">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36698">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36699">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36700">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36701">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_filesystem_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36640">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_proxy_new_finish() to get the result of the operation.

See udisks_filesystem_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3982"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36642">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36643">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36644">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36645">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36646">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36647">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36648">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_filesystem_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36730">Like udisks_filesystem_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_filesystem_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_filesystem_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4001"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36732">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36733">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36734">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36735">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36736">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36737">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="36738">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="FilesystemProxyPrivate"
              c:type="UDisksFilesystemProxyPrivate*"/>
      </field>
    </class>
    <record name="FilesystemProxyClass"
            c:type="UDisksFilesystemProxyClass"
            glib:is-gtype-struct-for="FilesystemProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="36396">Class structure for #UDisksFilesystemProxy.</doc>
      <source-position filename="udisks-generated.h" line="3974"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36398">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="FilesystemProxyPrivate"
            c:type="UDisksFilesystemProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="3962"/>
    </record>
    <class name="FilesystemSkeleton"
           c:symbol-prefix="filesystem_skeleton"
           c:type="UDisksFilesystemSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksFilesystemSkeleton"
           glib:get-type="udisks_filesystem_skeleton_get_type"
           glib:type-struct="FilesystemSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="36822">The #UDisksFilesystemSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="4044"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Filesystem"/>
      <constructor name="new" c:identifier="udisks_filesystem_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37288">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="4052"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37293">The skeleton object.</doc>
          <type name="FilesystemSkeleton" c:type="UDisksFilesystem*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="FilesystemSkeletonPrivate"
              c:type="UDisksFilesystemSkeletonPrivate*"/>
      </field>
    </class>
    <record name="FilesystemSkeletonClass"
            c:type="UDisksFilesystemSkeletonClass"
            glib:is-gtype-struct-for="FilesystemSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="36828">Class structure for #UDisksFilesystemSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="4044"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="36830">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="FilesystemSkeletonPrivate"
            c:type="UDisksFilesystemSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="4032"/>
    </record>
    <interface name="ISCSISession"
               c:symbol-prefix="iscsi_session"
               c:type="UDisksISCSISession"
               glib:type-name="UDisksISCSISession"
               glib:get-type="udisks_iscsi_session_get_type"
               glib:type-struct="ISCSISessionIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="56789">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-ISCSI-Session.top_of_page"&gt;org.freedesktop.UDisks2.ISCSI.Session&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="6554"/>
      <function name="interface_info"
                c:identifier="udisks_iscsi_session_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56722">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-ISCSI-Session.top_of_page"&gt;org.freedesktop.UDisks2.ISCSI.Session&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="6562"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56727">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_iscsi_session_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56735">Overrides all #GObject properties in the #UDisksISCSISession interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="6563"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56743">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56737">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56738">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_abort_timeout"
                      invoker="get_abort_timeout"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57223">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.abort_timeout"&gt;"abort_timeout"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6523"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57231">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57225">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_address"
                      invoker="get_address"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57051">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.address"&gt;"address"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_iscsi_session_dup_address() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6525"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57061">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57053">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_lu_reset_timeout"
                      invoker="get_lu_reset_timeout"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57256">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.lu_reset_timeout"&gt;"lu_reset_timeout"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6527"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57264">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57258">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_persistent_address"
                      invoker="get_persistent_address"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57137">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.persistent_address"&gt;"persistent_address"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_iscsi_session_dup_persistent_address() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6529"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57147">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57139">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_persistent_port"
                      invoker="get_persistent_port"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57190">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.persistent_port"&gt;"persistent_port"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6531"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57198">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57192">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_port" invoker="get_port" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57104">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.port"&gt;"port"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6533"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57112">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57106">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_recovery_timeout"
                      invoker="get_recovery_timeout"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57289">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.recovery_timeout"&gt;"recovery_timeout"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6535"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57297">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57291">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_target_name"
                      invoker="get_target_name"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56965">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.target_name"&gt;"target_name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_iscsi_session_dup_target_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6537"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56975">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56967">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_tgt_reset_timeout"
                      invoker="get_tgt_reset_timeout"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57322">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.tgt_reset_timeout"&gt;"tgt_reset_timeout"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6539"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57330">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57324">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_tpgt" invoker="get_tpgt" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57018">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.tpgt"&gt;"tpgt"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6541"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57026">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57020">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_logout">
        <source-position filename="udisks-generated.h" line="6543"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_logout_interface">
        <source-position filename="udisks-generated.h" line="6548"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_iface" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_logout"
              c:identifier="udisks_iscsi_session_call_logout"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57355">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-ISCSI-Session.Logout"&gt;Logout()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_iscsi_session_call_logout_finish() to get the result of the operation.

See udisks_iscsi_session_call_logout_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6578"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57357">A #UDisksISCSISessionProxy.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57358">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57359">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57360">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57361">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_logout_finish"
              c:identifier="udisks_iscsi_session_call_logout_finish"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57390">Finishes an operation started with udisks_iscsi_session_call_logout().</doc>
        <source-position filename="udisks-generated.h" line="6585"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57398">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57392">A #UDisksISCSISessionProxy.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57393">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_iscsi_session_call_logout().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_logout_interface"
              c:identifier="udisks_iscsi_session_call_logout_interface"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57459">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-ISCSI-Session.LogoutInterface"&gt;LogoutInterface()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_iscsi_session_call_logout_interface_finish() to get the result of the operation.

See udisks_iscsi_session_call_logout_interface_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6596"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57461">A #UDisksISCSISessionProxy.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="arg_iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57462">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57463">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57464">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57465">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57466">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_logout_interface_finish"
              c:identifier="udisks_iscsi_session_call_logout_interface_finish"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57497">Finishes an operation started with udisks_iscsi_session_call_logout_interface().</doc>
        <source-position filename="udisks-generated.h" line="6604"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57505">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57499">A #UDisksISCSISessionProxy.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57500">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_iscsi_session_call_logout_interface().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_logout_interface_sync"
              c:identifier="udisks_iscsi_session_call_logout_interface_sync"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57526">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-ISCSI-Session.LogoutInterface"&gt;LogoutInterface()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_iscsi_session_call_logout_interface() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6609"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57538">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57528">A #UDisksISCSISessionProxy.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="arg_iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57529">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57530">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57531">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_logout_sync"
              c:identifier="udisks_iscsi_session_call_logout_sync"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57419">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-ISCSI-Session.Logout"&gt;Logout()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_iscsi_session_call_logout() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6590"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57430">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57421">A #UDisksISCSISessionProxy.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57422">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57423">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_logout"
              c:identifier="udisks_iscsi_session_complete_logout"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57569">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-ISCSI-Session.Logout"&gt;Logout()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6567"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57571">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57572">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_logout_interface"
              c:identifier="udisks_iscsi_session_complete_logout_interface"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57589">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-ISCSI-Session.LogoutInterface"&gt;LogoutInterface()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6571"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57591">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57592">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_address"
              c:identifier="udisks_iscsi_session_dup_address"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57071">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.address"&gt;"address"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6627"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57079">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57073">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_persistent_address"
              c:identifier="udisks_iscsi_session_dup_persistent_address"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57157">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.persistent_address"&gt;"persistent_address"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6634"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57165">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57159">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_target_name"
              c:identifier="udisks_iscsi_session_dup_target_name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56985">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.target_name"&gt;"target_name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6620"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56993">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56987">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_abort_timeout"
              c:identifier="udisks_iscsi_session_get_abort_timeout"
              glib:get-property="abort-timeout"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57223">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.abort_timeout"&gt;"abort_timeout"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6640"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57231">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57225">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_address"
              c:identifier="udisks_iscsi_session_get_address"
              glib:get-property="address"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57051">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.address"&gt;"address"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_iscsi_session_dup_address() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6626"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57061">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57053">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lu_reset_timeout"
              c:identifier="udisks_iscsi_session_get_lu_reset_timeout"
              glib:get-property="lu-reset-timeout"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57256">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.lu_reset_timeout"&gt;"lu_reset_timeout"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6643"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57264">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57258">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_persistent_address"
              c:identifier="udisks_iscsi_session_get_persistent_address"
              glib:get-property="persistent-address"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57137">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.persistent_address"&gt;"persistent_address"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_iscsi_session_dup_persistent_address() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6633"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57147">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57139">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_persistent_port"
              c:identifier="udisks_iscsi_session_get_persistent_port"
              glib:get-property="persistent-port"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57190">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.persistent_port"&gt;"persistent_port"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6637"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57198">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57192">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_port"
              c:identifier="udisks_iscsi_session_get_port"
              glib:get-property="port"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57104">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.port"&gt;"port"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6630"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57112">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57106">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_recovery_timeout"
              c:identifier="udisks_iscsi_session_get_recovery_timeout"
              glib:get-property="recovery-timeout"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57289">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.recovery_timeout"&gt;"recovery_timeout"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6646"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57297">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57291">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_target_name"
              c:identifier="udisks_iscsi_session_get_target_name"
              glib:get-property="target-name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56965">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.target_name"&gt;"target_name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_iscsi_session_dup_target_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="6619"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56975">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56967">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tgt_reset_timeout"
              c:identifier="udisks_iscsi_session_get_tgt_reset_timeout"
              glib:get-property="tgt-reset-timeout"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57322">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.tgt_reset_timeout"&gt;"tgt_reset_timeout"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6649"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57330">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57324">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tpgt"
              c:identifier="udisks_iscsi_session_get_tpgt"
              glib:get-property="tpgt"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57018">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.tpgt"&gt;"tpgt"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6623"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="57026">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57020">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_abort_timeout"
              c:identifier="udisks_iscsi_session_set_abort_timeout"
              glib:set-property="abort-timeout"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57241">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.abort_timeout"&gt;"abort_timeout"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6641"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57243">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57244">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_address"
              c:identifier="udisks_iscsi_session_set_address"
              glib:set-property="address"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57089">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.address"&gt;"address"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6628"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57091">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57092">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lu_reset_timeout"
              c:identifier="udisks_iscsi_session_set_lu_reset_timeout"
              glib:set-property="lu-reset-timeout"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57274">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.lu_reset_timeout"&gt;"lu_reset_timeout"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6644"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57276">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57277">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_persistent_address"
              c:identifier="udisks_iscsi_session_set_persistent_address"
              glib:set-property="persistent-address"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57175">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.persistent_address"&gt;"persistent_address"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6635"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57177">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57178">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_persistent_port"
              c:identifier="udisks_iscsi_session_set_persistent_port"
              glib:set-property="persistent-port"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57208">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.persistent_port"&gt;"persistent_port"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6638"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57210">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57211">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_port"
              c:identifier="udisks_iscsi_session_set_port"
              glib:set-property="port"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57122">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.port"&gt;"port"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6631"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57124">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57125">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_recovery_timeout"
              c:identifier="udisks_iscsi_session_set_recovery_timeout"
              glib:set-property="recovery-timeout"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57307">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.recovery_timeout"&gt;"recovery_timeout"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6647"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57309">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57310">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_target_name"
              c:identifier="udisks_iscsi_session_set_target_name"
              glib:set-property="target-name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57003">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.target_name"&gt;"target_name"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6621"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57005">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57006">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tgt_reset_timeout"
              c:identifier="udisks_iscsi_session_set_tgt_reset_timeout"
              glib:set-property="tgt-reset-timeout"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57340">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.tgt_reset_timeout"&gt;"tgt_reset_timeout"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6650"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57342">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57343">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tpgt"
              c:identifier="udisks_iscsi_session_set_tpgt"
              glib:set-property="tpgt"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57036">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.tpgt"&gt;"tpgt"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6624"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57038">A #UDisksISCSISession.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57039">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="abort-timeout"
                writable="1"
                transfer-ownership="none"
                setter="set_abort_timeout"
                getter="get_abort_timeout"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56927">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.abort_timeout"&gt;"abort_timeout"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="address"
                writable="1"
                transfer-ownership="none"
                setter="set_address"
                getter="get_address"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56891">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.address"&gt;"address"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="lu-reset-timeout"
                writable="1"
                transfer-ownership="none"
                setter="set_lu_reset_timeout"
                getter="get_lu_reset_timeout"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56936">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.lu_reset_timeout"&gt;"lu_reset_timeout"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="persistent-address"
                writable="1"
                transfer-ownership="none"
                setter="set_persistent_address"
                getter="get_persistent_address"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56909">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.persistent_address"&gt;"persistent_address"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="persistent-port"
                writable="1"
                transfer-ownership="none"
                setter="set_persistent_port"
                getter="get_persistent_port"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56918">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.persistent_port"&gt;"persistent_port"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="port"
                writable="1"
                transfer-ownership="none"
                setter="set_port"
                getter="get_port"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56900">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.port"&gt;"port"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="recovery-timeout"
                writable="1"
                transfer-ownership="none"
                setter="set_recovery_timeout"
                getter="get_recovery_timeout"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56945">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.recovery_timeout"&gt;"recovery_timeout"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="target-name"
                writable="1"
                transfer-ownership="none"
                setter="set_target_name"
                getter="get_target_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56873">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.target_name"&gt;"target_name"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tgt-reset-timeout"
                writable="1"
                transfer-ownership="none"
                setter="set_tgt_reset_timeout"
                getter="get_tgt_reset_timeout"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56954">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.tgt_reset_timeout"&gt;"tgt_reset_timeout"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="tpgt"
                writable="1"
                transfer-ownership="none"
                setter="set_tpgt"
                getter="get_tpgt"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56882">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-ISCSI-Session.tpgt"&gt;"tpgt"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <glib:signal name="handle-logout" when="last" version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56821">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-ISCSI-Session.Logout"&gt;Logout()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_iscsi_session_complete_logout() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56831">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56824">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56825">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-logout-interface" when="last" version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56846">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-ISCSI-Session.LogoutInterface"&gt;LogoutInterface()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_iscsi_session_complete_logout_interface() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56857">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56849">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56850">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56851">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="ISCSISessionIface"
            c:type="UDisksISCSISessionIface"
            glib:is-gtype-struct-for="ISCSISession">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="56795">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-ISCSI-Session.top_of_page"&gt;org.freedesktop.UDisks2.ISCSI.Session&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="6554"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56797">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_abort_timeout">
        <callback name="get_abort_timeout">
          <source-position filename="udisks-generated.h" line="6523"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57231">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="57225">A #UDisksISCSISession.</doc>
              <type name="ISCSISession" c:type="UDisksISCSISession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_address">
        <callback name="get_address">
          <source-position filename="udisks-generated.h" line="6525"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57061">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="57053">A #UDisksISCSISession.</doc>
              <type name="ISCSISession" c:type="UDisksISCSISession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_lu_reset_timeout">
        <callback name="get_lu_reset_timeout">
          <source-position filename="udisks-generated.h" line="6527"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57264">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="57258">A #UDisksISCSISession.</doc>
              <type name="ISCSISession" c:type="UDisksISCSISession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_persistent_address">
        <callback name="get_persistent_address">
          <source-position filename="udisks-generated.h" line="6529"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57147">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="57139">A #UDisksISCSISession.</doc>
              <type name="ISCSISession" c:type="UDisksISCSISession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_persistent_port">
        <callback name="get_persistent_port">
          <source-position filename="udisks-generated.h" line="6531"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57198">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="57192">A #UDisksISCSISession.</doc>
              <type name="ISCSISession" c:type="UDisksISCSISession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_port">
        <callback name="get_port">
          <source-position filename="udisks-generated.h" line="6533"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57112">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="57106">A #UDisksISCSISession.</doc>
              <type name="ISCSISession" c:type="UDisksISCSISession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_recovery_timeout">
        <callback name="get_recovery_timeout">
          <source-position filename="udisks-generated.h" line="6535"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57297">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="57291">A #UDisksISCSISession.</doc>
              <type name="ISCSISession" c:type="UDisksISCSISession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_target_name">
        <callback name="get_target_name">
          <source-position filename="udisks-generated.h" line="6537"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="56975">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="56967">A #UDisksISCSISession.</doc>
              <type name="ISCSISession" c:type="UDisksISCSISession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_tgt_reset_timeout">
        <callback name="get_tgt_reset_timeout">
          <source-position filename="udisks-generated.h" line="6539"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57330">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="57324">A #UDisksISCSISession.</doc>
              <type name="ISCSISession" c:type="UDisksISCSISession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_tpgt">
        <callback name="get_tpgt">
          <source-position filename="udisks-generated.h" line="6541"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57026">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="57020">A #UDisksISCSISession.</doc>
              <type name="ISCSISession" c:type="UDisksISCSISession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_logout">
        <callback name="handle_logout">
          <source-position filename="udisks-generated.h" line="6543"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ISCSISession" c:type="UDisksISCSISession*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_logout_interface">
        <callback name="handle_logout_interface">
          <source-position filename="udisks-generated.h" line="6548"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ISCSISession" c:type="UDisksISCSISession*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_iface" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ISCSISessionProxy"
           c:symbol-prefix="iscsi_session_proxy"
           c:type="UDisksISCSISessionProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksISCSISessionProxy"
           glib:get-type="udisks_iscsi_session_proxy_get_type"
           glib:type-struct="ISCSISessionProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="57611">The #UDisksISCSISessionProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="6676"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="ISCSISession"/>
      <constructor name="new_finish"
                   c:identifier="udisks_iscsi_session_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58015">Finishes an operation started with udisks_iscsi_session_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="6692"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="58022">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ISCSISessionProxy" c:type="UDisksISCSISession*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58017">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_iscsi_session_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_iscsi_session_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58105">Finishes an operation started with udisks_iscsi_session_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="6711"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="58112">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ISCSISessionProxy" c:type="UDisksISCSISession*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58107">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_iscsi_session_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_iscsi_session_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58130">Like udisks_iscsi_session_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_iscsi_session_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6714"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="58145">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ISCSISessionProxy" c:type="UDisksISCSISession*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58132">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58133">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58134">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58135">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58136">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_iscsi_session_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58040">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-ISCSI-Session.top_of_page"&gt;org.freedesktop.UDisks2.ISCSI.Session&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_iscsi_session_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6695"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="58055">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ISCSISessionProxy" c:type="UDisksISCSISession*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58042">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58043">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58044">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58045">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58046">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_iscsi_session_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57985">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-ISCSI-Session.top_of_page"&gt;org.freedesktop.UDisks2.ISCSI.Session&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_iscsi_session_proxy_new_finish() to get the result of the operation.

See udisks_iscsi_session_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6684"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57987">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57988">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57989">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57990">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57991">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57992">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="57993">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_iscsi_session_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58075">Like udisks_iscsi_session_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_iscsi_session_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_iscsi_session_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6703"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58077">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58078">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58079">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58080">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58081">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58082">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="58083">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ISCSISessionProxyPrivate"
              c:type="UDisksISCSISessionProxyPrivate*"/>
      </field>
    </class>
    <record name="ISCSISessionProxyClass"
            c:type="UDisksISCSISessionProxyClass"
            glib:is-gtype-struct-for="ISCSISessionProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="57617">Class structure for #UDisksISCSISessionProxy.</doc>
      <source-position filename="udisks-generated.h" line="6676"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="57619">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="ISCSISessionProxyPrivate"
            c:type="UDisksISCSISessionProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="6664"/>
    </record>
    <class name="ISCSISessionSkeleton"
           c:symbol-prefix="iscsi_session_skeleton"
           c:type="UDisksISCSISessionSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksISCSISessionSkeleton"
           glib:get-type="udisks_iscsi_session_skeleton_get_type"
           glib:type-struct="ISCSISessionSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="58167">The #UDisksISCSISessionSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="6746"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="ISCSISession"/>
      <constructor name="new" c:identifier="udisks_iscsi_session_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58737">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-ISCSI-Session.top_of_page"&gt;org.freedesktop.UDisks2.ISCSI.Session&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="6754"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="58742">The skeleton object.</doc>
          <type name="ISCSISessionSkeleton" c:type="UDisksISCSISession*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ISCSISessionSkeletonPrivate"
              c:type="UDisksISCSISessionSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ISCSISessionSkeletonClass"
            c:type="UDisksISCSISessionSkeletonClass"
            glib:is-gtype-struct-for="ISCSISessionSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="58173">Class structure for #UDisksISCSISessionSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="6746"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58175">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="ISCSISessionSkeletonPrivate"
            c:type="UDisksISCSISessionSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="6734"/>
    </record>
    <function-macro name="ISCSI_SESSION"
                    c:identifier="UDISKS_ISCSI_SESSION"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6510"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ISCSI_SESSION_GET_IFACE"
                    c:identifier="UDISKS_ISCSI_SESSION_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6512"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ISCSI_SESSION_PROXY"
                    c:identifier="UDISKS_ISCSI_SESSION_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6656"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ISCSI_SESSION_PROXY_CLASS"
                    c:identifier="UDISKS_ISCSI_SESSION_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6657"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ISCSI_SESSION_PROXY_GET_CLASS"
                    c:identifier="UDISKS_ISCSI_SESSION_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6658"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ISCSI_SESSION_SKELETON"
                    c:identifier="UDISKS_ISCSI_SESSION_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6726"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ISCSI_SESSION_SKELETON_CLASS"
                    c:identifier="UDISKS_ISCSI_SESSION_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6727"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ISCSI_SESSION_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_ISCSI_SESSION_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6728"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK"
                    c:identifier="UDISKS_IS_BLOCK"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2448"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_LVM2"
                    c:identifier="UDISKS_IS_BLOCK_LVM2"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7368"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_LVM2_PROXY"
                    c:identifier="UDISKS_IS_BLOCK_LVM2_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7405"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_LVM2_PROXY_CLASS"
                    c:identifier="UDISKS_IS_BLOCK_LVM2_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7406"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_LVM2_SKELETON"
                    c:identifier="UDISKS_IS_BLOCK_LVM2_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7475"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_LVM2_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_BLOCK_LVM2_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7476"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_PROXY"
                    c:identifier="UDISKS_IS_BLOCK_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2956"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_PROXY_CLASS"
                    c:identifier="UDISKS_IS_BLOCK_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2957"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_SKELETON"
                    c:identifier="UDISKS_IS_BLOCK_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3026"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BLOCK_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_BLOCK_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3027"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CLIENT"
                    c:identifier="UDISKS_IS_CLIENT"
                    introspectable="0">
      <source-position filename="udisksclient.h" line="35"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE"
                    c:identifier="UDISKS_IS_DRIVE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="760"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_ATA"
                    c:identifier="UDISKS_IS_DRIVE_ATA"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1143"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_ATA_PROXY"
                    c:identifier="UDISKS_IS_DRIVE_ATA_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1562"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_ATA_PROXY_CLASS"
                    c:identifier="UDISKS_IS_DRIVE_ATA_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1563"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_ATA_SKELETON"
                    c:identifier="UDISKS_IS_DRIVE_ATA_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1632"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_ATA_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_DRIVE_ATA_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1633"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_LSM"
                    c:identifier="UDISKS_IS_DRIVE_LSM"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6762"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_LSM_LOCAL"
                    c:identifier="UDISKS_IS_DRIVE_LSM_LOCAL"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6948"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_LSM_LOCAL_PROXY"
                    c:identifier="UDISKS_IS_DRIVE_LSM_LOCAL_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7091"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_LSM_LOCAL_PROXY_CLASS"
                    c:identifier="UDISKS_IS_DRIVE_LSM_LOCAL_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7092"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_LSM_LOCAL_SKELETON"
                    c:identifier="UDISKS_IS_DRIVE_LSM_LOCAL_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7161"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_LSM_LOCAL_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_DRIVE_LSM_LOCAL_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7162"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_LSM_PROXY"
                    c:identifier="UDISKS_IS_DRIVE_LSM_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6845"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_LSM_PROXY_CLASS"
                    c:identifier="UDISKS_IS_DRIVE_LSM_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6846"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_LSM_SKELETON"
                    c:identifier="UDISKS_IS_DRIVE_LSM_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6915"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_LSM_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_DRIVE_LSM_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6916"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_PROXY"
                    c:identifier="UDISKS_IS_DRIVE_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1040"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_PROXY_CLASS"
                    c:identifier="UDISKS_IS_DRIVE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1041"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_SKELETON"
                    c:identifier="UDISKS_IS_DRIVE_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1110"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DRIVE_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_DRIVE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1111"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ENCRYPTED"
                    c:identifier="UDISKS_IS_ENCRYPTED"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4320"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ENCRYPTED_PROXY"
                    c:identifier="UDISKS_IS_ENCRYPTED_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4504"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ENCRYPTED_PROXY_CLASS"
                    c:identifier="UDISKS_IS_ENCRYPTED_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4505"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ENCRYPTED_SKELETON"
                    c:identifier="UDISKS_IS_ENCRYPTED_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4574"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ENCRYPTED_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_ENCRYPTED_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4575"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM"
                    c:identifier="UDISKS_IS_FILESYSTEM"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3674"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM_BTRFS"
                    c:identifier="UDISKS_IS_FILESYSTEM_BTRFS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5656"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM_BTRFS_PROXY"
                    c:identifier="UDISKS_IS_FILESYSTEM_BTRFS_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5995"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM_BTRFS_PROXY_CLASS"
                    c:identifier="UDISKS_IS_FILESYSTEM_BTRFS_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5996"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM_BTRFS_SKELETON"
                    c:identifier="UDISKS_IS_FILESYSTEM_BTRFS_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6065"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM_BTRFS_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_FILESYSTEM_BTRFS_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6066"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM_PROXY"
                    c:identifier="UDISKS_IS_FILESYSTEM_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3957"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM_PROXY_CLASS"
                    c:identifier="UDISKS_IS_FILESYSTEM_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3958"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM_SKELETON"
                    c:identifier="UDISKS_IS_FILESYSTEM_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4027"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILESYSTEM_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_FILESYSTEM_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4028"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ISCSI_SESSION"
                    c:identifier="UDISKS_IS_ISCSI_SESSION"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6511"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ISCSI_SESSION_PROXY"
                    c:identifier="UDISKS_IS_ISCSI_SESSION_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6659"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ISCSI_SESSION_PROXY_CLASS"
                    c:identifier="UDISKS_IS_ISCSI_SESSION_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6660"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ISCSI_SESSION_SKELETON"
                    c:identifier="UDISKS_IS_ISCSI_SESSION_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6729"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ISCSI_SESSION_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_ISCSI_SESSION_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6730"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_JOB"
                    c:identifier="UDISKS_IS_JOB"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5245"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_JOB_PROXY"
                    c:identifier="UDISKS_IS_JOB_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5376"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_JOB_PROXY_CLASS"
                    c:identifier="UDISKS_IS_JOB_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5377"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_JOB_SKELETON"
                    c:identifier="UDISKS_IS_JOB_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5446"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_JOB_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_JOB_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5447"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOGICAL_VOLUME"
                    c:identifier="UDISKS_IS_LOGICAL_VOLUME"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8251"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOGICAL_VOLUME_PROXY"
                    c:identifier="UDISKS_IS_LOGICAL_VOLUME_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8671"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOGICAL_VOLUME_PROXY_CLASS"
                    c:identifier="UDISKS_IS_LOGICAL_VOLUME_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8672"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOGICAL_VOLUME_SKELETON"
                    c:identifier="UDISKS_IS_LOGICAL_VOLUME_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8741"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOGICAL_VOLUME_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_LOGICAL_VOLUME_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8742"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOOP"
                    c:identifier="UDISKS_IS_LOOP"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4607"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOOP_PROXY"
                    c:identifier="UDISKS_IS_LOOP_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4718"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOOP_PROXY_CLASS"
                    c:identifier="UDISKS_IS_LOOP_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4719"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOOP_SKELETON"
                    c:identifier="UDISKS_IS_LOOP_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4788"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_LOOP_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_LOOP_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4789"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER"
                    c:identifier="UDISKS_IS_MANAGER"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_BTRFS"
                    c:identifier="UDISKS_IS_MANAGER_BTRFS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5479"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_BTRFS_PROXY"
                    c:identifier="UDISKS_IS_MANAGER_BTRFS_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5553"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_BTRFS_PROXY_CLASS"
                    c:identifier="UDISKS_IS_MANAGER_BTRFS_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5554"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_BTRFS_SKELETON"
                    c:identifier="UDISKS_IS_MANAGER_BTRFS_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5623"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_BTRFS_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_MANAGER_BTRFS_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5624"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_ISCSI_INITIATOR"
                    c:identifier="UDISKS_IS_MANAGER_ISCSI_INITIATOR"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6098"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_ISCSI_INITIATOR_PROXY"
                    c:identifier="UDISKS_IS_MANAGER_ISCSI_INITIATOR_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6408"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_ISCSI_INITIATOR_PROXY_CLASS"
                    c:identifier="UDISKS_IS_MANAGER_ISCSI_INITIATOR_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6409"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_ISCSI_INITIATOR_SKELETON"
                    c:identifier="UDISKS_IS_MANAGER_ISCSI_INITIATOR_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6478"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_ISCSI_INITIATOR_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_MANAGER_ISCSI_INITIATOR_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6479"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_LVM2"
                    c:identifier="UDISKS_IS_MANAGER_LVM2"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7194"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_LVM2_PROXY"
                    c:identifier="UDISKS_IS_MANAGER_LVM2_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7265"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_LVM2_PROXY_CLASS"
                    c:identifier="UDISKS_IS_MANAGER_LVM2_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7266"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_LVM2_SKELETON"
                    c:identifier="UDISKS_IS_MANAGER_LVM2_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7335"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_LVM2_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_MANAGER_LVM2_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7336"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_NVME"
                    c:identifier="UDISKS_IS_MANAGER_NVME"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="508"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_NVME_PROXY"
                    c:identifier="UDISKS_IS_MANAGER_NVME_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="657"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_NVME_PROXY_CLASS"
                    c:identifier="UDISKS_IS_MANAGER_NVME_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="658"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_NVME_SKELETON"
                    c:identifier="UDISKS_IS_MANAGER_NVME_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="727"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_NVME_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_MANAGER_NVME_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="728"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_PROXY"
                    c:identifier="UDISKS_IS_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="405"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_PROXY_CLASS"
                    c:identifier="UDISKS_IS_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="406"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_SKELETON"
                    c:identifier="UDISKS_IS_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="475"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="476"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MDRAID"
                    c:identifier="UDISKS_IS_MDRAID"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4821"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MDRAID_PROXY"
                    c:identifier="UDISKS_IS_MDRAID_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5142"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MDRAID_PROXY_CLASS"
                    c:identifier="UDISKS_IS_MDRAID_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5143"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MDRAID_SKELETON"
                    c:identifier="UDISKS_IS_MDRAID_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5212"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MDRAID_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_MDRAID_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5213"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_CONTROLLER"
                    c:identifier="UDISKS_IS_NVME_CONTROLLER"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1665"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_CONTROLLER_PROXY"
                    c:identifier="UDISKS_IS_NVME_CONTROLLER_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1924"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_CONTROLLER_PROXY_CLASS"
                    c:identifier="UDISKS_IS_NVME_CONTROLLER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1925"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_CONTROLLER_SKELETON"
                    c:identifier="UDISKS_IS_NVME_CONTROLLER_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1994"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_CONTROLLER_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_NVME_CONTROLLER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1995"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_FABRICS"
                    c:identifier="UDISKS_IS_NVME_FABRICS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2256"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_FABRICS_PROXY"
                    c:identifier="UDISKS_IS_NVME_FABRICS_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2345"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_FABRICS_PROXY_CLASS"
                    c:identifier="UDISKS_IS_NVME_FABRICS_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2346"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_FABRICS_SKELETON"
                    c:identifier="UDISKS_IS_NVME_FABRICS_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2415"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_FABRICS_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_NVME_FABRICS_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2416"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_NAMESPACE"
                    c:identifier="UDISKS_IS_NVME_NAMESPACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2027"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_NAMESPACE_PROXY"
                    c:identifier="UDISKS_IS_NVME_NAMESPACE_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2153"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_NAMESPACE_PROXY_CLASS"
                    c:identifier="UDISKS_IS_NVME_NAMESPACE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2154"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_NAMESPACE_SKELETON"
                    c:identifier="UDISKS_IS_NVME_NAMESPACE_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2223"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NVME_NAMESPACE_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_NVME_NAMESPACE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2224"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT"
                    c:identifier="UDISKS_IS_OBJECT"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9103"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_INFO"
                    c:identifier="UDISKS_IS_OBJECT_INFO"
                    introspectable="0">
      <source-position filename="udisksobjectinfo.h" line="35"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_MANAGER_CLIENT"
                    c:identifier="UDISKS_IS_OBJECT_MANAGER_CLIENT"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9274"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_MANAGER_CLIENT_CLASS"
                    c:identifier="UDISKS_IS_OBJECT_MANAGER_CLIENT_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9275"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_PROXY"
                    c:identifier="UDISKS_IS_OBJECT_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9182"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_PROXY_CLASS"
                    c:identifier="UDISKS_IS_OBJECT_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9183"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_SKELETON"
                    c:identifier="UDISKS_IS_OBJECT_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9213"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBJECT_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_OBJECT_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9214"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION"
                    c:identifier="UDISKS_IS_PARTITION"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3302"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_PROXY"
                    c:identifier="UDISKS_IS_PARTITION_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3571"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_PROXY_CLASS"
                    c:identifier="UDISKS_IS_PARTITION_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3572"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_SKELETON"
                    c:identifier="UDISKS_IS_PARTITION_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3641"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_PARTITION_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3642"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_TABLE"
                    c:identifier="UDISKS_IS_PARTITION_TABLE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3059"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_TABLE_PROXY"
                    c:identifier="UDISKS_IS_PARTITION_TABLE_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3199"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_TABLE_PROXY_CLASS"
                    c:identifier="UDISKS_IS_PARTITION_TABLE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3200"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_TABLE_SKELETON"
                    c:identifier="UDISKS_IS_PARTITION_TABLE_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3269"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PARTITION_TABLE_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_PARTITION_TABLE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3270"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PHYSICAL_VOLUME"
                    c:identifier="UDISKS_IS_PHYSICAL_VOLUME"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7508"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PHYSICAL_VOLUME_PROXY"
                    c:identifier="UDISKS_IS_PHYSICAL_VOLUME_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7555"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PHYSICAL_VOLUME_PROXY_CLASS"
                    c:identifier="UDISKS_IS_PHYSICAL_VOLUME_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7556"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PHYSICAL_VOLUME_SKELETON"
                    c:identifier="UDISKS_IS_PHYSICAL_VOLUME_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7625"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PHYSICAL_VOLUME_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_PHYSICAL_VOLUME_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7626"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SWAPSPACE"
                    c:identifier="UDISKS_IS_SWAPSPACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4060"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SWAPSPACE_PROXY"
                    c:identifier="UDISKS_IS_SWAPSPACE_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4217"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SWAPSPACE_PROXY_CLASS"
                    c:identifier="UDISKS_IS_SWAPSPACE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4218"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SWAPSPACE_SKELETON"
                    c:identifier="UDISKS_IS_SWAPSPACE_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4287"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SWAPSPACE_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_SWAPSPACE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4288"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VDO_VOLUME"
                    c:identifier="UDISKS_IS_VDO_VOLUME"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8774"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VDO_VOLUME_PROXY"
                    c:identifier="UDISKS_IS_VDO_VOLUME_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9001"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VDO_VOLUME_PROXY_CLASS"
                    c:identifier="UDISKS_IS_VDO_VOLUME_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9002"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VDO_VOLUME_SKELETON"
                    c:identifier="UDISKS_IS_VDO_VOLUME_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9071"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VDO_VOLUME_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_VDO_VOLUME_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9072"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VOLUME_GROUP"
                    c:identifier="UDISKS_IS_VOLUME_GROUP"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7658"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VOLUME_GROUP_PROXY"
                    c:identifier="UDISKS_IS_VOLUME_GROUP_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8148"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VOLUME_GROUP_PROXY_CLASS"
                    c:identifier="UDISKS_IS_VOLUME_GROUP_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8149"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VOLUME_GROUP_SKELETON"
                    c:identifier="UDISKS_IS_VOLUME_GROUP_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8218"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_VOLUME_GROUP_SKELETON_CLASS"
                    c:identifier="UDISKS_IS_VOLUME_GROUP_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8219"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="JOB" c:identifier="UDISKS_JOB" introspectable="0">
      <source-position filename="udisks-generated.h" line="5244"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="JOB_GET_IFACE"
                    c:identifier="UDISKS_JOB_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5246"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="JOB_PROXY"
                    c:identifier="UDISKS_JOB_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5373"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="JOB_PROXY_CLASS"
                    c:identifier="UDISKS_JOB_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5374"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="JOB_PROXY_GET_CLASS"
                    c:identifier="UDISKS_JOB_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5375"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="JOB_SKELETON"
                    c:identifier="UDISKS_JOB_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5443"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="JOB_SKELETON_CLASS"
                    c:identifier="UDISKS_JOB_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5444"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="JOB_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_JOB_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5445"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Job"
               c:symbol-prefix="job"
               c:type="UDisksJob"
               glib:type-name="UDisksJob"
               glib:get-type="udisks_job_get_type"
               glib:type-struct="JobIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="47242">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="5288"/>
      <function name="interface_info" c:identifier="udisks_job_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47175">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="5296"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47180">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_job_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47188">Overrides all #GObject properties in the #UDisksJob interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="5297"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47196">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47190">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47191">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="completed">
        <source-position filename="udisks-generated.h" line="5279"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="arg_success" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_bytes"
                      invoker="get_bytes"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47535">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Bytes"&gt;"Bytes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5284"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47543">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47537">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_cancelable"
                      invoker="get_cancelable"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47761">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Cancelable"&gt;"Cancelable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5263"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47769">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47763">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_expected_end_time"
                      invoker="get_expected_end_time"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47642">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ExpectedEndTime"&gt;"ExpectedEndTime"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5265"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47650">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47644">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_objects"
                      invoker="get_objects"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47675">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Objects"&gt;"Objects"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_job_dup_objects() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5267"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47685">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47677">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_operation"
                      invoker="get_operation"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47416">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Operation"&gt;"Operation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_job_dup_operation() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5269"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47426">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47418">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_progress"
                      invoker="get_progress"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47469">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Progress"&gt;"Progress"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5271"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47477">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47471">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_progress_valid"
                      invoker="get_progress_valid"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47502">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ProgressValid"&gt;"ProgressValid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5273"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47510">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47504">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_rate"
                      invoker="get_rate"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47572">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Rate"&gt;"Rate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5286"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47580">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47574">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_start_time"
                      invoker="get_start_time"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47609">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartTime"&gt;"StartTime"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5275"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47617">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47611">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_started_by_uid"
                      invoker="get_started_by_uid"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47728">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartedByUID"&gt;"StartedByUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5277"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47736">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47730">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_cancel">
        <source-position filename="udisks-generated.h" line="5258"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_cancel" c:identifier="udisks_job_call_cancel">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47811">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Job.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_job_call_cancel_finish() to get the result of the operation.

See udisks_job_call_cancel_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5316"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47813">A #UDisksJobProxy.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47814">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47815">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47816">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47817">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel_finish"
              c:identifier="udisks_job_call_cancel_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47844">Finishes an operation started with udisks_job_call_cancel().</doc>
        <source-position filename="udisks-generated.h" line="5323"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47852">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47846">A #UDisksJobProxy.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47847">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_job_call_cancel().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel_sync"
              c:identifier="udisks_job_call_cancel_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47871">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Job.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_job_call_cancel() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5328"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47882">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47873">A #UDisksJobProxy.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47874">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47875">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_cancel" c:identifier="udisks_job_complete_cancel">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47909">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Job.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5301"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47911">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47912">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_objects"
              c:identifier="udisks_job_dup_objects"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47695">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Objects"&gt;"Objects"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5360"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47703">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47697">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_operation"
              c:identifier="udisks_job_dup_operation"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47436">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Operation"&gt;"Operation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5338"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47444">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47438">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_completed" c:identifier="udisks_job_emit_completed">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47794">Emits the &lt;link linkend="gdbus-signal-org-freedesktop-UDisks2-Job.Completed"&gt;"Completed"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="udisks-generated.h" line="5308"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47796">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="arg_success" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47797">Argument to pass with the signal.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47798">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_bytes"
              c:identifier="udisks_job_get_bytes"
              glib:get-property="bytes"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47535">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Bytes"&gt;"Bytes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5347"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47543">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47537">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cancelable"
              c:identifier="udisks_job_get_cancelable"
              glib:get-property="cancelable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47761">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Cancelable"&gt;"Cancelable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5366"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47769">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47763">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_expected_end_time"
              c:identifier="udisks_job_get_expected_end_time"
              glib:get-property="expected-end-time"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47642">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ExpectedEndTime"&gt;"ExpectedEndTime"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5356"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47650">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47644">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_objects"
              c:identifier="udisks_job_get_objects"
              glib:get-property="objects"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47675">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Objects"&gt;"Objects"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_job_dup_objects() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5359"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47685">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47677">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_operation"
              c:identifier="udisks_job_get_operation"
              glib:get-property="operation"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47416">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Operation"&gt;"Operation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_job_dup_operation() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5337"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47426">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47418">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress"
              c:identifier="udisks_job_get_progress"
              glib:get-property="progress"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47469">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Progress"&gt;"Progress"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5341"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47477">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47471">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress_valid"
              c:identifier="udisks_job_get_progress_valid"
              glib:get-property="progress-valid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47502">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ProgressValid"&gt;"ProgressValid"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5344"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47510">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47504">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rate"
              c:identifier="udisks_job_get_rate"
              glib:get-property="rate"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47572">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Rate"&gt;"Rate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5350"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47580">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47574">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_start_time"
              c:identifier="udisks_job_get_start_time"
              glib:get-property="start-time"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47609">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartTime"&gt;"StartTime"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5353"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47617">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47611">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_started_by_uid"
              c:identifier="udisks_job_get_started_by_uid"
              glib:get-property="started-by-uid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47728">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartedByUID"&gt;"StartedByUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5363"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47736">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47730">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_bytes"
              c:identifier="udisks_job_set_bytes"
              glib:set-property="bytes"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47555">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Bytes"&gt;"Bytes"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5348"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47557">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47558">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cancelable"
              c:identifier="udisks_job_set_cancelable"
              glib:set-property="cancelable"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47779">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Cancelable"&gt;"Cancelable"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5367"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47781">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47782">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_expected_end_time"
              c:identifier="udisks_job_set_expected_end_time"
              glib:set-property="expected-end-time"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47660">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ExpectedEndTime"&gt;"ExpectedEndTime"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5357"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47662">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47663">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_objects"
              c:identifier="udisks_job_set_objects"
              glib:set-property="objects"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47713">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Objects"&gt;"Objects"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5361"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47715">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47716">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_operation"
              c:identifier="udisks_job_set_operation"
              glib:set-property="operation"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47454">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Operation"&gt;"Operation"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5339"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47456">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47457">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_progress"
              c:identifier="udisks_job_set_progress"
              glib:set-property="progress"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47487">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Progress"&gt;"Progress"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5342"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47489">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47490">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_progress_valid"
              c:identifier="udisks_job_set_progress_valid"
              glib:set-property="progress-valid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47520">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ProgressValid"&gt;"ProgressValid"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5345"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47522">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47523">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rate"
              c:identifier="udisks_job_set_rate"
              glib:set-property="rate"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47592">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Rate"&gt;"Rate"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5351"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47594">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47595">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_start_time"
              c:identifier="udisks_job_set_start_time"
              glib:set-property="start-time"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47627">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartTime"&gt;"StartTime"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5354"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47629">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47630">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_started_by_uid"
              c:identifier="udisks_job_set_started_by_uid"
              glib:set-property="started-by-uid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47746">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartedByUID"&gt;"StartedByUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5364"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47748">A #UDisksJob.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47749">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="bytes"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_bytes"
                getter="get_bytes"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47347">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Bytes"&gt;"Bytes"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="cancelable"
                writable="1"
                transfer-ownership="none"
                setter="set_cancelable"
                getter="get_cancelable"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47405">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Cancelable"&gt;"Cancelable"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="expected-end-time"
                writable="1"
                transfer-ownership="none"
                setter="set_expected_end_time"
                getter="get_expected_end_time"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47378">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ExpectedEndTime"&gt;"ExpectedEndTime"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="objects"
                writable="1"
                transfer-ownership="none"
                setter="set_objects"
                getter="get_objects">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47387">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Objects"&gt;"Objects"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="operation"
                writable="1"
                transfer-ownership="none"
                setter="set_operation"
                getter="get_operation"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47320">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Operation"&gt;"Operation"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="progress"
                writable="1"
                transfer-ownership="none"
                setter="set_progress"
                getter="get_progress"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47329">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Progress"&gt;"Progress"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="progress-valid"
                writable="1"
                transfer-ownership="none"
                setter="set_progress_valid"
                getter="get_progress_valid"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47338">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.ProgressValid"&gt;"ProgressValid"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="rate"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_rate"
                getter="get_rate"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47358">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.Rate"&gt;"Rate"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="start-time"
                writable="1"
                transfer-ownership="none"
                setter="set_start_time"
                getter="get_start_time"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47369">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartTime"&gt;"StartTime"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="started-by-uid"
                writable="1"
                transfer-ownership="none"
                setter="set_started_by_uid"
                getter="get_started_by_uid"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47396">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Job.StartedByUID"&gt;"StartedByUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <glib:signal name="completed" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47298">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-freedesktop-UDisks2-Job.Completed"&gt;"Completed"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_success" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47301">Argument.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47302">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-cancel" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47274">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Job.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_job_complete_cancel() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47284">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47277">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47278">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="JobIface"
            c:type="UDisksJobIface"
            glib:is-gtype-struct-for="Job">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="47248">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="5288"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47250">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_cancel">
        <callback name="handle_cancel">
          <source-position filename="udisks-generated.h" line="5258"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_cancelable">
        <callback name="get_cancelable">
          <source-position filename="udisks-generated.h" line="5263"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47769">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="47763">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_expected_end_time">
        <callback name="get_expected_end_time">
          <source-position filename="udisks-generated.h" line="5265"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47650">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="47644">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_objects">
        <callback name="get_objects">
          <source-position filename="udisks-generated.h" line="5267"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47685">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="47677">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_operation">
        <callback name="get_operation">
          <source-position filename="udisks-generated.h" line="5269"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47426">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="47418">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_progress">
        <callback name="get_progress">
          <source-position filename="udisks-generated.h" line="5271"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47477">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="47471">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_progress_valid">
        <callback name="get_progress_valid">
          <source-position filename="udisks-generated.h" line="5273"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47510">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="47504">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_start_time">
        <callback name="get_start_time">
          <source-position filename="udisks-generated.h" line="5275"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47617">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="47611">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_started_by_uid">
        <callback name="get_started_by_uid">
          <source-position filename="udisks-generated.h" line="5277"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47736">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="47730">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="completed">
        <callback name="completed">
          <source-position filename="udisks-generated.h" line="5279"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
            <parameter name="arg_success" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_bytes">
        <callback name="get_bytes">
          <source-position filename="udisks-generated.h" line="5284"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47543">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="47537">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_rate">
        <callback name="get_rate">
          <source-position filename="udisks-generated.h" line="5286"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="47580">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="47574">A #UDisksJob.</doc>
              <type name="Job" c:type="UDisksJob*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="JobProxy"
           c:symbol-prefix="job_proxy"
           c:type="UDisksJobProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksJobProxy"
           glib:get-type="udisks_job_proxy_get_type"
           glib:type-struct="JobProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="47929">The #UDisksJobProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="5393"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Job"/>
      <constructor name="new_finish"
                   c:identifier="udisks_job_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="48337">Finishes an operation started with udisks_job_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="5409"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="48344">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="JobProxy" c:type="UDisksJob*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48339">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_job_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_job_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="48427">Finishes an operation started with udisks_job_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="5428"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="48434">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="JobProxy" c:type="UDisksJob*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48429">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_job_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_job_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="48452">Like udisks_job_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_job_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5431"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="48467">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="JobProxy" c:type="UDisksJob*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48454">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48455">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48456">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48457">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48458">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_job_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="48362">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_job_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5412"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="48377">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="JobProxy" c:type="UDisksJob*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48364">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48365">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48366">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48367">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48368">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_job_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="48307">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_job_proxy_new_finish() to get the result of the operation.

See udisks_job_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5401"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48309">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48310">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48311">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48312">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48313">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48314">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48315">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus" c:identifier="udisks_job_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="48397">Like udisks_job_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_job_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_job_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5420"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48399">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48400">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48401">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48402">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48403">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48404">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="48405">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="JobProxyPrivate" c:type="UDisksJobProxyPrivate*"/>
      </field>
    </class>
    <record name="JobProxyClass"
            c:type="UDisksJobProxyClass"
            glib:is-gtype-struct-for="JobProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="47935">Class structure for #UDisksJobProxy.</doc>
      <source-position filename="udisks-generated.h" line="5393"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47937">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="JobProxyPrivate"
            c:type="UDisksJobProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="5381"/>
    </record>
    <class name="JobSkeleton"
           c:symbol-prefix="job_skeleton"
           c:type="UDisksJobSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksJobSkeleton"
           glib:get-type="udisks_job_skeleton_get_type"
           glib:type-struct="JobSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="48489">The #UDisksJobSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="5463"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Job"/>
      <constructor name="new" c:identifier="udisks_job_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49086">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="5471"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49091">The skeleton object.</doc>
          <type name="JobSkeleton" c:type="UDisksJob*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="JobSkeletonPrivate" c:type="UDisksJobSkeletonPrivate*"/>
      </field>
    </class>
    <record name="JobSkeletonClass"
            c:type="UDisksJobSkeletonClass"
            glib:is-gtype-struct-for="JobSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="48495">Class structure for #UDisksJobSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="5463"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="48497">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="JobSkeletonPrivate"
            c:type="UDisksJobSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="5451"/>
    </record>
    <function-macro name="LOGICAL_VOLUME"
                    c:identifier="UDISKS_LOGICAL_VOLUME"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8250"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOGICAL_VOLUME_GET_IFACE"
                    c:identifier="UDISKS_LOGICAL_VOLUME_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8252"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOGICAL_VOLUME_PROXY"
                    c:identifier="UDISKS_LOGICAL_VOLUME_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8668"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOGICAL_VOLUME_PROXY_CLASS"
                    c:identifier="UDISKS_LOGICAL_VOLUME_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8669"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOGICAL_VOLUME_PROXY_GET_CLASS"
                    c:identifier="UDISKS_LOGICAL_VOLUME_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8670"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOGICAL_VOLUME_SKELETON"
                    c:identifier="UDISKS_LOGICAL_VOLUME_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8738"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOGICAL_VOLUME_SKELETON_CLASS"
                    c:identifier="UDISKS_LOGICAL_VOLUME_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8739"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOGICAL_VOLUME_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_LOGICAL_VOLUME_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8740"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOOP" c:identifier="UDISKS_LOOP" introspectable="0">
      <source-position filename="udisks-generated.h" line="4606"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOOP_GET_IFACE"
                    c:identifier="UDISKS_LOOP_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4608"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOOP_PROXY"
                    c:identifier="UDISKS_LOOP_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4715"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOOP_PROXY_CLASS"
                    c:identifier="UDISKS_LOOP_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4716"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOOP_PROXY_GET_CLASS"
                    c:identifier="UDISKS_LOOP_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4717"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOOP_SKELETON"
                    c:identifier="UDISKS_LOOP_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4785"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOOP_SKELETON_CLASS"
                    c:identifier="UDISKS_LOOP_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4786"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="LOOP_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_LOOP_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4787"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="LogicalVolume"
               c:symbol-prefix="logical_volume"
               c:type="UDisksLogicalVolume"
               version="2.0.0"
               glib:type-name="UDisksLogicalVolume"
               glib:get-type="udisks_logical_volume_get_type"
               glib:type-struct="LogicalVolumeIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="71068">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="8349"/>
      <function name="interface_info"
                c:identifier="udisks_logical_volume_interface_info"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="70888">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="8357"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="70893">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_logical_volume_override_properties"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="70903">Overrides all #GObject properties in the #UDisksLogicalVolume interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="8358"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="70911">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70905">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="70906">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_active"
                      invoker="get_active"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71659">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Active"&gt;"Active"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8297"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71667">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71661">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_block_device"
                      invoker="get_block_device"
                      version="2.7.1"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72257">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.BlockDevice"&gt;"BlockDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_block_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8335"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72267">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72259">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_child_configuration"
                      invoker="get_child_configuration"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72198">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_child_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8299"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72208">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72200">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_data_allocated_ratio"
                      invoker="get_data_allocated_ratio"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71792">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.DataAllocatedRatio"&gt;"DataAllocatedRatio"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8301"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71800">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71794">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_layout"
                      invoker="get_layout"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71925">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Layout"&gt;"Layout"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_layout() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8343"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71935">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71927">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_metadata_allocated_ratio"
                      invoker="get_metadata_allocated_ratio"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71829">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.MetadataAllocatedRatio"&gt;"MetadataAllocatedRatio"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8303"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71837">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71831">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_name"
                      invoker="get_name"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71600">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8305"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71610">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71602">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_origin"
                      invoker="get_origin"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72139">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Origin"&gt;"Origin"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_origin() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8307"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72149">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72141">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size"
                      invoker="get_size"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71755">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8309"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71763">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71757">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_structure"
                      invoker="get_structure"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71984">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Structure"&gt;"Structure"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_structure() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8345"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71994">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71986">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sync_ratio"
                      invoker="get_sync_ratio"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72043">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.SyncRatio"&gt;"SyncRatio"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8347"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72051">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72045">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_thin_pool"
                      invoker="get_thin_pool"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72080">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ThinPool"&gt;"ThinPool"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_thin_pool() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8311"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72090">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72082">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_type_"
                      invoker="get_type_"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71866">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_type_() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8313"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71876">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71868">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_uuid"
                      invoker="get_uuid"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71696">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8315"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71706">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71698">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_volume_group"
                      invoker="get_volume_group"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71541">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_volume_group() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8317"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71551">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71543">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_activate">
        <source-position filename="udisks-generated.h" line="8263"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_cache_attach">
        <source-position filename="udisks-generated.h" line="8319"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_cache_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_cache_detach">
        <source-position filename="udisks-generated.h" line="8330"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_cache_split">
        <source-position filename="udisks-generated.h" line="8325"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_snapshot">
        <source-position filename="udisks-generated.h" line="8268"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_deactivate">
        <source-position filename="udisks-generated.h" line="8275"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_delete">
        <source-position filename="udisks-generated.h" line="8280"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_rename">
        <source-position filename="udisks-generated.h" line="8285"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_new_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_repair">
        <source-position filename="udisks-generated.h" line="8337"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_pvs" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_resize">
        <source-position filename="udisks-generated.h" line="8291"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_new_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_activate"
              c:identifier="udisks_logical_volume_call_activate"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72316">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Activate"&gt;Activate()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_activate_finish() to get the result of the operation.

See udisks_logical_volume_call_activate_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8408"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72318">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72319">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72320">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72321">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72322">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_activate_finish"
              c:identifier="udisks_logical_volume_call_activate_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72351">Finishes an operation started with udisks_logical_volume_call_activate().</doc>
        <source-position filename="udisks-generated.h" line="8415"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72360">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72353">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72354">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72355">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_activate().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_activate_sync"
              c:identifier="udisks_logical_volume_call_activate_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72383">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Activate"&gt;Activate()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_activate() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8421"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72395">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72385">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72386">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72387">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72388">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cache_attach"
              c:identifier="udisks_logical_volume_call_cache_attach"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73092">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheAttach"&gt;CacheAttach()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_cache_attach_finish() to get the result of the operation.

See udisks_logical_volume_call_cache_attach_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8550"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73094">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_cache_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73095">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73096">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73097">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73098">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73099">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cache_attach_finish"
              c:identifier="udisks_logical_volume_call_cache_attach_finish"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73130">Finishes an operation started with udisks_logical_volume_call_cache_attach().</doc>
        <source-position filename="udisks-generated.h" line="8558"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="73138">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73132">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73133">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_cache_attach().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cache_attach_sync"
              c:identifier="udisks_logical_volume_call_cache_attach_sync"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73159">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheAttach"&gt;CacheAttach()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_cache_attach() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8563"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="73171">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73161">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_cache_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73162">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73163">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73164">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cache_detach"
              c:identifier="udisks_logical_volume_call_cache_detach"
              version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73306">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheDetach"&gt;CacheDetach()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_cache_detach_finish() to get the result of the operation.

See udisks_logical_volume_call_cache_detach_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8588"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73308">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73309">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73310">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73311">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73312">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cache_detach_finish"
              c:identifier="udisks_logical_volume_call_cache_detach_finish"
              version="2.6.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73341">Finishes an operation started with udisks_logical_volume_call_cache_detach().</doc>
        <source-position filename="udisks-generated.h" line="8595"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="73349">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73343">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73344">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_cache_detach().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cache_detach_sync"
              c:identifier="udisks_logical_volume_call_cache_detach_sync"
              version="2.6.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73370">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheDetach"&gt;CacheDetach()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_cache_detach() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8600"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="73381">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73372">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73373">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73374">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cache_split"
              c:identifier="udisks_logical_volume_call_cache_split"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73202">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheSplit"&gt;CacheSplit()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_cache_split_finish() to get the result of the operation.

See udisks_logical_volume_call_cache_split_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8570"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73204">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73205">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73206">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73207">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73208">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cache_split_finish"
              c:identifier="udisks_logical_volume_call_cache_split_finish"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73237">Finishes an operation started with udisks_logical_volume_call_cache_split().</doc>
        <source-position filename="udisks-generated.h" line="8577"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="73245">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73239">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73240">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_cache_split().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cache_split_sync"
              c:identifier="udisks_logical_volume_call_cache_split_sync"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73266">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheSplit"&gt;CacheSplit()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_cache_split() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8582"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="73277">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73268">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73269">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73270">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_snapshot"
              c:identifier="udisks_logical_volume_call_create_snapshot"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72970">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CreateSnapshot"&gt;CreateSnapshot()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_create_snapshot_finish() to get the result of the operation.

See udisks_logical_volume_call_create_snapshot_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8526"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72972">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72973">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72974">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72975">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72976">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72977">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72978">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_snapshot_finish"
              c:identifier="udisks_logical_volume_call_create_snapshot_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73011">Finishes an operation started with udisks_logical_volume_call_create_snapshot().</doc>
        <source-position filename="udisks-generated.h" line="8535"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="73020">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73013">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73014">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73015">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_create_snapshot().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_snapshot_sync"
              c:identifier="udisks_logical_volume_call_create_snapshot_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73043">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CreateSnapshot"&gt;CreateSnapshot()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_create_snapshot() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8541"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="73057">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73045">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73046">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73047">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73048">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73049">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73050">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_deactivate"
              c:identifier="udisks_logical_volume_call_deactivate"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72426">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Deactivate"&gt;Deactivate()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_deactivate_finish() to get the result of the operation.

See udisks_logical_volume_call_deactivate_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8428"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72428">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72429">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72430">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72431">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72432">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_deactivate_finish"
              c:identifier="udisks_logical_volume_call_deactivate_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72461">Finishes an operation started with udisks_logical_volume_call_deactivate().</doc>
        <source-position filename="udisks-generated.h" line="8435"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72469">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72463">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72464">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_deactivate().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_deactivate_sync"
              c:identifier="udisks_logical_volume_call_deactivate_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72490">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Deactivate"&gt;Deactivate()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_deactivate() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8440"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72501">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72492">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72493">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72494">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete"
              c:identifier="udisks_logical_volume_call_delete"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72530">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_delete_finish() to get the result of the operation.

See udisks_logical_volume_call_delete_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8446"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72532">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72533">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72534">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72535">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72536">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_finish"
              c:identifier="udisks_logical_volume_call_delete_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72565">Finishes an operation started with udisks_logical_volume_call_delete().</doc>
        <source-position filename="udisks-generated.h" line="8453"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72573">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72567">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72568">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_delete().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_sync"
              c:identifier="udisks_logical_volume_call_delete_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72594">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_delete() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8458"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72605">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72596">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72597">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72598">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rename"
              c:identifier="udisks_logical_volume_call_rename"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72634">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Rename"&gt;Rename()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_rename_finish() to get the result of the operation.

See udisks_logical_volume_call_rename_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8464"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72636">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72637">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72638">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72639">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72640">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72641">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rename_finish"
              c:identifier="udisks_logical_volume_call_rename_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72672">Finishes an operation started with udisks_logical_volume_call_rename().</doc>
        <source-position filename="udisks-generated.h" line="8472"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72681">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72674">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72675">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72676">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_rename().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rename_sync"
              c:identifier="udisks_logical_volume_call_rename_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72704">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Rename"&gt;Rename()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_rename() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8478"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72717">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72706">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72707">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72708">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72709">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72710">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_repair"
              c:identifier="udisks_logical_volume_call_repair"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72860">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Repair"&gt;Repair()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_repair_finish() to get the result of the operation.

See udisks_logical_volume_call_repair_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8506"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72862">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_pvs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72863">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72864">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72865">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72866">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72867">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_repair_finish"
              c:identifier="udisks_logical_volume_call_repair_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72898">Finishes an operation started with udisks_logical_volume_call_repair().</doc>
        <source-position filename="udisks-generated.h" line="8514"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72906">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72900">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72901">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_repair().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_repair_sync"
              c:identifier="udisks_logical_volume_call_repair_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72927">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Repair"&gt;Repair()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_repair() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8519"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72939">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72929">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_pvs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72930">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72931">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72932">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize"
              c:identifier="udisks_logical_volume_call_resize"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72750">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_call_resize_finish() to get the result of the operation.

See udisks_logical_volume_call_resize_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8486"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72752">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_new_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72753">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72754">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72755">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72756">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72757">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_finish"
              c:identifier="udisks_logical_volume_call_resize_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72788">Finishes an operation started with udisks_logical_volume_call_resize().</doc>
        <source-position filename="udisks-generated.h" line="8494"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72796">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72790">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72791">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_call_resize().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_sync"
              c:identifier="udisks_logical_volume_call_resize_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72817">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_logical_volume_call_resize() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8499"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72829">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72819">A #UDisksLogicalVolumeProxy.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="arg_new_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72820">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72821">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72822">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_activate"
              c:identifier="udisks_logical_volume_complete_activate"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73410">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Activate"&gt;Activate()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8362"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73412">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73413">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73414">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_cache_attach"
              c:identifier="udisks_logical_volume_complete_cache_attach"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73559">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheAttach"&gt;CacheAttach()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8393"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73561">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73562">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_cache_detach"
              c:identifier="udisks_logical_volume_complete_cache_detach"
              version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73599">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheDetach"&gt;CacheDetach()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8401"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73601">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73602">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_cache_split"
              c:identifier="udisks_logical_volume_complete_cache_split"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73579">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheSplit"&gt;CacheSplit()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8397"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73581">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73582">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_snapshot"
              c:identifier="udisks_logical_volume_complete_create_snapshot"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73536">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CreateSnapshot"&gt;CreateSnapshot()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8388"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73538">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73539">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73540">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_deactivate"
              c:identifier="udisks_logical_volume_complete_deactivate"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73433">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Deactivate"&gt;Deactivate()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8367"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73435">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73436">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_delete"
              c:identifier="udisks_logical_volume_complete_delete"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73453">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Delete"&gt;Delete()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8371"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73455">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73456">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_rename"
              c:identifier="udisks_logical_volume_complete_rename"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73473">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Rename"&gt;Rename()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8375"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73475">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73476">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73477">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_repair"
              c:identifier="udisks_logical_volume_complete_repair"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73516">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Repair"&gt;Repair()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8384"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73518">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73519">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_resize"
              c:identifier="udisks_logical_volume_complete_resize"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73496">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Resize"&gt;Resize()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8380"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73498">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="73499">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_block_device"
              c:identifier="udisks_logical_volume_dup_block_device"
              version="2.7.1"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72279">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.BlockDevice"&gt;"BlockDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8661"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72287">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72281">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_child_configuration"
              c:identifier="udisks_logical_volume_dup_child_configuration"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72220">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8657"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72228">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72222">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_layout"
              c:identifier="udisks_logical_volume_dup_layout"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71947">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Layout"&gt;"Layout"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8638"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71955">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71949">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_name"
              c:identifier="udisks_logical_volume_dup_name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71622">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8614"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71630">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71624">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_origin"
              c:identifier="udisks_logical_volume_dup_origin"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72161">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Origin"&gt;"Origin"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8653"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72169">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72163">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_structure"
              c:identifier="udisks_logical_volume_dup_structure"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72006">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Structure"&gt;"Structure"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8642"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72014">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72008">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_thin_pool"
              c:identifier="udisks_logical_volume_dup_thin_pool"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72102">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ThinPool"&gt;"ThinPool"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8649"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72110">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72104">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_type_"
              c:identifier="udisks_logical_volume_dup_type_"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71888">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8634"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71896">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71890">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_uuid"
              c:identifier="udisks_logical_volume_dup_uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71718">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8621"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71726">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71720">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_volume_group"
              c:identifier="udisks_logical_volume_dup_volume_group"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71563">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8610"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71571">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71565">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_active"
              c:identifier="udisks_logical_volume_get_active"
              glib:get-property="active"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71659">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Active"&gt;"Active"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8617"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71667">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71661">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_block_device"
              c:identifier="udisks_logical_volume_get_block_device"
              glib:get-property="block-device"
              version="2.7.1"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72257">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.BlockDevice"&gt;"BlockDevice"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_block_device() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8660"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72267">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72259">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_child_configuration"
              c:identifier="udisks_logical_volume_get_child_configuration"
              glib:get-property="child-configuration"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72198">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_child_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8656"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72208">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72200">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_data_allocated_ratio"
              c:identifier="udisks_logical_volume_get_data_allocated_ratio"
              glib:get-property="data-allocated-ratio"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71792">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.DataAllocatedRatio"&gt;"DataAllocatedRatio"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8627"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71800">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71794">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_layout"
              c:identifier="udisks_logical_volume_get_layout"
              glib:get-property="layout"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71925">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Layout"&gt;"Layout"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_layout() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8637"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71935">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71927">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metadata_allocated_ratio"
              c:identifier="udisks_logical_volume_get_metadata_allocated_ratio"
              glib:get-property="metadata-allocated-ratio"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71829">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.MetadataAllocatedRatio"&gt;"MetadataAllocatedRatio"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8630"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71837">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71831">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="udisks_logical_volume_get_name"
              glib:get-property="name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71600">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8613"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71610">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71602">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_origin"
              c:identifier="udisks_logical_volume_get_origin"
              glib:get-property="origin"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72139">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Origin"&gt;"Origin"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_origin() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8652"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72149">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72141">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_logical_volume_get_size"
              glib:get-property="size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71755">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8624"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71763">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71757">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_structure"
              c:identifier="udisks_logical_volume_get_structure"
              glib:get-property="structure"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71984">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Structure"&gt;"Structure"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_structure() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8641"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71994">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71986">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sync_ratio"
              c:identifier="udisks_logical_volume_get_sync_ratio"
              glib:get-property="sync-ratio"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72043">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.SyncRatio"&gt;"SyncRatio"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8645"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72051">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72045">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_thin_pool"
              c:identifier="udisks_logical_volume_get_thin_pool"
              glib:get-property="thin-pool"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72080">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ThinPool"&gt;"ThinPool"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_thin_pool() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8648"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="72090">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72082">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_type_"
              c:identifier="udisks_logical_volume_get_type_"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71866">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_type_() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8633"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71876">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71868">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid"
              c:identifier="udisks_logical_volume_get_uuid"
              glib:get-property="uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71696">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8620"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71706">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71698">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_volume_group"
              c:identifier="udisks_logical_volume_get_volume_group"
              glib:get-property="volume-group"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71541">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_logical_volume_dup_volume_group() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8609"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71551">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71543">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_active"
              c:identifier="udisks_logical_volume_set_active"
              glib:set-property="active"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71679">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Active"&gt;"Active"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8618"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71681">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71682">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_block_device"
              c:identifier="udisks_logical_volume_set_block_device"
              glib:set-property="block-device"
              version="2.7.1"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72299">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.BlockDevice"&gt;"BlockDevice"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8662"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72301">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72302">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_child_configuration"
              c:identifier="udisks_logical_volume_set_child_configuration"
              glib:set-property="child-configuration"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72240">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8658"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72242">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72243">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_data_allocated_ratio"
              c:identifier="udisks_logical_volume_set_data_allocated_ratio"
              glib:set-property="data-allocated-ratio"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71812">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.DataAllocatedRatio"&gt;"DataAllocatedRatio"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8628"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71814">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71815">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_layout"
              c:identifier="udisks_logical_volume_set_layout"
              glib:set-property="layout"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71967">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Layout"&gt;"Layout"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8639"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71969">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71970">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metadata_allocated_ratio"
              c:identifier="udisks_logical_volume_set_metadata_allocated_ratio"
              glib:set-property="metadata-allocated-ratio"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71849">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.MetadataAllocatedRatio"&gt;"MetadataAllocatedRatio"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8631"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71851">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71852">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="udisks_logical_volume_set_name"
              glib:set-property="name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71642">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Name"&gt;"Name"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8615"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71644">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71645">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_origin"
              c:identifier="udisks_logical_volume_set_origin"
              glib:set-property="origin"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72181">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Origin"&gt;"Origin"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8654"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72183">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72184">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_logical_volume_set_size"
              glib:set-property="size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71775">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8625"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71777">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71778">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_structure"
              c:identifier="udisks_logical_volume_set_structure"
              glib:set-property="structure"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72026">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Structure"&gt;"Structure"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8643"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72028">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72029">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sync_ratio"
              c:identifier="udisks_logical_volume_set_sync_ratio"
              glib:set-property="sync-ratio"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72063">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.SyncRatio"&gt;"SyncRatio"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8646"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72065">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72066">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_thin_pool"
              c:identifier="udisks_logical_volume_set_thin_pool"
              glib:set-property="thin-pool"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="72122">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ThinPool"&gt;"ThinPool"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8650"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72124">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72125">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_type_"
              c:identifier="udisks_logical_volume_set_type_"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71908">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Type"&gt;"Type"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8635"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71910">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71911">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uuid"
              c:identifier="udisks_logical_volume_set_uuid"
              glib:set-property="uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71738">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8622"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71740">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71741">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_volume_group"
              c:identifier="udisks_logical_volume_set_volume_group"
              glib:set-property="volume-group"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71583">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8611"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71585">A #UDisksLogicalVolume.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71586">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="active"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_active"
                getter="get_active"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71396">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Active"&gt;"Active"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="block-device"
                version="2.7.1"
                writable="1"
                transfer-ownership="none"
                setter="set_block_device"
                getter="get_block_device"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71528">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.BlockDevice"&gt;"BlockDevice"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="child-configuration"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_child_configuration"
                getter="get_child_configuration">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71517">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="data-allocated-ratio"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_data_allocated_ratio"
                getter="get_data_allocated_ratio"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71429">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.DataAllocatedRatio"&gt;"DataAllocatedRatio"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="layout"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_layout"
                getter="get_layout"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71462">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Layout"&gt;"Layout"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="metadata-allocated-ratio"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_metadata_allocated_ratio"
                getter="get_metadata_allocated_ratio"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71440">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.MetadataAllocatedRatio"&gt;"MetadataAllocatedRatio"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="name"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71385">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Name"&gt;"Name"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="origin"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_origin"
                getter="get_origin"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71506">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Origin"&gt;"Origin"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="size"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_size"
                getter="get_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71418">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="structure"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_structure"
                getter="get_structure">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71473">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Structure"&gt;"Structure"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="sync-ratio"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_sync_ratio"
                getter="get_sync_ratio"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71484">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.SyncRatio"&gt;"SyncRatio"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="thin-pool"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_thin_pool"
                getter="get_thin_pool"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71495">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.ThinPool"&gt;"ThinPool"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="type"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71451">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.Type"&gt;"Type"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="uuid"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_uuid"
                getter="get_uuid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71407">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.UUID"&gt;"UUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="volume-group"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_volume_group"
                getter="get_volume_group"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71374">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-LogicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-activate" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71117">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Activate"&gt;Activate()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_activate() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71127">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71120">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71121">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-cache-attach" when="last" version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71297">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheAttach"&gt;CacheAttach()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_cache_attach() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71308">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71300">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_cache_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71301">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71302">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-cache-detach" when="last" version="2.6.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71348">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheDetach"&gt;CacheDetach()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_cache_detach() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71358">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71351">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71352">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-cache-split" when="last" version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71323">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CacheSplit"&gt;CacheSplit()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_cache_split() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71333">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71326">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71327">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-snapshot" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71270">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.CreateSnapshot"&gt;CreateSnapshot()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_create_snapshot() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71282">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71273">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71274">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71275">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71276">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-deactivate" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71142">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Deactivate"&gt;Deactivate()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_deactivate() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71152">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71145">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71146">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-delete" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71167">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Delete"&gt;Delete()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_delete() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71177">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71170">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71171">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-rename" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71192">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Rename"&gt;Rename()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_rename() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71203">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71195">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71196">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71197">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-repair" when="last" version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71244">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Repair"&gt;Repair()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_repair() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71255">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71247">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_pvs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71248">Argument passed by remote caller.</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71249">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-resize" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71218">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-LogicalVolume.Resize"&gt;Resize()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_logical_volume_complete_resize() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="71229">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71221">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_new_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71222">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71223">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="LogicalVolumeIface"
            c:type="UDisksLogicalVolumeIface"
            glib:is-gtype-struct-for="LogicalVolume"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="71076">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="8349"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="71078">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_activate">
        <callback name="handle_activate">
          <source-position filename="udisks-generated.h" line="8263"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_create_snapshot">
        <callback name="handle_create_snapshot">
          <source-position filename="udisks-generated.h" line="8268"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_deactivate">
        <callback name="handle_deactivate">
          <source-position filename="udisks-generated.h" line="8275"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_delete">
        <callback name="handle_delete">
          <source-position filename="udisks-generated.h" line="8280"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_rename">
        <callback name="handle_rename">
          <source-position filename="udisks-generated.h" line="8285"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_new_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_resize">
        <callback name="handle_resize">
          <source-position filename="udisks-generated.h" line="8291"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_new_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_active">
        <callback name="get_active">
          <source-position filename="udisks-generated.h" line="8297"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71667">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="71661">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_child_configuration">
        <callback name="get_child_configuration">
          <source-position filename="udisks-generated.h" line="8299"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72208">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="72200">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_data_allocated_ratio">
        <callback name="get_data_allocated_ratio">
          <source-position filename="udisks-generated.h" line="8301"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71800">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="71794">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_metadata_allocated_ratio">
        <callback name="get_metadata_allocated_ratio">
          <source-position filename="udisks-generated.h" line="8303"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71837">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="71831">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_name">
        <callback name="get_name">
          <source-position filename="udisks-generated.h" line="8305"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71610">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="71602">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_origin">
        <callback name="get_origin">
          <source-position filename="udisks-generated.h" line="8307"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72149">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="72141">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <source-position filename="udisks-generated.h" line="8309"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71763">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="71757">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_thin_pool">
        <callback name="get_thin_pool">
          <source-position filename="udisks-generated.h" line="8311"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72090">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="72082">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_type_">
        <callback name="get_type_">
          <source-position filename="udisks-generated.h" line="8313"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71876">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="71868">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_uuid">
        <callback name="get_uuid">
          <source-position filename="udisks-generated.h" line="8315"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71706">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="71698">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_volume_group">
        <callback name="get_volume_group">
          <source-position filename="udisks-generated.h" line="8317"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71551">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="71543">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_cache_attach">
        <callback name="handle_cache_attach">
          <source-position filename="udisks-generated.h" line="8319"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_cache_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_cache_split">
        <callback name="handle_cache_split">
          <source-position filename="udisks-generated.h" line="8325"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_cache_detach">
        <callback name="handle_cache_detach">
          <source-position filename="udisks-generated.h" line="8330"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_block_device">
        <callback name="get_block_device">
          <source-position filename="udisks-generated.h" line="8335"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72267">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="72259">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_repair">
        <callback name="handle_repair">
          <source-position filename="udisks-generated.h" line="8337"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_pvs" transfer-ownership="none">
              <type name="utf8" c:type="const gchar* const*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_layout">
        <callback name="get_layout">
          <source-position filename="udisks-generated.h" line="8343"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71935">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="71927">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_structure">
        <callback name="get_structure">
          <source-position filename="udisks-generated.h" line="8345"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="71994">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="71986">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sync_ratio">
        <callback name="get_sync_ratio">
          <source-position filename="udisks-generated.h" line="8347"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="72051">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="72045">A #UDisksLogicalVolume.</doc>
              <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="LogicalVolumeProxy"
           c:symbol-prefix="logical_volume_proxy"
           c:type="UDisksLogicalVolumeProxy"
           version="2.0.0"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksLogicalVolumeProxy"
           glib:get-type="udisks_logical_volume_proxy_get_type"
           glib:type-struct="LogicalVolumeProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="73621">The #UDisksLogicalVolumeProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="8688"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="LogicalVolume"/>
      <constructor name="new_finish"
                   c:identifier="udisks_logical_volume_proxy_new_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="74107">Finishes an operation started with udisks_logical_volume_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="8704"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="74114">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LogicalVolumeProxy" c:type="UDisksLogicalVolume*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74109">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_logical_volume_proxy_new_for_bus_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="74203">Finishes an operation started with udisks_logical_volume_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="8723"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="74210">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LogicalVolumeProxy" c:type="UDisksLogicalVolume*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74205">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_logical_volume_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_logical_volume_proxy_new_for_bus_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="74230">Like udisks_logical_volume_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_logical_volume_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="8726"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="74245">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LogicalVolumeProxy" c:type="UDisksLogicalVolume*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74232">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74233">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74234">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74235">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74236">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_logical_volume_proxy_new_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="74134">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_logical_volume_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="8707"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="74149">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LogicalVolumeProxy" c:type="UDisksLogicalVolume*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74136">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74137">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74138">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74139">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74140">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_logical_volume_proxy_new"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="74075">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_proxy_new_finish() to get the result of the operation.

See udisks_logical_volume_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="8696"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74077">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74078">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74079">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74080">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74081">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74082">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74083">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_logical_volume_proxy_new_for_bus"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="74171">Like udisks_logical_volume_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_logical_volume_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_logical_volume_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="8715"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74173">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74174">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74175">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74176">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74177">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74178">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="74179">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="LogicalVolumeProxyPrivate"
              c:type="UDisksLogicalVolumeProxyPrivate*"/>
      </field>
    </class>
    <record name="LogicalVolumeProxyClass"
            c:type="UDisksLogicalVolumeProxyClass"
            glib:is-gtype-struct-for="LogicalVolumeProxy"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="73629">Class structure for #UDisksLogicalVolumeProxy.</doc>
      <source-position filename="udisks-generated.h" line="8688"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="73631">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="LogicalVolumeProxyPrivate"
            c:type="UDisksLogicalVolumeProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="8676"/>
    </record>
    <class name="LogicalVolumeSkeleton"
           c:symbol-prefix="logical_volume_skeleton"
           c:type="UDisksLogicalVolumeSkeleton"
           version="2.0.0"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksLogicalVolumeSkeleton"
           glib:get-type="udisks_logical_volume_skeleton_get_type"
           glib:type-struct="LogicalVolumeSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="74269">The #UDisksLogicalVolumeSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="8758"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="LogicalVolume"/>
      <constructor name="new"
                   c:identifier="udisks_logical_volume_skeleton_new"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="74908">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="8766"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="74913">The skeleton object.</doc>
          <type name="LogicalVolumeSkeleton" c:type="UDisksLogicalVolume*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="LogicalVolumeSkeletonPrivate"
              c:type="UDisksLogicalVolumeSkeletonPrivate*"/>
      </field>
    </class>
    <record name="LogicalVolumeSkeletonClass"
            c:type="UDisksLogicalVolumeSkeletonClass"
            glib:is-gtype-struct-for="LogicalVolumeSkeleton"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="74277">Class structure for #UDisksLogicalVolumeSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="8758"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="74279">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="LogicalVolumeSkeletonPrivate"
            c:type="UDisksLogicalVolumeSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="8746"/>
    </record>
    <interface name="Loop"
               c:symbol-prefix="loop"
               c:type="UDisksLoop"
               glib:type-name="UDisksLoop"
               glib:get-type="udisks_loop_get_type"
               glib:type-struct="LoopIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="41537">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="4636"/>
      <function name="interface_info"
                c:identifier="udisks_loop_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41477">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="4644"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41482">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_loop_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41490">Overrides all #GObject properties in the #UDisksLoop interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="4645"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41498">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41492">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41493">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_autoclear"
                      invoker="get_autoclear"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41692">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.Autoclear"&gt;"Autoclear"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4630"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41700">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41694">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_backing_file"
                      invoker="get_backing_file"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41639">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.BackingFile"&gt;"BackingFile"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_loop_dup_backing_file() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4632"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41649">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41641">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_setup_by_uid"
                      invoker="get_setup_by_uid"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41725">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.SetupByUID"&gt;"SetupByUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4634"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41733">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41727">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_delete">
        <source-position filename="udisks-generated.h" line="4619"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_autoclear">
        <source-position filename="udisks-generated.h" line="4624"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_delete" c:identifier="udisks_loop_call_delete">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41758">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_loop_call_delete_finish() to get the result of the operation.

See udisks_loop_call_delete_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4660"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41760">A #UDisksLoopProxy.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41761">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41762">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41763">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41764">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_finish"
              c:identifier="udisks_loop_call_delete_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41791">Finishes an operation started with udisks_loop_call_delete().</doc>
        <source-position filename="udisks-generated.h" line="4667"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41799">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41793">A #UDisksLoopProxy.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41794">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_loop_call_delete().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_sync"
              c:identifier="udisks_loop_call_delete_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41818">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_loop_call_delete() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4672"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41829">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41820">A #UDisksLoopProxy.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41821">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41822">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_autoclear"
              c:identifier="udisks_loop_call_set_autoclear">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41856">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.SetAutoclear"&gt;SetAutoclear()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_loop_call_set_autoclear_finish() to get the result of the operation.

See udisks_loop_call_set_autoclear_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4678"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41858">A #UDisksLoopProxy.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41859">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41860">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41861">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41862">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41863">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_autoclear_finish"
              c:identifier="udisks_loop_call_set_autoclear_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41892">Finishes an operation started with udisks_loop_call_set_autoclear().</doc>
        <source-position filename="udisks-generated.h" line="4686"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41900">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41894">A #UDisksLoopProxy.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41895">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_loop_call_set_autoclear().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_autoclear_sync"
              c:identifier="udisks_loop_call_set_autoclear_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41919">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.SetAutoclear"&gt;SetAutoclear()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_loop_call_set_autoclear() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4691"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41931">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41921">A #UDisksLoopProxy.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41922">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41923">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41924">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_delete"
              c:identifier="udisks_loop_complete_delete">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41960">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.Delete"&gt;Delete()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4649"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41962">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41963">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_autoclear"
              c:identifier="udisks_loop_complete_set_autoclear">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41978">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.SetAutoclear"&gt;SetAutoclear()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4653"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41980">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41981">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_backing_file"
              c:identifier="udisks_loop_dup_backing_file"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41659">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.BackingFile"&gt;"BackingFile"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4702"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41667">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41661">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_autoclear"
              c:identifier="udisks_loop_get_autoclear"
              glib:get-property="autoclear"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41692">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.Autoclear"&gt;"Autoclear"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4705"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41700">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41694">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_backing_file"
              c:identifier="udisks_loop_get_backing_file"
              glib:get-property="backing-file"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41639">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.BackingFile"&gt;"BackingFile"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_loop_dup_backing_file() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4701"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41649">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41641">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setup_by_uid"
              c:identifier="udisks_loop_get_setup_by_uid"
              glib:get-property="setup-by-uid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41725">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.SetupByUID"&gt;"SetupByUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4708"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41733">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41727">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_autoclear"
              c:identifier="udisks_loop_set_autoclear"
              glib:set-property="autoclear"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41710">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.Autoclear"&gt;"Autoclear"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4706"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41712">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41713">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_backing_file"
              c:identifier="udisks_loop_set_backing_file"
              glib:set-property="backing-file"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41677">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.BackingFile"&gt;"BackingFile"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4703"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41679">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41680">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_setup_by_uid"
              c:identifier="udisks_loop_set_setup_by_uid"
              glib:set-property="setup-by-uid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41743">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.SetupByUID"&gt;"SetupByUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4709"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41745">A #UDisksLoop.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41746">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="autoclear"
                writable="1"
                transfer-ownership="none"
                setter="set_autoclear"
                getter="get_autoclear"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41619">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.Autoclear"&gt;"Autoclear"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="backing-file"
                writable="1"
                transfer-ownership="none"
                setter="set_backing_file"
                getter="get_backing_file"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41610">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.BackingFile"&gt;"BackingFile"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="setup-by-uid"
                writable="1"
                transfer-ownership="none"
                setter="set_setup_by_uid"
                getter="get_setup_by_uid"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41628">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Loop.SetupByUID"&gt;"SetupByUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <glib:signal name="handle-delete" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41562">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.Delete"&gt;Delete()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_loop_complete_delete() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41572">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41565">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41566">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-autoclear" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41585">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Loop.SetAutoclear"&gt;SetAutoclear()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_loop_complete_set_autoclear() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41596">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41588">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41589">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41590">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="LoopIface"
            c:type="UDisksLoopIface"
            glib:is-gtype-struct-for="Loop">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="41543">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="4636"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41545">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_delete">
        <callback name="handle_delete">
          <source-position filename="udisks-generated.h" line="4619"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Loop" c:type="UDisksLoop*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_autoclear">
        <callback name="handle_set_autoclear">
          <source-position filename="udisks-generated.h" line="4624"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Loop" c:type="UDisksLoop*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_value" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_autoclear">
        <callback name="get_autoclear">
          <source-position filename="udisks-generated.h" line="4630"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41700">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="41694">A #UDisksLoop.</doc>
              <type name="Loop" c:type="UDisksLoop*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_backing_file">
        <callback name="get_backing_file">
          <source-position filename="udisks-generated.h" line="4632"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41649">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="41641">A #UDisksLoop.</doc>
              <type name="Loop" c:type="UDisksLoop*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_setup_by_uid">
        <callback name="get_setup_by_uid">
          <source-position filename="udisks-generated.h" line="4634"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="41733">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="41727">A #UDisksLoop.</doc>
              <type name="Loop" c:type="UDisksLoop*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="LoopProxy"
           c:symbol-prefix="loop_proxy"
           c:type="UDisksLoopProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksLoopProxy"
           glib:get-type="udisks_loop_proxy_get_type"
           glib:type-struct="LoopProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="41998">The #UDisksLoopProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="4735"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Loop"/>
      <constructor name="new_finish"
                   c:identifier="udisks_loop_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42290">Finishes an operation started with udisks_loop_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="4751"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="42297">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LoopProxy" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42292">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_loop_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_loop_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42380">Finishes an operation started with udisks_loop_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="4770"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="42387">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LoopProxy" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42382">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_loop_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_loop_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42405">Like udisks_loop_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_loop_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4773"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="42420">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LoopProxy" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42407">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42408">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42409">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42410">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42411">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_loop_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42315">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_loop_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4754"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="42330">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="LoopProxy" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42317">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42318">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42319">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42320">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42321">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_loop_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42260">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_loop_proxy_new_finish() to get the result of the operation.

See udisks_loop_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4743"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42262">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42263">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42264">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42265">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42266">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42267">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42268">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_loop_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42350">Like udisks_loop_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_loop_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_loop_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4762"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42352">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42353">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42354">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42355">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42356">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42357">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="42358">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="LoopProxyPrivate" c:type="UDisksLoopProxyPrivate*"/>
      </field>
    </class>
    <record name="LoopProxyClass"
            c:type="UDisksLoopProxyClass"
            glib:is-gtype-struct-for="LoopProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="42004">Class structure for #UDisksLoopProxy.</doc>
      <source-position filename="udisks-generated.h" line="4735"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42006">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="LoopProxyPrivate"
            c:type="UDisksLoopProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="4723"/>
    </record>
    <class name="LoopSkeleton"
           c:symbol-prefix="loop_skeleton"
           c:type="UDisksLoopSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksLoopSkeleton"
           glib:get-type="udisks_loop_skeleton_get_type"
           glib:type-struct="LoopSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="42442">The #UDisksLoopSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="4805"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Loop"/>
      <constructor name="new" c:identifier="udisks_loop_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42921">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="4813"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="42926">The skeleton object.</doc>
          <type name="LoopSkeleton" c:type="UDisksLoop*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="LoopSkeletonPrivate" c:type="UDisksLoopSkeletonPrivate*"/>
      </field>
    </class>
    <record name="LoopSkeletonClass"
            c:type="UDisksLoopSkeletonClass"
            glib:is-gtype-struct-for="LoopSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="42448">Class structure for #UDisksLoopSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="4805"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="42450">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="LoopSkeletonPrivate"
            c:type="UDisksLoopSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="4793"/>
    </record>
    <constant name="MAJOR_VERSION" value="2" c:type="UDISKS_MAJOR_VERSION">
      <doc xml:space="preserve"
           filename="udisksversion.h"
           line="32">The major version of the libudisks2 header files.</doc>
      <source-position filename="udisksversion.h" line="37"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="MANAGER"
                    c:identifier="UDISKS_MANAGER"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_BTRFS"
                    c:identifier="UDISKS_MANAGER_BTRFS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5478"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_BTRFS_GET_IFACE"
                    c:identifier="UDISKS_MANAGER_BTRFS_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5480"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_BTRFS_PROXY"
                    c:identifier="UDISKS_MANAGER_BTRFS_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5550"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_BTRFS_PROXY_CLASS"
                    c:identifier="UDISKS_MANAGER_BTRFS_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5551"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_BTRFS_PROXY_GET_CLASS"
                    c:identifier="UDISKS_MANAGER_BTRFS_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5552"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_BTRFS_SKELETON"
                    c:identifier="UDISKS_MANAGER_BTRFS_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5620"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_BTRFS_SKELETON_CLASS"
                    c:identifier="UDISKS_MANAGER_BTRFS_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5621"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_BTRFS_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_MANAGER_BTRFS_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5622"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_GET_IFACE"
                    c:identifier="UDISKS_MANAGER_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_ISCSI_INITIATOR"
                    c:identifier="UDISKS_MANAGER_ISCSI_INITIATOR"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6097"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_ISCSI_INITIATOR_GET_IFACE"
                    c:identifier="UDISKS_MANAGER_ISCSI_INITIATOR_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6099"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_ISCSI_INITIATOR_PROXY"
                    c:identifier="UDISKS_MANAGER_ISCSI_INITIATOR_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6405"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_ISCSI_INITIATOR_PROXY_CLASS"
                    c:identifier="UDISKS_MANAGER_ISCSI_INITIATOR_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6406"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_ISCSI_INITIATOR_PROXY_GET_CLASS"
                    c:identifier="UDISKS_MANAGER_ISCSI_INITIATOR_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6407"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_ISCSI_INITIATOR_SKELETON"
                    c:identifier="UDISKS_MANAGER_ISCSI_INITIATOR_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6475"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_ISCSI_INITIATOR_SKELETON_CLASS"
                    c:identifier="UDISKS_MANAGER_ISCSI_INITIATOR_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6476"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_ISCSI_INITIATOR_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_MANAGER_ISCSI_INITIATOR_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="6477"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_LVM2"
                    c:identifier="UDISKS_MANAGER_LVM2"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7193"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_LVM2_GET_IFACE"
                    c:identifier="UDISKS_MANAGER_LVM2_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7195"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_LVM2_PROXY"
                    c:identifier="UDISKS_MANAGER_LVM2_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7262"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_LVM2_PROXY_CLASS"
                    c:identifier="UDISKS_MANAGER_LVM2_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7263"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_LVM2_PROXY_GET_CLASS"
                    c:identifier="UDISKS_MANAGER_LVM2_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7264"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_LVM2_SKELETON"
                    c:identifier="UDISKS_MANAGER_LVM2_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7332"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_LVM2_SKELETON_CLASS"
                    c:identifier="UDISKS_MANAGER_LVM2_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7333"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_LVM2_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_MANAGER_LVM2_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7334"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_NVME"
                    c:identifier="UDISKS_MANAGER_NVME"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="507"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_NVME_GET_IFACE"
                    c:identifier="UDISKS_MANAGER_NVME_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="509"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_NVME_PROXY"
                    c:identifier="UDISKS_MANAGER_NVME_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="654"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_NVME_PROXY_CLASS"
                    c:identifier="UDISKS_MANAGER_NVME_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="655"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_NVME_PROXY_GET_CLASS"
                    c:identifier="UDISKS_MANAGER_NVME_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="656"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_NVME_SKELETON"
                    c:identifier="UDISKS_MANAGER_NVME_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="724"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_NVME_SKELETON_CLASS"
                    c:identifier="UDISKS_MANAGER_NVME_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="725"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_NVME_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_MANAGER_NVME_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="726"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_PROXY"
                    c:identifier="UDISKS_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="402"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_PROXY_CLASS"
                    c:identifier="UDISKS_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="403"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_PROXY_GET_CLASS"
                    c:identifier="UDISKS_MANAGER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="404"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_SKELETON"
                    c:identifier="UDISKS_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="472"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_SKELETON_CLASS"
                    c:identifier="UDISKS_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="473"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_MANAGER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="474"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MDRAID"
                    c:identifier="UDISKS_MDRAID"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4820"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MDRAID_GET_IFACE"
                    c:identifier="UDISKS_MDRAID_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4822"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MDRAID_PROXY"
                    c:identifier="UDISKS_MDRAID_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5139"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MDRAID_PROXY_CLASS"
                    c:identifier="UDISKS_MDRAID_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5140"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MDRAID_PROXY_GET_CLASS"
                    c:identifier="UDISKS_MDRAID_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5141"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MDRAID_SKELETON"
                    c:identifier="UDISKS_MDRAID_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5209"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MDRAID_SKELETON_CLASS"
                    c:identifier="UDISKS_MDRAID_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5210"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MDRAID_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_MDRAID_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="5211"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="MDRaid"
               c:symbol-prefix="mdraid"
               c:type="UDisksMDRaid"
               version="2.0.0"
               glib:type-name="UDisksMDRaid"
               glib:get-type="udisks_mdraid_get_type"
               glib:type-struct="MDRaidIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="43604">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="4902"/>
      <function name="interface_info"
                c:identifier="udisks_mdraid_interface_info"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43463">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="4910"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43468">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_mdraid_override_properties"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43478">Overrides all #GObject properties in the #UDisksMDRaid interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="4911"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43486">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43480">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43481">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_active_devices"
                      invoker="get_active_devices"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44551">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ActiveDevices"&gt;"ActiveDevices"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_active_devices() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4872"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44561">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44553">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_bitmap_location"
                      invoker="get_bitmap_location"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44455">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.BitmapLocation"&gt;"BitmapLocation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_bitmap_location() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4874"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44465">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44457">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_child_configuration"
                      invoker="get_child_configuration"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44610">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_child_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4876"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44620">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44612">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_chunk_size"
                      invoker="get_chunk_size"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44514">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChunkSize"&gt;"ChunkSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4878"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44522">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44516">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_degraded"
                      invoker="get_degraded"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44418">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Degraded"&gt;"Degraded"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4880"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44426">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44420">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_level"
                      invoker="get_level"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44115">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Level"&gt;"Level"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_level() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4882"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44125">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44117">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_name"
                      invoker="get_name"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44056">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4884"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44066">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44058">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_num_devices"
                      invoker="get_num_devices"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44174">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.NumDevices"&gt;"NumDevices"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4886"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44182">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44176">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_running"
                      invoker="get_running"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44669">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Running"&gt;"Running"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4888"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44677">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44671">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size"
                      invoker="get_size"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44211">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4890"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44219">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44213">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sync_action"
                      invoker="get_sync_action"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44248">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncAction"&gt;"SyncAction"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_sync_action() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4892"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44258">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44250">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sync_completed"
                      invoker="get_sync_completed"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44307">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncCompleted"&gt;"SyncCompleted"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4894"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44315">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44309">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sync_rate"
                      invoker="get_sync_rate"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44344">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRate"&gt;"SyncRate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4896"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44352">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44346">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sync_remaining_time"
                      invoker="get_sync_remaining_time"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44381">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRemainingTime"&gt;"SyncRemainingTime"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4898"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44389">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44383">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_uuid"
                      invoker="get_uuid"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43997">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="4900"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44007">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43999">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_add_device">
        <source-position filename="udisks-generated.h" line="4833"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_delete">
        <source-position filename="udisks-generated.h" line="4839"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_remove_device">
        <source-position filename="udisks-generated.h" line="4844"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_request_sync_action">
        <source-position filename="udisks-generated.h" line="4850"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_sync_action" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_bitmap_location">
        <source-position filename="udisks-generated.h" line="4856"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_start">
        <source-position filename="udisks-generated.h" line="4862"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_stop">
        <source-position filename="udisks-generated.h" line="4867"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_add_device"
              c:identifier="udisks_mdraid_call_add_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45024">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_mdraid_call_add_device_finish() to get the result of the operation.

See udisks_mdraid_call_add_device_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5002"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45026">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45027">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45028">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45029">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45030">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45031">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_device_finish"
              c:identifier="udisks_mdraid_call_add_device_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45062">Finishes an operation started with udisks_mdraid_call_add_device().</doc>
        <source-position filename="udisks-generated.h" line="5010"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45070">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45064">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45065">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_add_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_device_sync"
              c:identifier="udisks_mdraid_call_add_device_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45091">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_add_device() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5015"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45103">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45093">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45094">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45095">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45096">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete"
              c:identifier="udisks_mdraid_call_delete"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45354">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_mdraid_call_delete_finish() to get the result of the operation.

See udisks_mdraid_call_delete_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5062"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45356">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45357">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45358">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45359">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45360">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_finish"
              c:identifier="udisks_mdraid_call_delete_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45389">Finishes an operation started with udisks_mdraid_call_delete().</doc>
        <source-position filename="udisks-generated.h" line="5069"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45397">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45391">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45392">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_delete().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_sync"
              c:identifier="udisks_mdraid_call_delete_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45418">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_delete() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5074"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45429">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45420">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45421">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45422">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device"
              c:identifier="udisks_mdraid_call_remove_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44914">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_mdraid_call_remove_device_finish() to get the result of the operation.

See udisks_mdraid_call_remove_device_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4982"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44916">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44917">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44918">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44919">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44920">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44921">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device_finish"
              c:identifier="udisks_mdraid_call_remove_device_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44952">Finishes an operation started with udisks_mdraid_call_remove_device().</doc>
        <source-position filename="udisks-generated.h" line="4990"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44960">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44954">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44955">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_remove_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device_sync"
              c:identifier="udisks_mdraid_call_remove_device_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44981">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_remove_device() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4995"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44993">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44983">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44984">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44985">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44986">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_request_sync_action"
              c:identifier="udisks_mdraid_call_request_sync_action"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45244">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RequestSyncAction"&gt;RequestSyncAction()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_mdraid_call_request_sync_action_finish() to get the result of the operation.

See udisks_mdraid_call_request_sync_action_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5042"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45246">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_sync_action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45247">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45248">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45249">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45250">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45251">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_request_sync_action_finish"
              c:identifier="udisks_mdraid_call_request_sync_action_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45282">Finishes an operation started with udisks_mdraid_call_request_sync_action().</doc>
        <source-position filename="udisks-generated.h" line="5050"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45290">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45284">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45285">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_request_sync_action().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_request_sync_action_sync"
              c:identifier="udisks_mdraid_call_request_sync_action_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45311">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RequestSyncAction"&gt;RequestSyncAction()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_request_sync_action() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5055"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45323">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45313">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_sync_action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45314">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45315">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45316">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_bitmap_location"
              c:identifier="udisks_mdraid_call_set_bitmap_location"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45134">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.SetBitmapLocation"&gt;SetBitmapLocation()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_mdraid_call_set_bitmap_location_finish() to get the result of the operation.

See udisks_mdraid_call_set_bitmap_location_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5022"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45136">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45137">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45138">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45139">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45140">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45141">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_bitmap_location_finish"
              c:identifier="udisks_mdraid_call_set_bitmap_location_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45172">Finishes an operation started with udisks_mdraid_call_set_bitmap_location().</doc>
        <source-position filename="udisks-generated.h" line="5030"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45180">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45174">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45175">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_set_bitmap_location().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_bitmap_location_sync"
              c:identifier="udisks_mdraid_call_set_bitmap_location_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45201">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.SetBitmapLocation"&gt;SetBitmapLocation()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_set_bitmap_location() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5035"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="45213">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45203">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45204">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45205">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45206">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start"
              c:identifier="udisks_mdraid_call_start"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44706">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Start"&gt;Start()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_mdraid_call_start_finish() to get the result of the operation.

See udisks_mdraid_call_start_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4946"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44708">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44709">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44710">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44711">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44712">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_finish"
              c:identifier="udisks_mdraid_call_start_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44741">Finishes an operation started with udisks_mdraid_call_start().</doc>
        <source-position filename="udisks-generated.h" line="4953"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44749">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44743">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44744">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_start().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_sync"
              c:identifier="udisks_mdraid_call_start_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44770">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Start"&gt;Start()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_start() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4958"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44781">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44772">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44773">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44774">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_stop"
              c:identifier="udisks_mdraid_call_stop"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44810">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Stop"&gt;Stop()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_mdraid_call_stop_finish() to get the result of the operation.

See udisks_mdraid_call_stop_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4964"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44812">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44813">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44814">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44815">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44816">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_stop_finish"
              c:identifier="udisks_mdraid_call_stop_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44845">Finishes an operation started with udisks_mdraid_call_stop().</doc>
        <source-position filename="udisks-generated.h" line="4971"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44853">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44847">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44848">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_call_stop().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_stop_sync"
              c:identifier="udisks_mdraid_call_stop_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44874">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Stop"&gt;Stop()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_mdraid_call_stop() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4976"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44885">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44876">A #UDisksMDRaidProxy.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44877">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44878">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_add_device"
              c:identifier="udisks_mdraid_complete_add_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45518">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4927"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45520">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45521">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_delete"
              c:identifier="udisks_mdraid_complete_delete"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45578">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Delete"&gt;Delete()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4939"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45580">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45581">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_remove_device"
              c:identifier="udisks_mdraid_complete_remove_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45498">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4923"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45500">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45501">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_request_sync_action"
              c:identifier="udisks_mdraid_complete_request_sync_action"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45558">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RequestSyncAction"&gt;RequestSyncAction()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4935"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45560">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45561">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_bitmap_location"
              c:identifier="udisks_mdraid_complete_set_bitmap_location"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45538">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.SetBitmapLocation"&gt;SetBitmapLocation()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4931"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45540">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45541">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_start"
              c:identifier="udisks_mdraid_complete_start"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45458">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Start"&gt;Start()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4915"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45460">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45461">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_stop"
              c:identifier="udisks_mdraid_complete_stop"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45478">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Stop"&gt;Stop()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4919"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45480">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="45481">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_active_devices"
              c:identifier="udisks_mdraid_dup_active_devices"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44573">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ActiveDevices"&gt;"ActiveDevices"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5125"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44581">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44575">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_bitmap_location"
              c:identifier="udisks_mdraid_dup_bitmap_location"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44477">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.BitmapLocation"&gt;"BitmapLocation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5118"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44485">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44479">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_child_configuration"
              c:identifier="udisks_mdraid_dup_child_configuration"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44632">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5129"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44640">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44634">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_level"
              c:identifier="udisks_mdraid_dup_level"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44137">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Level"&gt;"Level"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5092"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44145">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44139">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_name"
              c:identifier="udisks_mdraid_dup_name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44078">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5088"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44086">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44080">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_sync_action"
              c:identifier="udisks_mdraid_dup_sync_action"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44270">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncAction"&gt;"SyncAction"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5102"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44278">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44272">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_uuid"
              c:identifier="udisks_mdraid_dup_uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44019">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5084"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44027">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44021">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_active_devices"
              c:identifier="udisks_mdraid_get_active_devices"
              glib:get-property="active-devices"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44551">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ActiveDevices"&gt;"ActiveDevices"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_active_devices() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5124"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44561">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44553">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bitmap_location"
              c:identifier="udisks_mdraid_get_bitmap_location"
              glib:get-property="bitmap-location"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44455">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.BitmapLocation"&gt;"BitmapLocation"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_bitmap_location() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5117"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44465">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44457">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_child_configuration"
              c:identifier="udisks_mdraid_get_child_configuration"
              glib:get-property="child-configuration"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44610">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_child_configuration() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5128"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44620">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44612">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_chunk_size"
              c:identifier="udisks_mdraid_get_chunk_size"
              glib:get-property="chunk-size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44514">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChunkSize"&gt;"ChunkSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44522">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44516">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_degraded"
              c:identifier="udisks_mdraid_get_degraded"
              glib:get-property="degraded"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44418">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Degraded"&gt;"Degraded"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44426">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44420">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_level"
              c:identifier="udisks_mdraid_get_level"
              glib:get-property="level"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44115">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Level"&gt;"Level"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_level() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5091"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44125">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44117">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="udisks_mdraid_get_name"
              glib:get-property="name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44056">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5087"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44066">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44058">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_devices"
              c:identifier="udisks_mdraid_get_num_devices"
              glib:get-property="num-devices"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44174">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.NumDevices"&gt;"NumDevices"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5095"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44182">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44176">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_running"
              c:identifier="udisks_mdraid_get_running"
              glib:get-property="running"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44669">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Running"&gt;"Running"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5132"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44677">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44671">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_mdraid_get_size"
              glib:get-property="size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44211">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5098"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44219">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44213">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sync_action"
              c:identifier="udisks_mdraid_get_sync_action"
              glib:get-property="sync-action"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44248">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncAction"&gt;"SyncAction"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_sync_action() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5101"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44258">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44250">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sync_completed"
              c:identifier="udisks_mdraid_get_sync_completed"
              glib:get-property="sync-completed"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44307">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncCompleted"&gt;"SyncCompleted"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44315">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44309">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sync_rate"
              c:identifier="udisks_mdraid_get_sync_rate"
              glib:get-property="sync-rate"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44344">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRate"&gt;"SyncRate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44352">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44346">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sync_remaining_time"
              c:identifier="udisks_mdraid_get_sync_remaining_time"
              glib:get-property="sync-remaining-time"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44381">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRemainingTime"&gt;"SyncRemainingTime"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="5111"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44389">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44383">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid"
              c:identifier="udisks_mdraid_get_uuid"
              glib:get-property="uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43997">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_mdraid_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="5083"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="44007">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43999">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_active_devices"
              c:identifier="udisks_mdraid_set_active_devices"
              glib:set-property="active-devices"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44593">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ActiveDevices"&gt;"ActiveDevices"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44595">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44596">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_bitmap_location"
              c:identifier="udisks_mdraid_set_bitmap_location"
              glib:set-property="bitmap-location"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44497">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.BitmapLocation"&gt;"BitmapLocation"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5119"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44499">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44500">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_child_configuration"
              c:identifier="udisks_mdraid_set_child_configuration"
              glib:set-property="child-configuration"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44652">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44654">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44655">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_chunk_size"
              c:identifier="udisks_mdraid_set_chunk_size"
              glib:set-property="chunk-size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44534">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChunkSize"&gt;"ChunkSize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5122"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44536">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44537">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_degraded"
              c:identifier="udisks_mdraid_set_degraded"
              glib:set-property="degraded"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44438">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Degraded"&gt;"Degraded"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5115"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44440">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44441">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_level"
              c:identifier="udisks_mdraid_set_level"
              glib:set-property="level"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44157">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Level"&gt;"Level"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5093"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44159">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44160">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="udisks_mdraid_set_name"
              glib:set-property="name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44098">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Name"&gt;"Name"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5089"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44100">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44101">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_num_devices"
              c:identifier="udisks_mdraid_set_num_devices"
              glib:set-property="num-devices"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44194">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.NumDevices"&gt;"NumDevices"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5096"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44196">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44197">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_running"
              c:identifier="udisks_mdraid_set_running"
              glib:set-property="running"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44689">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Running"&gt;"Running"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5133"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44691">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44692">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_mdraid_set_size"
              glib:set-property="size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44231">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5099"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44233">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44234">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sync_action"
              c:identifier="udisks_mdraid_set_sync_action"
              glib:set-property="sync-action"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44290">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncAction"&gt;"SyncAction"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44292">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44293">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sync_completed"
              c:identifier="udisks_mdraid_set_sync_completed"
              glib:set-property="sync-completed"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44327">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncCompleted"&gt;"SyncCompleted"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44329">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44330">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sync_rate"
              c:identifier="udisks_mdraid_set_sync_rate"
              glib:set-property="sync-rate"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44364">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRate"&gt;"SyncRate"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44366">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44367">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sync_remaining_time"
              c:identifier="udisks_mdraid_set_sync_remaining_time"
              glib:set-property="sync-remaining-time"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44401">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRemainingTime"&gt;"SyncRemainingTime"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44403">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44404">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uuid"
              c:identifier="udisks_mdraid_set_uuid"
              glib:set-property="uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="44039">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="5085"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44041">A #UDisksMDRaid.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44042">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="active-devices"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_active_devices"
                getter="get_active_devices">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43962">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ActiveDevices"&gt;"ActiveDevices"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="bitmap-location"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_bitmap_location"
                getter="get_bitmap_location"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43940">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.BitmapLocation"&gt;"BitmapLocation"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="child-configuration"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_child_configuration"
                getter="get_child_configuration">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43973">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChildConfiguration"&gt;"ChildConfiguration"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="chunk-size"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_chunk_size"
                getter="get_chunk_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43951">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.ChunkSize"&gt;"ChunkSize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="degraded"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_degraded"
                getter="get_degraded"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43929">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Degraded"&gt;"Degraded"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="level"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_level"
                getter="get_level"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43852">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Level"&gt;"Level"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43841">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Name"&gt;"Name"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="num-devices"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_num_devices"
                getter="get_num_devices"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43863">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.NumDevices"&gt;"NumDevices"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="running"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_running"
                getter="get_running"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43984">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Running"&gt;"Running"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="size"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_size"
                getter="get_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43874">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="sync-action"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_sync_action"
                getter="get_sync_action"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43885">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncAction"&gt;"SyncAction"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="sync-completed"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_sync_completed"
                getter="get_sync_completed"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43896">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncCompleted"&gt;"SyncCompleted"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="sync-rate"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_sync_rate"
                getter="get_sync_rate"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43907">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRate"&gt;"SyncRate"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="sync-remaining-time"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_sync_remaining_time"
                getter="get_sync_remaining_time"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43918">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.SyncRemainingTime"&gt;"SyncRemainingTime"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="uuid"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_uuid"
                getter="get_uuid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43830">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-MDRaid.UUID"&gt;"UUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-add-device" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43726">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_add_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43737">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43729">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43730">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43731">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-delete" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43804">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Delete"&gt;Delete()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_delete() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43814">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43807">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43808">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-remove-device" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43700">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_remove_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43711">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43703">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43704">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43705">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-request-sync-action"
                   when="last"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43778">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.RequestSyncAction"&gt;RequestSyncAction()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_request_sync_action() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43789">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43781">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_sync_action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43782">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43783">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-bitmap-location"
                   when="last"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43752">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.SetBitmapLocation"&gt;SetBitmapLocation()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_set_bitmap_location() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43763">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43755">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43756">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43757">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-start" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43650">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Start"&gt;Start()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_start() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43660">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43653">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43654">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-stop" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43675">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-MDRaid.Stop"&gt;Stop()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_mdraid_complete_stop() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43685">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43678">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="43679">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="MDRaidIface"
            c:type="UDisksMDRaidIface"
            glib:is-gtype-struct-for="MDRaid"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="43612">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="4902"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43614">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_add_device">
        <callback name="handle_add_device">
          <source-position filename="udisks-generated.h" line="4833"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_device" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_delete">
        <callback name="handle_delete">
          <source-position filename="udisks-generated.h" line="4839"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_remove_device">
        <callback name="handle_remove_device">
          <source-position filename="udisks-generated.h" line="4844"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_device" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_request_sync_action">
        <callback name="handle_request_sync_action">
          <source-position filename="udisks-generated.h" line="4850"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_sync_action" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_bitmap_location">
        <callback name="handle_set_bitmap_location">
          <source-position filename="udisks-generated.h" line="4856"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_value" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_start">
        <callback name="handle_start">
          <source-position filename="udisks-generated.h" line="4862"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_stop">
        <callback name="handle_stop">
          <source-position filename="udisks-generated.h" line="4867"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_active_devices">
        <callback name="get_active_devices">
          <source-position filename="udisks-generated.h" line="4872"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44561">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="44553">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_bitmap_location">
        <callback name="get_bitmap_location">
          <source-position filename="udisks-generated.h" line="4874"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44465">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="44457">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_child_configuration">
        <callback name="get_child_configuration">
          <source-position filename="udisks-generated.h" line="4876"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44620">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="44612">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_chunk_size">
        <callback name="get_chunk_size">
          <source-position filename="udisks-generated.h" line="4878"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44522">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="44516">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_degraded">
        <callback name="get_degraded">
          <source-position filename="udisks-generated.h" line="4880"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44426">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="44420">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_level">
        <callback name="get_level">
          <source-position filename="udisks-generated.h" line="4882"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44125">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="44117">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_name">
        <callback name="get_name">
          <source-position filename="udisks-generated.h" line="4884"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44066">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="44058">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_num_devices">
        <callback name="get_num_devices">
          <source-position filename="udisks-generated.h" line="4886"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44182">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="44176">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_running">
        <callback name="get_running">
          <source-position filename="udisks-generated.h" line="4888"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44677">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="44671">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <source-position filename="udisks-generated.h" line="4890"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44219">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="44213">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sync_action">
        <callback name="get_sync_action">
          <source-position filename="udisks-generated.h" line="4892"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44258">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="44250">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sync_completed">
        <callback name="get_sync_completed">
          <source-position filename="udisks-generated.h" line="4894"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44315">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="44309">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sync_rate">
        <callback name="get_sync_rate">
          <source-position filename="udisks-generated.h" line="4896"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44352">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="44346">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sync_remaining_time">
        <callback name="get_sync_remaining_time">
          <source-position filename="udisks-generated.h" line="4898"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44389">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="44383">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_uuid">
        <callback name="get_uuid">
          <source-position filename="udisks-generated.h" line="4900"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="44007">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="43999">A #UDisksMDRaid.</doc>
              <type name="MDRaid" c:type="UDisksMDRaid*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="MDRaidProxy"
           c:symbol-prefix="mdraid_proxy"
           c:type="UDisksMDRaidProxy"
           version="2.0.0"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksMDRaidProxy"
           glib:get-type="udisks_mdraid_proxy_get_type"
           glib:type-struct="MDRaidProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="45600">The #UDisksMDRaidProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="5159"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="MDRaid"/>
      <constructor name="new_finish"
                   c:identifier="udisks_mdraid_proxy_new_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46086">Finishes an operation started with udisks_mdraid_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="5175"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46093">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="MDRaidProxy" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46088">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_mdraid_proxy_new_for_bus_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46182">Finishes an operation started with udisks_mdraid_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="5194"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46189">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="MDRaidProxy" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46184">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_mdraid_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_mdraid_proxy_new_for_bus_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46209">Like udisks_mdraid_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_mdraid_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5197"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46224">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="MDRaidProxy" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46211">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46212">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46213">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46214">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46215">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_mdraid_proxy_new_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46113">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_mdraid_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5178"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46128">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="MDRaidProxy" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46115">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46116">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46117">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46118">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46119">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_mdraid_proxy_new"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46054">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_mdraid_proxy_new_finish() to get the result of the operation.

See udisks_mdraid_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5167"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46056">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46057">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46058">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46059">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46060">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46061">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46062">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_mdraid_proxy_new_for_bus"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46150">Like udisks_mdraid_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_mdraid_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_mdraid_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5186"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46152">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46153">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46154">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46155">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46156">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46157">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="46158">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MDRaidProxyPrivate" c:type="UDisksMDRaidProxyPrivate*"/>
      </field>
    </class>
    <record name="MDRaidProxyClass"
            c:type="UDisksMDRaidProxyClass"
            glib:is-gtype-struct-for="MDRaidProxy"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="45608">Class structure for #UDisksMDRaidProxy.</doc>
      <source-position filename="udisks-generated.h" line="5159"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="45610">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="MDRaidProxyPrivate"
            c:type="UDisksMDRaidProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="5147"/>
    </record>
    <class name="MDRaidSkeleton"
           c:symbol-prefix="mdraid_skeleton"
           c:type="UDisksMDRaidSkeleton"
           version="2.0.0"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksMDRaidSkeleton"
           glib:get-type="udisks_mdraid_skeleton_get_type"
           glib:type-struct="MDRaidSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="46248">The #UDisksMDRaidSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="5229"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="MDRaid"/>
      <constructor name="new"
                   c:identifier="udisks_mdraid_skeleton_new"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46887">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="5237"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="46892">The skeleton object.</doc>
          <type name="MDRaidSkeleton" c:type="UDisksMDRaid*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MDRaidSkeletonPrivate"
              c:type="UDisksMDRaidSkeletonPrivate*"/>
      </field>
    </class>
    <record name="MDRaidSkeletonClass"
            c:type="UDisksMDRaidSkeletonClass"
            glib:is-gtype-struct-for="MDRaidSkeleton"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="46256">Class structure for #UDisksMDRaidSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="5229"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="46258">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="MDRaidSkeletonPrivate"
            c:type="UDisksMDRaidSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="5217"/>
    </record>
    <constant name="MICRO_VERSION" value="1" c:type="UDISKS_MICRO_VERSION">
      <doc xml:space="preserve"
           filename="udisksversion.h"
           line="46">The micro version of the libudisks2 header files.</doc>
      <source-position filename="udisksversion.h" line="51"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MINOR_VERSION" value="10" c:type="UDISKS_MINOR_VERSION">
      <doc xml:space="preserve"
           filename="udisksversion.h"
           line="39">The minor version of the libudisks2 header files.</doc>
      <source-position filename="udisksversion.h" line="44"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <interface name="Manager"
               c:symbol-prefix="manager"
               c:type="UDisksManager"
               glib:type-name="UDisksManager"
               glib:get-type="udisks_manager_get_type"
               glib:type-struct="ManagerIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="2485">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="100"/>
      <function name="interface_info"
                c:identifier="udisks_manager_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2320">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2325">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_manager_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2333">Overrides all #GObject properties in the #UDisksManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2341">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2335">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2336">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_default_encryption_type"
                      invoker="get_default_encryption_type"
                      version="2.8.3"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2983">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.DefaultEncryptionType"&gt;"DefaultEncryptionType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_default_encryption_type() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="90"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2993">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2985">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_supported_encryption_types"
                      invoker="get_supported_encryption_types"
                      version="2.8.3"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2924">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedEncryptionTypes"&gt;"SupportedEncryptionTypes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_supported_encryption_types() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="92"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2934">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2926">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_supported_filesystems"
                      invoker="get_supported_filesystems"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2871">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedFilesystems"&gt;"SupportedFilesystems"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_supported_filesystems() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="46"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2881">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2873">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_version"
                      invoker="get_version"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2818">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_version() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="48"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2828">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2820">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_can_check">
        <source-position filename="udisks-generated.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_can_format">
        <source-position filename="udisks-generated.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_can_repair">
        <source-position filename="udisks-generated.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_can_resize">
        <source-position filename="udisks-generated.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_enable_module">
        <source-position filename="udisks-generated.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_enable_modules">
        <source-position filename="udisks-generated.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_block_devices">
        <source-position filename="udisks-generated.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_loop_setup">
        <source-position filename="udisks-generated.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list" transfer-ownership="none">
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="arg_fd" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_mdraid_create">
        <source-position filename="udisks-generated.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_level" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_chunk" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_resolve_device">
        <source-position filename="udisks-generated.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_devspec" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_can_check"
              c:identifier="udisks_manager_call_can_check"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3262">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanCheck"&gt;CanCheck()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_can_check_finish() to get the result of the operation.

See udisks_manager_call_can_check_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="205"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3264">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3265">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3266">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3267">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3268">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_check_finish"
              c:identifier="udisks_manager_call_can_check_finish"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3297">Finishes an operation started with udisks_manager_call_can_check().</doc>
        <source-position filename="udisks-generated.h" line="212"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3306">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3299">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="out_available"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3300">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3301">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_can_check().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_check_sync"
              c:identifier="udisks_manager_call_can_check_sync"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3329">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanCheck"&gt;CanCheck()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_can_check() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="218"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3341">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3331">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3332">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_available"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3333">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3334">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_format"
              c:identifier="udisks_manager_call_can_format"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3042">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanFormat"&gt;CanFormat()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_can_format_finish() to get the result of the operation.

See udisks_manager_call_can_format_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="165"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3044">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3045">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3046">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3047">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3048">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_format_finish"
              c:identifier="udisks_manager_call_can_format_finish"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3077">Finishes an operation started with udisks_manager_call_can_format().</doc>
        <source-position filename="udisks-generated.h" line="172"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3086">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3079">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="out_available"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3080">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3081">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_can_format().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_format_sync"
              c:identifier="udisks_manager_call_can_format_sync"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3109">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanFormat"&gt;CanFormat()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_can_format() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="178"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3121">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3111">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3112">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_available"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3113">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3114">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_repair"
              c:identifier="udisks_manager_call_can_repair"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3372">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanRepair"&gt;CanRepair()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_can_repair_finish() to get the result of the operation.

See udisks_manager_call_can_repair_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="225"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3374">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3375">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3376">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3377">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3378">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_repair_finish"
              c:identifier="udisks_manager_call_can_repair_finish"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3407">Finishes an operation started with udisks_manager_call_can_repair().</doc>
        <source-position filename="udisks-generated.h" line="232"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3416">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3409">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="out_available"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3410">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3411">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_can_repair().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_repair_sync"
              c:identifier="udisks_manager_call_can_repair_sync"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3439">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanRepair"&gt;CanRepair()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_can_repair() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="238"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3451">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3441">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3442">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_available"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3443">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3444">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_resize"
              c:identifier="udisks_manager_call_can_resize"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3152">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanResize"&gt;CanResize()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_can_resize_finish() to get the result of the operation.

See udisks_manager_call_can_resize_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="185"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3154">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3155">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3156">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3157">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3158">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_resize_finish"
              c:identifier="udisks_manager_call_can_resize_finish"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3187">Finishes an operation started with udisks_manager_call_can_resize().</doc>
        <source-position filename="udisks-generated.h" line="192"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3196">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3189">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="out_available"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3190">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3191">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_can_resize().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_can_resize_sync"
              c:identifier="udisks_manager_call_can_resize_sync"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3219">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanResize"&gt;CanResize()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_can_resize() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="198"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3231">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3221">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3222">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_available"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3223">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3224">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_module"
              c:identifier="udisks_manager_call_enable_module"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3841">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModule"&gt;EnableModule()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_enable_module_finish() to get the result of the operation.

See udisks_manager_call_enable_module_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="317"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3843">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3844">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3845">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3846">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3847">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3848">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_module_finish"
              c:identifier="udisks_manager_call_enable_module_finish"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3879">Finishes an operation started with udisks_manager_call_enable_module().</doc>
        <source-position filename="udisks-generated.h" line="325"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3887">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3881">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3882">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_enable_module().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_module_sync"
              c:identifier="udisks_manager_call_enable_module_sync"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3908">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModule"&gt;EnableModule()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_enable_module() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="330"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3920">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3910">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3911">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3912">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3913">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_modules"
              c:identifier="udisks_manager_call_enable_modules"
              deprecated="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3737">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModules"&gt;EnableModules()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_enable_modules_finish() to get the result of the operation.

See udisks_manager_call_enable_modules_sync() for the synchronous, blocking version of this method.</doc>
        <doc-deprecated xml:space="preserve">The D-Bus method has been deprecated.</doc-deprecated>
        <source-position filename="udisks-generated.h" line="299"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3739">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3740">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3741">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3742">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3743">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_modules_finish"
              c:identifier="udisks_manager_call_enable_modules_finish"
              deprecated="1"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3772">Finishes an operation started with udisks_manager_call_enable_modules().</doc>
        <doc-deprecated xml:space="preserve">The D-Bus method has been deprecated.</doc-deprecated>
        <source-position filename="udisks-generated.h" line="306"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3780">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3774">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3775">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_enable_modules().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_modules_sync"
              c:identifier="udisks_manager_call_enable_modules_sync"
              deprecated="1"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3801">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModules"&gt;EnableModules()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_enable_modules() for the asynchronous version of this method.</doc>
        <doc-deprecated xml:space="preserve">The D-Bus method has been deprecated.</doc-deprecated>
        <source-position filename="udisks-generated.h" line="311"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3812">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3803">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3804">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3805">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_block_devices"
              c:identifier="udisks_manager_call_get_block_devices"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3951">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.GetBlockDevices"&gt;GetBlockDevices()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_get_block_devices_finish() to get the result of the operation.

See udisks_manager_call_get_block_devices_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="337"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3953">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3954">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3955">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3956">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3957">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_block_devices_finish"
              c:identifier="udisks_manager_call_get_block_devices_finish"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3986">Finishes an operation started with udisks_manager_call_get_block_devices().</doc>
        <source-position filename="udisks-generated.h" line="344"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3995">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3988">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="out_block_objects"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3989">Return location for return parameter or %NULL to ignore.</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3990">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_get_block_devices().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_block_devices_sync"
              c:identifier="udisks_manager_call_get_block_devices_sync"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4018">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.GetBlockDevices"&gt;GetBlockDevices()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_get_block_devices() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="350"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4030">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4020">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4021">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_block_objects"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4022">Return location for return parameter or %NULL to ignore.</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4023">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_loop_setup"
              c:identifier="udisks_manager_call_loop_setup">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3482">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.LoopSetup"&gt;LoopSetup()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_loop_setup_finish() to get the result of the operation.

See udisks_manager_call_loop_setup_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="245"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3484">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3485">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3486">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3487">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3488">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3489">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3490">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_loop_setup_finish"
              c:identifier="udisks_manager_call_loop_setup_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3521">Finishes an operation started with udisks_manager_call_loop_setup().</doc>
        <source-position filename="udisks-generated.h" line="254"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3531">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3523">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="out_resulting_device"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3524">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3525">Return location for a #GUnixFDList or %NULL to ignore.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3526">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_loop_setup().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_loop_setup_sync"
              c:identifier="udisks_manager_call_loop_setup_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3553">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.LoopSetup"&gt;LoopSetup()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_loop_setup() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="261"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3568">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3555">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3556">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3557">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3558">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="out_resulting_device"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3559">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_fd_list"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3560">Return location for a #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3561">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_mdraid_create"
              c:identifier="udisks_manager_call_mdraid_create"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3603">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.MDRaidCreate"&gt;MDRaidCreate()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_mdraid_create_finish() to get the result of the operation.

See udisks_manager_call_mdraid_create_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="271"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3605">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3606">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3607">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3608">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_chunk" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3609">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3610">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3611">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3612">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3613">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_mdraid_create_finish"
              c:identifier="udisks_manager_call_mdraid_create_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3650">Finishes an operation started with udisks_manager_call_mdraid_create().</doc>
        <source-position filename="udisks-generated.h" line="282"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3659">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3652">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="out_resulting_array"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3653">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3654">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_mdraid_create().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_mdraid_create_sync"
              c:identifier="udisks_manager_call_mdraid_create_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3682">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.MDRaidCreate"&gt;MDRaidCreate()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_mdraid_create() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="288"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3698">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3684">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3685">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3686">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3687">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_chunk" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3688">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3689">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_resulting_array"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3690">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3691">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resolve_device"
              c:identifier="udisks_manager_call_resolve_device"
              version="2.7.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4061">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.ResolveDevice"&gt;ResolveDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_call_resolve_device_finish() to get the result of the operation.

See udisks_manager_call_resolve_device_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="357"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4063">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_devspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4064">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4065">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4066">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4067">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4068">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resolve_device_finish"
              c:identifier="udisks_manager_call_resolve_device_finish"
              version="2.7.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4099">Finishes an operation started with udisks_manager_call_resolve_device().</doc>
        <source-position filename="udisks-generated.h" line="365"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4108">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4101">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="out_devices"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4102">Return location for return parameter or %NULL to ignore.</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4103">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_call_resolve_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resolve_device_sync"
              c:identifier="udisks_manager_call_resolve_device_sync"
              version="2.7.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4131">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.ResolveDevice"&gt;ResolveDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_call_resolve_device() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="371"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4144">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4133">A #UDisksManagerProxy.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="arg_devspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4134">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4135">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_devices"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4136">Return location for return parameter or %NULL to ignore.</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4137">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_can_check"
              c:identifier="udisks_manager_complete_can_check"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4223">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanCheck"&gt;CanCheck()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="123"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4225">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4226">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="available" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4227">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_can_format"
              c:identifier="udisks_manager_complete_can_format"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4177">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanFormat"&gt;CanFormat()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4179">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4180">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="available" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4181">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_can_repair"
              c:identifier="udisks_manager_complete_can_repair"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4246">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanRepair"&gt;CanRepair()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4248">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4249">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="available" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4250">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_can_resize"
              c:identifier="udisks_manager_complete_can_resize"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4200">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanResize"&gt;CanResize()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="118"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4202">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4203">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="available" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4204">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_enable_module"
              c:identifier="udisks_manager_complete_enable_module"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4336">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModule"&gt;EnableModule()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="148"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4338">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4339">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_enable_modules"
              c:identifier="udisks_manager_complete_enable_modules"
              deprecated="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4316">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModules"&gt;EnableModules()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <doc-deprecated xml:space="preserve">The D-Bus method has been deprecated.</doc-deprecated>
        <source-position filename="udisks-generated.h" line="144"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4318">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4319">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_block_devices"
              c:identifier="udisks_manager_complete_get_block_devices"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4356">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.GetBlockDevices"&gt;GetBlockDevices()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="152"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4358">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4359">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="block_objects" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4360">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_loop_setup"
              c:identifier="udisks_manager_complete_loop_setup">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4269">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.LoopSetup"&gt;LoopSetup()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="133"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4271">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4272">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4273">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
          </parameter>
          <parameter name="resulting_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4274">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_mdraid_create"
              c:identifier="udisks_manager_complete_mdraid_create"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4293">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.MDRaidCreate"&gt;MDRaidCreate()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="139"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4295">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4296">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="resulting_array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4297">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_resolve_device"
              c:identifier="udisks_manager_complete_resolve_device"
              version="2.7.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4379">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.ResolveDevice"&gt;ResolveDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="157"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4381">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4382">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="devices" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4383">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_default_encryption_type"
              c:identifier="udisks_manager_dup_default_encryption_type"
              version="2.8.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3005">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.DefaultEncryptionType"&gt;"DefaultEncryptionType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="395"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="3013">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3007">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_supported_encryption_types"
              c:identifier="udisks_manager_dup_supported_encryption_types"
              version="2.8.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2946">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedEncryptionTypes"&gt;"SupportedEncryptionTypes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="391"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2954">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2948">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_supported_filesystems"
              c:identifier="udisks_manager_dup_supported_filesystems"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2891">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedFilesystems"&gt;"SupportedFilesystems"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="387"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2899">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2893">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_version"
              c:identifier="udisks_manager_dup_version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2838">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="383"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2846">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2840">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_default_encryption_type"
              c:identifier="udisks_manager_get_default_encryption_type"
              glib:get-property="default-encryption-type"
              version="2.8.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2983">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.DefaultEncryptionType"&gt;"DefaultEncryptionType"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_default_encryption_type() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="394"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2993">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2985">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_supported_encryption_types"
              c:identifier="udisks_manager_get_supported_encryption_types"
              glib:get-property="supported-encryption-types"
              version="2.8.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2924">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedEncryptionTypes"&gt;"SupportedEncryptionTypes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_supported_encryption_types() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="390"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2934">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2926">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_supported_filesystems"
              c:identifier="udisks_manager_get_supported_filesystems"
              glib:get-property="supported-filesystems"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2871">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedFilesystems"&gt;"SupportedFilesystems"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_supported_filesystems() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="386"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2881">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2873">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version"
              c:identifier="udisks_manager_get_version"
              glib:get-property="version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2818">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_dup_version() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="382"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2828">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2820">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_default_encryption_type"
              c:identifier="udisks_manager_set_default_encryption_type"
              glib:set-property="default-encryption-type"
              version="2.8.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="3025">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.DefaultEncryptionType"&gt;"DefaultEncryptionType"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="396"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3027">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="3028">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_supported_encryption_types"
              c:identifier="udisks_manager_set_supported_encryption_types"
              glib:set-property="supported-encryption-types"
              version="2.8.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2966">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedEncryptionTypes"&gt;"SupportedEncryptionTypes"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="392"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2968">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2969">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_supported_filesystems"
              c:identifier="udisks_manager_set_supported_filesystems"
              glib:set-property="supported-filesystems"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2909">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedFilesystems"&gt;"SupportedFilesystems"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="388"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2911">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2912">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_version"
              c:identifier="udisks_manager_set_version"
              glib:set-property="version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2856">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="384"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2858">A #UDisksManager.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2859">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="default-encryption-type"
                version="2.8.3"
                writable="1"
                transfer-ownership="none"
                setter="set_default_encryption_type"
                getter="get_default_encryption_type"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2805">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.DefaultEncryptionType"&gt;"DefaultEncryptionType"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="supported-encryption-types"
                version="2.8.3"
                writable="1"
                transfer-ownership="none"
                setter="set_supported_encryption_types"
                getter="get_supported_encryption_types">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2794">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedEncryptionTypes"&gt;"SupportedEncryptionTypes"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="supported-filesystems"
                writable="1"
                transfer-ownership="none"
                setter="set_supported_filesystems"
                getter="get_supported_filesystems">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2785">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.SupportedFilesystems"&gt;"SupportedFilesystems"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="version"
                writable="1"
                transfer-ownership="none"
                setter="set_version"
                getter="get_version"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2776">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager.Version"&gt;"Version"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-can-check" when="last" version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2569">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanCheck"&gt;CanCheck()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_can_check() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2579">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2572">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2573">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-can-format" when="last" version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2519">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanFormat"&gt;CanFormat()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_can_format() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2529">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2522">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2523">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-can-repair" when="last" version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2594">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanRepair"&gt;CanRepair()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_can_repair() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2604">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2597">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2598">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-can-resize" when="last" version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2544">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.CanResize"&gt;CanResize()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_can_resize() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2554">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2547">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2548">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-enable-module" when="last" version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2698">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModule"&gt;EnableModule()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_enable_module() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2709">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2701">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2702">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2703">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-enable-modules" when="last" deprecated="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2673">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.EnableModules"&gt;EnableModules()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_enable_modules() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <doc-deprecated xml:space="preserve">The D-Bus method has been deprecated.</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2683">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2676">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2677">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-block-devices" when="last" version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2724">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.GetBlockDevices"&gt;GetBlockDevices()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_get_block_devices() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2734">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2727">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2728">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-loop-setup" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2619">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.LoopSetup"&gt;LoopSetup()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_loop_setup() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2631">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2622">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="fd_list"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2623">A #GUnixFDList or %NULL.</doc>
            <type name="Gio.UnixFDList"/>
          </parameter>
          <parameter name="arg_fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2624">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2625">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-mdraid-create" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2644">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.MDRaidCreate"&gt;MDRaidCreate()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_mdraid_create() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2658">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2647">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2648">Argument passed by remote caller.</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="arg_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2649">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2650">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_chunk" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2651">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2652">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-resolve-device" when="last" version="2.7.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2749">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager.ResolveDevice"&gt;ResolveDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_complete_resolve_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2760">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2752">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_devspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2753">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2754">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <interface name="ManagerBTRFS"
               c:symbol-prefix="manager_btrfs"
               c:type="UDisksManagerBTRFS"
               version="2.1.3"
               glib:type-name="UDisksManagerBTRFS"
               glib:get-type="udisks_manager_btrfs_get_type"
               glib:type-struct="ManagerBTRFSIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="49260">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="5499"/>
      <function name="interface_info"
                c:identifier="udisks_manager_btrfs_interface_info"
                version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49212">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="5507"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49217">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_manager_btrfs_override_properties"
                version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49227">Overrides all #GObject properties in the #UDisksManagerBTRFS interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="5508"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49235">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49229">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49230">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_create_volume">
        <source-position filename="udisks-generated.h" line="5490"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerBTRFS" c:type="UDisksManagerBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_devices" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_data_level" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_md_level" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_create_volume"
              c:identifier="udisks_manager_btrfs_call_create_volume"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49316">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-BTRFS.CreateVolume"&gt;CreateVolume()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_btrfs_call_create_volume_finish() to get the result of the operation.

See udisks_manager_btrfs_call_create_volume_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5519"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49318">A #UDisksManagerBTRFSProxy.</doc>
            <type name="ManagerBTRFS" c:type="UDisksManagerBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_devices" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49319">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49320">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_data_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49321">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_md_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49322">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49323">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49324">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49325">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49326">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_volume_finish"
              c:identifier="udisks_manager_btrfs_call_create_volume_finish"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49363">Finishes an operation started with udisks_manager_btrfs_call_create_volume().</doc>
        <source-position filename="udisks-generated.h" line="5530"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49371">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49365">A #UDisksManagerBTRFSProxy.</doc>
            <type name="ManagerBTRFS" c:type="UDisksManagerBTRFS*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49366">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_btrfs_call_create_volume().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_volume_sync"
              c:identifier="udisks_manager_btrfs_call_create_volume_sync"
              version="2.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49392">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-BTRFS.CreateVolume"&gt;CreateVolume()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_btrfs_call_create_volume() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="5535"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49407">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49394">A #UDisksManagerBTRFSProxy.</doc>
            <type name="ManagerBTRFS" c:type="UDisksManagerBTRFS*"/>
          </instance-parameter>
          <parameter name="arg_devices" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49395">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49396">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_data_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49397">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_md_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49398">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49399">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49400">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_volume"
              c:identifier="udisks_manager_btrfs_complete_create_volume"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49444">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-BTRFS.CreateVolume"&gt;CreateVolume()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="5512"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49446">A #UDisksManagerBTRFS.</doc>
            <type name="ManagerBTRFS" c:type="UDisksManagerBTRFS*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49447">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-create-volume" when="last" version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49285">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-BTRFS.CreateVolume"&gt;CreateVolume()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_btrfs_complete_create_volume() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49299">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49288">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_devices" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49289">Argument passed by remote caller.</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49290">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_data_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49291">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_md_level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49292">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49293">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="ManagerBTRFSIface"
            c:type="UDisksManagerBTRFSIface"
            glib:is-gtype-struct-for="ManagerBTRFS"
            version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="49268">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="5499"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49270">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_create_volume">
        <callback name="handle_create_volume">
          <source-position filename="udisks-generated.h" line="5490"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerBTRFS" c:type="UDisksManagerBTRFS*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_devices" transfer-ownership="none">
              <type name="utf8" c:type="const gchar* const*"/>
            </parameter>
            <parameter name="arg_label" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_data_level" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_md_level" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ManagerBTRFSProxy"
           c:symbol-prefix="manager_btrfs_proxy"
           c:type="UDisksManagerBTRFSProxy"
           version="2.1.3"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksManagerBTRFSProxy"
           glib:get-type="udisks_manager_btrfs_proxy_get_type"
           glib:type-struct="ManagerBTRFSProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="49466">The #UDisksManagerBTRFSProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="5570"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="ManagerBTRFS"/>
      <constructor name="new_finish"
                   c:identifier="udisks_manager_btrfs_proxy_new_finish"
                   version="2.1.3"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49663">Finishes an operation started with udisks_manager_btrfs_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="5586"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49670">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerBTRFSProxy" c:type="UDisksManagerBTRFS*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49665">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_btrfs_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_manager_btrfs_proxy_new_for_bus_finish"
                   version="2.1.3"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49759">Finishes an operation started with udisks_manager_btrfs_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="5605"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49766">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerBTRFSProxy" c:type="UDisksManagerBTRFS*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49761">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_btrfs_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_manager_btrfs_proxy_new_for_bus_sync"
                   version="2.1.3"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49786">Like udisks_manager_btrfs_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_manager_btrfs_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5608"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49801">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerBTRFSProxy" c:type="UDisksManagerBTRFS*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49788">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49789">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49790">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49791">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49792">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_manager_btrfs_proxy_new_sync"
                   version="2.1.3"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49690">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_manager_btrfs_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5589"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49705">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerBTRFSProxy" c:type="UDisksManagerBTRFS*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49692">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49693">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49694">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49695">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49696">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_manager_btrfs_proxy_new"
                version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49631">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_btrfs_proxy_new_finish() to get the result of the operation.

See udisks_manager_btrfs_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5578"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49633">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49634">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49635">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49636">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49637">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49638">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49639">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_manager_btrfs_proxy_new_for_bus"
                version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49727">Like udisks_manager_btrfs_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_btrfs_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_manager_btrfs_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="5597"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49729">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49730">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49731">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49732">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49733">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49734">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="49735">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerBTRFSProxyPrivate"
              c:type="UDisksManagerBTRFSProxyPrivate*"/>
      </field>
    </class>
    <record name="ManagerBTRFSProxyClass"
            c:type="UDisksManagerBTRFSProxyClass"
            glib:is-gtype-struct-for="ManagerBTRFSProxy"
            version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="49474">Class structure for #UDisksManagerBTRFSProxy.</doc>
      <source-position filename="udisks-generated.h" line="5570"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49476">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="ManagerBTRFSProxyPrivate"
            c:type="UDisksManagerBTRFSProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="5558"/>
    </record>
    <class name="ManagerBTRFSSkeleton"
           c:symbol-prefix="manager_btrfs_skeleton"
           c:type="UDisksManagerBTRFSSkeleton"
           version="2.1.3"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksManagerBTRFSSkeleton"
           glib:get-type="udisks_manager_btrfs_skeleton_get_type"
           glib:type-struct="ManagerBTRFSSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="49825">The #UDisksManagerBTRFSSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="5640"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="ManagerBTRFS"/>
      <constructor name="new"
                   c:identifier="udisks_manager_btrfs_skeleton_new"
                   version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50100">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="5648"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50105">The skeleton object.</doc>
          <type name="ManagerBTRFSSkeleton" c:type="UDisksManagerBTRFS*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerBTRFSSkeletonPrivate"
              c:type="UDisksManagerBTRFSSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ManagerBTRFSSkeletonClass"
            c:type="UDisksManagerBTRFSSkeletonClass"
            glib:is-gtype-struct-for="ManagerBTRFSSkeleton"
            version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="49833">Class structure for #UDisksManagerBTRFSSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="5640"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49835">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="ManagerBTRFSSkeletonPrivate"
            c:type="UDisksManagerBTRFSSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="5628"/>
    </record>
    <interface name="ManagerISCSIInitiator"
               c:symbol-prefix="manager_iscsi_initiator"
               c:type="UDisksManagerISCSIInitiator"
               version="2.0.1"
               glib:type-name="UDisksManagerISCSIInitiator"
               glib:get-type="udisks_manager_iscsi_initiator_get_type"
               glib:type-struct="ManagerISCSIInitiatorIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="54148">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.top_of_page"&gt;org.freedesktop.UDisks2.Manager.ISCSI.Initiator&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="6162"/>
      <function name="interface_info"
                c:identifier="udisks_manager_iscsi_initiator_interface_info"
                version="2.0.1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54008">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.top_of_page"&gt;org.freedesktop.UDisks2.Manager.ISCSI.Initiator&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="6170"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54013">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_manager_iscsi_initiator_override_properties"
                version="2.0.1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54023">Overrides all #GObject properties in the #UDisksManagerISCSIInitiator interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="6171"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54031">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54025">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54026">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_sessions_supported"
                      invoker="get_sessions_supported"
                      version="2.0.1"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54405">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.SessionsSupported"&gt;"SessionsSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54413">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54407">A #UDisksManagerISCSIInitiator.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_discover_firmware">
        <source-position filename="udisks-generated.h" line="6116"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_discover_send_targets">
        <source-position filename="udisks-generated.h" line="6147"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_address" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_port" transfer-ownership="none">
            <type name="guint16" c:type="guint16"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_firmware_initiator_name">
        <source-position filename="udisks-generated.h" line="6154"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_initiator_name">
        <source-position filename="udisks-generated.h" line="6110"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_initiator_name_raw">
        <source-position filename="udisks-generated.h" line="6158"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_login">
        <source-position filename="udisks-generated.h" line="6121"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_tpgt" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_address" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_port" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_iface" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_logout">
        <source-position filename="udisks-generated.h" line="6131"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_tpgt" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_address" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_port" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_iface" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_initiator_name">
        <source-position filename="udisks-generated.h" line="6141"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_discover_firmware"
              c:identifier="udisks_manager_iscsi_initiator_call_discover_firmware"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54992">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.DiscoverFirmware"&gt;DiscoverFirmware()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_iscsi_initiator_call_discover_firmware_finish() to get the result of the operation.

See udisks_manager_iscsi_initiator_call_discover_firmware_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6317"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54994">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54995">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54996">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54997">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54998">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_discover_firmware_finish"
              c:identifier="udisks_manager_iscsi_initiator_call_discover_firmware_finish"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55027">Finishes an operation started with udisks_manager_iscsi_initiator_call_discover_firmware().</doc>
        <source-position filename="udisks-generated.h" line="6324"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55037">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55029">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="out_nodes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55030">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_nodes_cnt"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55031">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55032">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_iscsi_initiator_call_discover_firmware().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_discover_firmware_sync"
              c:identifier="udisks_manager_iscsi_initiator_call_discover_firmware_sync"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55062">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.DiscoverFirmware"&gt;DiscoverFirmware()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_iscsi_initiator_call_discover_firmware() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6331"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55075">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55064">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55065">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_nodes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55066">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_nodes_cnt"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55067">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55068">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_discover_send_targets"
              c:identifier="udisks_manager_iscsi_initiator_call_discover_send_targets"
              version="2.3.1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54864">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.DiscoverSendTargets"&gt;DiscoverSendTargets()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_iscsi_initiator_call_discover_send_targets_finish() to get the result of the operation.

See udisks_manager_iscsi_initiator_call_discover_send_targets_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6291"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54866">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="arg_address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54867">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54868">Argument to pass with the method invocation.</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54869">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54870">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54871">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54872">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_discover_send_targets_finish"
              c:identifier="udisks_manager_iscsi_initiator_call_discover_send_targets_finish"
              version="2.3.1"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54905">Finishes an operation started with udisks_manager_iscsi_initiator_call_discover_send_targets().</doc>
        <source-position filename="udisks-generated.h" line="6300"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54915">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54907">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="out_nodes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54908">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_nodes_cnt"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54909">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54910">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_iscsi_initiator_call_discover_send_targets().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_discover_send_targets_sync"
              c:identifier="udisks_manager_iscsi_initiator_call_discover_send_targets_sync"
              version="2.3.1"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54940">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.DiscoverSendTargets"&gt;DiscoverSendTargets()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_iscsi_initiator_call_discover_send_targets() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6307"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54955">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54942">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="arg_address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54943">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54944">Argument to pass with the method invocation.</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54945">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_nodes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54946">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="out_nodes_cnt"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54947">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54948">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_firmware_initiator_name"
              c:identifier="udisks_manager_iscsi_initiator_call_get_firmware_initiator_name"
              version="2.4.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54442">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.GetFirmwareInitiatorName"&gt;GetFirmwareInitiatorName()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_iscsi_initiator_call_get_firmware_initiator_name_finish() to get the result of the operation.

See udisks_manager_iscsi_initiator_call_get_firmware_initiator_name_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6217"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54444">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54445">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54446">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54447">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_firmware_initiator_name_finish"
              c:identifier="udisks_manager_iscsi_initiator_call_get_firmware_initiator_name_finish"
              version="2.4.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54474">Finishes an operation started with udisks_manager_iscsi_initiator_call_get_firmware_initiator_name().</doc>
        <source-position filename="udisks-generated.h" line="6223"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54483">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54476">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54477">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54478">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_iscsi_initiator_call_get_firmware_initiator_name().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_firmware_initiator_name_sync"
              c:identifier="udisks_manager_iscsi_initiator_call_get_firmware_initiator_name_sync"
              version="2.4.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54506">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.GetFirmwareInitiatorName"&gt;GetFirmwareInitiatorName()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_iscsi_initiator_call_get_firmware_initiator_name() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6229"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54517">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54508">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54509">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54510">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_initiator_name"
              c:identifier="udisks_manager_iscsi_initiator_call_get_initiator_name"
              version="2.0.1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54546">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.GetInitiatorName"&gt;GetInitiatorName()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_iscsi_initiator_call_get_initiator_name_finish() to get the result of the operation.

See udisks_manager_iscsi_initiator_call_get_initiator_name_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6235"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54548">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54549">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54550">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54551">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_initiator_name_finish"
              c:identifier="udisks_manager_iscsi_initiator_call_get_initiator_name_finish"
              version="2.0.1"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54578">Finishes an operation started with udisks_manager_iscsi_initiator_call_get_initiator_name().</doc>
        <source-position filename="udisks-generated.h" line="6241"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54587">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54580">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54581">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54582">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_iscsi_initiator_call_get_initiator_name().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_initiator_name_raw"
              c:identifier="udisks_manager_iscsi_initiator_call_get_initiator_name_raw"
              version="2.8.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54650">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.GetInitiatorNameRaw"&gt;GetInitiatorNameRaw()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_iscsi_initiator_call_get_initiator_name_raw_finish() to get the result of the operation.

See udisks_manager_iscsi_initiator_call_get_initiator_name_raw_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6253"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54652">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54653">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54654">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54655">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_initiator_name_raw_finish"
              c:identifier="udisks_manager_iscsi_initiator_call_get_initiator_name_raw_finish"
              version="2.8.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54682">Finishes an operation started with udisks_manager_iscsi_initiator_call_get_initiator_name_raw().</doc>
        <source-position filename="udisks-generated.h" line="6259"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54691">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54684">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54685">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54686">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_iscsi_initiator_call_get_initiator_name_raw().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_initiator_name_raw_sync"
              c:identifier="udisks_manager_iscsi_initiator_call_get_initiator_name_raw_sync"
              version="2.8.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54714">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.GetInitiatorNameRaw"&gt;GetInitiatorNameRaw()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_iscsi_initiator_call_get_initiator_name_raw() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6265"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54725">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54716">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54717">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54718">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_initiator_name_sync"
              c:identifier="udisks_manager_iscsi_initiator_call_get_initiator_name_sync"
              version="2.0.1"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54610">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.GetInitiatorName"&gt;GetInitiatorName()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_iscsi_initiator_call_get_initiator_name() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6247"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54621">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54612">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54613">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54614">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_login"
              c:identifier="udisks_manager_iscsi_initiator_call_login"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55108">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.Login"&gt;Login()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_iscsi_initiator_call_login_finish() to get the result of the operation.

See udisks_manager_iscsi_initiator_call_login_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6339"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55110">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55111">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_tpgt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55112">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55113">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55114">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55115">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55116">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55117">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55118">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55119">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_login_finish"
              c:identifier="udisks_manager_iscsi_initiator_call_login_finish"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55158">Finishes an operation started with udisks_manager_iscsi_initiator_call_login().</doc>
        <source-position filename="udisks-generated.h" line="6351"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55166">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55160">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55161">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_iscsi_initiator_call_login().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_login_sync"
              c:identifier="udisks_manager_iscsi_initiator_call_login_sync"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55187">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.Login"&gt;Login()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_iscsi_initiator_call_login() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6356"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55203">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55189">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55190">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_tpgt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55191">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55192">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55193">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55194">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55195">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55196">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_logout"
              c:identifier="udisks_manager_iscsi_initiator_call_logout"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55242">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.Logout"&gt;Logout()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_iscsi_initiator_call_logout_finish() to get the result of the operation.

See udisks_manager_iscsi_initiator_call_logout_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6367"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55244">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55245">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_tpgt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55246">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55247">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55248">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55249">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55250">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55251">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55252">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55253">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_logout_finish"
              c:identifier="udisks_manager_iscsi_initiator_call_logout_finish"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55292">Finishes an operation started with udisks_manager_iscsi_initiator_call_logout().</doc>
        <source-position filename="udisks-generated.h" line="6379"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55300">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55294">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55295">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_iscsi_initiator_call_logout().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_logout_sync"
              c:identifier="udisks_manager_iscsi_initiator_call_logout_sync"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55321">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.Logout"&gt;Logout()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_iscsi_initiator_call_logout() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6384"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55337">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55323">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55324">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_tpgt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55325">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55326">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55327">Argument to pass with the method invocation.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55328">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55329">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55330">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_initiator_name"
              c:identifier="udisks_manager_iscsi_initiator_call_set_initiator_name"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54754">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.SetInitiatorName"&gt;SetInitiatorName()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_iscsi_initiator_call_set_initiator_name_finish() to get the result of the operation.

See udisks_manager_iscsi_initiator_call_set_initiator_name_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6271"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54756">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54757">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54758">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54759">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54760">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54761">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_initiator_name_finish"
              c:identifier="udisks_manager_iscsi_initiator_call_set_initiator_name_finish"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54792">Finishes an operation started with udisks_manager_iscsi_initiator_call_set_initiator_name().</doc>
        <source-position filename="udisks-generated.h" line="6279"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54800">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54794">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54795">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_iscsi_initiator_call_set_initiator_name().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_initiator_name_sync"
              c:identifier="udisks_manager_iscsi_initiator_call_set_initiator_name_sync"
              version="2.1.3"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54821">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.SetInitiatorName"&gt;SetInitiatorName()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_iscsi_initiator_call_set_initiator_name() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="6284"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54833">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54823">A #UDisksManagerISCSIInitiatorProxy.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54824">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54825">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54826">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_discover_firmware"
              c:identifier="udisks_manager_iscsi_initiator_complete_discover_firmware"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55491">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.DiscoverFirmware"&gt;DiscoverFirmware()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6200"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55493">A #UDisksManagerISCSIInitiator.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55494">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="nodes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55495">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="nodes_cnt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55496">Parameter to return.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_discover_send_targets"
              c:identifier="udisks_manager_iscsi_initiator_complete_discover_send_targets"
              version="2.3.1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55465">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.DiscoverSendTargets"&gt;DiscoverSendTargets()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6194"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55467">A #UDisksManagerISCSIInitiator.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55468">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="nodes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55469">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="nodes_cnt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55470">Parameter to return.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_firmware_initiator_name"
              c:identifier="udisks_manager_iscsi_initiator_complete_get_firmware_initiator_name"
              version="2.4.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55376">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.GetFirmwareInitiatorName"&gt;GetFirmwareInitiatorName()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6175"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55378">A #UDisksManagerISCSIInitiator.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55379">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55380">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_initiator_name"
              c:identifier="udisks_manager_iscsi_initiator_complete_get_initiator_name"
              version="2.0.1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55399">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.GetInitiatorName"&gt;GetInitiatorName()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6180"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55401">A #UDisksManagerISCSIInitiator.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55402">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55403">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_initiator_name_raw"
              c:identifier="udisks_manager_iscsi_initiator_complete_get_initiator_name_raw"
              version="2.8.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55422">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.GetInitiatorNameRaw"&gt;GetInitiatorNameRaw()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6185"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55424">A #UDisksManagerISCSIInitiator.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55425">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55426">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_login"
              c:identifier="udisks_manager_iscsi_initiator_complete_login"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55517">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.Login"&gt;Login()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6206"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55519">A #UDisksManagerISCSIInitiator.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55520">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_logout"
              c:identifier="udisks_manager_iscsi_initiator_complete_logout"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55537">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.Logout"&gt;Logout()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6210"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55539">A #UDisksManagerISCSIInitiator.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55540">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_initiator_name"
              c:identifier="udisks_manager_iscsi_initiator_complete_set_initiator_name"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55445">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.SetInitiatorName"&gt;SetInitiatorName()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="6190"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55447">A #UDisksManagerISCSIInitiator.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55448">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sessions_supported"
              c:identifier="udisks_manager_iscsi_initiator_get_sessions_supported"
              glib:get-property="sessions-supported"
              version="2.0.1"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54405">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.SessionsSupported"&gt;"SessionsSupported"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="6398"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54413">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54407">A #UDisksManagerISCSIInitiator.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_sessions_supported"
              c:identifier="udisks_manager_iscsi_initiator_set_sessions_supported"
              glib:set-property="sessions-supported"
              version="2.0.1"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54425">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.SessionsSupported"&gt;"SessionsSupported"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="6399"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54427">A #UDisksManagerISCSIInitiator.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54428">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="sessions-supported"
                version="2.0.1"
                writable="1"
                transfer-ownership="none"
                setter="set_sessions_supported"
                getter="get_sessions_supported"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54392">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.SessionsSupported"&gt;"SessionsSupported"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="handle-discover-firmware" when="last" version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54306">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.DiscoverFirmware"&gt;DiscoverFirmware()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_iscsi_initiator_complete_discover_firmware() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54316">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54309">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54310">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-discover-send-targets"
                   when="last"
                   version="2.3.1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54279">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.DiscoverSendTargets"&gt;DiscoverSendTargets()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_iscsi_initiator_complete_discover_send_targets() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54291">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54282">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54283">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54284">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54285">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-firmware-initiator-name"
                   when="last"
                   version="2.4.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54181">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.GetFirmwareInitiatorName"&gt;GetFirmwareInitiatorName()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_iscsi_initiator_complete_get_firmware_initiator_name() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54190">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54184">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-initiator-name"
                   when="last"
                   version="2.0.1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54205">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.GetInitiatorName"&gt;GetInitiatorName()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_iscsi_initiator_complete_get_initiator_name() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54214">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54208">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-initiator-name-raw"
                   when="last"
                   version="2.8.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54229">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.GetInitiatorNameRaw"&gt;GetInitiatorNameRaw()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_iscsi_initiator_complete_get_initiator_name_raw() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54238">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54232">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-login" when="last" version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54331">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.Login"&gt;Login()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_iscsi_initiator_complete_login() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54346">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54334">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54335">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_tpgt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54336">Argument passed by remote caller.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54337">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54338">Argument passed by remote caller.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54339">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54340">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-logout" when="last" version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54361">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.Logout"&gt;Logout()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_iscsi_initiator_complete_logout() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54376">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54364">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54365">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_tpgt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54366">Argument passed by remote caller.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54367">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54368">Argument passed by remote caller.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="arg_iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54369">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54370">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-initiator-name"
                   when="last"
                   version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54253">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.SetInitiatorName"&gt;SetInitiatorName()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_iscsi_initiator_complete_set_initiator_name() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54264">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54256">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54257">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54258">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="ManagerISCSIInitiatorIface"
            c:type="UDisksManagerISCSIInitiatorIface"
            glib:is-gtype-struct-for="ManagerISCSIInitiator"
            version="2.0.1">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="54156">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.top_of_page"&gt;org.freedesktop.UDisks2.Manager.ISCSI.Initiator&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="6162"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54158">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_get_initiator_name">
        <callback name="handle_get_initiator_name">
          <source-position filename="udisks-generated.h" line="6110"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerISCSIInitiator"
                    c:type="UDisksManagerISCSIInitiator*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sessions_supported">
        <callback name="get_sessions_supported">
          <source-position filename="udisks-generated.h" line="6114"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="54413">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="54407">A #UDisksManagerISCSIInitiator.</doc>
              <type name="ManagerISCSIInitiator"
                    c:type="UDisksManagerISCSIInitiator*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_discover_firmware">
        <callback name="handle_discover_firmware">
          <source-position filename="udisks-generated.h" line="6116"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerISCSIInitiator"
                    c:type="UDisksManagerISCSIInitiator*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_login">
        <callback name="handle_login">
          <source-position filename="udisks-generated.h" line="6121"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerISCSIInitiator"
                    c:type="UDisksManagerISCSIInitiator*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_tpgt" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="arg_address" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_port" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="arg_iface" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_logout">
        <callback name="handle_logout">
          <source-position filename="udisks-generated.h" line="6131"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerISCSIInitiator"
                    c:type="UDisksManagerISCSIInitiator*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_tpgt" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="arg_address" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_port" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="arg_iface" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_initiator_name">
        <callback name="handle_set_initiator_name">
          <source-position filename="udisks-generated.h" line="6141"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerISCSIInitiator"
                    c:type="UDisksManagerISCSIInitiator*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_discover_send_targets">
        <callback name="handle_discover_send_targets">
          <source-position filename="udisks-generated.h" line="6147"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerISCSIInitiator"
                    c:type="UDisksManagerISCSIInitiator*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_address" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_port" transfer-ownership="none">
              <type name="guint16" c:type="guint16"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_firmware_initiator_name">
        <callback name="handle_get_firmware_initiator_name">
          <source-position filename="udisks-generated.h" line="6154"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerISCSIInitiator"
                    c:type="UDisksManagerISCSIInitiator*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_initiator_name_raw">
        <callback name="handle_get_initiator_name_raw">
          <source-position filename="udisks-generated.h" line="6158"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerISCSIInitiator"
                    c:type="UDisksManagerISCSIInitiator*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ManagerISCSIInitiatorProxy"
           c:symbol-prefix="manager_iscsi_initiator_proxy"
           c:type="UDisksManagerISCSIInitiatorProxy"
           version="2.0.1"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksManagerISCSIInitiatorProxy"
           glib:get-type="udisks_manager_iscsi_initiator_proxy_get_type"
           glib:type-struct="ManagerISCSIInitiatorProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="55559">The #UDisksManagerISCSIInitiatorProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="6425"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="ManagerISCSIInitiator"/>
      <constructor name="new_finish"
                   c:identifier="udisks_manager_iscsi_initiator_proxy_new_finish"
                   version="2.0.1"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55825">Finishes an operation started with udisks_manager_iscsi_initiator_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="6441"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55832">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerISCSIInitiatorProxy"
                c:type="UDisksManagerISCSIInitiator*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55827">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_iscsi_initiator_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_manager_iscsi_initiator_proxy_new_for_bus_finish"
                   version="2.0.1"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55921">Finishes an operation started with udisks_manager_iscsi_initiator_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="6460"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55928">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerISCSIInitiatorProxy"
                c:type="UDisksManagerISCSIInitiator*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55923">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_iscsi_initiator_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_manager_iscsi_initiator_proxy_new_for_bus_sync"
                   version="2.0.1"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55948">Like udisks_manager_iscsi_initiator_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_manager_iscsi_initiator_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6463"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55963">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerISCSIInitiatorProxy"
                c:type="UDisksManagerISCSIInitiator*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55950">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55951">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55952">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55953">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55954">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_manager_iscsi_initiator_proxy_new_sync"
                   version="2.0.1"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55852">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.top_of_page"&gt;org.freedesktop.UDisks2.Manager.ISCSI.Initiator&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_manager_iscsi_initiator_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6444"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="55867">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerISCSIInitiatorProxy"
                c:type="UDisksManagerISCSIInitiator*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55854">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55855">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55856">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55857">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55858">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_manager_iscsi_initiator_proxy_new"
                version="2.0.1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55793">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.top_of_page"&gt;org.freedesktop.UDisks2.Manager.ISCSI.Initiator&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_iscsi_initiator_proxy_new_finish() to get the result of the operation.

See udisks_manager_iscsi_initiator_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6433"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55795">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55796">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55797">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55798">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55799">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55800">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55801">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_manager_iscsi_initiator_proxy_new_for_bus"
                version="2.0.1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55889">Like udisks_manager_iscsi_initiator_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_iscsi_initiator_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_manager_iscsi_initiator_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="6452"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55891">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55892">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55893">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55894">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55895">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55896">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="55897">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerISCSIInitiatorProxyPrivate"
              c:type="UDisksManagerISCSIInitiatorProxyPrivate*"/>
      </field>
    </class>
    <record name="ManagerISCSIInitiatorProxyClass"
            c:type="UDisksManagerISCSIInitiatorProxyClass"
            glib:is-gtype-struct-for="ManagerISCSIInitiatorProxy"
            version="2.0.1">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="55567">Class structure for #UDisksManagerISCSIInitiatorProxy.</doc>
      <source-position filename="udisks-generated.h" line="6425"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55569">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="ManagerISCSIInitiatorProxyPrivate"
            c:type="UDisksManagerISCSIInitiatorProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="6413"/>
    </record>
    <class name="ManagerISCSIInitiatorSkeleton"
           c:symbol-prefix="manager_iscsi_initiator_skeleton"
           c:type="UDisksManagerISCSIInitiatorSkeleton"
           version="2.0.1"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksManagerISCSIInitiatorSkeleton"
           glib:get-type="udisks_manager_iscsi_initiator_skeleton_get_type"
           glib:type-struct="ManagerISCSIInitiatorSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="55987">The #UDisksManagerISCSIInitiatorSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="6495"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="ManagerISCSIInitiator"/>
      <constructor name="new"
                   c:identifier="udisks_manager_iscsi_initiator_skeleton_new"
                   version="2.0.1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56444">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.top_of_page"&gt;org.freedesktop.UDisks2.Manager.ISCSI.Initiator&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="6503"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56449">The skeleton object.</doc>
          <type name="ManagerISCSIInitiatorSkeleton"
                c:type="UDisksManagerISCSIInitiator*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerISCSIInitiatorSkeletonPrivate"
              c:type="UDisksManagerISCSIInitiatorSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ManagerISCSIInitiatorSkeletonClass"
            c:type="UDisksManagerISCSIInitiatorSkeletonClass"
            glib:is-gtype-struct-for="ManagerISCSIInitiatorSkeleton"
            version="2.0.1">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="55995">Class structure for #UDisksManagerISCSIInitiatorSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="6495"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="55997">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="ManagerISCSIInitiatorSkeletonPrivate"
            c:type="UDisksManagerISCSIInitiatorSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="6483"/>
    </record>
    <record name="ManagerIface"
            c:type="UDisksManagerIface"
            glib:is-gtype-struct-for="Manager">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="2491">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="100"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2493">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_enable_modules">
        <callback name="handle_enable_modules">
          <source-position filename="udisks-generated.h" line="34"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_enable" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_loop_setup">
        <callback name="handle_loop_setup">
          <source-position filename="udisks-generated.h" line="39"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="fd_list" transfer-ownership="none">
              <type name="Gio.UnixFDList" c:type="GUnixFDList*"/>
            </parameter>
            <parameter name="arg_fd" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_supported_filesystems">
        <callback name="get_supported_filesystems">
          <source-position filename="udisks-generated.h" line="46"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2881">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="2873">A #UDisksManager.</doc>
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_version">
        <callback name="get_version">
          <source-position filename="udisks-generated.h" line="48"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2828">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="2820">A #UDisksManager.</doc>
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_mdraid_create">
        <callback name="handle_mdraid_create">
          <source-position filename="udisks-generated.h" line="50"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_blocks" transfer-ownership="none">
              <type name="utf8" c:type="const gchar* const*"/>
            </parameter>
            <parameter name="arg_level" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_chunk" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_can_check">
        <callback name="handle_can_check">
          <source-position filename="udisks-generated.h" line="59"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_can_format">
        <callback name="handle_can_format">
          <source-position filename="udisks-generated.h" line="64"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_can_repair">
        <callback name="handle_can_repair">
          <source-position filename="udisks-generated.h" line="69"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_can_resize">
        <callback name="handle_can_resize">
          <source-position filename="udisks-generated.h" line="74"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_block_devices">
        <callback name="handle_get_block_devices">
          <source-position filename="udisks-generated.h" line="79"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_resolve_device">
        <callback name="handle_resolve_device">
          <source-position filename="udisks-generated.h" line="84"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_devspec" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_default_encryption_type">
        <callback name="get_default_encryption_type">
          <source-position filename="udisks-generated.h" line="90"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2993">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="2985">A #UDisksManager.</doc>
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_supported_encryption_types">
        <callback name="get_supported_encryption_types">
          <source-position filename="udisks-generated.h" line="92"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="2934">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="2926">A #UDisksManager.</doc>
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_enable_module">
        <callback name="handle_enable_module">
          <source-position filename="udisks-generated.h" line="94"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="UDisksManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_enable" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="ManagerLVM2"
               c:symbol-prefix="manager_lvm2"
               c:type="UDisksManagerLVM2"
               version="2.0.0"
               glib:type-name="UDisksManagerLVM2"
               glib:get-type="udisks_manager_lvm2_get_type"
               glib:type-struct="ManagerLVM2Iface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="62348">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="7212"/>
      <function name="interface_info"
                c:identifier="udisks_manager_lvm2_interface_info"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62300">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="7220"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="62305">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_manager_lvm2_override_properties"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62315">Overrides all #GObject properties in the #UDisksManagerLVM2 interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="7221"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="62323">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62317">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62318">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_volume_group_create">
        <source-position filename="udisks-generated.h" line="7205"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerLVM2" c:type="UDisksManagerLVM2*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_volume_group_create"
              c:identifier="udisks_manager_lvm2_call_volume_group_create"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62402">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-LVM2.VolumeGroupCreate"&gt;VolumeGroupCreate()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_lvm2_call_volume_group_create_finish() to get the result of the operation.

See udisks_manager_lvm2_call_volume_group_create_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7233"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62404">A #UDisksManagerLVM2Proxy.</doc>
            <type name="ManagerLVM2" c:type="UDisksManagerLVM2*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62405">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62406">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62407">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62408">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62409">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62410">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_volume_group_create_finish"
              c:identifier="udisks_manager_lvm2_call_volume_group_create_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62443">Finishes an operation started with udisks_manager_lvm2_call_volume_group_create().</doc>
        <source-position filename="udisks-generated.h" line="7242"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="62452">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62445">A #UDisksManagerLVM2Proxy.</doc>
            <type name="ManagerLVM2" c:type="UDisksManagerLVM2*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62446">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62447">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_lvm2_call_volume_group_create().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_volume_group_create_sync"
              c:identifier="udisks_manager_lvm2_call_volume_group_create_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62475">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-LVM2.VolumeGroupCreate"&gt;VolumeGroupCreate()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_lvm2_call_volume_group_create() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7248"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="62489">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62477">A #UDisksManagerLVM2Proxy.</doc>
            <type name="ManagerLVM2" c:type="UDisksManagerLVM2*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62478">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62479">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62480">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62481">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62482">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_volume_group_create"
              c:identifier="udisks_manager_lvm2_complete_volume_group_create"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62524">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-LVM2.VolumeGroupCreate"&gt;VolumeGroupCreate()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7225"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62526">A #UDisksManagerLVM2.</doc>
            <type name="ManagerLVM2" c:type="UDisksManagerLVM2*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62527">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62528">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-volume-group-create"
                   when="last"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62373">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-LVM2.VolumeGroupCreate"&gt;VolumeGroupCreate()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_lvm2_complete_volume_group_create() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="62385">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62376">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62377">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_blocks" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62378">Argument passed by remote caller.</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62379">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="ManagerLVM2Iface"
            c:type="UDisksManagerLVM2Iface"
            glib:is-gtype-struct-for="ManagerLVM2"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="62356">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="7212"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62358">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_volume_group_create">
        <callback name="handle_volume_group_create">
          <source-position filename="udisks-generated.h" line="7205"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerLVM2" c:type="UDisksManagerLVM2*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_blocks" transfer-ownership="none">
              <type name="utf8" c:type="const gchar* const*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ManagerLVM2Proxy"
           c:symbol-prefix="manager_lvm2_proxy"
           c:type="UDisksManagerLVM2Proxy"
           version="2.0.0"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksManagerLVM2Proxy"
           glib:get-type="udisks_manager_lvm2_proxy_get_type"
           glib:type-struct="ManagerLVM2ProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="62549">The #UDisksManagerLVM2Proxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="7282"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="ManagerLVM2"/>
      <constructor name="new_finish"
                   c:identifier="udisks_manager_lvm2_proxy_new_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62746">Finishes an operation started with udisks_manager_lvm2_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="7298"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="62753">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerLVM2Proxy" c:type="UDisksManagerLVM2*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62748">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_lvm2_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_manager_lvm2_proxy_new_for_bus_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62842">Finishes an operation started with udisks_manager_lvm2_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="7317"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="62849">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerLVM2Proxy" c:type="UDisksManagerLVM2*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62844">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_lvm2_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_manager_lvm2_proxy_new_for_bus_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62869">Like udisks_manager_lvm2_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_manager_lvm2_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7320"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="62884">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerLVM2Proxy" c:type="UDisksManagerLVM2*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62871">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62872">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62873">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62874">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62875">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_manager_lvm2_proxy_new_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62773">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_manager_lvm2_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7301"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="62788">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerLVM2Proxy" c:type="UDisksManagerLVM2*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62775">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62776">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62777">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62778">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62779">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_manager_lvm2_proxy_new"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62714">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_lvm2_proxy_new_finish() to get the result of the operation.

See udisks_manager_lvm2_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7290"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62716">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62717">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62718">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62719">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62720">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62721">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62722">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_manager_lvm2_proxy_new_for_bus"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62810">Like udisks_manager_lvm2_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_lvm2_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_manager_lvm2_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7309"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62812">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62813">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62814">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62815">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62816">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62817">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="62818">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerLVM2ProxyPrivate"
              c:type="UDisksManagerLVM2ProxyPrivate*"/>
      </field>
    </class>
    <record name="ManagerLVM2ProxyClass"
            c:type="UDisksManagerLVM2ProxyClass"
            glib:is-gtype-struct-for="ManagerLVM2Proxy"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="62557">Class structure for #UDisksManagerLVM2Proxy.</doc>
      <source-position filename="udisks-generated.h" line="7282"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62559">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="ManagerLVM2ProxyPrivate"
            c:type="UDisksManagerLVM2ProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="7270"/>
    </record>
    <class name="ManagerLVM2Skeleton"
           c:symbol-prefix="manager_lvm2_skeleton"
           c:type="UDisksManagerLVM2Skeleton"
           version="2.0.0"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksManagerLVM2Skeleton"
           glib:get-type="udisks_manager_lvm2_skeleton_get_type"
           glib:type-struct="ManagerLVM2SkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="62908">The #UDisksManagerLVM2Skeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="7352"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="ManagerLVM2"/>
      <constructor name="new"
                   c:identifier="udisks_manager_lvm2_skeleton_new"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63183">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="7360"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="63188">The skeleton object.</doc>
          <type name="ManagerLVM2Skeleton" c:type="UDisksManagerLVM2*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerLVM2SkeletonPrivate"
              c:type="UDisksManagerLVM2SkeletonPrivate*"/>
      </field>
    </class>
    <record name="ManagerLVM2SkeletonClass"
            c:type="UDisksManagerLVM2SkeletonClass"
            glib:is-gtype-struct-for="ManagerLVM2Skeleton"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="62916">Class structure for #UDisksManagerLVM2Skeleton.</doc>
      <source-position filename="udisks-generated.h" line="7352"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62918">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="ManagerLVM2SkeletonPrivate"
            c:type="UDisksManagerLVM2SkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="7340"/>
    </record>
    <interface name="ManagerNVMe"
               c:symbol-prefix="manager_nvme"
               c:type="UDisksManagerNVMe"
               glib:type-name="UDisksManagerNVMe"
               glib:get-type="udisks_manager_nvme_get_type"
               glib:type-struct="ManagerNVMeIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="5688">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-NVMe.top_of_page"&gt;org.freedesktop.UDisks2.Manager.NVMe&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="544"/>
      <function name="interface_info"
                c:identifier="udisks_manager_nvme_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5616">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-NVMe.top_of_page"&gt;org.freedesktop.UDisks2.Manager.NVMe&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="552"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5621">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_manager_nvme_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5629">Overrides all #GObject properties in the #UDisksManagerNVMe interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="553"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5637">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5631">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5632">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_host_id"
                      invoker="get_host_id"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5877">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-NVMe.HostID"&gt;"HostID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_nvme_dup_host_id() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="540"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5887">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5879">A #UDisksManagerNVMe.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_host_nqn"
                      invoker="get_host_nqn"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5818">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-NVMe.HostNQN"&gt;"HostNQN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_nvme_dup_host_nqn() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="542"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5828">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5820">A #UDisksManagerNVMe.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_connect">
        <source-position filename="udisks-generated.h" line="520"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_subsysnqn" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_transport" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_transport_addr" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_host_id">
        <source-position filename="udisks-generated.h" line="528"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_hostid" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_host_nqn">
        <source-position filename="udisks-generated.h" line="534"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_hostnqn" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_connect"
              c:identifier="udisks_manager_nvme_call_connect"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6156">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-NVMe.Connect"&gt;Connect()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_nvme_call_connect_finish() to get the result of the operation.

See udisks_manager_nvme_call_connect_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="613"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6158">A #UDisksManagerNVMeProxy.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="arg_subsysnqn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6159">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_transport" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6160">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_transport_addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6161">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6162">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6163">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6164">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6165">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_connect_finish"
              c:identifier="udisks_manager_nvme_call_connect_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6200">Finishes an operation started with udisks_manager_nvme_call_connect().</doc>
        <source-position filename="udisks-generated.h" line="623"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="6209">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6202">A #UDisksManagerNVMeProxy.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="out_nvme_ctrl"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6203">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6204">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_nvme_call_connect().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_connect_sync"
              c:identifier="udisks_manager_nvme_call_connect_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6232">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-NVMe.Connect"&gt;Connect()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_nvme_call_connect() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="629"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="6247">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6234">A #UDisksManagerNVMeProxy.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="arg_subsysnqn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6235">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_transport" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6236">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_transport_addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6237">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6238">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_nvme_ctrl"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6239">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6240">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_host_id"
              c:identifier="udisks_manager_nvme_call_set_host_id"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6046">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-NVMe.SetHostID"&gt;SetHostID()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_nvme_call_set_host_id_finish() to get the result of the operation.

See udisks_manager_nvme_call_set_host_id_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="593"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6048">A #UDisksManagerNVMeProxy.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="arg_hostid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6049">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6050">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6051">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6052">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6053">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_host_id_finish"
              c:identifier="udisks_manager_nvme_call_set_host_id_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6084">Finishes an operation started with udisks_manager_nvme_call_set_host_id().</doc>
        <source-position filename="udisks-generated.h" line="601"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="6092">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6086">A #UDisksManagerNVMeProxy.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6087">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_nvme_call_set_host_id().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_host_id_sync"
              c:identifier="udisks_manager_nvme_call_set_host_id_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6113">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-NVMe.SetHostID"&gt;SetHostID()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_nvme_call_set_host_id() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="606"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="6125">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6115">A #UDisksManagerNVMeProxy.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="arg_hostid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6116">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6117">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6118">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_host_nqn"
              c:identifier="udisks_manager_nvme_call_set_host_nqn"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5936">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-NVMe.SetHostNQN"&gt;SetHostNQN()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_nvme_call_set_host_nqn_finish() to get the result of the operation.

See udisks_manager_nvme_call_set_host_nqn_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="573"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5938">A #UDisksManagerNVMeProxy.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="arg_hostnqn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5939">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5940">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5941">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5942">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5943">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_host_nqn_finish"
              c:identifier="udisks_manager_nvme_call_set_host_nqn_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5974">Finishes an operation started with udisks_manager_nvme_call_set_host_nqn().</doc>
        <source-position filename="udisks-generated.h" line="581"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5982">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5976">A #UDisksManagerNVMeProxy.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5977">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_nvme_call_set_host_nqn().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_host_nqn_sync"
              c:identifier="udisks_manager_nvme_call_set_host_nqn_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6003">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-NVMe.SetHostNQN"&gt;SetHostNQN()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_manager_nvme_call_set_host_nqn() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="586"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="6015">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6005">A #UDisksManagerNVMeProxy.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="arg_hostnqn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6006">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6007">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6008">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_connect"
              c:identifier="udisks_manager_nvme_complete_connect"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6324">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-NVMe.Connect"&gt;Connect()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="565"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6326">A #UDisksManagerNVMe.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6327">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="nvme_ctrl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6328">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_host_id"
              c:identifier="udisks_manager_nvme_complete_set_host_id"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6304">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-NVMe.SetHostID"&gt;SetHostID()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="561"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6306">A #UDisksManagerNVMe.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6307">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_host_nqn"
              c:identifier="udisks_manager_nvme_complete_set_host_nqn"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6284">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-NVMe.SetHostNQN"&gt;SetHostNQN()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="557"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6286">A #UDisksManagerNVMe.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6287">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_host_id"
              c:identifier="udisks_manager_nvme_dup_host_id"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5899">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-NVMe.HostID"&gt;"HostID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="647"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5907">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5901">A #UDisksManagerNVMe.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_host_nqn"
              c:identifier="udisks_manager_nvme_dup_host_nqn"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5840">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-NVMe.HostNQN"&gt;"HostNQN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="643"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5848">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5842">A #UDisksManagerNVMe.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_host_id"
              c:identifier="udisks_manager_nvme_get_host_id"
              glib:get-property="host-id"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5877">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-NVMe.HostID"&gt;"HostID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_nvme_dup_host_id() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="646"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5887">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5879">A #UDisksManagerNVMe.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_host_nqn"
              c:identifier="udisks_manager_nvme_get_host_nqn"
              glib:get-property="host-nqn"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5818">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-NVMe.HostNQN"&gt;"HostNQN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_manager_nvme_dup_host_nqn() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="642"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5828">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5820">A #UDisksManagerNVMe.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_host_id"
              c:identifier="udisks_manager_nvme_set_host_id"
              glib:set-property="host-id"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5919">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-NVMe.HostID"&gt;"HostID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="648"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5921">A #UDisksManagerNVMe.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5922">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_host_nqn"
              c:identifier="udisks_manager_nvme_set_host_nqn"
              glib:set-property="host-nqn"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5860">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-NVMe.HostNQN"&gt;"HostNQN"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="644"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5862">A #UDisksManagerNVMe.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5863">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="host-id"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_host_id"
                getter="get_host_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5805">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-NVMe.HostID"&gt;"HostID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="host-nqn"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_host_nqn"
                getter="get_host_nqn"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5794">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Manager-NVMe.HostNQN"&gt;"HostNQN"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-connect" when="last" version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5765">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-NVMe.Connect"&gt;Connect()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_nvme_complete_connect() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5778">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5768">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_subsysnqn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5769">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_transport" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5770">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_transport_addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5771">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5772">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-host-id" when="last" version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5739">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-NVMe.SetHostID"&gt;SetHostID()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_nvme_complete_set_host_id() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5750">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5742">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_hostid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5743">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5744">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-host-nqn" when="last" version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5713">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Manager-NVMe.SetHostNQN"&gt;SetHostNQN()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_manager_nvme_complete_set_host_nqn() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5724">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5716">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_hostnqn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5717">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5718">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="ManagerNVMeIface"
            c:type="UDisksManagerNVMeIface"
            glib:is-gtype-struct-for="ManagerNVMe">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="5694">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-NVMe.top_of_page"&gt;org.freedesktop.UDisks2.Manager.NVMe&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="544"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5696">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_connect">
        <callback name="handle_connect">
          <source-position filename="udisks-generated.h" line="520"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_subsysnqn" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_transport" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_transport_addr" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_host_id">
        <callback name="handle_set_host_id">
          <source-position filename="udisks-generated.h" line="528"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_hostid" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_host_nqn">
        <callback name="handle_set_host_nqn">
          <source-position filename="udisks-generated.h" line="534"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_hostnqn" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_host_id">
        <callback name="get_host_id">
          <source-position filename="udisks-generated.h" line="540"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5887">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5879">A #UDisksManagerNVMe.</doc>
              <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_host_nqn">
        <callback name="get_host_nqn">
          <source-position filename="udisks-generated.h" line="542"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="5828">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="5820">A #UDisksManagerNVMe.</doc>
              <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ManagerNVMeProxy"
           c:symbol-prefix="manager_nvme_proxy"
           c:type="UDisksManagerNVMeProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksManagerNVMeProxy"
           glib:get-type="udisks_manager_nvme_proxy_get_type"
           glib:type-struct="ManagerNVMeProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="6349">The #UDisksManagerNVMeProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="674"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="ManagerNVMe"/>
      <constructor name="new_finish"
                   c:identifier="udisks_manager_nvme_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6625">Finishes an operation started with udisks_manager_nvme_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="690"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="6632">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerNVMeProxy" c:type="UDisksManagerNVMe*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6627">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_nvme_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_manager_nvme_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6715">Finishes an operation started with udisks_manager_nvme_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="709"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="6722">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerNVMeProxy" c:type="UDisksManagerNVMe*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6717">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_nvme_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_manager_nvme_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6740">Like udisks_manager_nvme_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_manager_nvme_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="712"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="6755">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerNVMeProxy" c:type="UDisksManagerNVMe*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6742">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6743">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6744">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6745">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6746">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_manager_nvme_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6650">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-NVMe.top_of_page"&gt;org.freedesktop.UDisks2.Manager.NVMe&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_manager_nvme_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="693"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="6665">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerNVMeProxy" c:type="UDisksManagerNVMe*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6652">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6653">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6654">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6655">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6656">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_manager_nvme_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6595">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-NVMe.top_of_page"&gt;org.freedesktop.UDisks2.Manager.NVMe&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_nvme_proxy_new_finish() to get the result of the operation.

See udisks_manager_nvme_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="682"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6597">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6598">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6599">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6600">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6601">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6602">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6603">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_manager_nvme_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6685">Like udisks_manager_nvme_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_nvme_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_manager_nvme_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="701"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6687">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6688">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6689">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6690">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6691">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6692">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="6693">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerNVMeProxyPrivate"
              c:type="UDisksManagerNVMeProxyPrivate*"/>
      </field>
    </class>
    <record name="ManagerNVMeProxyClass"
            c:type="UDisksManagerNVMeProxyClass"
            glib:is-gtype-struct-for="ManagerNVMeProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="6355">Class structure for #UDisksManagerNVMeProxy.</doc>
      <source-position filename="udisks-generated.h" line="674"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6357">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="ManagerNVMeProxyPrivate"
            c:type="UDisksManagerNVMeProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="662"/>
    </record>
    <class name="ManagerNVMeSkeleton"
           c:symbol-prefix="manager_nvme_skeleton"
           c:type="UDisksManagerNVMeSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksManagerNVMeSkeleton"
           glib:get-type="udisks_manager_nvme_skeleton_get_type"
           glib:type-struct="ManagerNVMeSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="6777">The #UDisksManagerNVMeSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="744"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="ManagerNVMe"/>
      <constructor name="new" c:identifier="udisks_manager_nvme_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="7243">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-NVMe.top_of_page"&gt;org.freedesktop.UDisks2.Manager.NVMe&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="752"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="7248">The skeleton object.</doc>
          <type name="ManagerNVMeSkeleton" c:type="UDisksManagerNVMe*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerNVMeSkeletonPrivate"
              c:type="UDisksManagerNVMeSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ManagerNVMeSkeletonClass"
            c:type="UDisksManagerNVMeSkeletonClass"
            glib:is-gtype-struct-for="ManagerNVMeSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="6783">Class structure for #UDisksManagerNVMeSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="744"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="6785">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="ManagerNVMeSkeletonPrivate"
            c:type="UDisksManagerNVMeSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="732"/>
    </record>
    <class name="ManagerProxy"
           c:symbol-prefix="manager_proxy"
           c:type="UDisksManagerProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksManagerProxy"
           glib:get-type="udisks_manager_proxy_get_type"
           glib:type-struct="ManagerProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="4404">The #UDisksManagerProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="422"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Manager"/>
      <constructor name="new_finish"
                   c:identifier="udisks_manager_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4720">Finishes an operation started with udisks_manager_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="438"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4727">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4722">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_manager_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4810">Finishes an operation started with udisks_manager_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="457"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4817">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4812">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_manager_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_manager_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4835">Like udisks_manager_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_manager_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="460"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4850">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4837">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4838">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4839">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4840">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4841">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_manager_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4745">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_manager_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="441"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="4760">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4747">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4748">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4749">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4750">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4751">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_manager_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4690">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_proxy_new_finish() to get the result of the operation.

See udisks_manager_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="430"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4692">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4693">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4694">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4695">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4696">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4697">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4698">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_manager_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4780">Like udisks_manager_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_manager_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_manager_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="449"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4782">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4783">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4784">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4785">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4786">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4787">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="4788">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerProxyPrivate" c:type="UDisksManagerProxyPrivate*"/>
      </field>
    </class>
    <record name="ManagerProxyClass"
            c:type="UDisksManagerProxyClass"
            glib:is-gtype-struct-for="ManagerProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="4410">Class structure for #UDisksManagerProxy.</doc>
      <source-position filename="udisks-generated.h" line="422"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4412">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="ManagerProxyPrivate"
            c:type="UDisksManagerProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="410"/>
    </record>
    <class name="ManagerSkeleton"
           c:symbol-prefix="manager_skeleton"
           c:type="UDisksManagerSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksManagerSkeleton"
           glib:get-type="udisks_manager_skeleton_get_type"
           glib:type-struct="ManagerSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="4872">The #UDisksManagerSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="492"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Manager"/>
      <constructor name="new" c:identifier="udisks_manager_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5364">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="500"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5369">The skeleton object.</doc>
          <type name="ManagerSkeleton" c:type="UDisksManager*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerSkeletonPrivate"
              c:type="UDisksManagerSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ManagerSkeletonClass"
            c:type="UDisksManagerSkeletonClass"
            glib:is-gtype-struct-for="ManagerSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="4878">Class structure for #UDisksManagerSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="492"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="4880">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="ManagerSkeletonPrivate"
            c:type="UDisksManagerSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="480"/>
    </record>
    <function-macro name="NVME_CONTROLLER"
                    c:identifier="UDISKS_NVME_CONTROLLER"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1664"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_CONTROLLER_GET_IFACE"
                    c:identifier="UDISKS_NVME_CONTROLLER_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1666"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_CONTROLLER_PROXY"
                    c:identifier="UDISKS_NVME_CONTROLLER_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1921"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_CONTROLLER_PROXY_CLASS"
                    c:identifier="UDISKS_NVME_CONTROLLER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1922"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_CONTROLLER_PROXY_GET_CLASS"
                    c:identifier="UDISKS_NVME_CONTROLLER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1923"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_CONTROLLER_SKELETON"
                    c:identifier="UDISKS_NVME_CONTROLLER_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1991"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_CONTROLLER_SKELETON_CLASS"
                    c:identifier="UDISKS_NVME_CONTROLLER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1992"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_CONTROLLER_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_NVME_CONTROLLER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="1993"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_FABRICS"
                    c:identifier="UDISKS_NVME_FABRICS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2255"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_FABRICS_GET_IFACE"
                    c:identifier="UDISKS_NVME_FABRICS_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2257"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_FABRICS_PROXY"
                    c:identifier="UDISKS_NVME_FABRICS_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2342"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_FABRICS_PROXY_CLASS"
                    c:identifier="UDISKS_NVME_FABRICS_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2343"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_FABRICS_PROXY_GET_CLASS"
                    c:identifier="UDISKS_NVME_FABRICS_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2344"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_FABRICS_SKELETON"
                    c:identifier="UDISKS_NVME_FABRICS_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2412"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_FABRICS_SKELETON_CLASS"
                    c:identifier="UDISKS_NVME_FABRICS_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2413"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_FABRICS_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_NVME_FABRICS_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2414"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_NAMESPACE"
                    c:identifier="UDISKS_NVME_NAMESPACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2026"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_NAMESPACE_GET_IFACE"
                    c:identifier="UDISKS_NVME_NAMESPACE_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2028"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_NAMESPACE_PROXY"
                    c:identifier="UDISKS_NVME_NAMESPACE_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2150"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_NAMESPACE_PROXY_CLASS"
                    c:identifier="UDISKS_NVME_NAMESPACE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2151"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_NAMESPACE_PROXY_GET_CLASS"
                    c:identifier="UDISKS_NVME_NAMESPACE_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2152"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_NAMESPACE_SKELETON"
                    c:identifier="UDISKS_NVME_NAMESPACE_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2220"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_NAMESPACE_SKELETON_CLASS"
                    c:identifier="UDISKS_NVME_NAMESPACE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2221"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NVME_NAMESPACE_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_NVME_NAMESPACE_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="2222"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="NVMeController"
               c:symbol-prefix="nvme_controller"
               c:type="UDisksNVMeController"
               glib:type-name="UDisksNVMeController"
               glib:get-type="udisks_nvme_controller_get_type"
               glib:type-struct="NVMeControllerIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="17108">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Controller.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Controller&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="1732"/>
      <function name="interface_info"
                c:identifier="udisks_nvme_controller_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="16998">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Controller.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Controller&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="1740"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17003">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_nvme_controller_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17011">Overrides all #GObject properties in the #UDisksNVMeController interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="1741"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17019">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17013">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17014">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_controller_id"
                      invoker="get_controller_id"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17490">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.ControllerID"&gt;"ControllerID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1704"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17498">The property value.</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17492">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_fguid"
                      invoker="get_fguid"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17586">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.FGUID"&gt;"FGUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_fguid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1706"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17596">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17588">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_nvme_revision"
                      invoker="get_nvme_revision"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17645">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.NVMeRevision"&gt;"NVMeRevision"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_nvme_revision() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1708"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17655">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17647">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sanitize_percent_remaining"
                      invoker="get_sanitize_percent_remaining"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18066">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SanitizePercentRemaining"&gt;"SanitizePercentRemaining"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1710"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18074">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18068">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_sanitize_status"
                      invoker="get_sanitize_status"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18007">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SanitizeStatus"&gt;"SanitizeStatus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_sanitize_status() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1712"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18017">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18009">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_critical_warning"
                      invoker="get_smart_critical_warning"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17778">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartCriticalWarning"&gt;"SmartCriticalWarning"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_smart_critical_warning() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1714"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17788">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17780">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_power_on_hours"
                      invoker="get_smart_power_on_hours"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17837">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartPowerOnHours"&gt;"SmartPowerOnHours"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1716"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17845">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17839">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_selftest_percent_remaining"
                      invoker="get_smart_selftest_percent_remaining"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17970">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestPercentRemaining"&gt;"SmartSelftestPercentRemaining"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1718"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17978">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17972">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_selftest_status"
                      invoker="get_smart_selftest_status"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17911">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_smart_selftest_status() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1720"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17921">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17913">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_temperature"
                      invoker="get_smart_temperature"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17874">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartTemperature"&gt;"SmartTemperature"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1722"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17882">The property value.</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17876">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_smart_updated"
                      invoker="get_smart_updated"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17741">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartUpdated"&gt;"SmartUpdated"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1724"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17749">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17743">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_state"
                      invoker="get_state"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17431">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.State"&gt;"State"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_state() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1726"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17441">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17433">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_subsystem_nqn"
                      invoker="get_subsystem_nqn"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17527">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SubsystemNQN"&gt;"SubsystemNQN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_subsystem_nqn() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1728"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17537">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17529">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_unallocated_capacity"
                      invoker="get_unallocated_capacity"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17704">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.UnallocatedCapacity"&gt;"UnallocatedCapacity"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1730"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17712">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17706">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_sanitize_start">
        <source-position filename="udisks-generated.h" line="1677"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_action" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_get_attributes">
        <source-position filename="udisks-generated.h" line="1683"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_selftest_abort">
        <source-position filename="udisks-generated.h" line="1688"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_selftest_start">
        <source-position filename="udisks-generated.h" line="1693"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_smart_update">
        <source-position filename="udisks-generated.h" line="1699"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_sanitize_start"
              c:identifier="udisks_nvme_controller_call_sanitize_start"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18531">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SanitizeStart"&gt;SanitizeStart()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_nvme_controller_call_sanitize_start_finish() to get the result of the operation.

See udisks_nvme_controller_call_sanitize_start_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1845"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18533">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="arg_action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18534">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18535">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18536">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18537">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18538">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_sanitize_start_finish"
              c:identifier="udisks_nvme_controller_call_sanitize_start_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18569">Finishes an operation started with udisks_nvme_controller_call_sanitize_start().</doc>
        <source-position filename="udisks-generated.h" line="1853"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18577">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18571">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18572">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_nvme_controller_call_sanitize_start().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_sanitize_start_sync"
              c:identifier="udisks_nvme_controller_call_sanitize_start_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18598">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SanitizeStart"&gt;SanitizeStart()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_nvme_controller_call_sanitize_start() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1858"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18610">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18600">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="arg_action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18601">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18602">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18603">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_get_attributes"
              c:identifier="udisks_nvme_controller_call_smart_get_attributes"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18207">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartGetAttributes"&gt;SmartGetAttributes()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_nvme_controller_call_smart_get_attributes_finish() to get the result of the operation.

See udisks_nvme_controller_call_smart_get_attributes_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1787"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18209">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18210">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18211">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18212">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18213">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_get_attributes_finish"
              c:identifier="udisks_nvme_controller_call_smart_get_attributes_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18242">Finishes an operation started with udisks_nvme_controller_call_smart_get_attributes().</doc>
        <source-position filename="udisks-generated.h" line="1794"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18251">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18244">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="out_attributes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18245">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18246">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_nvme_controller_call_smart_get_attributes().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_get_attributes_sync"
              c:identifier="udisks_nvme_controller_call_smart_get_attributes_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18274">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartGetAttributes"&gt;SmartGetAttributes()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_nvme_controller_call_smart_get_attributes() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1800"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18286">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18276">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18277">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_attributes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18278">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18279">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_abort"
              c:identifier="udisks_nvme_controller_call_smart_selftest_abort"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18427">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestAbort"&gt;SmartSelftestAbort()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_nvme_controller_call_smart_selftest_abort_finish() to get the result of the operation.

See udisks_nvme_controller_call_smart_selftest_abort_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1827"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18429">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18430">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18431">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18432">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18433">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_abort_finish"
              c:identifier="udisks_nvme_controller_call_smart_selftest_abort_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18462">Finishes an operation started with udisks_nvme_controller_call_smart_selftest_abort().</doc>
        <source-position filename="udisks-generated.h" line="1834"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18470">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18464">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18465">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_nvme_controller_call_smart_selftest_abort().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_abort_sync"
              c:identifier="udisks_nvme_controller_call_smart_selftest_abort_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18491">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestAbort"&gt;SmartSelftestAbort()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_nvme_controller_call_smart_selftest_abort() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1839"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18502">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18493">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18494">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18495">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_start"
              c:identifier="udisks_nvme_controller_call_smart_selftest_start"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18317">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestStart"&gt;SmartSelftestStart()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_nvme_controller_call_smart_selftest_start_finish() to get the result of the operation.

See udisks_nvme_controller_call_smart_selftest_start_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1807"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18319">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18320">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18321">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18322">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18323">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18324">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_start_finish"
              c:identifier="udisks_nvme_controller_call_smart_selftest_start_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18355">Finishes an operation started with udisks_nvme_controller_call_smart_selftest_start().</doc>
        <source-position filename="udisks-generated.h" line="1815"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18363">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18357">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18358">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_nvme_controller_call_smart_selftest_start().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_selftest_start_sync"
              c:identifier="udisks_nvme_controller_call_smart_selftest_start_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18384">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestStart"&gt;SmartSelftestStart()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_nvme_controller_call_smart_selftest_start() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1820"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18396">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18386">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18387">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18388">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18389">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_update"
              c:identifier="udisks_nvme_controller_call_smart_update"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18103">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartUpdate"&gt;SmartUpdate()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_nvme_controller_call_smart_update_finish() to get the result of the operation.

See udisks_nvme_controller_call_smart_update_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1769"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18105">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18106">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18107">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18108">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18109">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_update_finish"
              c:identifier="udisks_nvme_controller_call_smart_update_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18138">Finishes an operation started with udisks_nvme_controller_call_smart_update().</doc>
        <source-position filename="udisks-generated.h" line="1776"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18146">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18140">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18141">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_nvme_controller_call_smart_update().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_smart_update_sync"
              c:identifier="udisks_nvme_controller_call_smart_update_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18167">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartUpdate"&gt;SmartUpdate()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_nvme_controller_call_smart_update() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="1781"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18178">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18169">A #UDisksNVMeControllerProxy.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18170">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18171">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_sanitize_start"
              c:identifier="udisks_nvme_controller_complete_sanitize_start"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18724">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SanitizeStart"&gt;SanitizeStart()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1762"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18726">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18727">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_get_attributes"
              c:identifier="udisks_nvme_controller_complete_smart_get_attributes"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18661">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartGetAttributes"&gt;SmartGetAttributes()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1749"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18663">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18664">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18665">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_selftest_abort"
              c:identifier="udisks_nvme_controller_complete_smart_selftest_abort"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18704">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestAbort"&gt;SmartSelftestAbort()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1758"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18706">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18707">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_selftest_start"
              c:identifier="udisks_nvme_controller_complete_smart_selftest_start"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18684">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestStart"&gt;SmartSelftestStart()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1754"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18686">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18687">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_smart_update"
              c:identifier="udisks_nvme_controller_complete_smart_update"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18641">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartUpdate"&gt;SmartUpdate()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="1745"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18643">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18644">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_fguid"
              c:identifier="udisks_nvme_controller_dup_fguid"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17608">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.FGUID"&gt;"FGUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1880"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17616">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17610">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_nvme_revision"
              c:identifier="udisks_nvme_controller_dup_nvme_revision"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17667">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.NVMeRevision"&gt;"NVMeRevision"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1884"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17675">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17669">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_sanitize_status"
              c:identifier="udisks_nvme_controller_dup_sanitize_status"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18029">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SanitizeStatus"&gt;"SanitizeStatus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1911"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18037">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18031">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_smart_critical_warning"
              c:identifier="udisks_nvme_controller_dup_smart_critical_warning"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17800">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartCriticalWarning"&gt;"SmartCriticalWarning"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1894"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17808">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17802">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_smart_selftest_status"
              c:identifier="udisks_nvme_controller_dup_smart_selftest_status"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17933">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1904"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17941">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17935">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_state"
              c:identifier="udisks_nvme_controller_dup_state"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17453">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.State"&gt;"State"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1869"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17461">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17455">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_subsystem_nqn"
              c:identifier="udisks_nvme_controller_dup_subsystem_nqn"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17549">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SubsystemNQN"&gt;"SubsystemNQN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1876"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17557">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17551">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_controller_id"
              c:identifier="udisks_nvme_controller_get_controller_id"
              glib:get-property="controller-id"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17490">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.ControllerID"&gt;"ControllerID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1872"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17498">The property value.</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17492">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fguid"
              c:identifier="udisks_nvme_controller_get_fguid"
              glib:get-property="fguid"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17586">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.FGUID"&gt;"FGUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_fguid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1879"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17596">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17588">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nvme_revision"
              c:identifier="udisks_nvme_controller_get_nvme_revision"
              glib:get-property="nvme-revision"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17645">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.NVMeRevision"&gt;"NVMeRevision"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_nvme_revision() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1883"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17655">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17647">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sanitize_percent_remaining"
              c:identifier="udisks_nvme_controller_get_sanitize_percent_remaining"
              glib:get-property="sanitize-percent-remaining"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18066">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SanitizePercentRemaining"&gt;"SanitizePercentRemaining"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1914"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18074">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18068">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sanitize_status"
              c:identifier="udisks_nvme_controller_get_sanitize_status"
              glib:get-property="sanitize-status"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18007">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SanitizeStatus"&gt;"SanitizeStatus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_sanitize_status() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1910"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="18017">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18009">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_critical_warning"
              c:identifier="udisks_nvme_controller_get_smart_critical_warning"
              glib:get-property="smart-critical-warning"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17778">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartCriticalWarning"&gt;"SmartCriticalWarning"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_smart_critical_warning() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1893"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17788">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17780">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_power_on_hours"
              c:identifier="udisks_nvme_controller_get_smart_power_on_hours"
              glib:get-property="smart-power-on-hours"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17837">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartPowerOnHours"&gt;"SmartPowerOnHours"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1897"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17845">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17839">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_selftest_percent_remaining"
              c:identifier="udisks_nvme_controller_get_smart_selftest_percent_remaining"
              glib:get-property="smart-selftest-percent-remaining"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17970">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestPercentRemaining"&gt;"SmartSelftestPercentRemaining"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1907"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17978">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17972">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_selftest_status"
              c:identifier="udisks_nvme_controller_get_smart_selftest_status"
              glib:get-property="smart-selftest-status"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17911">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_smart_selftest_status() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1903"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17921">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17913">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_temperature"
              c:identifier="udisks_nvme_controller_get_smart_temperature"
              glib:get-property="smart-temperature"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17874">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartTemperature"&gt;"SmartTemperature"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1900"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17882">The property value.</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17876">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_smart_updated"
              c:identifier="udisks_nvme_controller_get_smart_updated"
              glib:get-property="smart-updated"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17741">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartUpdated"&gt;"SmartUpdated"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1890"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17749">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17743">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state"
              c:identifier="udisks_nvme_controller_get_state"
              glib:get-property="state"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17431">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.State"&gt;"State"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_state() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1868"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17441">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17433">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subsystem_nqn"
              c:identifier="udisks_nvme_controller_get_subsystem_nqn"
              glib:get-property="subsystem-nqn"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17527">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SubsystemNQN"&gt;"SubsystemNQN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_controller_dup_subsystem_nqn() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="1875"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17537">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17529">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_unallocated_capacity"
              c:identifier="udisks_nvme_controller_get_unallocated_capacity"
              glib:get-property="unallocated-capacity"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17704">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.UnallocatedCapacity"&gt;"UnallocatedCapacity"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="1887"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17712">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17706">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_controller_id"
              c:identifier="udisks_nvme_controller_set_controller_id"
              glib:set-property="controller-id"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17510">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.ControllerID"&gt;"ControllerID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1873"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17512">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17513">The value to set.</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_fguid"
              c:identifier="udisks_nvme_controller_set_fguid"
              glib:set-property="fguid"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17628">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.FGUID"&gt;"FGUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1881"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17630">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17631">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_nvme_revision"
              c:identifier="udisks_nvme_controller_set_nvme_revision"
              glib:set-property="nvme-revision"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17687">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.NVMeRevision"&gt;"NVMeRevision"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1885"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17689">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17690">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sanitize_percent_remaining"
              c:identifier="udisks_nvme_controller_set_sanitize_percent_remaining"
              glib:set-property="sanitize-percent-remaining"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18086">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SanitizePercentRemaining"&gt;"SanitizePercentRemaining"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1915"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18088">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18089">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sanitize_status"
              c:identifier="udisks_nvme_controller_set_sanitize_status"
              glib:set-property="sanitize-status"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18049">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SanitizeStatus"&gt;"SanitizeStatus"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1912"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18051">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18052">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_critical_warning"
              c:identifier="udisks_nvme_controller_set_smart_critical_warning"
              glib:set-property="smart-critical-warning"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17820">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartCriticalWarning"&gt;"SmartCriticalWarning"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1895"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17822">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17823">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_power_on_hours"
              c:identifier="udisks_nvme_controller_set_smart_power_on_hours"
              glib:set-property="smart-power-on-hours"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17857">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartPowerOnHours"&gt;"SmartPowerOnHours"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1898"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17859">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17860">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_selftest_percent_remaining"
              c:identifier="udisks_nvme_controller_set_smart_selftest_percent_remaining"
              glib:set-property="smart-selftest-percent-remaining"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17990">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestPercentRemaining"&gt;"SmartSelftestPercentRemaining"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1908"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17992">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17993">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_selftest_status"
              c:identifier="udisks_nvme_controller_set_smart_selftest_status"
              glib:set-property="smart-selftest-status"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17953">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1905"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17955">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17956">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_temperature"
              c:identifier="udisks_nvme_controller_set_smart_temperature"
              glib:set-property="smart-temperature"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17894">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartTemperature"&gt;"SmartTemperature"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1901"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17896">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17897">The value to set.</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_smart_updated"
              c:identifier="udisks_nvme_controller_set_smart_updated"
              glib:set-property="smart-updated"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17761">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartUpdated"&gt;"SmartUpdated"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1891"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17763">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17764">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_state"
              c:identifier="udisks_nvme_controller_set_state"
              glib:set-property="state"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17473">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.State"&gt;"State"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1870"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17475">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17476">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subsystem_nqn"
              c:identifier="udisks_nvme_controller_set_subsystem_nqn"
              glib:set-property="subsystem-nqn"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17569">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SubsystemNQN"&gt;"SubsystemNQN"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1877"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17571">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17572">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_unallocated_capacity"
              c:identifier="udisks_nvme_controller_set_unallocated_capacity"
              glib:set-property="unallocated-capacity"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17724">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.UnallocatedCapacity"&gt;"UnallocatedCapacity"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="1888"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17726">A #UDisksNVMeController.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17727">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <property name="controller-id"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_controller_id"
                getter="get_controller_id"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17286">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.ControllerID"&gt;"ControllerID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="fguid"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_fguid"
                getter="get_fguid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17308">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.FGUID"&gt;"FGUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="nvme-revision"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_nvme_revision"
                getter="get_nvme_revision"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17319">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.NVMeRevision"&gt;"NVMeRevision"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="sanitize-percent-remaining"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_sanitize_percent_remaining"
                getter="get_sanitize_percent_remaining"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17418">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SanitizePercentRemaining"&gt;"SanitizePercentRemaining"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="sanitize-status"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_sanitize_status"
                getter="get_sanitize_status"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17407">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SanitizeStatus"&gt;"SanitizeStatus"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="smart-critical-warning"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_critical_warning"
                getter="get_smart_critical_warning">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17352">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartCriticalWarning"&gt;"SmartCriticalWarning"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="smart-power-on-hours"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_power_on_hours"
                getter="get_smart_power_on_hours"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17363">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartPowerOnHours"&gt;"SmartPowerOnHours"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="smart-selftest-percent-remaining"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_selftest_percent_remaining"
                getter="get_smart_selftest_percent_remaining"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17396">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestPercentRemaining"&gt;"SmartSelftestPercentRemaining"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="smart-selftest-status"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_selftest_status"
                getter="get_smart_selftest_status"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17385">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestStatus"&gt;"SmartSelftestStatus"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="smart-temperature"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_temperature"
                getter="get_smart_temperature"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17374">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartTemperature"&gt;"SmartTemperature"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="smart-updated"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_smart_updated"
                getter="get_smart_updated"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17341">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SmartUpdated"&gt;"SmartUpdated"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="state"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_state"
                getter="get_state"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17275">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.State"&gt;"State"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="subsystem-nqn"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_subsystem_nqn"
                getter="get_subsystem_nqn"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17297">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.SubsystemNQN"&gt;"SubsystemNQN"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="unallocated-capacity"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_unallocated_capacity"
                getter="get_unallocated_capacity"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17330">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Controller.UnallocatedCapacity"&gt;"UnallocatedCapacity"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <glib:signal name="handle-sanitize-start" when="last" version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17248">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SanitizeStart"&gt;SanitizeStart()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_nvme_controller_complete_sanitize_start() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17259">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17251">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17252">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17253">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-get-attributes"
                   when="last"
                   version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17172">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartGetAttributes"&gt;SmartGetAttributes()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_nvme_controller_complete_smart_get_attributes() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17182">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17175">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17176">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-selftest-abort"
                   when="last"
                   version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17223">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestAbort"&gt;SmartSelftestAbort()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_nvme_controller_complete_smart_selftest_abort() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17233">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17226">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17227">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-selftest-start"
                   when="last"
                   version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17197">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartSelftestStart"&gt;SmartSelftestStart()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_nvme_controller_complete_smart_selftest_start() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17208">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17200">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17201">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17202">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-smart-update" when="last" version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17147">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Controller.SmartUpdate"&gt;SmartUpdate()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_nvme_controller_complete_smart_update() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17157">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17150">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17151">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="NVMeControllerIface"
            c:type="UDisksNVMeControllerIface"
            glib:is-gtype-struct-for="NVMeController">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="17114">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Controller.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Controller&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="1732"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17116">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_sanitize_start">
        <callback name="handle_sanitize_start">
          <source-position filename="udisks-generated.h" line="1677"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_action" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_get_attributes">
        <callback name="handle_smart_get_attributes">
          <source-position filename="udisks-generated.h" line="1683"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_selftest_abort">
        <callback name="handle_smart_selftest_abort">
          <source-position filename="udisks-generated.h" line="1688"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_selftest_start">
        <callback name="handle_smart_selftest_start">
          <source-position filename="udisks-generated.h" line="1693"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_smart_update">
        <callback name="handle_smart_update">
          <source-position filename="udisks-generated.h" line="1699"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_controller_id">
        <callback name="get_controller_id">
          <source-position filename="udisks-generated.h" line="1704"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17498">The property value.</doc>
            <type name="guint16" c:type="guint16"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="17492">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_fguid">
        <callback name="get_fguid">
          <source-position filename="udisks-generated.h" line="1706"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17596">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="17588">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_nvme_revision">
        <callback name="get_nvme_revision">
          <source-position filename="udisks-generated.h" line="1708"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17655">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="17647">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sanitize_percent_remaining">
        <callback name="get_sanitize_percent_remaining">
          <source-position filename="udisks-generated.h" line="1710"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18074">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="18068">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_sanitize_status">
        <callback name="get_sanitize_status">
          <source-position filename="udisks-generated.h" line="1712"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="18017">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="18009">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_critical_warning">
        <callback name="get_smart_critical_warning">
          <source-position filename="udisks-generated.h" line="1714"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17788">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="17780">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_power_on_hours">
        <callback name="get_smart_power_on_hours">
          <source-position filename="udisks-generated.h" line="1716"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17845">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="17839">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_selftest_percent_remaining">
        <callback name="get_smart_selftest_percent_remaining">
          <source-position filename="udisks-generated.h" line="1718"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17978">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="17972">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_selftest_status">
        <callback name="get_smart_selftest_status">
          <source-position filename="udisks-generated.h" line="1720"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17921">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="17913">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_temperature">
        <callback name="get_smart_temperature">
          <source-position filename="udisks-generated.h" line="1722"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17882">The property value.</doc>
            <type name="guint16" c:type="guint16"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="17876">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_smart_updated">
        <callback name="get_smart_updated">
          <source-position filename="udisks-generated.h" line="1724"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17749">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="17743">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_state">
        <callback name="get_state">
          <source-position filename="udisks-generated.h" line="1726"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17441">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="17433">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_subsystem_nqn">
        <callback name="get_subsystem_nqn">
          <source-position filename="udisks-generated.h" line="1728"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17537">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="17529">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_unallocated_capacity">
        <callback name="get_unallocated_capacity">
          <source-position filename="udisks-generated.h" line="1730"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="17712">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="17706">A #UDisksNVMeController.</doc>
              <type name="NVMeController" c:type="UDisksNVMeController*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="NVMeControllerProxy"
           c:symbol-prefix="nvme_controller_proxy"
           c:type="UDisksNVMeControllerProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksNVMeControllerProxy"
           glib:get-type="udisks_nvme_controller_proxy_get_type"
           glib:type-struct="NVMeControllerProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="18746">The #UDisksNVMeControllerProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="1941"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="NVMeController"/>
      <constructor name="new_finish"
                   c:identifier="udisks_nvme_controller_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19218">Finishes an operation started with udisks_nvme_controller_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="1957"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="19225">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NVMeControllerProxy" c:type="UDisksNVMeController*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19220">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_nvme_controller_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_nvme_controller_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19308">Finishes an operation started with udisks_nvme_controller_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="1976"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="19315">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NVMeControllerProxy" c:type="UDisksNVMeController*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19310">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_nvme_controller_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_nvme_controller_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19333">Like udisks_nvme_controller_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_nvme_controller_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1979"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="19348">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NVMeControllerProxy" c:type="UDisksNVMeController*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19335">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19336">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19337">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19338">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19339">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_nvme_controller_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19243">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Controller.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Controller&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_nvme_controller_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1960"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="19258">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NVMeControllerProxy" c:type="UDisksNVMeController*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19245">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19246">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19247">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19248">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19249">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_nvme_controller_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19188">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Controller.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Controller&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_nvme_controller_proxy_new_finish() to get the result of the operation.

See udisks_nvme_controller_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1949"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19190">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19191">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19192">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19193">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19194">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19195">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19196">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_nvme_controller_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19278">Like udisks_nvme_controller_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_nvme_controller_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_nvme_controller_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="1968"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19280">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19281">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19282">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19283">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19284">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19285">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="19286">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="NVMeControllerProxyPrivate"
              c:type="UDisksNVMeControllerProxyPrivate*"/>
      </field>
    </class>
    <record name="NVMeControllerProxyClass"
            c:type="UDisksNVMeControllerProxyClass"
            glib:is-gtype-struct-for="NVMeControllerProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="18752">Class structure for #UDisksNVMeControllerProxy.</doc>
      <source-position filename="udisks-generated.h" line="1941"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="18754">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="NVMeControllerProxyPrivate"
            c:type="UDisksNVMeControllerProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="1929"/>
    </record>
    <class name="NVMeControllerSkeleton"
           c:symbol-prefix="nvme_controller_skeleton"
           c:type="UDisksNVMeControllerSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksNVMeControllerSkeleton"
           glib:get-type="udisks_nvme_controller_skeleton_get_type"
           glib:type-struct="NVMeControllerSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="19370">The #UDisksNVMeControllerSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="2011"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="NVMeController"/>
      <constructor name="new"
                   c:identifier="udisks_nvme_controller_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19992">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Controller.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Controller&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="2019"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="19997">The skeleton object.</doc>
          <type name="NVMeControllerSkeleton" c:type="UDisksNVMeController*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="NVMeControllerSkeletonPrivate"
              c:type="UDisksNVMeControllerSkeletonPrivate*"/>
      </field>
    </class>
    <record name="NVMeControllerSkeletonClass"
            c:type="UDisksNVMeControllerSkeletonClass"
            glib:is-gtype-struct-for="NVMeControllerSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="19376">Class structure for #UDisksNVMeControllerSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="2011"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="19378">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="NVMeControllerSkeletonPrivate"
            c:type="UDisksNVMeControllerSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="1999"/>
    </record>
    <interface name="NVMeFabrics"
               c:symbol-prefix="nvme_fabrics"
               c:type="UDisksNVMeFabrics"
               glib:type-name="UDisksNVMeFabrics"
               glib:get-type="udisks_nvme_fabrics_get_type"
               glib:type-struct="NVMeFabricsIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="22483">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Fabrics.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Fabrics&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="2281"/>
      <function name="interface_info"
                c:identifier="udisks_nvme_fabrics_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22435">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Fabrics.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Fabrics&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="2289"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22440">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_nvme_fabrics_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22448">Overrides all #GObject properties in the #UDisksNVMeFabrics interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="2290"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22456">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22450">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22451">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_host_id"
                      invoker="get_host_id"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22639">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.HostID"&gt;"HostID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_fabrics_dup_host_id() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2273"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22649">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22641">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_host_nqn"
                      invoker="get_host_nqn"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22580">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.HostNQN"&gt;"HostNQN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_fabrics_dup_host_nqn() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2275"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22590">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22582">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_transport"
                      invoker="get_transport"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22698">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.Transport"&gt;"Transport"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_fabrics_dup_transport() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2277"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22708">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22700">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_transport_address"
                      invoker="get_transport_address"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22757">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.TransportAddress"&gt;"TransportAddress"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_fabrics_dup_transport_address() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2279"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22767">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22759">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_disconnect">
        <source-position filename="udisks-generated.h" line="2268"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_disconnect"
              c:identifier="udisks_nvme_fabrics_call_disconnect"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22816">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Fabrics.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_nvme_fabrics_call_disconnect_finish() to get the result of the operation.

See udisks_nvme_fabrics_call_disconnect_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2301"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22818">A #UDisksNVMeFabricsProxy.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22819">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22820">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22821">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22822">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_finish"
              c:identifier="udisks_nvme_fabrics_call_disconnect_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22851">Finishes an operation started with udisks_nvme_fabrics_call_disconnect().</doc>
        <source-position filename="udisks-generated.h" line="2308"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22859">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22853">A #UDisksNVMeFabricsProxy.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22854">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_nvme_fabrics_call_disconnect().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_sync"
              c:identifier="udisks_nvme_fabrics_call_disconnect_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22880">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Fabrics.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_nvme_fabrics_call_disconnect() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2313"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22891">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22882">A #UDisksNVMeFabricsProxy.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22883">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22884">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_disconnect"
              c:identifier="udisks_nvme_fabrics_complete_disconnect"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22920">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Fabrics.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2294"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22922">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22923">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_host_id"
              c:identifier="udisks_nvme_fabrics_dup_host_id"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22661">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.HostID"&gt;"HostID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2327"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22669">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22663">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_host_nqn"
              c:identifier="udisks_nvme_fabrics_dup_host_nqn"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22602">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.HostNQN"&gt;"HostNQN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2323"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22610">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22604">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_transport"
              c:identifier="udisks_nvme_fabrics_dup_transport"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22720">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.Transport"&gt;"Transport"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2331"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22728">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22722">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_transport_address"
              c:identifier="udisks_nvme_fabrics_dup_transport_address"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22779">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.TransportAddress"&gt;"TransportAddress"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2335"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22787">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22781">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_host_id"
              c:identifier="udisks_nvme_fabrics_get_host_id"
              glib:get-property="host-id"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22639">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.HostID"&gt;"HostID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_fabrics_dup_host_id() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2326"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22649">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22641">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_host_nqn"
              c:identifier="udisks_nvme_fabrics_get_host_nqn"
              glib:get-property="host-nqn"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22580">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.HostNQN"&gt;"HostNQN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_fabrics_dup_host_nqn() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2322"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22590">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22582">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transport"
              c:identifier="udisks_nvme_fabrics_get_transport"
              glib:get-property="transport"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22698">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.Transport"&gt;"Transport"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_fabrics_dup_transport() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2330"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22708">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22700">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transport_address"
              c:identifier="udisks_nvme_fabrics_get_transport_address"
              glib:get-property="transport-address"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22757">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.TransportAddress"&gt;"TransportAddress"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_fabrics_dup_transport_address() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2334"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22767">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22759">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_host_id"
              c:identifier="udisks_nvme_fabrics_set_host_id"
              glib:set-property="host-id"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22681">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.HostID"&gt;"HostID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2328"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22683">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22684">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_host_nqn"
              c:identifier="udisks_nvme_fabrics_set_host_nqn"
              glib:set-property="host-nqn"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22622">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.HostNQN"&gt;"HostNQN"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2324"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22624">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22625">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transport"
              c:identifier="udisks_nvme_fabrics_set_transport"
              glib:set-property="transport"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22740">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.Transport"&gt;"Transport"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2332"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22742">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22743">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transport_address"
              c:identifier="udisks_nvme_fabrics_set_transport_address"
              glib:set-property="transport-address"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22799">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.TransportAddress"&gt;"TransportAddress"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2336"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22801">A #UDisksNVMeFabrics.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22802">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="host-id"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_host_id"
                getter="get_host_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22545">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.HostID"&gt;"HostID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="host-nqn"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_host_nqn"
                getter="get_host_nqn"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22534">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.HostNQN"&gt;"HostNQN"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="transport"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_transport"
                getter="get_transport"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22556">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.Transport"&gt;"Transport"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="transport-address"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_transport_address"
                getter="get_transport_address"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22567">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Fabrics.TransportAddress"&gt;"TransportAddress"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-disconnect" when="last" version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22508">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Fabrics.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_nvme_fabrics_complete_disconnect() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22518">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22511">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22512">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="NVMeFabricsIface"
            c:type="UDisksNVMeFabricsIface"
            glib:is-gtype-struct-for="NVMeFabrics">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="22489">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Fabrics.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Fabrics&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="2281"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22491">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_disconnect">
        <callback name="handle_disconnect">
          <source-position filename="udisks-generated.h" line="2268"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_host_id">
        <callback name="get_host_id">
          <source-position filename="udisks-generated.h" line="2273"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22649">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="22641">A #UDisksNVMeFabrics.</doc>
              <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_host_nqn">
        <callback name="get_host_nqn">
          <source-position filename="udisks-generated.h" line="2275"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22590">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="22582">A #UDisksNVMeFabrics.</doc>
              <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_transport">
        <callback name="get_transport">
          <source-position filename="udisks-generated.h" line="2277"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22708">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="22700">A #UDisksNVMeFabrics.</doc>
              <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_transport_address">
        <callback name="get_transport_address">
          <source-position filename="udisks-generated.h" line="2279"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="22767">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="22759">A #UDisksNVMeFabrics.</doc>
              <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="NVMeFabricsProxy"
           c:symbol-prefix="nvme_fabrics_proxy"
           c:type="UDisksNVMeFabricsProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksNVMeFabricsProxy"
           glib:get-type="udisks_nvme_fabrics_proxy_get_type"
           glib:type-struct="NVMeFabricsProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="22942">The #UDisksNVMeFabricsProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="2362"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="NVMeFabrics"/>
      <constructor name="new_finish"
                   c:identifier="udisks_nvme_fabrics_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23250">Finishes an operation started with udisks_nvme_fabrics_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="2378"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23257">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NVMeFabricsProxy" c:type="UDisksNVMeFabrics*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23252">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_nvme_fabrics_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_nvme_fabrics_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23340">Finishes an operation started with udisks_nvme_fabrics_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="2397"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23347">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NVMeFabricsProxy" c:type="UDisksNVMeFabrics*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23342">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_nvme_fabrics_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_nvme_fabrics_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23365">Like udisks_nvme_fabrics_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_nvme_fabrics_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2400"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23380">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NVMeFabricsProxy" c:type="UDisksNVMeFabrics*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23367">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23368">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23369">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23370">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23371">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_nvme_fabrics_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23275">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Fabrics.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Fabrics&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_nvme_fabrics_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2381"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23290">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NVMeFabricsProxy" c:type="UDisksNVMeFabrics*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23277">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23278">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23279">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23280">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23281">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_nvme_fabrics_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23220">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Fabrics.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Fabrics&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_nvme_fabrics_proxy_new_finish() to get the result of the operation.

See udisks_nvme_fabrics_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2370"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23222">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23223">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23224">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23225">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23226">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23227">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23228">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_nvme_fabrics_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23310">Like udisks_nvme_fabrics_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_nvme_fabrics_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_nvme_fabrics_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2389"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23312">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23313">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23314">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23315">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23316">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23317">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="23318">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="NVMeFabricsProxyPrivate"
              c:type="UDisksNVMeFabricsProxyPrivate*"/>
      </field>
    </class>
    <record name="NVMeFabricsProxyClass"
            c:type="UDisksNVMeFabricsProxyClass"
            glib:is-gtype-struct-for="NVMeFabricsProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="22948">Class structure for #UDisksNVMeFabricsProxy.</doc>
      <source-position filename="udisks-generated.h" line="2362"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22950">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="NVMeFabricsProxyPrivate"
            c:type="UDisksNVMeFabricsProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="2350"/>
    </record>
    <class name="NVMeFabricsSkeleton"
           c:symbol-prefix="nvme_fabrics_skeleton"
           c:type="UDisksNVMeFabricsSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksNVMeFabricsSkeleton"
           glib:get-type="udisks_nvme_fabrics_skeleton_get_type"
           glib:type-struct="NVMeFabricsSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="23402">The #UDisksNVMeFabricsSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="2432"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="NVMeFabrics"/>
      <constructor name="new" c:identifier="udisks_nvme_fabrics_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23894">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Fabrics.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Fabrics&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="2440"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="23899">The skeleton object.</doc>
          <type name="NVMeFabricsSkeleton" c:type="UDisksNVMeFabrics*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="NVMeFabricsSkeletonPrivate"
              c:type="UDisksNVMeFabricsSkeletonPrivate*"/>
      </field>
    </class>
    <record name="NVMeFabricsSkeletonClass"
            c:type="UDisksNVMeFabricsSkeletonClass"
            glib:is-gtype-struct-for="NVMeFabricsSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="23408">Class structure for #UDisksNVMeFabricsSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="2432"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="23410">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="NVMeFabricsSkeletonPrivate"
            c:type="UDisksNVMeFabricsSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="2420"/>
    </record>
    <interface name="NVMeNamespace"
               c:symbol-prefix="nvme_namespace"
               c:type="UDisksNVMeNamespace"
               glib:type-name="UDisksNVMeNamespace"
               glib:get-type="udisks_nvme_namespace_get_type"
               glib:type-struct="NVMeNamespaceIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="20295">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Namespace.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Namespace&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="2066"/>
      <function name="interface_info"
                c:identifier="udisks_nvme_namespace_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20240">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Namespace.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Namespace&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="2074"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20245">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_nvme_namespace_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20253">Overrides all #GObject properties in the #UDisksNVMeNamespace interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="2075"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20261">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20255">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20256">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_eui64"
                      invoker="get_eui64"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20572">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.EUI64"&gt;"EUI64"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_namespace_dup_eui64() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2044"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20582">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20574">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_format_percent_remaining"
                      invoker="get_format_percent_remaining"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20978">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.FormatPercentRemaining"&gt;"FormatPercentRemaining"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2046"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20986">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20980">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_formatted_lbasize"
                      invoker="get_formatted_lbasize"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20808">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.FormattedLBASize"&gt;"FormattedLBASize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_namespace_dup_formatted_lbasize() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2048"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20818">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20810">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_lbaformats"
                      invoker="get_lbaformats"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20749">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.LBAFormats"&gt;"LBAFormats"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_namespace_dup_lbaformats() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2050"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20759">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20751">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_namespace_capacity"
                      invoker="get_namespace_capacity"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20904">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NamespaceCapacity"&gt;"NamespaceCapacity"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2052"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20912">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20906">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_namespace_size"
                      invoker="get_namespace_size"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20867">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NamespaceSize"&gt;"NamespaceSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2054"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20875">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20869">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_namespace_utilization"
                      invoker="get_namespace_utilization"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20941">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NamespaceUtilization"&gt;"NamespaceUtilization"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2056"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20949">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20943">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_nguid"
                      invoker="get_nguid"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20513">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NGUID"&gt;"NGUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_namespace_dup_nguid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2058"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20523">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20515">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_nsid"
                      invoker="get_nsid"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20476">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NSID"&gt;"NSID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2060"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20484">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20478">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_uuid"
                      invoker="get_uuid"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20631">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_namespace_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2062"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20641">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20633">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_wwn"
                      invoker="get_wwn"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20690">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.WWN"&gt;"WWN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_namespace_dup_wwn() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2064"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20700">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20692">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_format_namespace">
        <source-position filename="udisks-generated.h" line="2039"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_format_namespace"
              c:identifier="udisks_nvme_namespace_call_format_namespace"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21015">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Namespace.FormatNamespace"&gt;FormatNamespace()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_nvme_namespace_call_format_namespace_finish() to get the result of the operation.

See udisks_nvme_namespace_call_format_namespace_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2086"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21017">A #UDisksNVMeNamespaceProxy.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21018">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21019">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21020">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21021">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_format_namespace_finish"
              c:identifier="udisks_nvme_namespace_call_format_namespace_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21050">Finishes an operation started with udisks_nvme_namespace_call_format_namespace().</doc>
        <source-position filename="udisks-generated.h" line="2093"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21058">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21052">A #UDisksNVMeNamespaceProxy.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21053">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_nvme_namespace_call_format_namespace().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_format_namespace_sync"
              c:identifier="udisks_nvme_namespace_call_format_namespace_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21079">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Namespace.FormatNamespace"&gt;FormatNamespace()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_nvme_namespace_call_format_namespace() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="2098"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21090">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21081">A #UDisksNVMeNamespaceProxy.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21082">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21083">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_format_namespace"
              c:identifier="udisks_nvme_namespace_complete_format_namespace"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21119">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Namespace.FormatNamespace"&gt;FormatNamespace()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="2079"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21121">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21122">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_eui64"
              c:identifier="udisks_nvme_namespace_dup_eui64"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20594">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.EUI64"&gt;"EUI64"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2115"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20602">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20596">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_formatted_lbasize"
              c:identifier="udisks_nvme_namespace_dup_formatted_lbasize"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20830">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.FormattedLBASize"&gt;"FormattedLBASize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2131"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20838">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20832">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_lbaformats"
              c:identifier="udisks_nvme_namespace_dup_lbaformats"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20771">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.LBAFormats"&gt;"LBAFormats"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2127"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20779">The property value or %NULL if the property is not set. The returned value should be freed with g_variant_unref().</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20773">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_nguid"
              c:identifier="udisks_nvme_namespace_dup_nguid"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20535">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NGUID"&gt;"NGUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2111"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20543">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20537">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_uuid"
              c:identifier="udisks_nvme_namespace_dup_uuid"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20653">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2119"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20661">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20655">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_wwn"
              c:identifier="udisks_nvme_namespace_dup_wwn"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20712">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.WWN"&gt;"WWN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2123"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20720">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20714">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_eui64"
              c:identifier="udisks_nvme_namespace_get_eui64"
              glib:get-property="eui64"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20572">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.EUI64"&gt;"EUI64"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_namespace_dup_eui64() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2114"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20582">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20574">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_format_percent_remaining"
              c:identifier="udisks_nvme_namespace_get_format_percent_remaining"
              glib:get-property="format-percent-remaining"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20978">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.FormatPercentRemaining"&gt;"FormatPercentRemaining"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2143"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20986">The property value.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20980">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_formatted_lbasize"
              c:identifier="udisks_nvme_namespace_get_formatted_lbasize"
              glib:get-property="formatted-lbasize"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20808">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.FormattedLBASize"&gt;"FormattedLBASize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_namespace_dup_formatted_lbasize() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2130"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20818">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20810">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lbaformats"
              c:identifier="udisks_nvme_namespace_get_lbaformats"
              glib:get-property="lbaformats"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20749">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.LBAFormats"&gt;"LBAFormats"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_namespace_dup_lbaformats() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2126"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20759">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20751">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_namespace_capacity"
              c:identifier="udisks_nvme_namespace_get_namespace_capacity"
              glib:get-property="namespace-capacity"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20904">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NamespaceCapacity"&gt;"NamespaceCapacity"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2137"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20912">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20906">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_namespace_size"
              c:identifier="udisks_nvme_namespace_get_namespace_size"
              glib:get-property="namespace-size"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20867">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NamespaceSize"&gt;"NamespaceSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2134"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20875">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20869">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_namespace_utilization"
              c:identifier="udisks_nvme_namespace_get_namespace_utilization"
              glib:get-property="namespace-utilization"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20941">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NamespaceUtilization"&gt;"NamespaceUtilization"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2140"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20949">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20943">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nguid"
              c:identifier="udisks_nvme_namespace_get_nguid"
              glib:get-property="nguid"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20513">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NGUID"&gt;"NGUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_namespace_dup_nguid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2110"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20523">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20515">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nsid"
              c:identifier="udisks_nvme_namespace_get_nsid"
              glib:get-property="nsid"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20476">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NSID"&gt;"NSID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="2107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20484">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20478">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid"
              c:identifier="udisks_nvme_namespace_get_uuid"
              glib:get-property="uuid"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20631">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_namespace_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2118"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20641">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20633">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wwn"
              c:identifier="udisks_nvme_namespace_get_wwn"
              glib:get-property="wwn"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20690">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.WWN"&gt;"WWN"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_nvme_namespace_dup_wwn() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="2122"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20700">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20692">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_eui64"
              c:identifier="udisks_nvme_namespace_set_eui64"
              glib:set-property="eui64"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20614">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.EUI64"&gt;"EUI64"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20616">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20617">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_format_percent_remaining"
              c:identifier="udisks_nvme_namespace_set_format_percent_remaining"
              glib:set-property="format-percent-remaining"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20998">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.FormatPercentRemaining"&gt;"FormatPercentRemaining"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2144"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21000">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21001">The value to set.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_formatted_lbasize"
              c:identifier="udisks_nvme_namespace_set_formatted_lbasize"
              glib:set-property="formatted-lbasize"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20850">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.FormattedLBASize"&gt;"FormattedLBASize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2132"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20852">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20853">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lbaformats"
              c:identifier="udisks_nvme_namespace_set_lbaformats"
              glib:set-property="lbaformats"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20791">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.LBAFormats"&gt;"LBAFormats"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20793">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20794">The value to set.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_namespace_capacity"
              c:identifier="udisks_nvme_namespace_set_namespace_capacity"
              glib:set-property="namespace-capacity"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20924">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NamespaceCapacity"&gt;"NamespaceCapacity"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2138"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20926">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20927">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_namespace_size"
              c:identifier="udisks_nvme_namespace_set_namespace_size"
              glib:set-property="namespace-size"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20887">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NamespaceSize"&gt;"NamespaceSize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2135"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20889">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20890">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_namespace_utilization"
              c:identifier="udisks_nvme_namespace_set_namespace_utilization"
              glib:set-property="namespace-utilization"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20961">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NamespaceUtilization"&gt;"NamespaceUtilization"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2141"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20963">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20964">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_nguid"
              c:identifier="udisks_nvme_namespace_set_nguid"
              glib:set-property="nguid"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20555">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NGUID"&gt;"NGUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20557">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20558">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_nsid"
              c:identifier="udisks_nvme_namespace_set_nsid"
              glib:set-property="nsid"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20496">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NSID"&gt;"NSID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20498">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20499">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uuid"
              c:identifier="udisks_nvme_namespace_set_uuid"
              glib:set-property="uuid"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20673">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20675">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20676">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_wwn"
              c:identifier="udisks_nvme_namespace_set_wwn"
              glib:set-property="wwn"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20732">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.WWN"&gt;"WWN"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="2124"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20734">A #UDisksNVMeNamespace.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20735">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="eui64"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_eui64"
                getter="get_eui64"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20375">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.EUI64"&gt;"EUI64"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="format-percent-remaining"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_format_percent_remaining"
                getter="get_format_percent_remaining"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20463">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.FormatPercentRemaining"&gt;"FormatPercentRemaining"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="formatted-lbasize"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_formatted_lbasize"
                getter="get_formatted_lbasize">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20419">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.FormattedLBASize"&gt;"FormattedLBASize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="lbaformats"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_lbaformats"
                getter="get_lbaformats">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20408">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.LBAFormats"&gt;"LBAFormats"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="namespace-capacity"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_namespace_capacity"
                getter="get_namespace_capacity"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20441">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NamespaceCapacity"&gt;"NamespaceCapacity"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="namespace-size"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_namespace_size"
                getter="get_namespace_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20430">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NamespaceSize"&gt;"NamespaceSize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="namespace-utilization"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_namespace_utilization"
                getter="get_namespace_utilization"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20452">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NamespaceUtilization"&gt;"NamespaceUtilization"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="nguid"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_nguid"
                getter="get_nguid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20364">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NGUID"&gt;"NGUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="nsid"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_nsid"
                getter="get_nsid"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20353">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.NSID"&gt;"NSID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="uuid"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_uuid"
                getter="get_uuid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20386">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.UUID"&gt;"UUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="wwn"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_wwn"
                getter="get_wwn"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20397">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-NVMe-Namespace.WWN"&gt;"WWN"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-format-namespace" when="last" version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20327">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-NVMe-Namespace.FormatNamespace"&gt;FormatNamespace()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_nvme_namespace_complete_format_namespace() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20337">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20330">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20331">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="NVMeNamespaceIface"
            c:type="UDisksNVMeNamespaceIface"
            glib:is-gtype-struct-for="NVMeNamespace">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="20301">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Namespace.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Namespace&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="2066"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20303">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_format_namespace">
        <callback name="handle_format_namespace">
          <source-position filename="udisks-generated.h" line="2039"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_eui64">
        <callback name="get_eui64">
          <source-position filename="udisks-generated.h" line="2044"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20582">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="20574">A #UDisksNVMeNamespace.</doc>
              <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_format_percent_remaining">
        <callback name="get_format_percent_remaining">
          <source-position filename="udisks-generated.h" line="2046"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20986">The property value.</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="20980">A #UDisksNVMeNamespace.</doc>
              <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_formatted_lbasize">
        <callback name="get_formatted_lbasize">
          <source-position filename="udisks-generated.h" line="2048"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20818">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="20810">A #UDisksNVMeNamespace.</doc>
              <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_lbaformats">
        <callback name="get_lbaformats">
          <source-position filename="udisks-generated.h" line="2050"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20759">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="20751">A #UDisksNVMeNamespace.</doc>
              <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_namespace_capacity">
        <callback name="get_namespace_capacity">
          <source-position filename="udisks-generated.h" line="2052"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20912">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="20906">A #UDisksNVMeNamespace.</doc>
              <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_namespace_size">
        <callback name="get_namespace_size">
          <source-position filename="udisks-generated.h" line="2054"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20875">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="20869">A #UDisksNVMeNamespace.</doc>
              <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_namespace_utilization">
        <callback name="get_namespace_utilization">
          <source-position filename="udisks-generated.h" line="2056"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20949">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="20943">A #UDisksNVMeNamespace.</doc>
              <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_nguid">
        <callback name="get_nguid">
          <source-position filename="udisks-generated.h" line="2058"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20523">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="20515">A #UDisksNVMeNamespace.</doc>
              <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_nsid">
        <callback name="get_nsid">
          <source-position filename="udisks-generated.h" line="2060"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20484">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="20478">A #UDisksNVMeNamespace.</doc>
              <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_uuid">
        <callback name="get_uuid">
          <source-position filename="udisks-generated.h" line="2062"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20641">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="20633">A #UDisksNVMeNamespace.</doc>
              <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_wwn">
        <callback name="get_wwn">
          <source-position filename="udisks-generated.h" line="2064"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="20700">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="20692">A #UDisksNVMeNamespace.</doc>
              <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="NVMeNamespaceProxy"
           c:symbol-prefix="nvme_namespace_proxy"
           c:type="UDisksNVMeNamespaceProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksNVMeNamespaceProxy"
           glib:get-type="udisks_nvme_namespace_proxy_get_type"
           glib:type-struct="NVMeNamespaceProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="21141">The #UDisksNVMeNamespaceProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="2170"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="NVMeNamespace"/>
      <constructor name="new_finish"
                   c:identifier="udisks_nvme_namespace_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21557">Finishes an operation started with udisks_nvme_namespace_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="2186"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21564">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NVMeNamespaceProxy" c:type="UDisksNVMeNamespace*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21559">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_nvme_namespace_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_nvme_namespace_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21647">Finishes an operation started with udisks_nvme_namespace_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="2205"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21654">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NVMeNamespaceProxy" c:type="UDisksNVMeNamespace*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21649">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_nvme_namespace_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_nvme_namespace_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21672">Like udisks_nvme_namespace_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_nvme_namespace_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2208"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21687">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NVMeNamespaceProxy" c:type="UDisksNVMeNamespace*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21674">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21675">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21676">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21677">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21678">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_nvme_namespace_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21582">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Namespace.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Namespace&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_nvme_namespace_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2189"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="21597">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="NVMeNamespaceProxy" c:type="UDisksNVMeNamespace*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21584">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21585">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21586">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21587">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21588">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_nvme_namespace_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21527">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Namespace.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Namespace&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_nvme_namespace_proxy_new_finish() to get the result of the operation.

See udisks_nvme_namespace_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2178"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21529">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21530">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21531">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21532">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21533">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21534">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21535">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_nvme_namespace_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21617">Like udisks_nvme_namespace_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_nvme_namespace_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_nvme_namespace_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="2197"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21619">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21620">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21621">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21622">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21623">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21624">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="21625">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="NVMeNamespaceProxyPrivate"
              c:type="UDisksNVMeNamespaceProxyPrivate*"/>
      </field>
    </class>
    <record name="NVMeNamespaceProxyClass"
            c:type="UDisksNVMeNamespaceProxyClass"
            glib:is-gtype-struct-for="NVMeNamespaceProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="21147">Class structure for #UDisksNVMeNamespaceProxy.</doc>
      <source-position filename="udisks-generated.h" line="2170"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21149">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="NVMeNamespaceProxyPrivate"
            c:type="UDisksNVMeNamespaceProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="2158"/>
    </record>
    <class name="NVMeNamespaceSkeleton"
           c:symbol-prefix="nvme_namespace_skeleton"
           c:type="UDisksNVMeNamespaceSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksNVMeNamespaceSkeleton"
           glib:get-type="udisks_nvme_namespace_skeleton_get_type"
           glib:type-struct="NVMeNamespaceSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="21709">The #UDisksNVMeNamespaceSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="2240"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="NVMeNamespace"/>
      <constructor name="new"
                   c:identifier="udisks_nvme_namespace_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22292">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Namespace.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Namespace&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="2248"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22297">The skeleton object.</doc>
          <type name="NVMeNamespaceSkeleton" c:type="UDisksNVMeNamespace*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="NVMeNamespaceSkeletonPrivate"
              c:type="UDisksNVMeNamespaceSkeletonPrivate*"/>
      </field>
    </class>
    <record name="NVMeNamespaceSkeletonClass"
            c:type="UDisksNVMeNamespaceSkeletonClass"
            glib:is-gtype-struct-for="NVMeNamespaceSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="21715">Class structure for #UDisksNVMeNamespaceSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="2240"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="21717">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="NVMeNamespaceSkeletonPrivate"
            c:type="UDisksNVMeNamespaceSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="2228"/>
    </record>
    <function-macro name="OBJECT"
                    c:identifier="UDISKS_OBJECT"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9102"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_GET_IFACE"
                    c:identifier="UDISKS_OBJECT_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9104"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_INFO"
                    c:identifier="UDISKS_OBJECT_INFO"
                    introspectable="0">
      <source-position filename="udisksobjectinfo.h" line="34"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_MANAGER_CLIENT"
                    c:identifier="UDISKS_OBJECT_MANAGER_CLIENT"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9271"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_MANAGER_CLIENT_CLASS"
                    c:identifier="UDISKS_OBJECT_MANAGER_CLIENT_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9272"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_MANAGER_CLIENT_GET_CLASS"
                    c:identifier="UDISKS_OBJECT_MANAGER_CLIENT_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9273"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_PROXY"
                    c:identifier="UDISKS_OBJECT_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9179"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_PROXY_CLASS"
                    c:identifier="UDISKS_OBJECT_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9180"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_PROXY_GET_CLASS"
                    c:identifier="UDISKS_OBJECT_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9181"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_SKELETON"
                    c:identifier="UDISKS_OBJECT_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9210"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_SKELETON_CLASS"
                    c:identifier="UDISKS_OBJECT_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9211"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBJECT_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_OBJECT_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9212"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Object"
               c:symbol-prefix="object"
               c:type="UDisksObject"
               glib:type-name="UDisksObject"
               glib:get-type="udisks_object_get_type"
               glib:type-struct="ObjectIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="77728">The #UDisksObject type is a specialized container of interfaces.</doc>
      <source-position filename="udisks-generated.h" line="9113"/>
      <prerequisite name="Gio.DBusObject"/>
      <method name="get_block"
              c:identifier="udisks_object_get_block"
              glib:get-property="block">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78142">Gets the #UDisksBlock instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9128"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78148">A #UDisksBlock that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Block" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78144">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_block_lvm2"
              c:identifier="udisks_object_get_block_lvm2"
              glib:get-property="block-lvm2"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78426">Gets the #UDisksBlockLVM2 instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9144"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78432">A #UDisksBlockLVM2 that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="BlockLVM2" c:type="UDisksBlockLVM2*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78428">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_drive"
              c:identifier="udisks_object_get_drive"
              glib:get-property="drive">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78057">Gets the #UDisksDrive instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9123"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78063">A #UDisksDrive that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Drive" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78059">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_drive_ata"
              c:identifier="udisks_object_get_drive_ata"
              glib:get-property="drive-ata">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78074">Gets the #UDisksDriveAta instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9124"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78080">A #UDisksDriveAta that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="DriveAta" c:type="UDisksDriveAta*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78076">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_drive_lsm"
              c:identifier="udisks_object_get_drive_lsm"
              glib:get-property="drive-lsm"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78371">Gets the #UDisksDriveLSM instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LSM.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LSM&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9141"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78377">A #UDisksDriveLSM that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78373">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_drive_lsm_local"
              c:identifier="udisks_object_get_drive_lsm_local"
              glib:get-property="drive-lsm-local">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78390">Gets the #UDisksDriveLsmLocal instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LsmLocal.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LsmLocal&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9142"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78396">A #UDisksDriveLsmLocal that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78392">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_encrypted"
              c:identifier="udisks_object_get_encrypted"
              glib:get-property="encrypted">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78227">Gets the #UDisksEncrypted instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9133"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78233">A #UDisksEncrypted that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Encrypted" c:type="UDisksEncrypted*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78229">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_filesystem"
              c:identifier="udisks_object_get_filesystem"
              glib:get-property="filesystem">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78193">Gets the #UDisksFilesystem instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9131"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78199">A #UDisksFilesystem that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Filesystem" c:type="UDisksFilesystem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78195">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_filesystem_btrfs"
              c:identifier="udisks_object_get_filesystem_btrfs"
              glib:get-property="filesystem-btrfs"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78316">Gets the #UDisksFilesystemBTRFS instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9138"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78322">A #UDisksFilesystemBTRFS that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78318">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_iscsi_session"
              c:identifier="udisks_object_get_iscsi_session"
              glib:get-property="iscsi-session">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78354">Gets the #UDisksISCSISession instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-ISCSI-Session.top_of_page"&gt;org.freedesktop.UDisks2.ISCSI.Session&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9140"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78360">A #UDisksISCSISession that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="ISCSISession" c:type="UDisksISCSISession*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78356">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_job"
              c:identifier="udisks_object_get_job"
              glib:get-property="job">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78280">Gets the #UDisksJob instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9136"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78286">A #UDisksJob that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Job" c:type="UDisksJob*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78282">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_logical_volume"
              c:identifier="udisks_object_get_logical_volume"
              glib:get-property="logical-volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78483">Gets the #UDisksLogicalVolume instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9147"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78489">A #UDisksLogicalVolume that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78485">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_loop"
              c:identifier="udisks_object_get_loop"
              glib:get-property="loop">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78244">Gets the #UDisksLoop instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9134"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78250">A #UDisksLoop that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Loop" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78246">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manager"
              c:identifier="udisks_object_get_manager"
              glib:get-property="manager">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78023">Gets the #UDisksManager instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9121"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78029">A #UDisksManager that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Manager" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78025">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manager_btrfs"
              c:identifier="udisks_object_get_manager_btrfs"
              glib:get-property="manager-btrfs"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78297">Gets the #UDisksManagerBTRFS instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9137"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78303">A #UDisksManagerBTRFS that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="ManagerBTRFS" c:type="UDisksManagerBTRFS*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78299">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manager_iscsi_initiator"
              c:identifier="udisks_object_get_manager_iscsi_initiator"
              glib:get-property="manager-iscsi-initiator"
              version="2.0.1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78335">Gets the #UDisksManagerISCSIInitiator instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.top_of_page"&gt;org.freedesktop.UDisks2.Manager.ISCSI.Initiator&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9139"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78341">A #UDisksManagerISCSIInitiator that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="ManagerISCSIInitiator"
                c:type="UDisksManagerISCSIInitiator*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78337">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manager_lvm2"
              c:identifier="udisks_object_get_manager_lvm2"
              glib:get-property="manager-lvm2"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78407">Gets the #UDisksManagerLVM2 instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9143"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78413">A #UDisksManagerLVM2 that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="ManagerLVM2" c:type="UDisksManagerLVM2*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78409">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manager_nvme"
              c:identifier="udisks_object_get_manager_nvme"
              glib:get-property="manager-nvme">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78040">Gets the #UDisksManagerNVMe instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-NVMe.top_of_page"&gt;org.freedesktop.UDisks2.Manager.NVMe&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9122"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78046">A #UDisksManagerNVMe that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78042">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mdraid"
              c:identifier="udisks_object_get_mdraid"
              glib:get-property="mdraid"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78261">Gets the #UDisksMDRaid instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9135"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78267">A #UDisksMDRaid that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="MDRaid" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78263">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nvme_controller"
              c:identifier="udisks_object_get_nvme_controller"
              glib:get-property="nvme-controller">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78091">Gets the #UDisksNVMeController instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Controller.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Controller&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9125"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78097">A #UDisksNVMeController that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="NVMeController" c:type="UDisksNVMeController*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78093">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nvme_fabrics"
              c:identifier="udisks_object_get_nvme_fabrics"
              glib:get-property="nvme-fabrics">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78125">Gets the #UDisksNVMeFabrics instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Fabrics.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Fabrics&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9127"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78131">A #UDisksNVMeFabrics that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78127">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nvme_namespace"
              c:identifier="udisks_object_get_nvme_namespace"
              glib:get-property="nvme-namespace">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78108">Gets the #UDisksNVMeNamespace instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Namespace.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Namespace&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9126"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78114">A #UDisksNVMeNamespace that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78110">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_partition"
              c:identifier="udisks_object_get_partition"
              glib:get-property="partition">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78176">Gets the #UDisksPartition instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9130"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78182">A #UDisksPartition that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Partition" c:type="UDisksPartition*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78178">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_partition_table"
              c:identifier="udisks_object_get_partition_table"
              glib:get-property="partition-table">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78159">Gets the #UDisksPartitionTable instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9129"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78165">A #UDisksPartitionTable that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78161">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_physical_volume"
              c:identifier="udisks_object_get_physical_volume"
              glib:get-property="physical-volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78445">Gets the #UDisksPhysicalVolume instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9145"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78451">A #UDisksPhysicalVolume that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78447">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_swapspace"
              c:identifier="udisks_object_get_swapspace"
              glib:get-property="swapspace">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78210">Gets the #UDisksSwapspace instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9132"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78216">A #UDisksSwapspace that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="Swapspace" c:type="UDisksSwapspace*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78212">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vdo_volume"
              c:identifier="udisks_object_get_vdo_volume"
              glib:get-property="vdo-volume"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78502">Gets the #UDisksVDOVolume instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9148"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78508">A #UDisksVDOVolume that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78504">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_volume_group"
              c:identifier="udisks_object_get_volume_group"
              glib:get-property="volume-group"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78464">Gets the #UDisksVolumeGroup instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt; on @object, if any.</doc>
        <source-position filename="udisks-generated.h" line="9146"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78470">A #UDisksVolumeGroup that must be freed with g_object_unref() or %NULL if @object does not implement the interface.</doc>
          <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78466">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_block"
              c:identifier="udisks_object_peek_block"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78662">Like udisks_object_get_block() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9156"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78670">A #UDisksBlock or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Block" c:type="UDisksBlock*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78664">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_block_lvm2"
              c:identifier="udisks_object_peek_block_lvm2"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78994">Like udisks_object_get_block_lvm2() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9172"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="79002">A #UDisksBlockLVM2 or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="BlockLVM2" c:type="UDisksBlockLVM2*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78996">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_drive"
              c:identifier="udisks_object_peek_drive"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78562">Like udisks_object_get_drive() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9151"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78570">A #UDisksDrive or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Drive" c:type="UDisksDrive*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78564">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_drive_ata"
              c:identifier="udisks_object_peek_drive_ata"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78582">Like udisks_object_get_drive_ata() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9152"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78590">A #UDisksDriveAta or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="DriveAta" c:type="UDisksDriveAta*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78584">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_drive_lsm"
              c:identifier="udisks_object_peek_drive_lsm"
              version="2.3.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78930">Like udisks_object_get_drive_lsm() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9169"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78938">A #UDisksDriveLSM or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78932">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_drive_lsm_local"
              c:identifier="udisks_object_peek_drive_lsm_local"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78952">Like udisks_object_get_drive_lsm_local() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9170"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78960">A #UDisksDriveLsmLocal or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78954">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_encrypted"
              c:identifier="udisks_object_peek_encrypted"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78762">Like udisks_object_get_encrypted() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9161"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78770">A #UDisksEncrypted or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Encrypted" c:type="UDisksEncrypted*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78764">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_filesystem"
              c:identifier="udisks_object_peek_filesystem"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78722">Like udisks_object_get_filesystem() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9159"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78730">A #UDisksFilesystem or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Filesystem" c:type="UDisksFilesystem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78724">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_filesystem_btrfs"
              c:identifier="udisks_object_peek_filesystem_btrfs"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78866">Like udisks_object_get_filesystem_btrfs() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9166"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78874">A #UDisksFilesystemBTRFS or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78868">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_iscsi_session"
              c:identifier="udisks_object_peek_iscsi_session"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78910">Like udisks_object_get_iscsi_session() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9168"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78918">A #UDisksISCSISession or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="ISCSISession" c:type="UDisksISCSISession*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78912">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_job"
              c:identifier="udisks_object_peek_job"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78824">Like udisks_object_get_job() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9164"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78832">A #UDisksJob or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Job" c:type="UDisksJob*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78826">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_logical_volume"
              c:identifier="udisks_object_peek_logical_volume"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79060">Like udisks_object_get_logical_volume() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9175"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="79068">A #UDisksLogicalVolume or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79062">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_loop"
              c:identifier="udisks_object_peek_loop"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78782">Like udisks_object_get_loop() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9162"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78790">A #UDisksLoop or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Loop" c:type="UDisksLoop*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78784">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_manager"
              c:identifier="udisks_object_peek_manager"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78522">Like udisks_object_get_manager() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9149"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78530">A #UDisksManager or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Manager" c:type="UDisksManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78524">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_manager_btrfs"
              c:identifier="udisks_object_peek_manager_btrfs"
              version="2.1.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78844">Like udisks_object_get_manager_btrfs() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9165"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78852">A #UDisksManagerBTRFS or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="ManagerBTRFS" c:type="UDisksManagerBTRFS*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78846">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_manager_iscsi_initiator"
              c:identifier="udisks_object_peek_manager_iscsi_initiator"
              version="2.0.1"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78888">Like udisks_object_get_manager_iscsi_initiator() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9167"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78896">A #UDisksManagerISCSIInitiator or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="ManagerISCSIInitiator"
                c:type="UDisksManagerISCSIInitiator*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78890">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_manager_lvm2"
              c:identifier="udisks_object_peek_manager_lvm2"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78972">Like udisks_object_get_manager_lvm2() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9171"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78980">A #UDisksManagerLVM2 or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="ManagerLVM2" c:type="UDisksManagerLVM2*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78974">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_manager_nvme"
              c:identifier="udisks_object_peek_manager_nvme"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78542">Like udisks_object_get_manager_nvme() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9150"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78550">A #UDisksManagerNVMe or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78544">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_mdraid"
              c:identifier="udisks_object_peek_mdraid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78802">Like udisks_object_get_mdraid() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9163"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78810">A #UDisksMDRaid or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="MDRaid" c:type="UDisksMDRaid*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78804">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_nvme_controller"
              c:identifier="udisks_object_peek_nvme_controller"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78602">Like udisks_object_get_nvme_controller() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9153"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78610">A #UDisksNVMeController or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="NVMeController" c:type="UDisksNVMeController*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78604">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_nvme_fabrics"
              c:identifier="udisks_object_peek_nvme_fabrics"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78642">Like udisks_object_get_nvme_fabrics() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9155"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78650">A #UDisksNVMeFabrics or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78644">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_nvme_namespace"
              c:identifier="udisks_object_peek_nvme_namespace"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78622">Like udisks_object_get_nvme_namespace() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9154"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78630">A #UDisksNVMeNamespace or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78624">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_partition"
              c:identifier="udisks_object_peek_partition"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78702">Like udisks_object_get_partition() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9158"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78710">A #UDisksPartition or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Partition" c:type="UDisksPartition*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78704">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_partition_table"
              c:identifier="udisks_object_peek_partition_table"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78682">Like udisks_object_get_partition_table() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9157"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78690">A #UDisksPartitionTable or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78684">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_physical_volume"
              c:identifier="udisks_object_peek_physical_volume"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79016">Like udisks_object_get_physical_volume() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9173"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="79024">A #UDisksPhysicalVolume or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79018">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_swapspace"
              c:identifier="udisks_object_peek_swapspace"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78742">Like udisks_object_get_swapspace() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9160"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="78750">A #UDisksSwapspace or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="Swapspace" c:type="UDisksSwapspace*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="78744">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_vdo_volume"
              c:identifier="udisks_object_peek_vdo_volume"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79082">Like udisks_object_get_vdo_volume() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9176"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="79090">A #UDisksVDOVolume or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79084">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_volume_group"
              c:identifier="udisks_object_peek_volume_group"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79038">Like udisks_object_get_volume_group() but doesn't increase the reference count on the returned object.

It is not safe to use the returned object if you are on another thread than the one where the #GDBusObjectManagerClient or #GDBusObjectManagerServer for @object is running.</doc>
        <source-position filename="udisks-generated.h" line="9174"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="79046">A #UDisksVolumeGroup or %NULL if @object does not implement the interface. Do not free the returned object, it is owned by @object.</doc>
          <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79040">A #UDisksObject.</doc>
            <type name="Object" c:type="UDisksObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="block"
                writable="1"
                transfer-ownership="none"
                getter="get_block">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77810">The #UDisksBlock instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Block"/>
      </property>
      <property name="block-lvm2"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                getter="get_block_lvm2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77966">The #UDisksBlockLVM2 instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="BlockLVM2"/>
      </property>
      <property name="drive"
                writable="1"
                transfer-ownership="none"
                getter="get_drive">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77765">The #UDisksDrive instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Drive"/>
      </property>
      <property name="drive-ata"
                writable="1"
                transfer-ownership="none"
                getter="get_drive_ata">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77774">The #UDisksDriveAta instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="DriveAta"/>
      </property>
      <property name="drive-lsm"
                version="2.3.0"
                writable="1"
                transfer-ownership="none"
                getter="get_drive_lsm">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77935">The #UDisksDriveLSM instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LSM.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LSM&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="DriveLSM"/>
      </property>
      <property name="drive-lsm-local"
                writable="1"
                transfer-ownership="none"
                getter="get_drive_lsm_local">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77946">The #UDisksDriveLsmLocal instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LsmLocal.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LsmLocal&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="DriveLsmLocal"/>
      </property>
      <property name="encrypted"
                writable="1"
                transfer-ownership="none"
                getter="get_encrypted">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77855">The #UDisksEncrypted instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Encrypted"/>
      </property>
      <property name="filesystem"
                writable="1"
                transfer-ownership="none"
                getter="get_filesystem">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77837">The #UDisksFilesystem instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Filesystem"/>
      </property>
      <property name="filesystem-btrfs"
                version="2.1.3"
                writable="1"
                transfer-ownership="none"
                getter="get_filesystem_btrfs">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77904">The #UDisksFilesystemBTRFS instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="FilesystemBTRFS"/>
      </property>
      <property name="iscsi-session"
                writable="1"
                transfer-ownership="none"
                getter="get_iscsi_session">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77926">The #UDisksISCSISession instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-ISCSI-Session.top_of_page"&gt;org.freedesktop.UDisks2.ISCSI.Session&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="ISCSISession"/>
      </property>
      <property name="job"
                writable="1"
                transfer-ownership="none"
                getter="get_job">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77884">The #UDisksJob instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Job"/>
      </property>
      <property name="logical-volume"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                getter="get_logical_volume">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77999">The #UDisksLogicalVolume instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="LogicalVolume"/>
      </property>
      <property name="loop"
                writable="1"
                transfer-ownership="none"
                getter="get_loop">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77864">The #UDisksLoop instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Loop"/>
      </property>
      <property name="manager"
                writable="1"
                transfer-ownership="none"
                getter="get_manager">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77747">The #UDisksManager instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Manager"/>
      </property>
      <property name="manager-btrfs"
                version="2.1.3"
                writable="1"
                transfer-ownership="none"
                getter="get_manager_btrfs">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77893">The #UDisksManagerBTRFS instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="ManagerBTRFS"/>
      </property>
      <property name="manager-iscsi-initiator"
                version="2.0.1"
                writable="1"
                transfer-ownership="none"
                getter="get_manager_iscsi_initiator">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77915">The #UDisksManagerISCSIInitiator instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.top_of_page"&gt;org.freedesktop.UDisks2.Manager.ISCSI.Initiator&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="ManagerISCSIInitiator"/>
      </property>
      <property name="manager-lvm2"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                getter="get_manager_lvm2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77955">The #UDisksManagerLVM2 instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="ManagerLVM2"/>
      </property>
      <property name="manager-nvme"
                writable="1"
                transfer-ownership="none"
                getter="get_manager_nvme">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77756">The #UDisksManagerNVMe instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-NVMe.top_of_page"&gt;org.freedesktop.UDisks2.Manager.NVMe&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="ManagerNVMe"/>
      </property>
      <property name="mdraid"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                getter="get_mdraid">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77873">The #UDisksMDRaid instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="MDRaid"/>
      </property>
      <property name="nvme-controller"
                writable="1"
                transfer-ownership="none"
                getter="get_nvme_controller">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77783">The #UDisksNVMeController instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Controller.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Controller&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="NVMeController"/>
      </property>
      <property name="nvme-fabrics"
                writable="1"
                transfer-ownership="none"
                getter="get_nvme_fabrics">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77801">The #UDisksNVMeFabrics instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Fabrics.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Fabrics&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="NVMeFabrics"/>
      </property>
      <property name="nvme-namespace"
                writable="1"
                transfer-ownership="none"
                getter="get_nvme_namespace">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77792">The #UDisksNVMeNamespace instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Namespace.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Namespace&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="NVMeNamespace"/>
      </property>
      <property name="partition"
                writable="1"
                transfer-ownership="none"
                getter="get_partition">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77828">The #UDisksPartition instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Partition"/>
      </property>
      <property name="partition-table"
                writable="1"
                transfer-ownership="none"
                getter="get_partition_table">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77819">The #UDisksPartitionTable instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="PartitionTable"/>
      </property>
      <property name="physical-volume"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                getter="get_physical_volume">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77977">The #UDisksPhysicalVolume instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="PhysicalVolume"/>
      </property>
      <property name="swapspace"
                writable="1"
                transfer-ownership="none"
                getter="get_swapspace">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77846">The #UDisksSwapspace instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="Swapspace"/>
      </property>
      <property name="vdo-volume"
                version="2.9.0"
                writable="1"
                transfer-ownership="none"
                getter="get_vdo_volume">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="78010">The #UDisksVDOVolume instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="VDOVolume"/>
      </property>
      <property name="volume-group"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                getter="get_volume_group">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77988">The #UDisksVolumeGroup instance corresponding to the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt;, if any.

Connect to the #GObject::notify signal to get informed of property changes.</doc>
        <type name="VolumeGroup"/>
      </property>
    </interface>
    <record name="ObjectIface"
            c:type="UDisksObjectIface"
            glib:is-gtype-struct-for="Object">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="77734">Virtual table for the #UDisksObject interface.</doc>
      <source-position filename="udisks-generated.h" line="9113"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77736">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
    </record>
    <class name="ObjectInfo"
           c:symbol-prefix="object_info"
           c:type="UDisksObjectInfo"
           version="2.1"
           parent="GObject.Object"
           glib:type-name="UDisksObjectInfo"
           glib:get-type="udisks_object_info_get_type">
      <doc xml:space="preserve"
           filename="udisksobjectinfo.c"
           line="28">Detailed information about the D-Bus interfaces (such as
#UDisksBlock and #UDisksDrive) on a #UDisksObject that is suitable
to display in an user interface. Use
udisks_client_get_object_info() to get #UDisksObjectInfo objects.
Note that #UDisksObjectInfo is an immutable object; once it has
been created it cannot be modified further.

The &lt;link
linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;HintName&lt;/link&gt;
and/or &lt;link
linkend="gdbus-property-org-freedesktop-UDisks2-Block.HintName"&gt;HintIconName&lt;/link&gt;
propreties on associated #UDisksBlock interfaces (if any) may
influence what udisks_object_info_get_icon() and
udisks_object_info_get_media_icon() returns.

The value return by udisks_object_info_get_one_liner() is designed
to contain enough information such that it is all that needs to be
shown about the object. As a result for e.g.  block devices or
drives it contains the special device file
e.g. &lt;filename&gt;/dev/sda&lt;/filename&gt;.</doc>
      <method name="get_description"
              c:identifier="udisks_object_info_get_description"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1065">Gets the description.</doc>
        <source-position filename="udisksobjectinfo.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1071">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1067">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon"
              c:identifier="udisks_object_info_get_icon"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1082">Gets the icon.</doc>
        <source-position filename="udisksobjectinfo.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1088">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1084">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_symbolic"
              c:identifier="udisks_object_info_get_icon_symbolic"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1099">Gets the symbolic icon.</doc>
        <source-position filename="udisksobjectinfo.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1105">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1101">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_description"
              c:identifier="udisks_object_info_get_media_description"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1116">Gets the media description.</doc>
        <source-position filename="udisksobjectinfo.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1122">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1118">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_icon"
              c:identifier="udisks_object_info_get_media_icon"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1133">Gets the media icon.</doc>
        <source-position filename="udisksobjectinfo.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1139">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1135">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_icon_symbolic"
              c:identifier="udisks_object_info_get_media_icon_symbolic"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1150">Gets the symbolic media icon.</doc>
        <source-position filename="udisksobjectinfo.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1156">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1152">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="udisks_object_info_get_name"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1048">Gets the name.</doc>
        <source-position filename="udisksobjectinfo.h" line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1054">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1050">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_object"
              c:identifier="udisks_object_info_get_object"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1031">Gets the #UDisksObject that @info is for</doc>
        <source-position filename="udisksobjectinfo.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1037">The object - do not free or unref, the reference belongs to @info.</doc>
          <type name="Object" c:type="UDisksObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1033">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_one_liner"
              c:identifier="udisks_object_info_get_one_liner"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1167">Gets a one-line description.</doc>
        <source-position filename="udisksobjectinfo.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1173">The value or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1169">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sort_key"
              c:identifier="udisks_object_info_get_sort_key"
              version="2.1">
        <doc xml:space="preserve"
             filename="udisksobjectinfo.c"
             line="1184">Gets the sort-key for @info. This can be used with g_strcmp0() to
sort objects.</doc>
        <source-position filename="udisksobjectinfo.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisksobjectinfo.c"
               line="1191">The sort key or %NULL. Do not free or unref, the value belongs to @info.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksobjectinfo.c"
                 line="1186">A #UDisksObjectInfo.</doc>
            <type name="ObjectInfo" c:type="UDisksObjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <class name="ObjectManagerClient"
           c:symbol-prefix="object_manager_client"
           c:type="UDisksObjectManagerClient"
           parent="Gio.DBusObjectManagerClient"
           glib:type-name="UDisksObjectManagerClient"
           glib:get-type="udisks_object_manager_client_get_type"
           glib:type-struct="ObjectManagerClientClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="80371">The #UDisksObjectManagerClient structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="9291"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusObjectManager"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="udisks_object_manager_client_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80485">Finishes an operation started with udisks_object_manager_client_new().</doc>
        <source-position filename="udisks-generated.h" line="9309"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="80492">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="ObjectManagerClient" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80487">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_object_manager_client_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_object_manager_client_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80575">Finishes an operation started with udisks_object_manager_client_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="9328"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="80582">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="ObjectManagerClient" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80577">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_object_manager_client_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_object_manager_client_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80600">Like udisks_object_manager_client_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_object_manager_client_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="9331"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="80615">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="ObjectManagerClient" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80602">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80603">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80604">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80605">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80606">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_object_manager_client_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80510">Synchronously creates #GDBusObjectManagerClient using udisks_object_manager_client_get_proxy_type() as the #GDBusProxyTypeFunc. See g_dbus_object_manager_client_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_object_manager_client_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="9312"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="80525">The constructed object manager client or %NULL if @error is set.</doc>
          <type name="ObjectManagerClient" c:type="GDBusObjectManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80512">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80513">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80514">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80515">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80516">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_proxy_type"
                c:identifier="udisks_object_manager_client_get_proxy_type">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80396">A #GDBusProxyTypeFunc that maps @interface_name to the generated #GDBusObjectProxy derived and #GDBusProxy derived types.</doc>
        <source-position filename="udisks-generated.h" line="9299"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="80405">A #GDBusProxy derived #GType if @interface_name is not %NULL, otherwise the #GType for #UDisksObjectProxy.</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80398">A #GDBusObjectManagerClient.</doc>
            <type name="Gio.DBusObjectManagerClient"
                  c:type="GDBusObjectManagerClient*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80399">The object path of the remote object (unused).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="interface_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80400">Interface name of the remote object or %NULL to get the object proxy #GType.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80401">User data (unused).</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new" c:identifier="udisks_object_manager_client_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80455">Asynchronously creates #GDBusObjectManagerClient using udisks_object_manager_client_get_proxy_type() as the #GDBusProxyTypeFunc. See g_dbus_object_manager_client_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_object_manager_client_new_finish() to get the result of the operation.

See udisks_object_manager_client_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="9301"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80457">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80458">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80459">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80460">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80461">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80462">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80463">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_object_manager_client_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80545">Like udisks_object_manager_client_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_object_manager_client_new_for_bus_finish() to get the result of the operation.

See udisks_object_manager_client_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="9320"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80547">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80548">Flags from the #GDBusObjectManagerClientFlags enumeration.</doc>
            <type name="Gio.DBusObjectManagerClientFlags"
                  c:type="GDBusObjectManagerClientFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80549">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80550">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80551">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80552">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80553">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusObjectManagerClient"
              c:type="GDBusObjectManagerClient"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ObjectManagerClientPrivate"
              c:type="UDisksObjectManagerClientPrivate*"/>
      </field>
    </class>
    <record name="ObjectManagerClientClass"
            c:type="UDisksObjectManagerClientClass"
            glib:is-gtype-struct-for="ObjectManagerClient">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="80377">Class structure for #UDisksObjectManagerClient.</doc>
      <source-position filename="udisks-generated.h" line="9291"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80379">The parent class.</doc>
        <type name="Gio.DBusObjectManagerClientClass"
              c:type="GDBusObjectManagerClientClass"/>
      </field>
    </record>
    <record name="ObjectManagerClientPrivate"
            c:type="UDisksObjectManagerClientPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="9279"/>
    </record>
    <class name="ObjectProxy"
           c:symbol-prefix="object_proxy"
           c:type="UDisksObjectProxy"
           parent="Gio.DBusObjectProxy"
           glib:type-name="UDisksObjectProxy"
           glib:get-type="udisks_object_proxy_get_type"
           glib:type-struct="ObjectProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="79116">The #UDisksObjectProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="9199"/>
      <implements name="Gio.DBusObject"/>
      <implements name="Object"/>
      <constructor name="new" c:identifier="udisks_object_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79355">Creates a new proxy object.</doc>
        <source-position filename="udisks-generated.h" line="9207"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="79362">The proxy object.</doc>
          <type name="ObjectProxy" c:type="UDisksObjectProxy*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79357">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79358">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusObjectProxy" c:type="GDBusObjectProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ObjectProxyPrivate" c:type="UDisksObjectProxyPrivate*"/>
      </field>
    </class>
    <record name="ObjectProxyClass"
            c:type="UDisksObjectProxyClass"
            glib:is-gtype-struct-for="ObjectProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="79122">Class structure for #UDisksObjectProxy.</doc>
      <source-position filename="udisks-generated.h" line="9199"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79124">The parent class.</doc>
        <type name="Gio.DBusObjectProxyClass" c:type="GDBusObjectProxyClass"/>
      </field>
    </record>
    <record name="ObjectProxyPrivate"
            c:type="UDisksObjectProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="9187"/>
    </record>
    <class name="ObjectSkeleton"
           c:symbol-prefix="object_skeleton"
           c:type="UDisksObjectSkeleton"
           parent="Gio.DBusObjectSkeleton"
           glib:type-name="UDisksObjectSkeleton"
           glib:get-type="udisks_object_skeleton_get_type"
           glib:type-struct="ObjectSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="79373">The #UDisksObjectSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="9230"/>
      <implements name="Gio.DBusObject"/>
      <implements name="Object"/>
      <constructor name="new" c:identifier="udisks_object_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79984">Creates a new skeleton object.</doc>
        <source-position filename="udisks-generated.h" line="9238"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="79990">The skeleton object.</doc>
          <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
        </return-value>
        <parameters>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="79986">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_block" c:identifier="udisks_object_skeleton_set_block">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80083">Sets the #UDisksBlock instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9246"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80085">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80086">A #UDisksBlock or %NULL to clear the interface.</doc>
            <type name="Block" c:type="UDisksBlock*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_block_lvm2"
              c:identifier="udisks_object_skeleton_set_block_lvm2"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80287">Sets the #UDisksBlockLVM2 instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9262"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80289">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80290">A #UDisksBlockLVM2 or %NULL to clear the interface.</doc>
            <type name="BlockLVM2" c:type="UDisksBlockLVM2*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_drive" c:identifier="udisks_object_skeleton_set_drive">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80023">Sets the #UDisksDrive instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9241"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80025">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80026">A #UDisksDrive or %NULL to clear the interface.</doc>
            <type name="Drive" c:type="UDisksDrive*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_drive_ata"
              c:identifier="udisks_object_skeleton_set_drive_ata">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80035">Sets the #UDisksDriveAta instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9242"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80037">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80038">A #UDisksDriveAta or %NULL to clear the interface.</doc>
            <type name="DriveAta" c:type="UDisksDriveAta*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_drive_lsm"
              c:identifier="udisks_object_skeleton_set_drive_lsm"
              version="2.3.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80247">Sets the #UDisksDriveLSM instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LSM.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LSM&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9259"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80249">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80250">A #UDisksDriveLSM or %NULL to clear the interface.</doc>
            <type name="DriveLSM" c:type="UDisksDriveLSM*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_drive_lsm_local"
              c:identifier="udisks_object_skeleton_set_drive_lsm_local">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80261">Sets the #UDisksDriveLsmLocal instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LsmLocal.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LsmLocal&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9260"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80263">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80264">A #UDisksDriveLsmLocal or %NULL to clear the interface.</doc>
            <type name="DriveLsmLocal" c:type="UDisksDriveLsmLocal*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_encrypted"
              c:identifier="udisks_object_skeleton_set_encrypted">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80143">Sets the #UDisksEncrypted instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9251"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80145">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80146">A #UDisksEncrypted or %NULL to clear the interface.</doc>
            <type name="Encrypted" c:type="UDisksEncrypted*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_filesystem"
              c:identifier="udisks_object_skeleton_set_filesystem">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80119">Sets the #UDisksFilesystem instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9249"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80121">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80122">A #UDisksFilesystem or %NULL to clear the interface.</doc>
            <type name="Filesystem" c:type="UDisksFilesystem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_filesystem_btrfs"
              c:identifier="udisks_object_skeleton_set_filesystem_btrfs"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80207">Sets the #UDisksFilesystemBTRFS instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9256"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80209">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80210">A #UDisksFilesystemBTRFS or %NULL to clear the interface.</doc>
            <type name="FilesystemBTRFS" c:type="UDisksFilesystemBTRFS*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_iscsi_session"
              c:identifier="udisks_object_skeleton_set_iscsi_session">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80235">Sets the #UDisksISCSISession instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-ISCSI-Session.top_of_page"&gt;org.freedesktop.UDisks2.ISCSI.Session&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9258"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80237">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80238">A #UDisksISCSISession or %NULL to clear the interface.</doc>
            <type name="ISCSISession" c:type="UDisksISCSISession*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_job" c:identifier="udisks_object_skeleton_set_job">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80181">Sets the #UDisksJob instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9254"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80183">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80184">A #UDisksJob or %NULL to clear the interface.</doc>
            <type name="Job" c:type="UDisksJob*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_logical_volume"
              c:identifier="udisks_object_skeleton_set_logical_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80329">Sets the #UDisksLogicalVolume instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9265"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80331">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80332">A #UDisksLogicalVolume or %NULL to clear the interface.</doc>
            <type name="LogicalVolume" c:type="UDisksLogicalVolume*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_loop" c:identifier="udisks_object_skeleton_set_loop">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80155">Sets the #UDisksLoop instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9252"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80157">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80158">A #UDisksLoop or %NULL to clear the interface.</doc>
            <type name="Loop" c:type="UDisksLoop*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_manager"
              c:identifier="udisks_object_skeleton_set_manager">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79999">Sets the #UDisksManager instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9239"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80001">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80002">A #UDisksManager or %NULL to clear the interface.</doc>
            <type name="Manager" c:type="UDisksManager*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_manager_btrfs"
              c:identifier="udisks_object_skeleton_set_manager_btrfs"
              version="2.1.3">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80193">Sets the #UDisksManagerBTRFS instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9255"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80195">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80196">A #UDisksManagerBTRFS or %NULL to clear the interface.</doc>
            <type name="ManagerBTRFS" c:type="UDisksManagerBTRFS*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_manager_iscsi_initiator"
              c:identifier="udisks_object_skeleton_set_manager_iscsi_initiator"
              version="2.0.1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80221">Sets the #UDisksManagerISCSIInitiator instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.top_of_page"&gt;org.freedesktop.UDisks2.Manager.ISCSI.Initiator&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9257"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80223">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80224">A #UDisksManagerISCSIInitiator or %NULL to clear the interface.</doc>
            <type name="ManagerISCSIInitiator"
                  c:type="UDisksManagerISCSIInitiator*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_manager_lvm2"
              c:identifier="udisks_object_skeleton_set_manager_lvm2"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80273">Sets the #UDisksManagerLVM2 instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9261"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80275">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80276">A #UDisksManagerLVM2 or %NULL to clear the interface.</doc>
            <type name="ManagerLVM2" c:type="UDisksManagerLVM2*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_manager_nvme"
              c:identifier="udisks_object_skeleton_set_manager_nvme">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80011">Sets the #UDisksManagerNVMe instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-NVMe.top_of_page"&gt;org.freedesktop.UDisks2.Manager.NVMe&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9240"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80013">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80014">A #UDisksManagerNVMe or %NULL to clear the interface.</doc>
            <type name="ManagerNVMe" c:type="UDisksManagerNVMe*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mdraid"
              c:identifier="udisks_object_skeleton_set_mdraid"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80167">Sets the #UDisksMDRaid instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9253"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80169">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80170">A #UDisksMDRaid or %NULL to clear the interface.</doc>
            <type name="MDRaid" c:type="UDisksMDRaid*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_nvme_controller"
              c:identifier="udisks_object_skeleton_set_nvme_controller">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80047">Sets the #UDisksNVMeController instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Controller.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Controller&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9243"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80049">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80050">A #UDisksNVMeController or %NULL to clear the interface.</doc>
            <type name="NVMeController" c:type="UDisksNVMeController*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_nvme_fabrics"
              c:identifier="udisks_object_skeleton_set_nvme_fabrics">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80071">Sets the #UDisksNVMeFabrics instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Fabrics.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Fabrics&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9245"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80073">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80074">A #UDisksNVMeFabrics or %NULL to clear the interface.</doc>
            <type name="NVMeFabrics" c:type="UDisksNVMeFabrics*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_nvme_namespace"
              c:identifier="udisks_object_skeleton_set_nvme_namespace">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80059">Sets the #UDisksNVMeNamespace instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Namespace.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Namespace&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9244"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80061">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80062">A #UDisksNVMeNamespace or %NULL to clear the interface.</doc>
            <type name="NVMeNamespace" c:type="UDisksNVMeNamespace*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_partition"
              c:identifier="udisks_object_skeleton_set_partition">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80107">Sets the #UDisksPartition instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9248"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80109">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80110">A #UDisksPartition or %NULL to clear the interface.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_partition_table"
              c:identifier="udisks_object_skeleton_set_partition_table">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80095">Sets the #UDisksPartitionTable instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9247"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80097">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80098">A #UDisksPartitionTable or %NULL to clear the interface.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_physical_volume"
              c:identifier="udisks_object_skeleton_set_physical_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80301">Sets the #UDisksPhysicalVolume instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9263"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80303">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80304">A #UDisksPhysicalVolume or %NULL to clear the interface.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_swapspace"
              c:identifier="udisks_object_skeleton_set_swapspace">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80131">Sets the #UDisksSwapspace instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9250"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80133">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80134">A #UDisksSwapspace or %NULL to clear the interface.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vdo_volume"
              c:identifier="udisks_object_skeleton_set_vdo_volume"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80343">Sets the #UDisksVDOVolume instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9266"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80345">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80346">A #UDisksVDOVolume or %NULL to clear the interface.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_volume_group"
              c:identifier="udisks_object_skeleton_set_volume_group"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="80315">Sets the #UDisksVolumeGroup instance for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt; on @object.</doc>
        <source-position filename="udisks-generated.h" line="9264"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80317">A #UDisksObjectSkeleton.</doc>
            <type name="ObjectSkeleton" c:type="UDisksObjectSkeleton*"/>
          </instance-parameter>
          <parameter name="interface_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="80318">A #UDisksVolumeGroup or %NULL to clear the interface.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusObjectSkeleton" c:type="GDBusObjectSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ObjectSkeletonPrivate"
              c:type="UDisksObjectSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ObjectSkeletonClass"
            c:type="UDisksObjectSkeletonClass"
            glib:is-gtype-struct-for="ObjectSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="79379">Class structure for #UDisksObjectSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="9230"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="79381">The parent class.</doc>
        <type name="Gio.DBusObjectSkeletonClass"
              c:type="GDBusObjectSkeletonClass"/>
      </field>
    </record>
    <record name="ObjectSkeletonPrivate"
            c:type="UDisksObjectSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="9218"/>
    </record>
    <function-macro name="PARTITION"
                    c:identifier="UDISKS_PARTITION"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3301"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_GET_IFACE"
                    c:identifier="UDISKS_PARTITION_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3303"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_PROXY"
                    c:identifier="UDISKS_PARTITION_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3568"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_PROXY_CLASS"
                    c:identifier="UDISKS_PARTITION_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3569"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_PROXY_GET_CLASS"
                    c:identifier="UDISKS_PARTITION_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3570"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_SKELETON"
                    c:identifier="UDISKS_PARTITION_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3638"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_SKELETON_CLASS"
                    c:identifier="UDISKS_PARTITION_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3639"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_PARTITION_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3640"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_TABLE"
                    c:identifier="UDISKS_PARTITION_TABLE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3058"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_TABLE_GET_IFACE"
                    c:identifier="UDISKS_PARTITION_TABLE_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3060"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_TABLE_PROXY"
                    c:identifier="UDISKS_PARTITION_TABLE_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3196"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_TABLE_PROXY_CLASS"
                    c:identifier="UDISKS_PARTITION_TABLE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3197"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_TABLE_PROXY_GET_CLASS"
                    c:identifier="UDISKS_PARTITION_TABLE_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3198"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_TABLE_SKELETON"
                    c:identifier="UDISKS_PARTITION_TABLE_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3266"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_TABLE_SKELETON_CLASS"
                    c:identifier="UDISKS_PARTITION_TABLE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3267"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PARTITION_TABLE_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_PARTITION_TABLE_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="3268"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PHYSICAL_VOLUME"
                    c:identifier="UDISKS_PHYSICAL_VOLUME"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7507"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PHYSICAL_VOLUME_GET_IFACE"
                    c:identifier="UDISKS_PHYSICAL_VOLUME_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7509"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PHYSICAL_VOLUME_PROXY"
                    c:identifier="UDISKS_PHYSICAL_VOLUME_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7552"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PHYSICAL_VOLUME_PROXY_CLASS"
                    c:identifier="UDISKS_PHYSICAL_VOLUME_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7553"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PHYSICAL_VOLUME_PROXY_GET_CLASS"
                    c:identifier="UDISKS_PHYSICAL_VOLUME_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7554"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PHYSICAL_VOLUME_SKELETON"
                    c:identifier="UDISKS_PHYSICAL_VOLUME_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7622"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PHYSICAL_VOLUME_SKELETON_CLASS"
                    c:identifier="UDISKS_PHYSICAL_VOLUME_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7623"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PHYSICAL_VOLUME_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_PHYSICAL_VOLUME_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7624"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Partition"
               c:symbol-prefix="partition"
               c:type="UDisksPartition"
               glib:type-name="UDisksPartition"
               glib:get-type="udisks_partition_get_type"
               glib:type-struct="PartitionIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="31931">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="3369"/>
      <function name="interface_info"
                c:identifier="udisks_partition_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31812">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="3377"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31817">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_partition_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31825">Overrides all #GObject properties in the #UDisksPartition interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="3378"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31833">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31827">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31828">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_flags" invoker="get_flags" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32293">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Flags"&gt;"Flags"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3337"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32301">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32295">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_is_contained"
                      invoker="get_is_contained"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32584">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContained"&gt;"IsContained"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3339"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32592">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32586">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_is_container"
                      invoker="get_is_container"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32551">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContainer"&gt;"IsContainer"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3341"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32559">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32553">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_name" invoker="get_name" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32392">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3343"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32402">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32394">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_number"
                      invoker="get_number"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32207">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Number"&gt;"Number"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3345"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32215">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32209">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_offset"
                      invoker="get_offset"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32326">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Offset"&gt;"Offset"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3347"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32334">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32328">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size" invoker="get_size" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32359">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3349"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32367">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32361">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_table" invoker="get_table" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32498">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Table"&gt;"Table"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_table() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3351"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32508">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32500">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_type_" invoker="get_type_" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32240">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_type_() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3353"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32250">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32242">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_uuid" invoker="get_uuid" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32445">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3355"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32455">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32447">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_delete">
        <source-position filename="udisks-generated.h" line="3314"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_resize">
        <source-position filename="udisks-generated.h" line="3357"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_flags">
        <source-position filename="udisks-generated.h" line="3319"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_name">
        <source-position filename="udisks-generated.h" line="3325"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_type">
        <source-position filename="udisks-generated.h" line="3331"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_uuid">
        <source-position filename="udisks-generated.h" line="3363"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_uuid" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_delete" c:identifier="udisks_partition_call_delete">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33149">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_call_delete_finish() to get the result of the operation.

See udisks_partition_call_delete_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3509"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33151">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33152">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33153">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33154">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33155">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_finish"
              c:identifier="udisks_partition_call_delete_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33182">Finishes an operation started with udisks_partition_call_delete().</doc>
        <source-position filename="udisks-generated.h" line="3516"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="33190">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33184">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33185">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_call_delete().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_sync"
              c:identifier="udisks_partition_call_delete_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33209">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_call_delete() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3521"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="33220">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33211">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33212">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33213">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize"
              c:identifier="udisks_partition_call_resize"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33039">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_call_resize_finish() to get the result of the operation.

See udisks_partition_call_resize_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3489"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33041">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33042">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33043">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33044">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33045">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33046">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_finish"
              c:identifier="udisks_partition_call_resize_finish"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33077">Finishes an operation started with udisks_partition_call_resize().</doc>
        <source-position filename="udisks-generated.h" line="3497"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="33085">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33079">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33080">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_call_resize().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_sync"
              c:identifier="udisks_partition_call_resize_sync"
              version="2.7.2"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33106">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Resize"&gt;Resize()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_call_resize() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3502"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="33118">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33108">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33109">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33110">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33111">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_flags"
              c:identifier="udisks_partition_call_set_flags">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32935">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetFlags"&gt;SetFlags()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_call_set_flags_finish() to get the result of the operation.

See udisks_partition_call_set_flags_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3469"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32937">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32938">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32939">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32940">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32941">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32942">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_flags_finish"
              c:identifier="udisks_partition_call_set_flags_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32971">Finishes an operation started with udisks_partition_call_set_flags().</doc>
        <source-position filename="udisks-generated.h" line="3477"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32979">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32973">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32974">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_call_set_flags().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_flags_sync"
              c:identifier="udisks_partition_call_set_flags_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32998">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetFlags"&gt;SetFlags()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_call_set_flags() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3482"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="33010">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33000">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33001">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33002">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33003">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_name"
              c:identifier="udisks_partition_call_set_name">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32721">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetName"&gt;SetName()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_call_set_name_finish() to get the result of the operation.

See udisks_partition_call_set_name_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3429"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32723">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32724">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32725">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32726">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32727">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32728">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_name_finish"
              c:identifier="udisks_partition_call_set_name_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32757">Finishes an operation started with udisks_partition_call_set_name().</doc>
        <source-position filename="udisks-generated.h" line="3437"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32765">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32759">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32760">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_call_set_name().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_name_sync"
              c:identifier="udisks_partition_call_set_name_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32784">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetName"&gt;SetName()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_call_set_name() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3442"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32796">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32786">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32787">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32788">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32789">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_type"
              c:identifier="udisks_partition_call_set_type">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32617">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetType"&gt;SetType()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_call_set_type_finish() to get the result of the operation.

See udisks_partition_call_set_type_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3409"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32619">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32620">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32621">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32622">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32623">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32624">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_type_finish"
              c:identifier="udisks_partition_call_set_type_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32653">Finishes an operation started with udisks_partition_call_set_type().</doc>
        <source-position filename="udisks-generated.h" line="3417"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32661">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32655">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32656">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_call_set_type().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_type_sync"
              c:identifier="udisks_partition_call_set_type_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32680">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetType"&gt;SetType()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_call_set_type() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3422"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32692">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32682">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32683">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32684">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32685">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_uuid"
              c:identifier="udisks_partition_call_set_uuid"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32825">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetUUID"&gt;SetUUID()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_call_set_uuid_finish() to get the result of the operation.

See udisks_partition_call_set_uuid_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3449"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32827">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32828">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32829">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32830">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32831">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32832">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_uuid_finish"
              c:identifier="udisks_partition_call_set_uuid_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32863">Finishes an operation started with udisks_partition_call_set_uuid().</doc>
        <source-position filename="udisks-generated.h" line="3457"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32871">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32865">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32866">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_call_set_uuid().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_uuid_sync"
              c:identifier="udisks_partition_call_set_uuid_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32892">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetUUID"&gt;SetUUID()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_call_set_uuid() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3462"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32904">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32894">A #UDisksPartitionProxy.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="arg_uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32895">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32896">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32897">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_delete"
              c:identifier="udisks_partition_complete_delete">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33341">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Delete"&gt;Delete()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3402"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33343">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33344">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_resize"
              c:identifier="udisks_partition_complete_resize"
              version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33321">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Resize"&gt;Resize()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3398"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33323">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33324">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_flags"
              c:identifier="udisks_partition_complete_set_flags">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33303">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetFlags"&gt;SetFlags()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3394"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33305">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33306">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_name"
              c:identifier="udisks_partition_complete_set_name">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33265">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetName"&gt;SetName()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3386"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33267">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33268">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_type"
              c:identifier="udisks_partition_complete_set_type">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33247">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetType"&gt;SetType()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3382"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33249">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33250">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_uuid"
              c:identifier="udisks_partition_complete_set_uuid"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33283">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetUUID"&gt;SetUUID()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3390"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33285">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33286">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_name"
              c:identifier="udisks_partition_dup_name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32412">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3547"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32420">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32414">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_table"
              c:identifier="udisks_partition_dup_table"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32518">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Table"&gt;"Table"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3555"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32526">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32520">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_type_"
              c:identifier="udisks_partition_dup_type_"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32260">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3534"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32268">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32262">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_uuid"
              c:identifier="udisks_partition_dup_uuid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32465">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3551"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32473">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32467">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags"
              c:identifier="udisks_partition_get_flags"
              glib:get-property="flags"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32293">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Flags"&gt;"Flags"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3537"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32301">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32295">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_contained"
              c:identifier="udisks_partition_get_is_contained"
              glib:get-property="is-contained"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32584">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContained"&gt;"IsContained"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3561"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32592">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32586">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_container"
              c:identifier="udisks_partition_get_is_container"
              glib:get-property="is-container"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32551">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContainer"&gt;"IsContainer"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3558"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32559">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32553">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="udisks_partition_get_name"
              glib:get-property="name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32392">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3546"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32402">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32394">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_number"
              c:identifier="udisks_partition_get_number"
              glib:get-property="number"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32207">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Number"&gt;"Number"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3530"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32215">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32209">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_offset"
              c:identifier="udisks_partition_get_offset"
              glib:get-property="offset"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32326">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Offset"&gt;"Offset"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3540"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32334">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32328">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_partition_get_size"
              glib:get-property="size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32359">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3543"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32367">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32361">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_table"
              c:identifier="udisks_partition_get_table"
              glib:get-property="table"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32498">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Table"&gt;"Table"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_table() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3554"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32508">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32500">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_type_"
              c:identifier="udisks_partition_get_type_"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32240">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_type_() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3533"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32250">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32242">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid"
              c:identifier="udisks_partition_get_uuid"
              glib:get-property="uuid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32445">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3550"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32455">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32447">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_flags"
              c:identifier="udisks_partition_set_flags"
              glib:set-property="flags"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32311">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Flags"&gt;"Flags"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3538"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32313">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32314">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_contained"
              c:identifier="udisks_partition_set_is_contained"
              glib:set-property="is-contained"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32602">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContained"&gt;"IsContained"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3562"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32604">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32605">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_container"
              c:identifier="udisks_partition_set_is_container"
              glib:set-property="is-container"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32569">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContainer"&gt;"IsContainer"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3559"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32571">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32572">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="udisks_partition_set_name"
              glib:set-property="name"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32430">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Name"&gt;"Name"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3548"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32432">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32433">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_number"
              c:identifier="udisks_partition_set_number"
              glib:set-property="number"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32225">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Number"&gt;"Number"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3531"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32227">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32228">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_offset"
              c:identifier="udisks_partition_set_offset"
              glib:set-property="offset"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32344">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Offset"&gt;"Offset"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3541"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32346">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32347">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_partition_set_size"
              glib:set-property="size"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32377">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3544"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32379">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32380">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_table"
              c:identifier="udisks_partition_set_table"
              glib:set-property="table"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32536">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Table"&gt;"Table"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3556"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32538">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32539">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_type_"
              c:identifier="udisks_partition_set_type_"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32278">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Type"&gt;"Type"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3535"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32280">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32281">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uuid"
              c:identifier="udisks_partition_set_uuid"
              glib:set-property="uuid"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32483">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3552"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32485">A #UDisksPartition.</doc>
            <type name="Partition" c:type="UDisksPartition*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32486">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="flags"
                writable="1"
                transfer-ownership="none"
                setter="set_flags"
                getter="get_flags"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32133">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Flags"&gt;"Flags"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="is-contained"
                writable="1"
                transfer-ownership="none"
                setter="set_is_contained"
                getter="get_is_contained"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32196">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContained"&gt;"IsContained"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="is-container"
                writable="1"
                transfer-ownership="none"
                setter="set_is_container"
                getter="get_is_container"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32187">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.IsContainer"&gt;"IsContainer"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="name"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32160">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Name"&gt;"Name"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="number"
                writable="1"
                transfer-ownership="none"
                setter="set_number"
                getter="get_number"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32115">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Number"&gt;"Number"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="offset"
                writable="1"
                transfer-ownership="none"
                setter="set_offset"
                getter="get_offset"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32142">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Offset"&gt;"Offset"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="size"
                writable="1"
                transfer-ownership="none"
                setter="set_size"
                getter="get_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32151">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="table"
                writable="1"
                transfer-ownership="none"
                setter="set_table"
                getter="get_table"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32178">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Table"&gt;"Table"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="type"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32124">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.Type"&gt;"Type"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="uuid"
                writable="1"
                transfer-ownership="none"
                setter="set_uuid"
                getter="get_uuid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32169">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Partition.UUID"&gt;"UUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-delete" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32091">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Delete"&gt;Delete()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_complete_delete() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32101">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32094">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32095">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-resize" when="last" version="2.7.2">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32065">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.Resize"&gt;Resize()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_complete_resize() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32076">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32068">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32069">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32070">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-flags" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32041">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetFlags"&gt;SetFlags()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_complete_set_flags() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32052">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32044">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32045">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32046">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-name" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31991">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetName"&gt;SetName()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_complete_set_name() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32002">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31994">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31995">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31996">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-type" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31967">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetType"&gt;SetType()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_complete_set_type() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31978">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31970">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31971">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="31972">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-uuid" when="last" version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="32015">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Partition.SetUUID"&gt;SetUUID()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_complete_set_uuid() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="32026">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32018">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32019">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32020">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="PartitionIface"
            c:type="UDisksPartitionIface"
            glib:is-gtype-struct-for="Partition">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="31937">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="3369"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31939">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_delete">
        <callback name="handle_delete">
          <source-position filename="udisks-generated.h" line="3314"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_flags">
        <callback name="handle_set_flags">
          <source-position filename="udisks-generated.h" line="3319"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_flags" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_name">
        <callback name="handle_set_name">
          <source-position filename="udisks-generated.h" line="3325"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_type">
        <callback name="handle_set_type">
          <source-position filename="udisks-generated.h" line="3331"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_flags">
        <callback name="get_flags">
          <source-position filename="udisks-generated.h" line="3337"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32301">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32295">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_is_contained">
        <callback name="get_is_contained">
          <source-position filename="udisks-generated.h" line="3339"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32592">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32586">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_is_container">
        <callback name="get_is_container">
          <source-position filename="udisks-generated.h" line="3341"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32559">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32553">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_name">
        <callback name="get_name">
          <source-position filename="udisks-generated.h" line="3343"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32402">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32394">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_number">
        <callback name="get_number">
          <source-position filename="udisks-generated.h" line="3345"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32215">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32209">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_offset">
        <callback name="get_offset">
          <source-position filename="udisks-generated.h" line="3347"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32334">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32328">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <source-position filename="udisks-generated.h" line="3349"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32367">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32361">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_table">
        <callback name="get_table">
          <source-position filename="udisks-generated.h" line="3351"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32508">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32500">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_type_">
        <callback name="get_type_">
          <source-position filename="udisks-generated.h" line="3353"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32250">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32242">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_uuid">
        <callback name="get_uuid">
          <source-position filename="udisks-generated.h" line="3355"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="32455">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="32447">A #UDisksPartition.</doc>
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_resize">
        <callback name="handle_resize">
          <source-position filename="udisks-generated.h" line="3357"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_uuid">
        <callback name="handle_set_uuid">
          <source-position filename="udisks-generated.h" line="3363"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Partition" c:type="UDisksPartition*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_uuid" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="PartitionProxy"
           c:symbol-prefix="partition_proxy"
           c:type="UDisksPartitionProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksPartitionProxy"
           glib:get-type="udisks_partition_proxy_get_type"
           glib:type-struct="PartitionProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="33361">The #UDisksPartitionProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="3588"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Partition"/>
      <constructor name="new_finish"
                   c:identifier="udisks_partition_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33765">Finishes an operation started with udisks_partition_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="3604"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="33772">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionProxy" c:type="UDisksPartition*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33767">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_partition_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33855">Finishes an operation started with udisks_partition_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="3623"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="33862">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionProxy" c:type="UDisksPartition*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33857">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_partition_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33880">Like udisks_partition_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_partition_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3626"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="33895">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionProxy" c:type="UDisksPartition*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33882">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33883">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33884">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33885">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33886">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_partition_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33790">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_partition_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3607"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="33805">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionProxy" c:type="UDisksPartition*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33792">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33793">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33794">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33795">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33796">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_partition_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33735">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_proxy_new_finish() to get the result of the operation.

See udisks_partition_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3596"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33737">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33738">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33739">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33740">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33741">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33742">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33743">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_partition_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33825">Like udisks_partition_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_partition_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3615"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33827">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33828">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33829">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33830">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33831">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33832">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="33833">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PartitionProxyPrivate"
              c:type="UDisksPartitionProxyPrivate*"/>
      </field>
    </class>
    <record name="PartitionProxyClass"
            c:type="UDisksPartitionProxyClass"
            glib:is-gtype-struct-for="PartitionProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="33367">Class structure for #UDisksPartitionProxy.</doc>
      <source-position filename="udisks-generated.h" line="3588"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33369">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="PartitionProxyPrivate"
            c:type="UDisksPartitionProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="3576"/>
    </record>
    <class name="PartitionSkeleton"
           c:symbol-prefix="partition_skeleton"
           c:type="UDisksPartitionSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksPartitionSkeleton"
           glib:get-type="udisks_partition_skeleton_get_type"
           glib:type-struct="PartitionSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="33917">The #UDisksPartitionSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="3658"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Partition"/>
      <constructor name="new" c:identifier="udisks_partition_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34487">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="3666"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="34492">The skeleton object.</doc>
          <type name="PartitionSkeleton" c:type="UDisksPartition*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PartitionSkeletonPrivate"
              c:type="UDisksPartitionSkeletonPrivate*"/>
      </field>
    </class>
    <record name="PartitionSkeletonClass"
            c:type="UDisksPartitionSkeletonClass"
            glib:is-gtype-struct-for="PartitionSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="33923">Class structure for #UDisksPartitionSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="3658"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="33925">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="PartitionSkeletonPrivate"
            c:type="UDisksPartitionSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="3646"/>
    </record>
    <interface name="PartitionTable"
               c:symbol-prefix="partition_table"
               c:type="UDisksPartitionTable"
               glib:type-name="UDisksPartitionTable"
               glib:get-type="udisks_partition_table_get_type"
               glib:type-struct="PartitionTableIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="29947">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="3095"/>
      <function name="interface_info"
                c:identifier="udisks_partition_table_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29888">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="3103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29893">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_partition_table_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29901">Overrides all #GObject properties in the #UDisksPartitionTable interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="3104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29909">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29903">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29904">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_partitions"
                      invoker="get_partitions"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30048">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Partitions"&gt;"Partitions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_table_dup_partitions() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3091"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="30058">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30050">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_type_" invoker="get_type_" introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30101">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_table_dup_type_() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3093"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="30111">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30103">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_partition">
        <source-position filename="udisks-generated.h" line="3071"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_partition_and_format">
        <source-position filename="udisks-generated.h" line="3080"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_format_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_format_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_create_partition"
              c:identifier="udisks_partition_table_call_create_partition">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30154">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartition"&gt;CreatePartition()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_table_call_create_partition_finish() to get the result of the operation.

See udisks_partition_table_call_create_partition_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30156">A #UDisksPartitionTableProxy.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30157">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30158">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30159">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30160">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30161">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30162">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30163">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30164">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_partition_and_format"
              c:identifier="udisks_partition_table_call_create_partition_and_format">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30282">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartitionAndFormat"&gt;CreatePartitionAndFormat()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_table_call_create_partition_and_format_finish() to get the result of the operation.

See udisks_partition_table_call_create_partition_and_format_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3149"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30284">A #UDisksPartitionTableProxy.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30285">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30286">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30287">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30288">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30289">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_format_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30290">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_format_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30291">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30292">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="9">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30293">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30294">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_partition_and_format_finish"
              c:identifier="udisks_partition_table_call_create_partition_and_format_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30333">Finishes an operation started with udisks_partition_table_call_create_partition_and_format().</doc>
        <source-position filename="udisks-generated.h" line="3162"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="30342">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30335">A #UDisksPartitionTableProxy.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="out_created_partition"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30336">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30337">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_table_call_create_partition_and_format().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_partition_and_format_sync"
              c:identifier="udisks_partition_table_call_create_partition_and_format_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30363">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartitionAndFormat"&gt;CreatePartitionAndFormat()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_table_call_create_partition_and_format() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3168"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="30381">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30365">A #UDisksPartitionTableProxy.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30366">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30367">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30368">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30369">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30370">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="arg_format_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30371">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_format_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30372">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_created_partition"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30373">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30374">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_partition_finish"
              c:identifier="udisks_partition_table_call_create_partition_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30199">Finishes an operation started with udisks_partition_table_call_create_partition().</doc>
        <source-position filename="udisks-generated.h" line="3132"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="30208">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30201">A #UDisksPartitionTableProxy.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="out_created_partition"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30202">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30203">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_table_call_create_partition().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_partition_sync"
              c:identifier="udisks_partition_table_call_create_partition_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30229">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartition"&gt;CreatePartition()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_partition_table_call_create_partition() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="3138"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="30245">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30231">A #UDisksPartitionTableProxy.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30232">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30233">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30234">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30235">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30236">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_created_partition"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30237">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30238">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_partition"
              c:identifier="udisks_partition_table_complete_create_partition">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30422">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartition"&gt;CreatePartition()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30424">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30425">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="created_partition" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30426">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_partition_and_format"
              c:identifier="udisks_partition_table_complete_create_partition_and_format">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30443">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartitionAndFormat"&gt;CreatePartitionAndFormat()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="3113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30445">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30446">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="created_partition" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30447">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_partitions"
              c:identifier="udisks_partition_table_dup_partitions"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30068">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Partitions"&gt;"Partitions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3185"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="30076">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30070">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_type_"
              c:identifier="udisks_partition_table_dup_type_"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30121">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="3189"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="30129">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30123">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_partitions"
              c:identifier="udisks_partition_table_get_partitions"
              glib:get-property="partitions"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30048">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Partitions"&gt;"Partitions"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_table_dup_partitions() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3184"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="30058">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30050">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_type_"
              c:identifier="udisks_partition_table_get_type_"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30101">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_partition_table_dup_type_() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="3188"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="30111">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30103">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_partitions"
              c:identifier="udisks_partition_table_set_partitions"
              glib:set-property="partitions"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30086">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Partitions"&gt;"Partitions"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3186"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30088">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30089">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_type_"
              c:identifier="udisks_partition_table_set_type_"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30139">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Type"&gt;"Type"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="3190"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30141">A #UDisksPartitionTable.</doc>
            <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30142">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="partitions"
                writable="1"
                transfer-ownership="none"
                setter="set_partitions"
                getter="get_partitions">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30028">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Partitions"&gt;"Partitions"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="type"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30037">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PartitionTable.Type"&gt;"Type"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-create-partition" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29971">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartition"&gt;CreatePartition()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_table_complete_create_partition() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29985">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29974">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29975">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29976">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29977">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29978">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="29979">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-partition-and-format" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29998">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-PartitionTable.CreatePartitionAndFormat"&gt;CreatePartitionAndFormat()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_partition_table_complete_create_partition_and_format() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="30014">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30001">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30002">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30003">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30004">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30005">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30006">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
          <parameter name="arg_format_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30007">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_format_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30008">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="PartitionTableIface"
            c:type="UDisksPartitionTableIface"
            glib:is-gtype-struct-for="PartitionTable">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="29953">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="3095"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29955">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_create_partition">
        <callback name="handle_create_partition">
          <source-position filename="udisks-generated.h" line="3071"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_offset" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_create_partition_and_format">
        <callback name="handle_create_partition_and_format">
          <source-position filename="udisks-generated.h" line="3080"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_offset" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="arg_format_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_format_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_partitions">
        <callback name="get_partitions">
          <source-position filename="udisks-generated.h" line="3091"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30058">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="30050">A #UDisksPartitionTable.</doc>
              <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_type_">
        <callback name="get_type_">
          <source-position filename="udisks-generated.h" line="3093"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30111">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="30103">A #UDisksPartitionTable.</doc>
              <type name="PartitionTable" c:type="UDisksPartitionTable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="PartitionTableProxy"
           c:symbol-prefix="partition_table_proxy"
           c:type="UDisksPartitionTableProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksPartitionTableProxy"
           glib:get-type="udisks_partition_table_proxy_get_type"
           glib:type-struct="PartitionTableProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="30466">The #UDisksPartitionTableProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="3216"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="PartitionTable"/>
      <constructor name="new_finish"
                   c:identifier="udisks_partition_table_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30746">Finishes an operation started with udisks_partition_table_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="3232"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="30753">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionTableProxy" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30748">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_table_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_partition_table_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30836">Finishes an operation started with udisks_partition_table_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="3251"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="30843">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionTableProxy" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30838">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_partition_table_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_partition_table_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30861">Like udisks_partition_table_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_partition_table_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3254"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="30876">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionTableProxy" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30863">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30864">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30865">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30866">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30867">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_partition_table_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30771">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_partition_table_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3235"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="30786">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PartitionTableProxy" c:type="UDisksPartitionTable*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30773">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30774">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30775">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30776">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30777">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_partition_table_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30716">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_table_proxy_new_finish() to get the result of the operation.

See udisks_partition_table_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3224"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30718">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30719">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30720">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30721">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30722">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30723">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30724">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_partition_table_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30806">Like udisks_partition_table_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_partition_table_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_partition_table_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="3243"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30808">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30809">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30810">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30811">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30812">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30813">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="30814">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PartitionTableProxyPrivate"
              c:type="UDisksPartitionTableProxyPrivate*"/>
      </field>
    </class>
    <record name="PartitionTableProxyClass"
            c:type="UDisksPartitionTableProxyClass"
            glib:is-gtype-struct-for="PartitionTableProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="30472">Class structure for #UDisksPartitionTableProxy.</doc>
      <source-position filename="udisks-generated.h" line="3216"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30474">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="PartitionTableProxyPrivate"
            c:type="UDisksPartitionTableProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="3204"/>
    </record>
    <class name="PartitionTableSkeleton"
           c:symbol-prefix="partition_table_skeleton"
           c:type="UDisksPartitionTableSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksPartitionTableSkeleton"
           glib:get-type="udisks_partition_table_skeleton_get_type"
           glib:type-struct="PartitionTableSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="30898">The #UDisksPartitionTableSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="3286"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="PartitionTable"/>
      <constructor name="new"
                   c:identifier="udisks_partition_table_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31364">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="3294"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31369">The skeleton object.</doc>
          <type name="PartitionTableSkeleton" c:type="UDisksPartitionTable*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PartitionTableSkeletonPrivate"
              c:type="UDisksPartitionTableSkeletonPrivate*"/>
      </field>
    </class>
    <record name="PartitionTableSkeletonClass"
            c:type="UDisksPartitionTableSkeletonClass"
            glib:is-gtype-struct-for="PartitionTableSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="30904">Class structure for #UDisksPartitionTableSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="3286"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="30906">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="PartitionTableSkeletonPrivate"
            c:type="UDisksPartitionTableSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="3274"/>
    </record>
    <record name="PartitionTypeInfo"
            c:type="UDisksPartitionTypeInfo"
            glib:type-name="UDisksPartitionTypeInfo"
            glib:get-type="udisks_partition_type_info_get_type"
            c:symbol-prefix="partition_type_info">
      <doc xml:space="preserve"
           filename="udisksclient.h"
           line="166">Detailed information about a partition type.

@table_subtype is used to break the set of partition types for
@table_type into a logical subsets. It is typically only used in
user interfaces where the partition type is selected.

This struct may grow in the future without it being considered an
ABI break.</doc>
      <source-position filename="udisksclient.h" line="189"/>
      <field name="table_type" writable="1">
        <doc xml:space="preserve"
             filename="udisksclient.h"
             line="168">A partition table type e.g. 'dos' or 'gpt'</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="table_subtype" writable="1">
        <doc xml:space="preserve"
             filename="udisksclient.h"
             line="169">A partition table sub-type.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="type" writable="1">
        <doc xml:space="preserve"
             filename="udisksclient.h"
             line="170">A partition type.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="flags" writable="1">
        <doc xml:space="preserve"
             filename="udisksclient.h"
             line="171">Flags from the #UDisksPartitionTypeInfoFlags enumeration.</doc>
        <type name="PartitionTypeInfoFlags"
              c:type="UDisksPartitionTypeInfoFlags"/>
      </field>
      <method name="free" c:identifier="udisks_partition_type_info_free">
        <doc xml:space="preserve"
             filename="udisksclient.c"
             line="2814">Frees @info.</doc>
        <source-position filename="udisksclient.h" line="193"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisksclient.c"
                 line="2816">A #UDisksPartitionTypeInfo.</doc>
            <type name="PartitionTypeInfo" c:type="UDisksPartitionTypeInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <bitfield name="PartitionTypeInfoFlags"
              glib:type-name="UDisksPartitionTypeInfoFlags"
              glib:get-type="udisks_partition_type_info_flags_get_type"
              c:type="UDisksPartitionTypeInfoFlags">
      <doc xml:space="preserve"
           filename="udisksenums.h"
           line="86">Flags describing a partition type.</doc>
      <member name="none"
              value="0"
              c:identifier="UDISKS_PARTITION_TYPE_INFO_FLAGS_NONE"
              glib:nick="none"
              glib:name="UDISKS_PARTITION_TYPE_INFO_FLAGS_NONE">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="88">No flags set.</doc>
      </member>
      <member name="swap"
              value="1"
              c:identifier="UDISKS_PARTITION_TYPE_INFO_FLAGS_SWAP"
              glib:nick="swap"
              glib:name="UDISKS_PARTITION_TYPE_INFO_FLAGS_SWAP">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="89">Partition type is used for swap.</doc>
      </member>
      <member name="raid"
              value="2"
              c:identifier="UDISKS_PARTITION_TYPE_INFO_FLAGS_RAID"
              glib:nick="raid"
              glib:name="UDISKS_PARTITION_TYPE_INFO_FLAGS_RAID">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="90">Partition type is used for RAID/LVM or similar.</doc>
      </member>
      <member name="hidden"
              value="4"
              c:identifier="UDISKS_PARTITION_TYPE_INFO_FLAGS_HIDDEN"
              glib:nick="hidden"
              glib:name="UDISKS_PARTITION_TYPE_INFO_FLAGS_HIDDEN">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="91">Partition type indicates the partition is hidden (e.g. 'dos' type 0x1b "Hidden W95 FAT32"). Note that this is not the same as user-toggleable attributes/flags for a partition.</doc>
      </member>
      <member name="create_only"
              value="8"
              c:identifier="UDISKS_PARTITION_TYPE_INFO_FLAGS_CREATE_ONLY"
              glib:nick="create-only"
              glib:name="UDISKS_PARTITION_TYPE_INFO_FLAGS_CREATE_ONLY">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="92">Partition type can only be used when creating a partition and e.g. should not be selectable in a "change partition type" user interface (e.g. 'dos' type 0x05, 0x0f and 0x85 for extended partitions).</doc>
      </member>
      <member name="system"
              value="16"
              c:identifier="UDISKS_PARTITION_TYPE_INFO_FLAGS_SYSTEM"
              glib:nick="system"
              glib:name="UDISKS_PARTITION_TYPE_INFO_FLAGS_SYSTEM">
        <doc xml:space="preserve"
             filename="udisksenums.h"
             line="93">Partition type indicates the partition is part of the system / bootloader (e.g. 'dos' types 0xee, 0xff, 'gpt' types for 'EFI System partition' and 'BIOS Boot partition').</doc>
      </member>
    </bitfield>
    <interface name="PhysicalVolume"
               c:symbol-prefix="physical_volume"
               c:type="UDisksPhysicalVolume"
               version="2.0.0"
               glib:type-name="UDisksPhysicalVolume"
               glib:get-type="udisks_physical_volume_get_type"
               glib:type-struct="PhysicalVolumeIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="64399">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="7525"/>
      <function name="interface_info"
                c:identifier="udisks_physical_volume_interface_info"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64361">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="7533"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64366">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_physical_volume_override_properties"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64376">Overrides all #GObject properties in the #UDisksPhysicalVolume interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="7534"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64384">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64378">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64379">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_free_size"
                      invoker="get_free_size"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64557">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.FreeSize"&gt;"FreeSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="7519"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64565">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64559">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size"
                      invoker="get_size"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64520">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="7521"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64528">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64522">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_volume_group"
                      invoker="get_volume_group"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64461">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_physical_volume_dup_volume_group() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="7523"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64471">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64463">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="dup_volume_group"
              c:identifier="udisks_physical_volume_dup_volume_group"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64483">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="7539"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64491">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64485">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_free_size"
              c:identifier="udisks_physical_volume_get_free_size"
              glib:get-property="free-size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64557">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.FreeSize"&gt;"FreeSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="7545"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64565">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64559">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_physical_volume_get_size"
              glib:get-property="size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64520">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="7542"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64528">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64522">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_volume_group"
              c:identifier="udisks_physical_volume_get_volume_group"
              glib:get-property="volume-group"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64461">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_physical_volume_dup_volume_group() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="7538"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64471">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64463">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_free_size"
              c:identifier="udisks_physical_volume_set_free_size"
              glib:set-property="free-size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64577">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.FreeSize"&gt;"FreeSize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="7546"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64579">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64580">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_physical_volume_set_size"
              glib:set-property="size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64540">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="7543"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64542">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64543">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_volume_group"
              c:identifier="udisks_physical_volume_set_volume_group"
              glib:set-property="volume-group"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64503">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="7540"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64505">A #UDisksPhysicalVolume.</doc>
            <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64506">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="free-size"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_free_size"
                getter="get_free_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64448">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.FreeSize"&gt;"FreeSize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="size"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_size"
                getter="get_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64437">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="volume-group"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_volume_group"
                getter="get_volume_group"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64426">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-PhysicalVolume.VolumeGroup"&gt;"VolumeGroup"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </interface>
    <record name="PhysicalVolumeIface"
            c:type="UDisksPhysicalVolumeIface"
            glib:is-gtype-struct-for="PhysicalVolume"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="64407">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="7525"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64409">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_free_size">
        <callback name="get_free_size">
          <source-position filename="udisks-generated.h" line="7519"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64565">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="64559">A #UDisksPhysicalVolume.</doc>
              <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <source-position filename="udisks-generated.h" line="7521"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64528">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="64522">A #UDisksPhysicalVolume.</doc>
              <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_volume_group">
        <callback name="get_volume_group">
          <source-position filename="udisks-generated.h" line="7523"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64471">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="64463">A #UDisksPhysicalVolume.</doc>
              <type name="PhysicalVolume" c:type="UDisksPhysicalVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="PhysicalVolumeProxy"
           c:symbol-prefix="physical_volume_proxy"
           c:type="UDisksPhysicalVolumeProxy"
           version="2.0.0"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksPhysicalVolumeProxy"
           glib:get-type="udisks_physical_volume_proxy_get_type"
           glib:type-struct="PhysicalVolumeProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="64596">The #UDisksPhysicalVolumeProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="7572"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="PhysicalVolume"/>
      <constructor name="new_finish"
                   c:identifier="udisks_physical_volume_proxy_new_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64894">Finishes an operation started with udisks_physical_volume_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="7588"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64901">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PhysicalVolumeProxy" c:type="UDisksPhysicalVolume*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64896">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_physical_volume_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_physical_volume_proxy_new_for_bus_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64990">Finishes an operation started with udisks_physical_volume_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="7607"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64997">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PhysicalVolumeProxy" c:type="UDisksPhysicalVolume*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64992">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_physical_volume_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_physical_volume_proxy_new_for_bus_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="65017">Like udisks_physical_volume_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_physical_volume_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7610"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="65032">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PhysicalVolumeProxy" c:type="UDisksPhysicalVolume*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="65019">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="65020">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="65021">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="65022">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="65023">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_physical_volume_proxy_new_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64921">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_physical_volume_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7591"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64936">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="PhysicalVolumeProxy" c:type="UDisksPhysicalVolume*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64923">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64924">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64925">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64926">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64927">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_physical_volume_proxy_new"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64862">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_physical_volume_proxy_new_finish() to get the result of the operation.

See udisks_physical_volume_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7580"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64864">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64865">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64866">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64867">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64868">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64869">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64870">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_physical_volume_proxy_new_for_bus"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64958">Like udisks_physical_volume_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_physical_volume_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_physical_volume_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="7599"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64960">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64961">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64962">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64963">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64964">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64965">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="64966">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PhysicalVolumeProxyPrivate"
              c:type="UDisksPhysicalVolumeProxyPrivate*"/>
      </field>
    </class>
    <record name="PhysicalVolumeProxyClass"
            c:type="UDisksPhysicalVolumeProxyClass"
            glib:is-gtype-struct-for="PhysicalVolumeProxy"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="64604">Class structure for #UDisksPhysicalVolumeProxy.</doc>
      <source-position filename="udisks-generated.h" line="7572"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64606">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="PhysicalVolumeProxyPrivate"
            c:type="UDisksPhysicalVolumeProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="7560"/>
    </record>
    <class name="PhysicalVolumeSkeleton"
           c:symbol-prefix="physical_volume_skeleton"
           c:type="UDisksPhysicalVolumeSkeleton"
           version="2.0.0"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksPhysicalVolumeSkeleton"
           glib:get-type="udisks_physical_volume_skeleton_get_type"
           glib:type-struct="PhysicalVolumeSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="65056">The #UDisksPhysicalVolumeSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="7642"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="PhysicalVolume"/>
      <constructor name="new"
                   c:identifier="udisks_physical_volume_skeleton_new"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="65539">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="7650"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="65544">The skeleton object.</doc>
          <type name="PhysicalVolumeSkeleton" c:type="UDisksPhysicalVolume*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PhysicalVolumeSkeletonPrivate"
              c:type="UDisksPhysicalVolumeSkeletonPrivate*"/>
      </field>
    </class>
    <record name="PhysicalVolumeSkeletonClass"
            c:type="UDisksPhysicalVolumeSkeletonClass"
            glib:is-gtype-struct-for="PhysicalVolumeSkeleton"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="65064">Class structure for #UDisksPhysicalVolumeSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="7642"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="65066">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="PhysicalVolumeSkeletonPrivate"
            c:type="UDisksPhysicalVolumeSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="7630"/>
    </record>
    <function-macro name="SWAPSPACE"
                    c:identifier="UDISKS_SWAPSPACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4059"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SWAPSPACE_GET_IFACE"
                    c:identifier="UDISKS_SWAPSPACE_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4061"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SWAPSPACE_PROXY"
                    c:identifier="UDISKS_SWAPSPACE_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4214"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SWAPSPACE_PROXY_CLASS"
                    c:identifier="UDISKS_SWAPSPACE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4215"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SWAPSPACE_PROXY_GET_CLASS"
                    c:identifier="UDISKS_SWAPSPACE_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4216"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SWAPSPACE_SKELETON"
                    c:identifier="UDISKS_SWAPSPACE_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4284"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SWAPSPACE_SKELETON_CLASS"
                    c:identifier="UDISKS_SWAPSPACE_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4285"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SWAPSPACE_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_SWAPSPACE_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="4286"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Swapspace"
               c:symbol-prefix="swapspace"
               c:type="UDisksSwapspace"
               glib:type-name="UDisksSwapspace"
               glib:get-type="udisks_swapspace_get_type"
               glib:type-struct="SwapspaceIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="37587">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="4096"/>
      <function name="interface_info"
                c:identifier="udisks_swapspace_interface_info">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37503">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="4104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37508">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_swapspace_override_properties">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37516">Overrides all #GObject properties in the #UDisksSwapspace interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="4105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37524">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37518">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37519">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_active"
                      invoker="get_active"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37720">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Swapspace.Active"&gt;"Active"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4088"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37728">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37722">A #UDisksSwapspace.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_label">
        <source-position filename="udisks-generated.h" line="4072"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_set_uuid">
        <source-position filename="udisks-generated.h" line="4090"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_uuid" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_start">
        <source-position filename="udisks-generated.h" line="4078"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_stop">
        <source-position filename="udisks-generated.h" line="4083"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_set_label"
              c:identifier="udisks_swapspace_call_set_label">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37949">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_swapspace_call_set_label_finish() to get the result of the operation.

See udisks_swapspace_call_set_label_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4164"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37951">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37952">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37953">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37954">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37955">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37956">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_label_finish"
              c:identifier="udisks_swapspace_call_set_label_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37985">Finishes an operation started with udisks_swapspace_call_set_label().</doc>
        <source-position filename="udisks-generated.h" line="4172"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37993">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37987">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37988">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_swapspace_call_set_label().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_label_sync"
              c:identifier="udisks_swapspace_call_set_label_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38012">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_swapspace_call_set_label() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4177"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38024">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38014">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38015">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38016">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38017">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_uuid"
              c:identifier="udisks_swapspace_call_set_uuid"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38053">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.SetUUID"&gt;SetUUID()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_swapspace_call_set_uuid_finish() to get the result of the operation.

See udisks_swapspace_call_set_uuid_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4184"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38055">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="arg_uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38056">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38057">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38058">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38059">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38060">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_uuid_finish"
              c:identifier="udisks_swapspace_call_set_uuid_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38091">Finishes an operation started with udisks_swapspace_call_set_uuid().</doc>
        <source-position filename="udisks-generated.h" line="4192"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38099">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38093">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38094">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_swapspace_call_set_uuid().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_set_uuid_sync"
              c:identifier="udisks_swapspace_call_set_uuid_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38120">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.SetUUID"&gt;SetUUID()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_swapspace_call_set_uuid() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4197"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38132">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38122">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="arg_uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38123">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38124">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38125">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start" c:identifier="udisks_swapspace_call_start">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37753">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Start"&gt;Start()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_swapspace_call_start_finish() to get the result of the operation.

See udisks_swapspace_call_start_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37755">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37756">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37757">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37758">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37759">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_finish"
              c:identifier="udisks_swapspace_call_start_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37786">Finishes an operation started with udisks_swapspace_call_start().</doc>
        <source-position filename="udisks-generated.h" line="4135"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37794">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37788">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37789">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_swapspace_call_start().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_sync"
              c:identifier="udisks_swapspace_call_start_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37813">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Start"&gt;Start()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_swapspace_call_start() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4140"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37824">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37815">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37816">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37817">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_stop" c:identifier="udisks_swapspace_call_stop">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37851">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Stop"&gt;Stop()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_swapspace_call_stop_finish() to get the result of the operation.

See udisks_swapspace_call_stop_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4146"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37853">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37854">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37855">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37856">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37857">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_stop_finish"
              c:identifier="udisks_swapspace_call_stop_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37884">Finishes an operation started with udisks_swapspace_call_stop().</doc>
        <source-position filename="udisks-generated.h" line="4153"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37892">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37886">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37887">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_swapspace_call_stop().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_stop_sync"
              c:identifier="udisks_swapspace_call_stop_sync"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37911">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Stop"&gt;Stop()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_swapspace_call_stop() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="4158"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37922">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37913">A #UDisksSwapspaceProxy.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37914">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37915">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_label"
              c:identifier="udisks_swapspace_complete_set_label">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38199">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38201">A #UDisksSwapspace.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38202">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_set_uuid"
              c:identifier="udisks_swapspace_complete_set_uuid"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38217">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.SetUUID"&gt;SetUUID()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38219">A #UDisksSwapspace.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38220">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_start"
              c:identifier="udisks_swapspace_complete_start">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38163">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Start"&gt;Start()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38165">A #UDisksSwapspace.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38166">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_stop"
              c:identifier="udisks_swapspace_complete_stop">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38181">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Stop"&gt;Stop()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="4113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38183">A #UDisksSwapspace.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38184">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_active"
              c:identifier="udisks_swapspace_get_active"
              glib:get-property="active"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37720">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Swapspace.Active"&gt;"Active"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="4207"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37728">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37722">A #UDisksSwapspace.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_active"
              c:identifier="udisks_swapspace_set_active"
              glib:set-property="active"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37738">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Swapspace.Active"&gt;"Active"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="4208"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37740">A #UDisksSwapspace.</doc>
            <type name="Swapspace" c:type="UDisksSwapspace*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37741">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="active"
                writable="1"
                transfer-ownership="none"
                setter="set_active"
                getter="get_active"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37709">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-Swapspace.Active"&gt;"Active"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="handle-set-label" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37658">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.SetLabel"&gt;SetLabel()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_swapspace_complete_set_label() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37669">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37661">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37662">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37663">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-set-uuid" when="last" version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37682">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.SetUUID"&gt;SetUUID()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_swapspace_complete_set_uuid() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37693">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37685">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37686">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37687">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-start" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37612">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Start"&gt;Start()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_swapspace_complete_start() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37622">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37615">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37616">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-stop" when="last">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37635">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-Swapspace.Stop"&gt;Stop()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_swapspace_complete_stop() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37645">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37638">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37639">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="SwapspaceIface"
            c:type="UDisksSwapspaceIface"
            glib:is-gtype-struct-for="Swapspace">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="37593">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="4096"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37595">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_set_label">
        <callback name="handle_set_label">
          <source-position filename="udisks-generated.h" line="4072"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Swapspace" c:type="UDisksSwapspace*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_label" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_start">
        <callback name="handle_start">
          <source-position filename="udisks-generated.h" line="4078"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Swapspace" c:type="UDisksSwapspace*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_stop">
        <callback name="handle_stop">
          <source-position filename="udisks-generated.h" line="4083"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Swapspace" c:type="UDisksSwapspace*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_active">
        <callback name="get_active">
          <source-position filename="udisks-generated.h" line="4088"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="37728">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="37722">A #UDisksSwapspace.</doc>
              <type name="Swapspace" c:type="UDisksSwapspace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_set_uuid">
        <callback name="handle_set_uuid">
          <source-position filename="udisks-generated.h" line="4090"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Swapspace" c:type="UDisksSwapspace*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_uuid" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="SwapspaceProxy"
           c:symbol-prefix="swapspace_proxy"
           c:type="UDisksSwapspaceProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksSwapspaceProxy"
           glib:get-type="udisks_swapspace_proxy_get_type"
           glib:type-struct="SwapspaceProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="38239">The #UDisksSwapspaceProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="4234"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="Swapspace"/>
      <constructor name="new_finish"
                   c:identifier="udisks_swapspace_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38499">Finishes an operation started with udisks_swapspace_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="4250"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38506">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="SwapspaceProxy" c:type="UDisksSwapspace*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38501">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_swapspace_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_swapspace_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38589">Finishes an operation started with udisks_swapspace_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="4269"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38596">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="SwapspaceProxy" c:type="UDisksSwapspace*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38591">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_swapspace_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_swapspace_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38614">Like udisks_swapspace_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_swapspace_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4272"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38629">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="SwapspaceProxy" c:type="UDisksSwapspace*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38616">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38617">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38618">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38619">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38620">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_swapspace_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38524">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_swapspace_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4253"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="38539">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="SwapspaceProxy" c:type="UDisksSwapspace*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38526">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38527">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38528">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38529">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38530">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="udisks_swapspace_proxy_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38469">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_swapspace_proxy_new_finish() to get the result of the operation.

See udisks_swapspace_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4242"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38471">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38472">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38473">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38474">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38475">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38476">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38477">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_swapspace_proxy_new_for_bus">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38559">Like udisks_swapspace_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_swapspace_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_swapspace_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="4261"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38561">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38562">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38563">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38564">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38565">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38566">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="38567">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SwapspaceProxyPrivate"
              c:type="UDisksSwapspaceProxyPrivate*"/>
      </field>
    </class>
    <record name="SwapspaceProxyClass"
            c:type="UDisksSwapspaceProxyClass"
            glib:is-gtype-struct-for="SwapspaceProxy">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="38245">Class structure for #UDisksSwapspaceProxy.</doc>
      <source-position filename="udisks-generated.h" line="4234"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38247">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="SwapspaceProxyPrivate"
            c:type="UDisksSwapspaceProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="4222"/>
    </record>
    <class name="SwapspaceSkeleton"
           c:symbol-prefix="swapspace_skeleton"
           c:type="UDisksSwapspaceSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksSwapspaceSkeleton"
           glib:get-type="udisks_swapspace_skeleton_get_type"
           glib:type-struct="SwapspaceSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="38651">The #UDisksSwapspaceSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="4304"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Swapspace"/>
      <constructor name="new" c:identifier="udisks_swapspace_skeleton_new">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39104">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="4312"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39109">The skeleton object.</doc>
          <type name="SwapspaceSkeleton" c:type="UDisksSwapspace*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SwapspaceSkeletonPrivate"
              c:type="UDisksSwapspaceSkeletonPrivate*"/>
      </field>
    </class>
    <record name="SwapspaceSkeletonClass"
            c:type="UDisksSwapspaceSkeletonClass"
            glib:is-gtype-struct-for="SwapspaceSkeleton">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="38657">Class structure for #UDisksSwapspaceSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="4304"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="38659">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="SwapspaceSkeletonPrivate"
            c:type="UDisksSwapspaceSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="4292"/>
    </record>
    <docsection name="UDisksBlock">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="23912">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksBlockLVM2">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="63203">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksDrive">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="7261">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksDriveAta">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="11614">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksDriveLSM">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="58755">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LSM.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LSM&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksDriveLsmLocal">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="60707">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LsmLocal.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LsmLocal&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksEncrypted">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="39122">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksFilesystem">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="34505">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksFilesystemBTRFS">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="50120">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksISCSISession">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="56464">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-ISCSI-Session.top_of_page"&gt;org.freedesktop.UDisks2.ISCSI.Session&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksJob">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="46907">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksLogicalVolume">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="70196">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksLoop">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="41324">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksMDRaid">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="42939">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksManager">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="1682">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksManagerBTRFS">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="49104">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksManagerISCSIInitiator">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="53497">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.top_of_page"&gt;org.freedesktop.UDisks2.Manager.ISCSI.Initiator&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksManagerLVM2">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="62199">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksManagerNVMe">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="5382">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-NVMe.top_of_page"&gt;org.freedesktop.UDisks2.Manager.NVMe&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksNVMeController">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="16558">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Controller.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Controller&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksNVMeFabrics">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="22310">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Fabrics.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Fabrics&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksNVMeNamespace">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="20010">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Namespace.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Namespace&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksObject">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="77720">This section contains the #UDisksObject, #UDisksObjectProxy, and #UDisksObjectSkeleton types which make it easier to work with objects implementing generated types for D-Bus interfaces.</doc>
    </docsection>
    <docsection name="UDisksObjectManagerClient">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="80363">This section contains a #GDBusObjectManagerClient that uses udisks_object_manager_client_get_proxy_type() as the #GDBusProxyTypeFunc.</doc>
    </docsection>
    <docsection name="UDisksPartition">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="31382">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksPartitionTable">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="29608">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksPhysicalVolume">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="64287">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksSwapspace">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="37306">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksVDOVolume">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="74928">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="UDisksVolumeGroup">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="65559">This section contains code for working with the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <interface name="VDOVolume"
               c:symbol-prefix="vdo_volume"
               c:type="UDisksVDOVolume"
               version="2.9.0"
               glib:type-name="UDisksVDOVolume"
               glib:get-type="udisks_vdo_volume_get_type"
               glib:type-struct="VDOVolumeIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="75394">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="8829"/>
      <function name="interface_info"
                c:identifier="udisks_vdo_volume_interface_info"
                version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75287">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="8837"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75292">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_vdo_volume_override_properties"
                version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75302">Overrides all #GObject properties in the #UDisksVDOVolume interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="8838"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75310">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75304">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75305">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_compression"
                      invoker="get_compression"
                      version="2.9.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75912">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.Compression"&gt;"Compression"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8815"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75920">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75914">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_compression_state"
                      invoker="get_compression_state"
                      version="2.9.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75757">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.CompressionState"&gt;"CompressionState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_vdo_volume_dup_compression_state() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8817"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75767">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75759">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_deduplication"
                      invoker="get_deduplication"
                      version="2.9.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75949">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.Deduplication"&gt;"Deduplication"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8819"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75957">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75951">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_index_state"
                      invoker="get_index_state"
                      version="2.9.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75816">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.IndexState"&gt;"IndexState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_vdo_volume_dup_index_state() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8821"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75826">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75818">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_operating_mode"
                      invoker="get_operating_mode"
                      version="2.9.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75698">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.OperatingMode"&gt;"OperatingMode"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_vdo_volume_dup_operating_mode() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8823"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75708">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75700">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_used_size"
                      invoker="get_used_size"
                      version="2.9.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75875">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.UsedSize"&gt;"UsedSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8825"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75883">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75877">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_vdo_pool"
                      invoker="get_vdo_pool"
                      version="2.9.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75639">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.VDOPool"&gt;"VDOPool"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_vdo_volume_dup_vdo_pool() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8827"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75649">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75641">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_enable_compression">
        <source-position filename="udisks-generated.h" line="8786"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_enable_deduplication">
        <source-position filename="udisks-generated.h" line="8792"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_statistics">
        <source-position filename="udisks-generated.h" line="8798"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_resize_logical">
        <source-position filename="udisks-generated.h" line="8803"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_resize_physical">
        <source-position filename="udisks-generated.h" line="8809"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_enable_compression"
              c:identifier="udisks_vdo_volume_call_enable_compression"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75986">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.EnableCompression"&gt;EnableCompression()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_vdo_volume_call_enable_compression_finish() to get the result of the operation.

See udisks_vdo_volume_call_enable_compression_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8866"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75988">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75989">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75990">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75991">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75992">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75993">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_compression_finish"
              c:identifier="udisks_vdo_volume_call_enable_compression_finish"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76024">Finishes an operation started with udisks_vdo_volume_call_enable_compression().</doc>
        <source-position filename="udisks-generated.h" line="8874"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="76032">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76026">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76027">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_vdo_volume_call_enable_compression().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_compression_sync"
              c:identifier="udisks_vdo_volume_call_enable_compression_sync"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76053">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.EnableCompression"&gt;EnableCompression()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_vdo_volume_call_enable_compression() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8879"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="76065">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76055">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76056">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76057">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76058">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_deduplication"
              c:identifier="udisks_vdo_volume_call_enable_deduplication"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76096">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.EnableDeduplication"&gt;EnableDeduplication()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_vdo_volume_call_enable_deduplication_finish() to get the result of the operation.

See udisks_vdo_volume_call_enable_deduplication_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8886"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76098">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76099">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76100">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76101">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76102">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76103">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_deduplication_finish"
              c:identifier="udisks_vdo_volume_call_enable_deduplication_finish"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76134">Finishes an operation started with udisks_vdo_volume_call_enable_deduplication().</doc>
        <source-position filename="udisks-generated.h" line="8894"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="76142">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76136">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76137">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_vdo_volume_call_enable_deduplication().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_deduplication_sync"
              c:identifier="udisks_vdo_volume_call_enable_deduplication_sync"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76163">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.EnableDeduplication"&gt;EnableDeduplication()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_vdo_volume_call_enable_deduplication() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8899"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="76175">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76165">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76166">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76167">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76168">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_statistics"
              c:identifier="udisks_vdo_volume_call_get_statistics"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76426">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.GetStatistics"&gt;GetStatistics()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_vdo_volume_call_get_statistics_finish() to get the result of the operation.

See udisks_vdo_volume_call_get_statistics_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8946"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76428">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76429">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76430">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76431">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76432">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_statistics_finish"
              c:identifier="udisks_vdo_volume_call_get_statistics_finish"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76461">Finishes an operation started with udisks_vdo_volume_call_get_statistics().</doc>
        <source-position filename="udisks-generated.h" line="8953"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="76470">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76463">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="out_stats"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76464">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76465">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_vdo_volume_call_get_statistics().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_statistics_sync"
              c:identifier="udisks_vdo_volume_call_get_statistics_sync"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76493">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.GetStatistics"&gt;GetStatistics()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_vdo_volume_call_get_statistics() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8959"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="76505">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76495">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76496">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_stats"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76497">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76498">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_logical"
              c:identifier="udisks_vdo_volume_call_resize_logical"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76206">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.ResizeLogical"&gt;ResizeLogical()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_vdo_volume_call_resize_logical_finish() to get the result of the operation.

See udisks_vdo_volume_call_resize_logical_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8906"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76208">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76209">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76210">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76211">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76212">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76213">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_logical_finish"
              c:identifier="udisks_vdo_volume_call_resize_logical_finish"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76244">Finishes an operation started with udisks_vdo_volume_call_resize_logical().</doc>
        <source-position filename="udisks-generated.h" line="8914"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="76252">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76246">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76247">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_vdo_volume_call_resize_logical().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_logical_sync"
              c:identifier="udisks_vdo_volume_call_resize_logical_sync"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76273">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.ResizeLogical"&gt;ResizeLogical()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_vdo_volume_call_resize_logical() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8919"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="76285">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76275">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76276">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76277">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76278">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_physical"
              c:identifier="udisks_vdo_volume_call_resize_physical"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76316">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.ResizePhysical"&gt;ResizePhysical()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_vdo_volume_call_resize_physical_finish() to get the result of the operation.

See udisks_vdo_volume_call_resize_physical_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8926"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76318">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76319">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76320">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76321">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76322">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76323">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_physical_finish"
              c:identifier="udisks_vdo_volume_call_resize_physical_finish"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76354">Finishes an operation started with udisks_vdo_volume_call_resize_physical().</doc>
        <source-position filename="udisks-generated.h" line="8934"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="76362">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76356">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76357">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_vdo_volume_call_resize_physical().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_resize_physical_sync"
              c:identifier="udisks_vdo_volume_call_resize_physical_sync"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76383">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.ResizePhysical"&gt;ResizePhysical()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_vdo_volume_call_resize_physical() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8939"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="76395">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76385">A #UDisksVDOVolumeProxy.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76386">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76387">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76388">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_enable_compression"
              c:identifier="udisks_vdo_volume_complete_enable_compression"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76536">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.EnableCompression"&gt;EnableCompression()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8842"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76538">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76539">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_enable_deduplication"
              c:identifier="udisks_vdo_volume_complete_enable_deduplication"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76556">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.EnableDeduplication"&gt;EnableDeduplication()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8846"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76558">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76559">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_statistics"
              c:identifier="udisks_vdo_volume_complete_get_statistics"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76616">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.GetStatistics"&gt;GetStatistics()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8858"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76618">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76619">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="stats" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76620">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_resize_logical"
              c:identifier="udisks_vdo_volume_complete_resize_logical"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76576">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.ResizeLogical"&gt;ResizeLogical()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8850"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76578">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76579">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_resize_physical"
              c:identifier="udisks_vdo_volume_complete_resize_physical"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76596">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.ResizePhysical"&gt;ResizePhysical()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="8854"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76598">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76599">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_compression_state"
              c:identifier="udisks_vdo_volume_dup_compression_state"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75779">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.CompressionState"&gt;"CompressionState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8978"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75787">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75781">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_index_state"
              c:identifier="udisks_vdo_volume_dup_index_state"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75838">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.IndexState"&gt;"IndexState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8982"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75846">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75840">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_operating_mode"
              c:identifier="udisks_vdo_volume_dup_operating_mode"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75720">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.OperatingMode"&gt;"OperatingMode"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8974"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75728">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75722">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_vdo_pool"
              c:identifier="udisks_vdo_volume_dup_vdo_pool"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75661">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.VDOPool"&gt;"VDOPool"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8970"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75669">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75663">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_compression"
              c:identifier="udisks_vdo_volume_get_compression"
              glib:get-property="compression"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75912">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.Compression"&gt;"Compression"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8988"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75920">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75914">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_compression_state"
              c:identifier="udisks_vdo_volume_get_compression_state"
              glib:get-property="compression-state"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75757">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.CompressionState"&gt;"CompressionState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_vdo_volume_dup_compression_state() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8977"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75767">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75759">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_deduplication"
              c:identifier="udisks_vdo_volume_get_deduplication"
              glib:get-property="deduplication"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75949">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.Deduplication"&gt;"Deduplication"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8991"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75957">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75951">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_index_state"
              c:identifier="udisks_vdo_volume_get_index_state"
              glib:get-property="index-state"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75816">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.IndexState"&gt;"IndexState"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_vdo_volume_dup_index_state() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8981"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75826">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75818">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_operating_mode"
              c:identifier="udisks_vdo_volume_get_operating_mode"
              glib:get-property="operating-mode"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75698">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.OperatingMode"&gt;"OperatingMode"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_vdo_volume_dup_operating_mode() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8973"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75708">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75700">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_used_size"
              c:identifier="udisks_vdo_volume_get_used_size"
              glib:get-property="used-size"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75875">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.UsedSize"&gt;"UsedSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8985"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75883">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75877">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vdo_pool"
              c:identifier="udisks_vdo_volume_get_vdo_pool"
              glib:get-property="vdo-pool"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75639">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.VDOPool"&gt;"VDOPool"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_vdo_volume_dup_vdo_pool() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8969"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75649">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75641">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_compression"
              c:identifier="udisks_vdo_volume_set_compression"
              glib:set-property="compression"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75932">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.Compression"&gt;"Compression"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8989"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75934">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75935">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_compression_state"
              c:identifier="udisks_vdo_volume_set_compression_state"
              glib:set-property="compression-state"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75799">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.CompressionState"&gt;"CompressionState"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8979"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75801">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75802">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_deduplication"
              c:identifier="udisks_vdo_volume_set_deduplication"
              glib:set-property="deduplication"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75969">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.Deduplication"&gt;"Deduplication"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8992"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75971">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75972">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_index_state"
              c:identifier="udisks_vdo_volume_set_index_state"
              glib:set-property="index-state"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75858">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.IndexState"&gt;"IndexState"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8983"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75860">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75861">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_operating_mode"
              c:identifier="udisks_vdo_volume_set_operating_mode"
              glib:set-property="operating-mode"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75740">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.OperatingMode"&gt;"OperatingMode"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8975"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75742">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75743">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_used_size"
              c:identifier="udisks_vdo_volume_set_used_size"
              glib:set-property="used-size"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75895">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.UsedSize"&gt;"UsedSize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8986"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75897">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75898">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vdo_pool"
              c:identifier="udisks_vdo_volume_set_vdo_pool"
              glib:set-property="vdo-pool"
              version="2.9.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75681">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.VDOPool"&gt;"VDOPool"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8971"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75683">A #UDisksVDOVolume.</doc>
            <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75684">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="compression"
                version="2.9.0"
                writable="1"
                transfer-ownership="none"
                setter="set_compression"
                getter="get_compression"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75615">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.Compression"&gt;"Compression"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="compression-state"
                version="2.9.0"
                writable="1"
                transfer-ownership="none"
                setter="set_compression_state"
                getter="get_compression_state"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75582">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.CompressionState"&gt;"CompressionState"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="deduplication"
                version="2.9.0"
                writable="1"
                transfer-ownership="none"
                setter="set_deduplication"
                getter="get_deduplication"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75626">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.Deduplication"&gt;"Deduplication"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="index-state"
                version="2.9.0"
                writable="1"
                transfer-ownership="none"
                setter="set_index_state"
                getter="get_index_state"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75593">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.IndexState"&gt;"IndexState"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="operating-mode"
                version="2.9.0"
                writable="1"
                transfer-ownership="none"
                setter="set_operating_mode"
                getter="get_operating_mode"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75571">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.OperatingMode"&gt;"OperatingMode"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="used-size"
                version="2.9.0"
                writable="1"
                transfer-ownership="none"
                setter="set_used_size"
                getter="get_used_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75604">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.UsedSize"&gt;"UsedSize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="vdo-pool"
                version="2.9.0"
                writable="1"
                transfer-ownership="none"
                setter="set_vdo_pool"
                getter="get_vdo_pool"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75560">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VDOVolume.VDOPool"&gt;"VDOPool"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-enable-compression"
                   when="last"
                   version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75430">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.EnableCompression"&gt;EnableCompression()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_vdo_volume_complete_enable_compression() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75441">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75433">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75434">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75435">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-enable-deduplication"
                   when="last"
                   version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75456">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.EnableDeduplication"&gt;EnableDeduplication()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_vdo_volume_complete_enable_deduplication() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75467">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75459">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75460">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75461">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-statistics" when="last" version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75534">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.GetStatistics"&gt;GetStatistics()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_vdo_volume_complete_get_statistics() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75544">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75537">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75538">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-resize-logical" when="last" version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75482">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.ResizeLogical"&gt;ResizeLogical()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_vdo_volume_complete_resize_logical() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75493">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75485">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75486">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75487">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-resize-physical" when="last" version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75508">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VDOVolume.ResizePhysical"&gt;ResizePhysical()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_vdo_volume_complete_resize_physical() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75519">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75511">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75512">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75513">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="VDOVolumeIface"
            c:type="UDisksVDOVolumeIface"
            glib:is-gtype-struct-for="VDOVolume"
            version="2.9.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="75402">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="8829"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75404">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_enable_compression">
        <callback name="handle_enable_compression">
          <source-position filename="udisks-generated.h" line="8786"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_enable" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_enable_deduplication">
        <callback name="handle_enable_deduplication">
          <source-position filename="udisks-generated.h" line="8792"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_enable" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_statistics">
        <callback name="handle_get_statistics">
          <source-position filename="udisks-generated.h" line="8798"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_resize_logical">
        <callback name="handle_resize_logical">
          <source-position filename="udisks-generated.h" line="8803"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_resize_physical">
        <callback name="handle_resize_physical">
          <source-position filename="udisks-generated.h" line="8809"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_compression">
        <callback name="get_compression">
          <source-position filename="udisks-generated.h" line="8815"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75920">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="75914">A #UDisksVDOVolume.</doc>
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_compression_state">
        <callback name="get_compression_state">
          <source-position filename="udisks-generated.h" line="8817"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75767">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="75759">A #UDisksVDOVolume.</doc>
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_deduplication">
        <callback name="get_deduplication">
          <source-position filename="udisks-generated.h" line="8819"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75957">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="75951">A #UDisksVDOVolume.</doc>
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_index_state">
        <callback name="get_index_state">
          <source-position filename="udisks-generated.h" line="8821"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75826">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="75818">A #UDisksVDOVolume.</doc>
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_operating_mode">
        <callback name="get_operating_mode">
          <source-position filename="udisks-generated.h" line="8823"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75708">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="75700">A #UDisksVDOVolume.</doc>
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_used_size">
        <callback name="get_used_size">
          <source-position filename="udisks-generated.h" line="8825"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75883">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="75877">A #UDisksVDOVolume.</doc>
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_vdo_pool">
        <callback name="get_vdo_pool">
          <source-position filename="udisks-generated.h" line="8827"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="75649">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="75641">A #UDisksVDOVolume.</doc>
              <type name="VDOVolume" c:type="UDisksVDOVolume*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="VDOVolumeProxy"
           c:symbol-prefix="vdo_volume_proxy"
           c:type="UDisksVDOVolumeProxy"
           version="2.9.0"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksVDOVolumeProxy"
           glib:get-type="udisks_vdo_volume_proxy_get_type"
           glib:type-struct="VDOVolumeProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="76641">The #UDisksVDOVolumeProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="9018"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="VDOVolume"/>
      <constructor name="new_finish"
                   c:identifier="udisks_vdo_volume_proxy_new_finish"
                   version="2.9.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77003">Finishes an operation started with udisks_vdo_volume_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="9034"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="77010">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="VDOVolumeProxy" c:type="UDisksVDOVolume*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77005">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_vdo_volume_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_vdo_volume_proxy_new_for_bus_finish"
                   version="2.9.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77099">Finishes an operation started with udisks_vdo_volume_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="9053"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="77106">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="VDOVolumeProxy" c:type="UDisksVDOVolume*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77101">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_vdo_volume_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_vdo_volume_proxy_new_for_bus_sync"
                   version="2.9.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77126">Like udisks_vdo_volume_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_vdo_volume_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="9056"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="77141">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="VDOVolumeProxy" c:type="UDisksVDOVolume*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77128">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77129">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77130">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77131">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77132">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_vdo_volume_proxy_new_sync"
                   version="2.9.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77030">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_vdo_volume_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="9037"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="77045">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="VDOVolumeProxy" c:type="UDisksVDOVolume*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77032">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77033">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77034">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77035">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77036">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_vdo_volume_proxy_new"
                version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76971">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_vdo_volume_proxy_new_finish() to get the result of the operation.

See udisks_vdo_volume_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="9026"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76973">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76974">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76975">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76976">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76977">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76978">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="76979">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_vdo_volume_proxy_new_for_bus"
                version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77067">Like udisks_vdo_volume_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_vdo_volume_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_vdo_volume_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="9045"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77069">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77070">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77071">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77072">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77073">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77074">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="77075">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="VDOVolumeProxyPrivate"
              c:type="UDisksVDOVolumeProxyPrivate*"/>
      </field>
    </class>
    <record name="VDOVolumeProxyClass"
            c:type="UDisksVDOVolumeProxyClass"
            glib:is-gtype-struct-for="VDOVolumeProxy"
            version="2.9.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="76649">Class structure for #UDisksVDOVolumeProxy.</doc>
      <source-position filename="udisks-generated.h" line="9018"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="76651">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="VDOVolumeProxyPrivate"
            c:type="UDisksVDOVolumeProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="9006"/>
    </record>
    <class name="VDOVolumeSkeleton"
           c:symbol-prefix="vdo_volume_skeleton"
           c:type="UDisksVDOVolumeSkeleton"
           version="2.9.0"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksVDOVolumeSkeleton"
           glib:get-type="udisks_vdo_volume_skeleton_get_type"
           glib:type-struct="VDOVolumeSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="77165">The #UDisksVDOVolumeSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="9088"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="VDOVolume"/>
      <constructor name="new"
                   c:identifier="udisks_vdo_volume_skeleton_new"
                   version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77700">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="9096"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="77705">The skeleton object.</doc>
          <type name="VDOVolumeSkeleton" c:type="UDisksVDOVolume*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="VDOVolumeSkeletonPrivate"
              c:type="UDisksVDOVolumeSkeletonPrivate*"/>
      </field>
    </class>
    <record name="VDOVolumeSkeletonClass"
            c:type="UDisksVDOVolumeSkeletonClass"
            glib:is-gtype-struct-for="VDOVolumeSkeleton"
            version="2.9.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="77173">Class structure for #UDisksVDOVolumeSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="9088"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="77175">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="VDOVolumeSkeletonPrivate"
            c:type="UDisksVDOVolumeSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="9076"/>
    </record>
    <function-macro name="VDO_VOLUME"
                    c:identifier="UDISKS_VDO_VOLUME"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8773"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VDO_VOLUME_GET_IFACE"
                    c:identifier="UDISKS_VDO_VOLUME_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8775"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VDO_VOLUME_PROXY"
                    c:identifier="UDISKS_VDO_VOLUME_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8998"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VDO_VOLUME_PROXY_CLASS"
                    c:identifier="UDISKS_VDO_VOLUME_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8999"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VDO_VOLUME_PROXY_GET_CLASS"
                    c:identifier="UDISKS_VDO_VOLUME_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9000"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VDO_VOLUME_SKELETON"
                    c:identifier="UDISKS_VDO_VOLUME_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9068"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VDO_VOLUME_SKELETON_CLASS"
                    c:identifier="UDISKS_VDO_VOLUME_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9069"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VDO_VOLUME_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_VDO_VOLUME_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="9070"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VOLUME_GROUP"
                    c:identifier="UDISKS_VOLUME_GROUP"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7657"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VOLUME_GROUP_GET_IFACE"
                    c:identifier="UDISKS_VOLUME_GROUP_GET_IFACE"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="7659"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VOLUME_GROUP_PROXY"
                    c:identifier="UDISKS_VOLUME_GROUP_PROXY"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8145"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VOLUME_GROUP_PROXY_CLASS"
                    c:identifier="UDISKS_VOLUME_GROUP_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8146"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VOLUME_GROUP_PROXY_GET_CLASS"
                    c:identifier="UDISKS_VOLUME_GROUP_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8147"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VOLUME_GROUP_SKELETON"
                    c:identifier="UDISKS_VOLUME_GROUP_SKELETON"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8215"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VOLUME_GROUP_SKELETON_CLASS"
                    c:identifier="UDISKS_VOLUME_GROUP_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8216"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VOLUME_GROUP_SKELETON_GET_CLASS"
                    c:identifier="UDISKS_VOLUME_GROUP_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="udisks-generated.h" line="8217"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="VolumeGroup"
               c:symbol-prefix="volume_group"
               c:type="UDisksVolumeGroup"
               version="2.0.0"
               glib:type-name="UDisksVolumeGroup"
               glib:get-type="udisks_volume_group_get_type"
               glib:type-struct="VolumeGroupIface">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="66653">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="7768"/>
      <function name="interface_info"
                c:identifier="udisks_volume_group_interface_info"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66455">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="udisks-generated.h" line="7776"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66460">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="udisks_volume_group_override_properties"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66470">Overrides all #GObject properties in the #UDisksVolumeGroup interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="udisks-generated.h" line="7777"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66478">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66472">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66473">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_extent_size"
                      invoker="get_extent_size"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67292">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.ExtentSize"&gt;"ExtentSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="7727"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67300">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67294">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_free_size"
                      invoker="get_free_size"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67255">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.FreeSize"&gt;"FreeSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="7729"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67263">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67257">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_missing_physical_volumes"
                      invoker="get_missing_physical_volumes"
                      version="2.10.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67366">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.MissingPhysicalVolumes"&gt;"MissingPhysicalVolumes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_volume_group_dup_missing_physical_volumes() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="7766"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67376">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67368">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_name"
                      invoker="get_name"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67100">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_volume_group_dup_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="7731"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67110">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67102">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_needs_polling"
                      invoker="get_needs_polling"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67329">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.NeedsPolling"&gt;"NeedsPolling"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="7733"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67337">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67331">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_size"
                      invoker="get_size"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67218">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="7735"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67226">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67220">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_uuid"
                      invoker="get_uuid"
                      version="2.0.0"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67159">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_volume_group_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="7737"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67169">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67161">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_add_device">
        <source-position filename="udisks-generated.h" line="7670"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_plain_volume">
        <source-position filename="udisks-generated.h" line="7676"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_plain_volume_with_layout">
        <source-position filename="udisks-generated.h" line="7752"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_layout" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_pvs" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_thin_pool_volume">
        <source-position filename="udisks-generated.h" line="7683"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_thin_volume">
        <source-position filename="udisks-generated.h" line="7690"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_pool" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_create_vdo_volume">
        <source-position filename="udisks-generated.h" line="7739"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_lv_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_pool_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_data_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_virtual_size" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_index_memory" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_compression" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_deduplication" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_write_policy" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_delete">
        <source-position filename="udisks-generated.h" line="7698"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_wipe" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_empty_device">
        <source-position filename="udisks-generated.h" line="7704"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_poll">
        <source-position filename="udisks-generated.h" line="7710"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_remove_device">
        <source-position filename="udisks-generated.h" line="7714"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_wipe" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_remove_missing_physical_volumes">
        <source-position filename="udisks-generated.h" line="7761"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_rename">
        <source-position filename="udisks-generated.h" line="7721"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_new_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_add_device"
              c:identifier="udisks_volume_group_call_add_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67749">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_add_device_finish() to get the result of the operation.

See udisks_volume_group_call_add_device_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7896"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67751">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67752">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67753">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67754">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67755">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67756">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_device_finish"
              c:identifier="udisks_volume_group_call_add_device_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67787">Finishes an operation started with udisks_volume_group_call_add_device().</doc>
        <source-position filename="udisks-generated.h" line="7904"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67795">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67789">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67790">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_add_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_add_device_sync"
              c:identifier="udisks_volume_group_call_add_device_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67816">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_add_device() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7909"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67828">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67818">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67819">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67820">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67821">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_plain_volume"
              c:identifier="udisks_volume_group_call_create_plain_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68189">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreatePlainVolume"&gt;CreatePlainVolume()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_create_plain_volume_finish() to get the result of the operation.

See udisks_volume_group_call_create_plain_volume_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7976"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68191">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68192">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68193">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68194">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68195">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68196">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68197">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_plain_volume_finish"
              c:identifier="udisks_volume_group_call_create_plain_volume_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68230">Finishes an operation started with udisks_volume_group_call_create_plain_volume().</doc>
        <source-position filename="udisks-generated.h" line="7985"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="68239">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68232">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68233">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68234">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_create_plain_volume().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_plain_volume_sync"
              c:identifier="udisks_volume_group_call_create_plain_volume_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68262">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreatePlainVolume"&gt;CreatePlainVolume()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_create_plain_volume() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7991"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="68276">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68264">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68265">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68266">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68267">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68268">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68269">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_plain_volume_with_layout"
              c:identifier="udisks_volume_group_call_create_plain_volume_with_layout"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68311">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreatePlainVolumeWithLayout"&gt;CreatePlainVolumeWithLayout()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_create_plain_volume_with_layout_finish() to get the result of the operation.

See udisks_volume_group_call_create_plain_volume_with_layout_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8000"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68313">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68314">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68315">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68316">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_pvs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68317">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68318">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68319">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68320">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68321">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_plain_volume_with_layout_finish"
              c:identifier="udisks_volume_group_call_create_plain_volume_with_layout_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68358">Finishes an operation started with udisks_volume_group_call_create_plain_volume_with_layout().</doc>
        <source-position filename="udisks-generated.h" line="8011"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="68367">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68360">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68361">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68362">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_create_plain_volume_with_layout().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_plain_volume_with_layout_sync"
              c:identifier="udisks_volume_group_call_create_plain_volume_with_layout_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68390">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreatePlainVolumeWithLayout"&gt;CreatePlainVolumeWithLayout()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_create_plain_volume_with_layout() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8017"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="68406">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68392">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68393">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68394">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68395">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_pvs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68396">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68397">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68398">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68399">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_thin_pool_volume"
              c:identifier="udisks_volume_group_call_create_thin_pool_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68445">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateThinPoolVolume"&gt;CreateThinPoolVolume()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_create_thin_pool_volume_finish() to get the result of the operation.

See udisks_volume_group_call_create_thin_pool_volume_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8028"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68447">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68448">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68449">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68450">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68451">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68452">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68453">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_thin_pool_volume_finish"
              c:identifier="udisks_volume_group_call_create_thin_pool_volume_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68486">Finishes an operation started with udisks_volume_group_call_create_thin_pool_volume().</doc>
        <source-position filename="udisks-generated.h" line="8037"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="68495">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68488">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68489">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68490">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_create_thin_pool_volume().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_thin_pool_volume_sync"
              c:identifier="udisks_volume_group_call_create_thin_pool_volume_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68518">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateThinPoolVolume"&gt;CreateThinPoolVolume()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_create_thin_pool_volume() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8043"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="68532">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68520">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68521">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68522">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68523">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68524">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68525">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_thin_volume"
              c:identifier="udisks_volume_group_call_create_thin_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68567">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateThinVolume"&gt;CreateThinVolume()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_create_thin_volume_finish() to get the result of the operation.

See udisks_volume_group_call_create_thin_volume_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8052"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68569">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68570">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68571">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68572">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68573">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68574">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68575">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68576">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_thin_volume_finish"
              c:identifier="udisks_volume_group_call_create_thin_volume_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68611">Finishes an operation started with udisks_volume_group_call_create_thin_volume().</doc>
        <source-position filename="udisks-generated.h" line="8062"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="68620">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68613">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68614">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68615">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_create_thin_volume().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_thin_volume_sync"
              c:identifier="udisks_volume_group_call_create_thin_volume_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68643">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateThinVolume"&gt;CreateThinVolume()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_create_thin_volume() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8068"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="68658">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68645">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68646">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68647">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68648">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68649">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68650">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68651">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_vdo_volume"
              c:identifier="udisks_volume_group_call_create_vdo_volume"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68695">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateVDOVolume"&gt;CreateVDOVolume()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_create_vdo_volume_finish() to get the result of the operation.

See udisks_volume_group_call_create_vdo_volume_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8078"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68697">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_lv_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68698">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_pool_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68699">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_data_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68700">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_virtual_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68701">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_index_memory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68702">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_compression" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68703">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_deduplication" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68704">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_write_policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68705">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68706">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68707">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="11">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68708">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68709">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_vdo_volume_finish"
              c:identifier="udisks_volume_group_call_create_vdo_volume_finish"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68754">Finishes an operation started with udisks_volume_group_call_create_vdo_volume().</doc>
        <source-position filename="udisks-generated.h" line="8093"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="68763">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68756">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68757">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68758">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_create_vdo_volume().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_create_vdo_volume_sync"
              c:identifier="udisks_volume_group_call_create_vdo_volume_sync"
              version="2.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68786">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateVDOVolume"&gt;CreateVDOVolume()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_create_vdo_volume() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="8099"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="68806">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68788">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_lv_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68789">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_pool_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68790">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_data_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68791">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_virtual_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68792">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_index_memory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68793">Argument to pass with the method invocation.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_compression" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68794">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_deduplication" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68795">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_write_policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68796">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68797">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68798">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68799">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete"
              c:identifier="udisks_volume_group_call_delete"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67523">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_delete_finish() to get the result of the operation.

See udisks_volume_group_call_delete_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7854"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67525">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_wipe" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67526">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67527">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67528">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67529">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67530">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_finish"
              c:identifier="udisks_volume_group_call_delete_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67561">Finishes an operation started with udisks_volume_group_call_delete().</doc>
        <source-position filename="udisks-generated.h" line="7862"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67569">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67563">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67564">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_delete().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_delete_sync"
              c:identifier="udisks_volume_group_call_delete_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67590">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Delete"&gt;Delete()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_delete() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7867"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67602">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67592">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_wipe" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67593">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67594">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67595">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_empty_device"
              c:identifier="udisks_volume_group_call_empty_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67859">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.EmptyDevice"&gt;EmptyDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_empty_device_finish() to get the result of the operation.

See udisks_volume_group_call_empty_device_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7916"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67861">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67862">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67863">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67864">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67865">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67866">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_empty_device_finish"
              c:identifier="udisks_volume_group_call_empty_device_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67897">Finishes an operation started with udisks_volume_group_call_empty_device().</doc>
        <source-position filename="udisks-generated.h" line="7924"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67905">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67899">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67900">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_empty_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_empty_device_sync"
              c:identifier="udisks_volume_group_call_empty_device_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67926">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.EmptyDevice"&gt;EmptyDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_empty_device() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7929"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67938">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67928">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67929">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67930">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67931">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_poll"
              c:identifier="udisks_volume_group_call_poll"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67425">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Poll"&gt;Poll()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_poll_finish() to get the result of the operation.

See udisks_volume_group_call_poll_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7838"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67427">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67428">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67429">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67430">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_poll_finish"
              c:identifier="udisks_volume_group_call_poll_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67457">Finishes an operation started with udisks_volume_group_call_poll().</doc>
        <source-position filename="udisks-generated.h" line="7844"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67465">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67459">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67460">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_poll().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_poll_sync"
              c:identifier="udisks_volume_group_call_poll_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67486">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Poll"&gt;Poll()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_poll() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7849"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67496">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67488">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67489">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device"
              c:identifier="udisks_volume_group_call_remove_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67969">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_remove_device_finish() to get the result of the operation.

See udisks_volume_group_call_remove_device_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7936"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67971">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67972">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_wipe" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67973">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67974">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67975">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67976">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67977">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device_finish"
              c:identifier="udisks_volume_group_call_remove_device_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68010">Finishes an operation started with udisks_volume_group_call_remove_device().</doc>
        <source-position filename="udisks-generated.h" line="7945"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="68018">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68012">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68013">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_remove_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_device_sync"
              c:identifier="udisks_volume_group_call_remove_device_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68039">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_remove_device() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7950"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="68052">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68041">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68042">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_wipe" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68043">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68044">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68045">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_missing_physical_volumes"
              c:identifier="udisks_volume_group_call_remove_missing_physical_volumes"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68085">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.RemoveMissingPhysicalVolumes"&gt;RemoveMissingPhysicalVolumes()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_remove_missing_physical_volumes_finish() to get the result of the operation.

See udisks_volume_group_call_remove_missing_physical_volumes_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7958"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68087">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68088">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68089">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68090">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68091">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_missing_physical_volumes_finish"
              c:identifier="udisks_volume_group_call_remove_missing_physical_volumes_finish"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68120">Finishes an operation started with udisks_volume_group_call_remove_missing_physical_volumes().</doc>
        <source-position filename="udisks-generated.h" line="7965"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="68128">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68122">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68123">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_remove_missing_physical_volumes().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_remove_missing_physical_volumes_sync"
              c:identifier="udisks_volume_group_call_remove_missing_physical_volumes_sync"
              version="2.10.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68149">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.RemoveMissingPhysicalVolumes"&gt;RemoveMissingPhysicalVolumes()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_remove_missing_physical_volumes() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7970"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="68160">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68151">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68152">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68153">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rename"
              c:identifier="udisks_volume_group_call_rename"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67633">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Rename"&gt;Rename()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_call_rename_finish() to get the result of the operation.

See udisks_volume_group_call_rename_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7874"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67635">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67636">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67637">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67638">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67639">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67640">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rename_finish"
              c:identifier="udisks_volume_group_call_rename_finish"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67671">Finishes an operation started with udisks_volume_group_call_rename().</doc>
        <source-position filename="udisks-generated.h" line="7882"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67680">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67673">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67674">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67675">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_call_rename().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_rename_sync"
              c:identifier="udisks_volume_group_call_rename_sync"
              version="2.0.0"
              throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67703">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Rename"&gt;Rename()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See udisks_volume_group_call_rename() for the asynchronous version of this method.</doc>
        <source-position filename="udisks-generated.h" line="7888"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67716">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67705">A #UDisksVolumeGroupProxy.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="arg_new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67706">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67707">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67708">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67709">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_add_device"
              c:identifier="udisks_volume_group_complete_add_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68916">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7794"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68918">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68919">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_plain_volume"
              c:identifier="udisks_volume_group_complete_create_plain_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68996">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreatePlainVolume"&gt;CreatePlainVolume()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7810"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68998">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68999">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69000">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_plain_volume_with_layout"
              c:identifier="udisks_volume_group_complete_create_plain_volume_with_layout"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="69019">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreatePlainVolumeWithLayout"&gt;CreatePlainVolumeWithLayout()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7815"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69021">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69022">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69023">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_thin_pool_volume"
              c:identifier="udisks_volume_group_complete_create_thin_pool_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="69042">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateThinPoolVolume"&gt;CreateThinPoolVolume()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7820"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69044">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69045">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69046">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_thin_volume"
              c:identifier="udisks_volume_group_complete_create_thin_volume"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="69065">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateThinVolume"&gt;CreateThinVolume()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7825"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69067">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69068">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69069">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_create_vdo_volume"
              c:identifier="udisks_volume_group_complete_create_vdo_volume"
              version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="69088">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateVDOVolume"&gt;CreateVDOVolume()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7830"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69090">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69091">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69092">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_delete"
              c:identifier="udisks_volume_group_complete_delete"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68873">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Delete"&gt;Delete()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7785"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68875">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68876">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_empty_device"
              c:identifier="udisks_volume_group_complete_empty_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68936">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.EmptyDevice"&gt;EmptyDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7798"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68938">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68939">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_poll"
              c:identifier="udisks_volume_group_complete_poll"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68853">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Poll"&gt;Poll()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7781"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68855">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68856">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_remove_device"
              c:identifier="udisks_volume_group_complete_remove_device"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68956">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7802"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68958">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68959">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_remove_missing_physical_volumes"
              c:identifier="udisks_volume_group_complete_remove_missing_physical_volumes"
              version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68976">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.RemoveMissingPhysicalVolumes"&gt;RemoveMissingPhysicalVolumes()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7806"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68978">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68979">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_rename"
              c:identifier="udisks_volume_group_complete_rename"
              version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="68893">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Rename"&gt;Rename()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="udisks-generated.h" line="7789"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68895">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68896">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="68897">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_missing_physical_volumes"
              c:identifier="udisks_volume_group_dup_missing_physical_volumes"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67388">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.MissingPhysicalVolumes"&gt;"MissingPhysicalVolumes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8138"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67396">The property value or %NULL if the property is not set. The returned value should be freed with g_strfreev().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67390">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_name"
              c:identifier="udisks_volume_group_dup_name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67122">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8118"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67130">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67124">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_uuid"
              c:identifier="udisks_volume_group_dup_uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67181">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8122"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67189">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67183">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_extent_size"
              c:identifier="udisks_volume_group_get_extent_size"
              glib:get-property="extent-size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67292">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.ExtentSize"&gt;"ExtentSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8131"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67300">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67294">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_free_size"
              c:identifier="udisks_volume_group_get_free_size"
              glib:get-property="free-size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67255">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.FreeSize"&gt;"FreeSize"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67263">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67257">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_missing_physical_volumes"
              c:identifier="udisks_volume_group_get_missing_physical_volumes"
              glib:get-property="missing-physical-volumes"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67366">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.MissingPhysicalVolumes"&gt;"MissingPhysicalVolumes"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_volume_group_dup_missing_physical_volumes() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8137"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67376">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67368">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="udisks_volume_group_get_name"
              glib:get-property="name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67100">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.Name"&gt;"Name"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_volume_group_dup_name() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8117"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67110">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67102">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_needs_polling"
              c:identifier="udisks_volume_group_get_needs_polling"
              glib:get-property="needs-polling"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67329">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.NeedsPolling"&gt;"NeedsPolling"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8134"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67337">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67331">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="udisks_volume_group_get_size"
              glib:get-property="size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67218">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.Size"&gt;"Size"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="udisks-generated.h" line="8125"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67226">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67220">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid"
              c:identifier="udisks_volume_group_get_uuid"
              glib:get-property="uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67159">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use udisks_volume_group_dup_uuid() if on another thread.</doc>
        <source-position filename="udisks-generated.h" line="8121"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67169">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67161">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_extent_size"
              c:identifier="udisks_volume_group_set_extent_size"
              glib:set-property="extent-size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67312">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.ExtentSize"&gt;"ExtentSize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8132"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67314">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67315">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_free_size"
              c:identifier="udisks_volume_group_set_free_size"
              glib:set-property="free-size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67275">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.FreeSize"&gt;"FreeSize"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67277">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67278">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_missing_physical_volumes"
              c:identifier="udisks_volume_group_set_missing_physical_volumes"
              glib:set-property="missing-physical-volumes"
              version="2.10.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67408">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.MissingPhysicalVolumes"&gt;"MissingPhysicalVolumes"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8139"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67410">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67411">The value to set.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="udisks_volume_group_set_name"
              glib:set-property="name"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67142">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.Name"&gt;"Name"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8119"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67144">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67145">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_needs_polling"
              c:identifier="udisks_volume_group_set_needs_polling"
              glib:set-property="needs-polling"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67349">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.NeedsPolling"&gt;"NeedsPolling"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8135"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67351">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67352">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="udisks_volume_group_set_size"
              glib:set-property="size"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67238">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.Size"&gt;"Size"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67240">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67241">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uuid"
              c:identifier="udisks_volume_group_set_uuid"
              glib:set-property="uuid"
              version="2.0.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67201">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.UUID"&gt;"UUID"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="udisks-generated.h" line="8123"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67203">A #UDisksVolumeGroup.</doc>
            <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67204">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="extent-size"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_extent_size"
                getter="get_extent_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67065">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.ExtentSize"&gt;"ExtentSize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="free-size"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_free_size"
                getter="get_free_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67054">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.FreeSize"&gt;"FreeSize"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="missing-physical-volumes"
                version="2.10.0"
                writable="1"
                transfer-ownership="none"
                setter="set_missing_physical_volumes"
                getter="get_missing_physical_volumes">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67087">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.MissingPhysicalVolumes"&gt;"MissingPhysicalVolumes"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="name"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67021">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.Name"&gt;"Name"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="needs-polling"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_needs_polling"
                getter="get_needs_polling"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67076">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.NeedsPolling"&gt;"NeedsPolling"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="size"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_size"
                getter="get_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67043">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.Size"&gt;"Size"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="uuid"
                version="2.0.0"
                writable="1"
                transfer-ownership="none"
                setter="set_uuid"
                getter="get_uuid"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="67032">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UDisks2-VolumeGroup.UUID"&gt;"UUID"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-add-device" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66772">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.AddDevice"&gt;AddDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_add_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66783">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66775">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66776">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66777">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-plain-volume"
                   when="last"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66876">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreatePlainVolume"&gt;CreatePlainVolume()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_create_plain_volume() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66888">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66879">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66880">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66881">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66882">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-plain-volume-with-layout"
                   when="last"
                   version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66903">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreatePlainVolumeWithLayout"&gt;CreatePlainVolumeWithLayout()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_create_plain_volume_with_layout() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66917">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66906">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66907">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66908">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_layout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66909">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_pvs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66910">Argument passed by remote caller.</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66911">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-thin-pool-volume"
                   when="last"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66932">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateThinPoolVolume"&gt;CreateThinPoolVolume()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_create_thin_pool_volume() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66944">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66935">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66936">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66937">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66938">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-thin-volume"
                   when="last"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66959">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateThinVolume"&gt;CreateThinVolume()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_create_thin_volume() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66972">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66962">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66963">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66964">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66965">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66966">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-create-vdo-volume" when="last" version="2.9.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66987">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.CreateVDOVolume"&gt;CreateVDOVolume()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_create_vdo_volume() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="67005">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66990">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_lv_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66991">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_pool_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66992">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_data_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66993">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_virtual_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66994">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_index_memory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66995">Argument passed by remote caller.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="arg_compression" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66996">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_deduplication" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66997">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_write_policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66998">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66999">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-delete" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66720">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Delete"&gt;Delete()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_delete() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66731">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66723">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_wipe" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66724">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66725">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-empty-device" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66798">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.EmptyDevice"&gt;EmptyDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_empty_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66809">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66801">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66802">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66803">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-poll" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66696">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Poll"&gt;Poll()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_poll() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66705">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66699">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-remove-device" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66824">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.RemoveDevice"&gt;RemoveDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_remove_device() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66836">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66827">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_block" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66828">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_wipe" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66829">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66830">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-remove-missing-physical-volumes"
                   when="last"
                   version="2.10.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66851">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.RemoveMissingPhysicalVolumes"&gt;RemoveMissingPhysicalVolumes()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_remove_missing_physical_volumes() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66861">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66854">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66855">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-rename" when="last" version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66746">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UDisks2-VolumeGroup.Rename"&gt;Rename()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call udisks_volume_group_complete_rename() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66757">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66749">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66750">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="66751">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="VolumeGroupIface"
            c:type="UDisksVolumeGroupIface"
            glib:is-gtype-struct-for="VolumeGroup"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="66661">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt;.</doc>
      <source-position filename="udisks-generated.h" line="7768"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66663">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_add_device">
        <callback name="handle_add_device">
          <source-position filename="udisks-generated.h" line="7670"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_block" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_create_plain_volume">
        <callback name="handle_create_plain_volume">
          <source-position filename="udisks-generated.h" line="7676"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_create_thin_pool_volume">
        <callback name="handle_create_thin_pool_volume">
          <source-position filename="udisks-generated.h" line="7683"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_create_thin_volume">
        <callback name="handle_create_thin_volume">
          <source-position filename="udisks-generated.h" line="7690"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_pool" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_delete">
        <callback name="handle_delete">
          <source-position filename="udisks-generated.h" line="7698"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_wipe" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_empty_device">
        <callback name="handle_empty_device">
          <source-position filename="udisks-generated.h" line="7704"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_block" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_poll">
        <callback name="handle_poll">
          <source-position filename="udisks-generated.h" line="7710"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_remove_device">
        <callback name="handle_remove_device">
          <source-position filename="udisks-generated.h" line="7714"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_block" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_wipe" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_rename">
        <callback name="handle_rename">
          <source-position filename="udisks-generated.h" line="7721"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_new_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_extent_size">
        <callback name="get_extent_size">
          <source-position filename="udisks-generated.h" line="7727"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67300">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="67294">A #UDisksVolumeGroup.</doc>
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_free_size">
        <callback name="get_free_size">
          <source-position filename="udisks-generated.h" line="7729"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67263">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="67257">A #UDisksVolumeGroup.</doc>
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_name">
        <callback name="get_name">
          <source-position filename="udisks-generated.h" line="7731"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67110">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="67102">A #UDisksVolumeGroup.</doc>
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_needs_polling">
        <callback name="get_needs_polling">
          <source-position filename="udisks-generated.h" line="7733"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67337">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="67331">A #UDisksVolumeGroup.</doc>
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_size">
        <callback name="get_size">
          <source-position filename="udisks-generated.h" line="7735"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67226">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="67220">A #UDisksVolumeGroup.</doc>
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_uuid">
        <callback name="get_uuid">
          <source-position filename="udisks-generated.h" line="7737"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67169">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="67161">A #UDisksVolumeGroup.</doc>
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_create_vdo_volume">
        <callback name="handle_create_vdo_volume">
          <source-position filename="udisks-generated.h" line="7739"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_lv_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_pool_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_data_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_virtual_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_index_memory" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_compression" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_deduplication" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="arg_write_policy" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_create_plain_volume_with_layout">
        <callback name="handle_create_plain_volume_with_layout">
          <source-position filename="udisks-generated.h" line="7752"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_size" transfer-ownership="none">
              <type name="guint64" c:type="guint64"/>
            </parameter>
            <parameter name="arg_layout" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_pvs" transfer-ownership="none">
              <type name="utf8" c:type="const gchar* const*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_remove_missing_physical_volumes">
        <callback name="handle_remove_missing_physical_volumes">
          <source-position filename="udisks-generated.h" line="7761"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_options" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_missing_physical_volumes">
        <callback name="get_missing_physical_volumes">
          <source-position filename="udisks-generated.h" line="7766"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="67376">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="udisks-generated.c"
                   line="67368">A #UDisksVolumeGroup.</doc>
              <type name="VolumeGroup" c:type="UDisksVolumeGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="VolumeGroupProxy"
           c:symbol-prefix="volume_group_proxy"
           c:type="UDisksVolumeGroupProxy"
           version="2.0.0"
           parent="Gio.DBusProxy"
           glib:type-name="UDisksVolumeGroupProxy"
           glib:get-type="udisks_volume_group_proxy_get_type"
           glib:type-struct="VolumeGroupProxyClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="69113">The #UDisksVolumeGroupProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="8165"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="VolumeGroup"/>
      <constructor name="new_finish"
                   c:identifier="udisks_volume_group_proxy_new_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="69479">Finishes an operation started with udisks_volume_group_proxy_new().</doc>
        <source-position filename="udisks-generated.h" line="8181"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="69486">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="VolumeGroupProxy" c:type="UDisksVolumeGroup*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69481">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="udisks_volume_group_proxy_new_for_bus_finish"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="69575">Finishes an operation started with udisks_volume_group_proxy_new_for_bus().</doc>
        <source-position filename="udisks-generated.h" line="8200"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="69582">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="VolumeGroupProxy" c:type="UDisksVolumeGroup*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69577">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to udisks_volume_group_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="udisks_volume_group_proxy_new_for_bus_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="69602">Like udisks_volume_group_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See udisks_volume_group_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="8203"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="69617">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="VolumeGroupProxy" c:type="UDisksVolumeGroup*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69604">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69605">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69606">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69607">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69608">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="udisks_volume_group_proxy_new_sync"
                   version="2.0.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="69506">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See udisks_volume_group_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="8184"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="69521">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="VolumeGroupProxy" c:type="UDisksVolumeGroup*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69508">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69509">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69510">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69511">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69512">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="udisks_volume_group_proxy_new"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="69447">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_proxy_new_finish() to get the result of the operation.

See udisks_volume_group_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="8173"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69449">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69450">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69451">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69452">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69453">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69454">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69455">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="udisks_volume_group_proxy_new_for_bus"
                version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="69543">Like udisks_volume_group_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call udisks_volume_group_proxy_new_for_bus_finish() to get the result of the operation.

See udisks_volume_group_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="udisks-generated.h" line="8192"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69545">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69546">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69547">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69548">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69549">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69550">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="udisks-generated.c"
                 line="69551">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="VolumeGroupProxyPrivate"
              c:type="UDisksVolumeGroupProxyPrivate*"/>
      </field>
    </class>
    <record name="VolumeGroupProxyClass"
            c:type="UDisksVolumeGroupProxyClass"
            glib:is-gtype-struct-for="VolumeGroupProxy"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="69121">Class structure for #UDisksVolumeGroupProxy.</doc>
      <source-position filename="udisks-generated.h" line="8165"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="69123">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="VolumeGroupProxyPrivate"
            c:type="UDisksVolumeGroupProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="8153"/>
    </record>
    <class name="VolumeGroupSkeleton"
           c:symbol-prefix="volume_group_skeleton"
           c:type="UDisksVolumeGroupSkeleton"
           version="2.0.0"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UDisksVolumeGroupSkeleton"
           glib:get-type="udisks_volume_group_skeleton_get_type"
           glib:type-struct="VolumeGroupSkeletonClass">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="69641">The #UDisksVolumeGroupSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="udisks-generated.h" line="8235"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="VolumeGroup"/>
      <constructor name="new"
                   c:identifier="udisks_volume_group_skeleton_new"
                   version="2.0.0">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="70176">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt;.</doc>
        <source-position filename="udisks-generated.h" line="8243"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="70181">The skeleton object.</doc>
          <type name="VolumeGroupSkeleton" c:type="UDisksVolumeGroup*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="VolumeGroupSkeletonPrivate"
              c:type="UDisksVolumeGroupSkeletonPrivate*"/>
      </field>
    </class>
    <record name="VolumeGroupSkeletonClass"
            c:type="UDisksVolumeGroupSkeletonClass"
            glib:is-gtype-struct-for="VolumeGroupSkeleton"
            version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="69649">Class structure for #UDisksVolumeGroupSkeleton.</doc>
      <source-position filename="udisks-generated.h" line="8235"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="69651">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="VolumeGroupSkeletonPrivate"
            c:type="UDisksVolumeGroupSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="udisks-generated.h" line="8223"/>
    </record>
    <function name="block_interface_info"
              c:identifier="udisks_block_interface_info"
              moved-to="Block.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="24788">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block.top_of_page"&gt;org.freedesktop.UDisks2.Block&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="2578"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24793">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="block_lvm2_interface_info"
              c:identifier="udisks_block_lvm2_interface_info"
              moved-to="BlockLVM2.interface_info"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="63247">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Block-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Block.LVM2&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="7389"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63252">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="block_lvm2_override_properties"
              c:identifier="udisks_block_lvm2_override_properties"
              moved-to="BlockLVM2.override_properties"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="63262">Overrides all #GObject properties in the #UDisksBlockLVM2 interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="7390"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="63270">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="63264">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="63265">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="block_override_properties"
              c:identifier="udisks_block_override_properties"
              moved-to="Block.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="24801">Overrides all #GObject properties in the #UDisksBlock interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="2579"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="24809">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24803">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="24804">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="drive_ata_interface_info"
              c:identifier="udisks_drive_ata_interface_info"
              moved-to="DriveAta.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="12360">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-Ata.top_of_page"&gt;org.freedesktop.UDisks2.Drive.Ata&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="1260"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12365">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="drive_ata_override_properties"
              c:identifier="udisks_drive_ata_override_properties"
              moved-to="DriveAta.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="12373">Overrides all #GObject properties in the #UDisksDriveAta interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="1261"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="12381">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12375">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="12376">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="drive_interface_info"
              c:identifier="udisks_drive_interface_info"
              moved-to="Drive.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="7835">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive.top_of_page"&gt;org.freedesktop.UDisks2.Drive&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="854"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="7840">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="drive_lsm_interface_info"
              c:identifier="udisks_drive_lsm_interface_info"
              moved-to="DriveLSM.interface_info"
              version="2.3.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="58934">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LSM.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LSM&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="6801"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58939">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="drive_lsm_local_interface_info"
              c:identifier="udisks_drive_lsm_local_interface_info"
              moved-to="DriveLsmLocal.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="60860">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Drive-LsmLocal.top_of_page"&gt;org.freedesktop.UDisks2.Drive.LsmLocal&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="6987"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60865">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="drive_lsm_local_override_properties"
              c:identifier="udisks_drive_lsm_local_override_properties"
              moved-to="DriveLsmLocal.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="60873">Overrides all #GObject properties in the #UDisksDriveLsmLocal interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="6988"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="60881">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="60875">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="60876">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="drive_lsm_override_properties"
              c:identifier="udisks_drive_lsm_override_properties"
              moved-to="DriveLSM.override_properties"
              version="2.3.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="58949">Overrides all #GObject properties in the #UDisksDriveLSM interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="6802"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="58957">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="58951">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="58952">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="drive_override_properties"
              c:identifier="udisks_drive_override_properties"
              moved-to="Drive.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="7848">Overrides all #GObject properties in the #UDisksDrive interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="855"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="7856">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="7850">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="7851">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="encrypted_interface_info"
              c:identifier="udisks_encrypted_interface_info"
              moved-to="Encrypted.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="39405">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Encrypted.top_of_page"&gt;org.freedesktop.UDisks2.Encrypted&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="4372"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39410">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="encrypted_override_properties"
              c:identifier="udisks_encrypted_override_properties"
              moved-to="Encrypted.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="39418">Overrides all #GObject properties in the #UDisksEncrypted interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="4373"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="39426">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39420">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="39421">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="error_quark"
              c:identifier="udisks_error_quark"
              moved-to="Error.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="filesystem_btrfs_interface_info"
              c:identifier="udisks_filesystem_btrfs_interface_info"
              moved-to="FilesystemBTRFS.interface_info"
              version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="50642">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem.BTRFS&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="5739"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50647">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="filesystem_btrfs_override_properties"
              c:identifier="udisks_filesystem_btrfs_override_properties"
              moved-to="FilesystemBTRFS.override_properties"
              version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="50657">Overrides all #GObject properties in the #UDisksFilesystemBTRFS interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="5740"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="50665">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50659">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="50660">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="filesystem_interface_info"
              c:identifier="udisks_filesystem_interface_info"
              moved-to="Filesystem.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="34904">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Filesystem.top_of_page"&gt;org.freedesktop.UDisks2.Filesystem&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="3741"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34909">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="filesystem_override_properties"
              c:identifier="udisks_filesystem_override_properties"
              moved-to="Filesystem.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="34917">Overrides all #GObject properties in the #UDisksFilesystem interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="3742"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="34925">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="34919">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="34920">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="iscsi_session_interface_info"
              c:identifier="udisks_iscsi_session_interface_info"
              moved-to="ISCSISession.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="56722">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-ISCSI-Session.top_of_page"&gt;org.freedesktop.UDisks2.ISCSI.Session&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="6562"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56727">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="iscsi_session_override_properties"
              c:identifier="udisks_iscsi_session_override_properties"
              moved-to="ISCSISession.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="56735">Overrides all #GObject properties in the #UDisksISCSISession interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="6563"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="56743">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56737">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="56738">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="job_interface_info"
              c:identifier="udisks_job_interface_info"
              moved-to="Job.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="47175">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Job.top_of_page"&gt;org.freedesktop.UDisks2.Job&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="5296"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47180">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="job_override_properties"
              c:identifier="udisks_job_override_properties"
              moved-to="Job.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="47188">Overrides all #GObject properties in the #UDisksJob interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="5297"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="47196">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47190">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="47191">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="logical_volume_interface_info"
              c:identifier="udisks_logical_volume_interface_info"
              moved-to="LogicalVolume.interface_info"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="70888">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-LogicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.LogicalVolume&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="8357"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="70893">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="logical_volume_override_properties"
              c:identifier="udisks_logical_volume_override_properties"
              moved-to="LogicalVolume.override_properties"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="70903">Overrides all #GObject properties in the #UDisksLogicalVolume interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="8358"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="70911">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="70905">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="70906">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="loop_interface_info"
              c:identifier="udisks_loop_interface_info"
              moved-to="Loop.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="41477">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Loop.top_of_page"&gt;org.freedesktop.UDisks2.Loop&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="4644"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41482">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="loop_override_properties"
              c:identifier="udisks_loop_override_properties"
              moved-to="Loop.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="41490">Overrides all #GObject properties in the #UDisksLoop interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="4645"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="41498">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41492">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="41493">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_btrfs_interface_info"
              c:identifier="udisks_manager_btrfs_interface_info"
              moved-to="ManagerBTRFS.interface_info"
              version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="49212">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-BTRFS.top_of_page"&gt;org.freedesktop.UDisks2.Manager.BTRFS&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="5507"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49217">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="manager_btrfs_override_properties"
              c:identifier="udisks_manager_btrfs_override_properties"
              moved-to="ManagerBTRFS.override_properties"
              version="2.1.3">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="49227">Overrides all #GObject properties in the #UDisksManagerBTRFS interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="5508"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="49235">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49229">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="49230">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_interface_info"
              c:identifier="udisks_manager_interface_info"
              moved-to="Manager.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="2320">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager.top_of_page"&gt;org.freedesktop.UDisks2.Manager&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="108"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2325">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="manager_iscsi_initiator_interface_info"
              c:identifier="udisks_manager_iscsi_initiator_interface_info"
              moved-to="ManagerISCSIInitiator.interface_info"
              version="2.0.1">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="54008">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-ISCSI-Initiator.top_of_page"&gt;org.freedesktop.UDisks2.Manager.ISCSI.Initiator&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="6170"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54013">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="manager_iscsi_initiator_override_properties"
              c:identifier="udisks_manager_iscsi_initiator_override_properties"
              moved-to="ManagerISCSIInitiator.override_properties"
              version="2.0.1">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="54023">Overrides all #GObject properties in the #UDisksManagerISCSIInitiator interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="6171"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="54031">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54025">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="54026">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_lvm2_interface_info"
              c:identifier="udisks_manager_lvm2_interface_info"
              moved-to="ManagerLVM2.interface_info"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="62300">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-LVM2.top_of_page"&gt;org.freedesktop.UDisks2.Manager.LVM2&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="7220"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62305">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="manager_lvm2_override_properties"
              c:identifier="udisks_manager_lvm2_override_properties"
              moved-to="ManagerLVM2.override_properties"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="62315">Overrides all #GObject properties in the #UDisksManagerLVM2 interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="7221"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="62323">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="62317">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="62318">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_nvme_interface_info"
              c:identifier="udisks_manager_nvme_interface_info"
              moved-to="ManagerNVMe.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="5616">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Manager-NVMe.top_of_page"&gt;org.freedesktop.UDisks2.Manager.NVMe&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="552"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5621">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="manager_nvme_override_properties"
              c:identifier="udisks_manager_nvme_override_properties"
              moved-to="ManagerNVMe.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="5629">Overrides all #GObject properties in the #UDisksManagerNVMe interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="553"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="5637">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5631">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="5632">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_override_properties"
              c:identifier="udisks_manager_override_properties"
              moved-to="Manager.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="2333">Overrides all #GObject properties in the #UDisksManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="109"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="2341">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2335">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="2336">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mdraid_interface_info"
              c:identifier="udisks_mdraid_interface_info"
              moved-to="MDRaid.interface_info"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="43463">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-MDRaid.top_of_page"&gt;org.freedesktop.UDisks2.MDRaid&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="4910"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43468">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="mdraid_override_properties"
              c:identifier="udisks_mdraid_override_properties"
              moved-to="MDRaid.override_properties"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="43478">Overrides all #GObject properties in the #UDisksMDRaid interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="4911"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="43486">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43480">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="43481">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="nvme_controller_interface_info"
              c:identifier="udisks_nvme_controller_interface_info"
              moved-to="NVMeController.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="16998">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Controller.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Controller&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="1740"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17003">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="nvme_controller_override_properties"
              c:identifier="udisks_nvme_controller_override_properties"
              moved-to="NVMeController.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="17011">Overrides all #GObject properties in the #UDisksNVMeController interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="1741"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="17019">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17013">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="17014">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="nvme_fabrics_interface_info"
              c:identifier="udisks_nvme_fabrics_interface_info"
              moved-to="NVMeFabrics.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="22435">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Fabrics.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Fabrics&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="2289"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22440">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="nvme_fabrics_override_properties"
              c:identifier="udisks_nvme_fabrics_override_properties"
              moved-to="NVMeFabrics.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="22448">Overrides all #GObject properties in the #UDisksNVMeFabrics interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="2290"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="22456">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22450">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="22451">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="nvme_namespace_interface_info"
              c:identifier="udisks_nvme_namespace_interface_info"
              moved-to="NVMeNamespace.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="20240">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-NVMe-Namespace.top_of_page"&gt;org.freedesktop.UDisks2.NVMe.Namespace&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="2074"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20245">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="nvme_namespace_override_properties"
              c:identifier="udisks_nvme_namespace_override_properties"
              moved-to="NVMeNamespace.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="20253">Overrides all #GObject properties in the #UDisksNVMeNamespace interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="2075"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="20261">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20255">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="20256">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="partition_interface_info"
              c:identifier="udisks_partition_interface_info"
              moved-to="Partition.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="31812">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Partition.top_of_page"&gt;org.freedesktop.UDisks2.Partition&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="3377"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31817">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="partition_override_properties"
              c:identifier="udisks_partition_override_properties"
              moved-to="Partition.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="31825">Overrides all #GObject properties in the #UDisksPartition interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="3378"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="31833">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31827">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="31828">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="partition_table_interface_info"
              c:identifier="udisks_partition_table_interface_info"
              moved-to="PartitionTable.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="29888">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PartitionTable.top_of_page"&gt;org.freedesktop.UDisks2.PartitionTable&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="3103"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29893">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="partition_table_override_properties"
              c:identifier="udisks_partition_table_override_properties"
              moved-to="PartitionTable.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="29901">Overrides all #GObject properties in the #UDisksPartitionTable interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="3104"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="29909">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29903">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="29904">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="physical_volume_interface_info"
              c:identifier="udisks_physical_volume_interface_info"
              moved-to="PhysicalVolume.interface_info"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="64361">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-PhysicalVolume.top_of_page"&gt;org.freedesktop.UDisks2.PhysicalVolume&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="7533"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64366">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="physical_volume_override_properties"
              c:identifier="udisks_physical_volume_override_properties"
              moved-to="PhysicalVolume.override_properties"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="64376">Overrides all #GObject properties in the #UDisksPhysicalVolume interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="7534"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="64384">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64378">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="64379">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="swapspace_interface_info"
              c:identifier="udisks_swapspace_interface_info"
              moved-to="Swapspace.interface_info">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="37503">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-Swapspace.top_of_page"&gt;org.freedesktop.UDisks2.Swapspace&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="4104"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37508">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="swapspace_override_properties"
              c:identifier="udisks_swapspace_override_properties"
              moved-to="Swapspace.override_properties">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="37516">Overrides all #GObject properties in the #UDisksSwapspace interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="4105"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="37524">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37518">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="37519">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="udiskserror">
      <doc xml:space="preserve"
           filename="udiskserror.c"
           line="26">Error codes and D-Bus errors.</doc>
    </docsection>
    <function name="vdo_volume_interface_info"
              c:identifier="udisks_vdo_volume_interface_info"
              moved-to="VDOVolume.interface_info"
              version="2.9.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="75287">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VDOVolume.top_of_page"&gt;org.freedesktop.UDisks2.VDOVolume&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="8837"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75292">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="vdo_volume_override_properties"
              c:identifier="udisks_vdo_volume_override_properties"
              moved-to="VDOVolume.override_properties"
              version="2.9.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="75302">Overrides all #GObject properties in the #UDisksVDOVolume interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="8838"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="75310">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75304">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="75305">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="volume_group_interface_info"
              c:identifier="udisks_volume_group_interface_info"
              moved-to="VolumeGroup.interface_info"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="66455">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UDisks2-VolumeGroup.top_of_page"&gt;org.freedesktop.UDisks2.VolumeGroup&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="udisks-generated.h" line="7776"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66460">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="volume_group_override_properties"
              c:identifier="udisks_volume_group_override_properties"
              moved-to="VolumeGroup.override_properties"
              version="2.0.0">
      <doc xml:space="preserve"
           filename="udisks-generated.c"
           line="66470">Overrides all #GObject properties in the #UDisksVolumeGroup interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="udisks-generated.h" line="7777"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="udisks-generated.c"
             line="66478">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66472">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="udisks-generated.c"
               line="66473">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
