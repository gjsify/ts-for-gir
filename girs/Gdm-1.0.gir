<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <namespace name="Gdm"
             version="1.0"
             shared-library="libgdm.so.1"
             c:identifier-prefixes="Gdm"
             c:symbol-prefixes="gdm">
    <function-macro name="CHOOSER"
                    c:identifier="GDM_CHOOSER"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1684"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHOOSER_GET_IFACE"
                    c:identifier="GDM_CHOOSER_GET_IFACE"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1686"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHOOSER_PROXY"
                    c:identifier="GDM_CHOOSER_PROXY"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1768"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHOOSER_PROXY_CLASS"
                    c:identifier="GDM_CHOOSER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1769"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHOOSER_PROXY_GET_CLASS"
                    c:identifier="GDM_CHOOSER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1770"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHOOSER_SKELETON"
                    c:identifier="GDM_CHOOSER_SKELETON"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1838"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHOOSER_SKELETON_CLASS"
                    c:identifier="GDM_CHOOSER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1839"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHOOSER_SKELETON_GET_CLASS"
                    c:identifier="GDM_CHOOSER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1840"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Chooser"
               c:symbol-prefix="chooser"
               c:type="GdmChooser"
               glib:type-name="GdmChooser"
               glib:get-type="gdm_chooser_get_type"
               glib:type-struct="ChooserIface">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="11716">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt;.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1705"/>
      <function name="interface_info"
                c:identifier="gdm_chooser_interface_info">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="11659">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1713"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="11664">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_chooser_override_properties">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="11672">Overrides all #GObject properties in the #GdmChooser interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1714"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="11680">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11674">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11675">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_disconnect">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="11725">Handler for the #GdmChooser::handle-disconnect signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1696"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_select_hostname">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="11726">Handler for the #GdmChooser::handle-select-hostname signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1700"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_hostname" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_disconnect"
              c:identifier="gdm_chooser_call_disconnect"
              glib:finish-func="call_disconnect_finish"
              glib:sync-func="call_disconnect_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="11883">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_chooser_call_disconnect_finish() to get the result of the operation.

See gdm_chooser_call_disconnect_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1747"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11885">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11886">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11887">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11888">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_finish"
              c:identifier="gdm_chooser_call_disconnect_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="11913">Finishes an operation started with gdm_chooser_call_disconnect().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1753"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="11921">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11915">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11916">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_chooser_call_disconnect().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_sync"
              c:identifier="gdm_chooser_call_disconnect_sync"
              throws="1"
              glib:async-func="call_disconnect">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="11940">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_chooser_call_disconnect() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1758"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="11950">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11942">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11943">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_hostname"
              c:identifier="gdm_chooser_call_select_hostname"
              glib:finish-func="call_select_hostname_finish"
              glib:sync-func="call_select_hostname_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="11785">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.SelectHostname"&gt;SelectHostname()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_chooser_call_select_hostname_finish() to get the result of the operation.

See gdm_chooser_call_select_hostname_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1729"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11787">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="arg_hostname" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11788">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11789">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11790">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11791">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_hostname_finish"
              c:identifier="gdm_chooser_call_select_hostname_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="11818">Finishes an operation started with gdm_chooser_call_select_hostname().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1736"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="11826">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11820">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11821">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_chooser_call_select_hostname().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_hostname_sync"
              c:identifier="gdm_chooser_call_select_hostname_sync"
              throws="1"
              glib:async-func="call_select_hostname">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="11845">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.SelectHostname"&gt;SelectHostname()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_chooser_call_select_hostname() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1741"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="11856">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11847">A #GdmChooserProxy.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="arg_hostname" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11848">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11849">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_disconnect"
              c:identifier="gdm_chooser_complete_disconnect">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="11993">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1722"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11995">A #GdmChooser.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11996">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_select_hostname"
              c:identifier="gdm_chooser_complete_select_hostname">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="11975">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.SelectHostname"&gt;SelectHostname()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1718"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11977">A #GdmChooser.</doc>
            <type name="Chooser" c:type="GdmChooser*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11978">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-disconnect" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="11761">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_chooser_complete_disconnect() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="11770">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11764">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-select-hostname" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="11738">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Chooser.SelectHostname"&gt;SelectHostname()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_chooser_complete_select_hostname() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="11748">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11741">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_hostname" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11742">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="ChooserIface"
            c:type="GdmChooserIface"
            glib:is-gtype-struct-for="Chooser">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="11722">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt;.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1705"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="11724">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_disconnect">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="11725">Handler for the #GdmChooser::handle-disconnect signal.</doc>
        <callback name="handle_disconnect">
          <source-position filename="libgdm/gdm-client-glue.h" line="1696"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Chooser" c:type="GdmChooser*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_select_hostname">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="11726">Handler for the #GdmChooser::handle-select-hostname signal.</doc>
        <callback name="handle_select_hostname">
          <source-position filename="libgdm/gdm-client-glue.h" line="1700"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Chooser" c:type="GdmChooser*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_hostname" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ChooserProxy"
           c:symbol-prefix="chooser_proxy"
           c:type="GdmChooserProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmChooserProxy"
           glib:get-type="gdm_chooser_proxy_get_type"
           glib:type-struct="ChooserProxyClass">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="12013">The #GdmChooserProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1788"/>
      <implements name="Chooser"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_chooser_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="12204">Finishes an operation started with gdm_chooser_proxy_new().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1804"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="12211">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ChooserProxy" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="12206">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_chooser_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_chooser_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="12294">Finishes an operation started with gdm_chooser_proxy_new_for_bus().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1823"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="12301">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ChooserProxy" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="12296">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_chooser_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_chooser_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="12319">Like gdm_chooser_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_chooser_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1826"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="12334">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ChooserProxy" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="12321">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="12322">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="12323">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="12324">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="12325">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_chooser_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="12229">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_chooser_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1807"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="12244">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ChooserProxy" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="12231">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="12232">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="12233">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="12234">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="12235">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="gdm_chooser_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="12174">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_chooser_proxy_new_finish() to get the result of the operation.

See gdm_chooser_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1796"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="12176">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="12177">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="12178">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="12179">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="12180">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="12181">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="12182">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_chooser_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="12264">Like gdm_chooser_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_chooser_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_chooser_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1815"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="12266">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="12267">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="12268">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="12269">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="12270">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="12271">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="12272">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ChooserProxyPrivate" c:type="GdmChooserProxyPrivate*"/>
      </field>
    </class>
    <record name="ChooserProxyClass"
            c:type="GdmChooserProxyClass"
            glib:is-gtype-struct-for="ChooserProxy">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="12019">Class structure for #GdmChooserProxy.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1788"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="12021">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="ChooserProxyPrivate"
            c:type="GdmChooserProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libgdm/gdm-client-glue.h" line="1776"/>
    </record>
    <class name="ChooserSkeleton"
           c:symbol-prefix="chooser_skeleton"
           c:type="GdmChooserSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmChooserSkeleton"
           glib:get-type="gdm_chooser_skeleton_get_type"
           glib:type-struct="ChooserSkeletonClass">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="12356">The #GdmChooserSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1858"/>
      <implements name="Chooser"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_chooser_skeleton_new">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="12627">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt;.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1866"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="12632">The skeleton object.</doc>
          <type name="ChooserSkeleton" c:type="GdmChooser*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ChooserSkeletonPrivate"
              c:type="GdmChooserSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ChooserSkeletonClass"
            c:type="GdmChooserSkeletonClass"
            glib:is-gtype-struct-for="ChooserSkeleton">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="12362">Class structure for #GdmChooserSkeleton.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1858"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="12364">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="ChooserSkeletonPrivate"
            c:type="GdmChooserSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libgdm/gdm-client-glue.h" line="1846"/>
    </record>
    <class name="Client"
           c:symbol-prefix="client"
           c:type="GdmClient"
           parent="GObject.Object"
           glib:type-name="GdmClient"
           glib:get-type="gdm_client_get_type"
           glib:type-struct="ClientClass">
      <source-position filename="libgdm/gdm-client.h" line="31"/>
      <constructor name="new" c:identifier="gdm_client_new">
        <source-position filename="libgdm/gdm-client.h" line="41"/>
        <return-value transfer-ownership="full">
          <type name="Client" c:type="GdmClient*"/>
        </return-value>
      </constructor>
      <function name="error_quark" c:identifier="gdm_client_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="get_chooser"
              c:identifier="gdm_client_get_chooser"
              glib:finish-func="get_chooser_finish"
              glib:sync-func="get_chooser_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client.c"
             line="1358">Gets a #GdmChooser object that can be used to
verify a user's local account.</doc>
        <source-position filename="libgdm/gdm-client.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="1360">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="1363">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="1361">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="1362">The data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_chooser_finish"
              c:identifier="gdm_client_get_chooser_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client.c"
             line="1397">Finishes an operation started with
gdm_client_get_chooser().</doc>
        <source-position filename="libgdm/gdm-client.h" line="102"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client.c"
               line="1406">a #GdmChooser</doc>
          <type name="Chooser" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="1399">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="1400">The #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_chooser_sync"
              c:identifier="gdm_client_get_chooser_sync"
              throws="1"
              glib:async-func="get_chooser">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client.c"
             line="1429">Gets a #GdmChooser object that can be used
to do do various XDMCP chooser related tasks, such
as selecting a host or disconnecting.</doc>
        <source-position filename="libgdm/gdm-client.h" line="105"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client.c"
               line="1439">#GdmChooser or %NULL if caller is not a chooser</doc>
          <type name="Chooser" c:type="GdmChooser*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="1431">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="1432">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_enabled_extensions"
              c:identifier="gdm_client_get_enabled_extensions">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client.c"
             line="1538">Gets GDM's enabled pam extensions.  Currently, only
`org.gnome.DisplayManager.UserVerifier.ChoiceList` and
`org.gnome.DisplayManager.UserVerifier.CustomJSON` are supported.</doc>
        <source-position filename="libgdm/gdm-client.h" line="44"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client.c"
               line="1546">a list of extensions</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="1540">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_greeter"
              c:identifier="gdm_client_get_greeter"
              glib:finish-func="get_greeter_finish"
              glib:sync-func="get_greeter_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client.c"
             line="1032">Gets a #GdmGreeter object that can be used to
verify a user's local account.</doc>
        <source-position filename="libgdm/gdm-client.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="1034">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="1037">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="1035">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="1036">The data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_greeter_finish"
              c:identifier="gdm_client_get_greeter_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client.c"
             line="1071">Finishes an operation started with
gdm_client_get_greeter().</doc>
        <source-position filename="libgdm/gdm-client.h" line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client.c"
               line="1080">a #GdmGreeter</doc>
          <type name="Greeter" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="1073">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="1074">The #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_greeter_sync"
              c:identifier="gdm_client_get_greeter_sync"
              throws="1"
              glib:async-func="get_greeter">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client.c"
             line="1103">Gets a #GdmGreeter object that can be used
to do do various login screen related tasks, such
as selecting a users session, and starting that
session.</doc>
        <source-position filename="libgdm/gdm-client.h" line="83"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client.c"
               line="1114">#GdmGreeter or %NULL if caller is not a greeter</doc>
          <type name="Greeter" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="1105">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="1106">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_remote_greeter"
              c:identifier="gdm_client_get_remote_greeter"
              glib:finish-func="get_remote_greeter_finish"
              glib:sync-func="get_remote_greeter_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client.c"
             line="1197">Gets a #GdmRemoteGreeter object that can be used to
verify a user's local account.</doc>
        <source-position filename="libgdm/gdm-client.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="1199">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="1202">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="1200">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="1201">The data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_remote_greeter_finish"
              c:identifier="gdm_client_get_remote_greeter_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client.c"
             line="1236">Finishes an operation started with
gdm_client_get_remote_greeter().</doc>
        <source-position filename="libgdm/gdm-client.h" line="91"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client.c"
               line="1245">a #GdmRemoteGreeter</doc>
          <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="1238">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="1239">The #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_remote_greeter_sync"
              c:identifier="gdm_client_get_remote_greeter_sync"
              throws="1"
              glib:async-func="get_remote_greeter">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client.c"
             line="1268">Gets a #GdmRemoteGreeter object that can be used
to do do various remote login screen related tasks,
such as disconnecting.</doc>
        <source-position filename="libgdm/gdm-client.h" line="94"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client.c"
               line="1278">#GdmRemoteGreeter or %NULL if caller is not remote</doc>
          <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="1270">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="1271">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_verifier"
              c:identifier="gdm_client_get_user_verifier"
              glib:finish-func="get_user_verifier_finish"
              glib:sync-func="get_user_verifier_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client.c"
             line="822">Gets a #GdmUserVerifier object that can be used to
verify a user's local account.</doc>
        <source-position filename="libgdm/gdm-client.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="824">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="827">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="825">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="826">The data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_verifier_choice_list"
              c:identifier="gdm_client_get_user_verifier_choice_list">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client.c"
             line="911">Gets a #GdmUserVerifierChoiceList object that can be used to
verify a user's local account.</doc>
        <source-position filename="libgdm/gdm-client.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client.c"
               line="918">#GdmUserVerifierChoiceList or %NULL if user
verifier isn't yet fetched, or daemon doesn't support choice lists</doc>
          <type name="UserVerifierChoiceList"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="913">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user_verifier_custom_json"
              c:identifier="gdm_client_get_user_verifier_custom_json">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client.c"
             line="940">Gets a #GdmUserVerifierCustomJSON object that can be used to
verify a user's local account.</doc>
        <source-position filename="libgdm/gdm-client.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client.c"
               line="947">#GdmUserVerifierCustomJSON or %NULL if user
verifier isn't yet fetched, or daemon doesn't support the custom JSON
protocol</doc>
          <type name="UserVerifierCustomJSON"
                c:type="GdmUserVerifierCustomJSON*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="942">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user_verifier_finish"
              c:identifier="gdm_client_get_user_verifier_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client.c"
             line="861">Finishes an operation started with
gdm_client_get_user_verifier().</doc>
        <source-position filename="libgdm/gdm-client.h" line="65"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client.c"
               line="870">a #GdmUserVerifier</doc>
          <type name="UserVerifier" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="863">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="864">The #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_verifier_sync"
              c:identifier="gdm_client_get_user_verifier_sync"
              throws="1"
              glib:async-func="get_user_verifier">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client.c"
             line="700">Gets a #GdmUserVerifier object that can be used to
verify a user's local account.</doc>
        <source-position filename="libgdm/gdm-client.h" line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client.c"
               line="709">#GdmUserVerifier or %NULL if not connected</doc>
          <type name="UserVerifier" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="702">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="703">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_reauthentication_channel"
              c:identifier="gdm_client_open_reauthentication_channel"
              glib:finish-func="open_reauthentication_channel_finish"
              glib:sync-func="open_reauthentication_channel_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client.c"
             line="633">Gets a #GdmUserVerifier object that can be used to
reauthenticate an already logged in user.</doc>
        <source-position filename="libgdm/gdm-client.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="635">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="636">user to reauthenticate</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="639">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="637">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="638">The data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_reauthentication_channel_finish"
              c:identifier="gdm_client_open_reauthentication_channel_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client.c"
             line="673">Finishes an operation started with
gdm_client_open_reauthentication_channel().</doc>
        <source-position filename="libgdm/gdm-client.h" line="52"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client.c"
               line="682">a #GdmUserVerifier</doc>
          <type name="UserVerifier" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="675">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="676">The #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_reauthentication_channel_sync"
              c:identifier="gdm_client_open_reauthentication_channel_sync"
              throws="1"
              glib:async-func="open_reauthentication_channel">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client.c"
             line="560">Gets a #GdmUserVerifier object that can be used to
reauthenticate an already logged in user. Free with
g_object_unref to close reauthentication channel.</doc>
        <source-position filename="libgdm/gdm-client.h" line="56"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client.c"
               line="571">#GdmUserVerifier or %NULL if @username is not
already logged in.</doc>
          <type name="UserVerifier" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="562">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="563">user to reauthenticate</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="564">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enabled_extensions"
              c:identifier="gdm_client_set_enabled_extensions">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client.c"
             line="1522">Enables GDM's pam extensions.  Currently, only
`org.gnome.DisplayManager.UserVerifier.ChoiceList` and
`org.gnome.DisplayManager.UserVerifier.CustomJSON` are supported.</doc>
        <source-position filename="libgdm/gdm-client.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="1524">a #GdmClient</doc>
            <type name="Client" c:type="GdmClient*"/>
          </instance-parameter>
          <parameter name="extensions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client.c"
                 line="1525">a list of extensions</doc>
            <array c:type="const char* const*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="ClientClass"
            c:type="GdmClientClass"
            glib:is-gtype-struct-for="Client">
      <source-position filename="libgdm/gdm-client.h" line="31"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="ClientError" c:type="GdmClientError">
      <source-position filename="libgdm/gdm-client.h" line="37"/>
      <member name="client_error_generic"
              value="0"
              c:identifier="GDM_CLIENT_ERROR_GENERIC">
      </member>
    </enumeration>
    <function-macro name="GREETER"
                    c:identifier="GDM_GREETER"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1160"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GREETER_GET_IFACE"
                    c:identifier="GDM_GREETER_GET_IFACE"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1162"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GREETER_PROXY"
                    c:identifier="GDM_GREETER_PROXY"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1417"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GREETER_PROXY_CLASS"
                    c:identifier="GDM_GREETER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1418"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GREETER_PROXY_GET_CLASS"
                    c:identifier="GDM_GREETER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1419"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GREETER_SKELETON"
                    c:identifier="GDM_GREETER_SKELETON"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1487"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GREETER_SKELETON_CLASS"
                    c:identifier="GDM_GREETER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1488"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GREETER_SKELETON_GET_CLASS"
                    c:identifier="GDM_GREETER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1489"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <docsection name="GdmChooser">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="11585">This section contains code for working with the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="GdmGreeter">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="8180">This section contains code for working with the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="GdmManager">
      <doc xml:space="preserve"
           filename="libgdm/gdm-manager-glue.c"
           line="338">This section contains code for working with the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="GdmRemoteGreeter">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="10709">This section contains code for working with the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="GdmUserVerifier">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="2953">This section contains code for working with the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="GdmUserVerifierChoiceList">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="5822">This section contains code for working with the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="GdmUserVerifierCustomJSON">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="6891">This section contains code for working with the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-CustomJSON.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.CustomJSON&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <docsection name="GdmWorkerManager">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="698">This section contains code for working with the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt; D-Bus interface in C.</doc>
    </docsection>
    <interface name="Greeter"
               c:symbol-prefix="greeter"
               c:type="GdmGreeter"
               glib:type-name="GdmGreeter"
               glib:get-type="gdm_greeter_get_type"
               glib:type-struct="GreeterIface">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="8816">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt;.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1228"/>
      <function name="interface_info"
                c:identifier="gdm_greeter_interface_info">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8629">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1236"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="8634">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_greeter_override_properties">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8642">Overrides all #GObject properties in the #GdmGreeter interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1237"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="8650">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="8644">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="8645">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="default_language_name_changed">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8831">Handler for the #GdmGreeter::default-language-name-changed signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1202"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_language_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="default_session_name_changed">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8832">Handler for the #GdmGreeter::default-session-name-changed signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1206"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_session_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_begin_auto_login">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8825">Handler for the #GdmGreeter::handle-begin-auto-login signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1173"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_timed_login_details">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8826">Handler for the #GdmGreeter::handle-get-timed-login-details signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1178"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_select_session">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8827">Handler for the #GdmGreeter::handle-select-session signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1182"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_session" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_select_user">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8828">Handler for the #GdmGreeter::handle-select-user signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1187"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_start_session_when_ready">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8829">Handler for the #GdmGreeter::handle-start-session-when-ready signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1192"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_should_start_session" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_stop_conflicting_session">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8830">Handler for the #GdmGreeter::handle-stop-conflicting-session signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1198"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reauthenticated">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8833">Handler for the #GdmGreeter::reauthenticated signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1210"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="selected_user_changed">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8834">Handler for the #GdmGreeter::selected-user-changed signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1214"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="session_opened">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8835">Handler for the #GdmGreeter::session-opened signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1218"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_session_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="timed_login_requested">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8836">Handler for the #GdmGreeter::timed-login-requested signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1223"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_delay" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_begin_auto_login"
              c:identifier="gdm_greeter_call_begin_auto_login"
              glib:finish-func="call_begin_auto_login_finish"
              glib:sync-func="call_begin_auto_login_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9400">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.BeginAutoLogin"&gt;BeginAutoLogin()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_greeter_call_begin_auto_login_finish() to get the result of the operation.

See gdm_greeter_call_begin_auto_login_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1336"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9402">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9403">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9404">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9405">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9406">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_auto_login_finish"
              c:identifier="gdm_greeter_call_begin_auto_login_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9433">Finishes an operation started with gdm_greeter_call_begin_auto_login().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1343"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="9441">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9435">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9436">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_call_begin_auto_login().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_auto_login_sync"
              c:identifier="gdm_greeter_call_begin_auto_login_sync"
              throws="1"
              glib:async-func="call_begin_auto_login">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9460">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.BeginAutoLogin"&gt;BeginAutoLogin()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_greeter_call_begin_auto_login() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1348"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="9471">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9462">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9463">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9464">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_timed_login_details"
              c:identifier="gdm_greeter_call_get_timed_login_details"
              glib:finish-func="call_get_timed_login_details_finish"
              glib:sync-func="call_get_timed_login_details_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9498">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.GetTimedLoginDetails"&gt;GetTimedLoginDetails()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_greeter_call_get_timed_login_details_finish() to get the result of the operation.

See gdm_greeter_call_get_timed_login_details_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1354"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9500">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9501">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9502">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9503">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_timed_login_details_finish"
              c:identifier="gdm_greeter_call_get_timed_login_details_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9528">Finishes an operation started with gdm_greeter_call_get_timed_login_details().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1360"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="9539">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9530">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="out_enabled"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9531">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="out_username"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9532">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_delay"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9533">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9534">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_call_get_timed_login_details().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_timed_login_details_sync"
              c:identifier="gdm_greeter_call_get_timed_login_details_sync"
              throws="1"
              glib:async-func="call_get_timed_login_details">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9564">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.GetTimedLoginDetails"&gt;GetTimedLoginDetails()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_greeter_call_get_timed_login_details() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1368"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="9577">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9566">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="out_enabled"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9567">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="out_username"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9568">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_delay"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9569">Return location for return parameter or %NULL to ignore.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9570">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_session"
              c:identifier="gdm_greeter_call_select_session"
              glib:finish-func="call_select_session_finish"
              glib:sync-func="call_select_session_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9204">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectSession"&gt;SelectSession()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_greeter_call_select_session_finish() to get the result of the operation.

See gdm_greeter_call_select_session_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1300"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9206">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9207">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9208">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9209">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9210">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_session_finish"
              c:identifier="gdm_greeter_call_select_session_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9237">Finishes an operation started with gdm_greeter_call_select_session().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1307"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="9245">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9239">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9240">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_call_select_session().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_session_sync"
              c:identifier="gdm_greeter_call_select_session_sync"
              throws="1"
              glib:async-func="call_select_session">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9264">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectSession"&gt;SelectSession()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_greeter_call_select_session() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1312"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="9275">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9266">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9267">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9268">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_user"
              c:identifier="gdm_greeter_call_select_user"
              glib:finish-func="call_select_user_finish"
              glib:sync-func="call_select_user_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9302">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectUser"&gt;SelectUser()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_greeter_call_select_user_finish() to get the result of the operation.

See gdm_greeter_call_select_user_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1318"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9304">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9305">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9306">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9307">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9308">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_user_finish"
              c:identifier="gdm_greeter_call_select_user_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9335">Finishes an operation started with gdm_greeter_call_select_user().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1325"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="9343">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9337">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9338">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_call_select_user().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_user_sync"
              c:identifier="gdm_greeter_call_select_user_sync"
              throws="1"
              glib:async-func="call_select_user">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9362">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectUser"&gt;SelectUser()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_greeter_call_select_user() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1330"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="9373">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9364">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9365">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9366">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_session_when_ready"
              c:identifier="gdm_greeter_call_start_session_when_ready"
              glib:finish-func="call_start_session_when_ready_finish"
              glib:sync-func="call_start_session_when_ready_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9608">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.StartSessionWhenReady"&gt;StartSessionWhenReady()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_greeter_call_start_session_when_ready_finish() to get the result of the operation.

See gdm_greeter_call_start_session_when_ready_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1376"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9610">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9611">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_should_start_session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9612">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9613">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9614">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9615">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_session_when_ready_finish"
              c:identifier="gdm_greeter_call_start_session_when_ready_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9644">Finishes an operation started with gdm_greeter_call_start_session_when_ready().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1384"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="9652">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9646">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9647">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_call_start_session_when_ready().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_start_session_when_ready_sync"
              c:identifier="gdm_greeter_call_start_session_when_ready_sync"
              throws="1"
              glib:async-func="call_start_session_when_ready">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9671">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.StartSessionWhenReady"&gt;StartSessionWhenReady()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_greeter_call_start_session_when_ready() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1389"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="9683">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9673">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9674">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_should_start_session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9675">Argument to pass with the method invocation.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9676">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_stop_conflicting_session"
              c:identifier="gdm_greeter_call_stop_conflicting_session"
              glib:finish-func="call_stop_conflicting_session_finish"
              glib:sync-func="call_stop_conflicting_session_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9712">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.StopConflictingSession"&gt;StopConflictingSession()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_greeter_call_stop_conflicting_session_finish() to get the result of the operation.

See gdm_greeter_call_stop_conflicting_session_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1396"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9714">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9715">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9716">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9717">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_stop_conflicting_session_finish"
              c:identifier="gdm_greeter_call_stop_conflicting_session_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9742">Finishes an operation started with gdm_greeter_call_stop_conflicting_session().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1402"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="9750">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9744">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9745">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_call_stop_conflicting_session().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_stop_conflicting_session_sync"
              c:identifier="gdm_greeter_call_stop_conflicting_session_sync"
              throws="1"
              glib:async-func="call_stop_conflicting_session">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9769">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.StopConflictingSession"&gt;StopConflictingSession()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_greeter_call_stop_conflicting_session() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1407"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="9779">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9771">A #GdmGreeterProxy.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9772">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_begin_auto_login"
              c:identifier="gdm_greeter_complete_begin_auto_login">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9840">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.BeginAutoLogin"&gt;BeginAutoLogin()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1249"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9842">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9843">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_timed_login_details"
              c:identifier="gdm_greeter_complete_get_timed_login_details">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9858">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.GetTimedLoginDetails"&gt;GetTimedLoginDetails()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1253"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9860">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9861">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9862">Parameter to return.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9863">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="delay" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9864">Parameter to return.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_select_session"
              c:identifier="gdm_greeter_complete_select_session">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9804">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectSession"&gt;SelectSession()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1241"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9806">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9807">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_select_user"
              c:identifier="gdm_greeter_complete_select_user">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9822">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectUser"&gt;SelectUser()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1245"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9824">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9825">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_start_session_when_ready"
              c:identifier="gdm_greeter_complete_start_session_when_ready">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9885">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.StartSessionWhenReady"&gt;StartSessionWhenReady()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1260"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9887">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9888">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_stop_conflicting_session"
              c:identifier="gdm_greeter_complete_stop_conflicting_session">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9903">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.StopConflictingSession"&gt;StopConflictingSession()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1264"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9905">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9906">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_default_language_name_changed"
              c:identifier="gdm_greeter_emit_default_language_name_changed">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9125">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.DefaultLanguageNameChanged"&gt;"DefaultLanguageNameChanged"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1275"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9127">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_language_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9128">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_default_session_name_changed"
              c:identifier="gdm_greeter_emit_default_session_name_changed">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9140">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.DefaultSessionNameChanged"&gt;"DefaultSessionNameChanged"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1279"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9142">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_session_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9143">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_reauthenticated"
              c:identifier="gdm_greeter_emit_reauthenticated">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9189">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.Reauthenticated"&gt;"Reauthenticated"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1293"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9191">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9192">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_selected_user_changed"
              c:identifier="gdm_greeter_emit_selected_user_changed">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9110">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.SelectedUserChanged"&gt;"SelectedUserChanged"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1271"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9112">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9113">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_session_opened"
              c:identifier="gdm_greeter_emit_session_opened">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9172">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.SessionOpened"&gt;"SessionOpened"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1288"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9174">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9175">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_session_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9176">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_timed_login_requested"
              c:identifier="gdm_greeter_emit_timed_login_requested">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9155">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.TimedLoginRequested"&gt;"TimedLoginRequested"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1283"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9157">A #GdmGreeter.</doc>
            <type name="Greeter" c:type="GdmGreeter*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9158">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_delay" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9159">Argument to pass with the signal.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="default-language-name-changed" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9006">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.DefaultLanguageNameChanged"&gt;"DefaultLanguageNameChanged"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_language_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9009">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="default-session-name-changed" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9026">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.DefaultSessionNameChanged"&gt;"DefaultSessionNameChanged"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_session_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9029">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-begin-auto-login" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8894">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.BeginAutoLogin"&gt;BeginAutoLogin()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_greeter_complete_begin_auto_login() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="8904">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="8897">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="8898">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-timed-login-details" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8917">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.GetTimedLoginDetails"&gt;GetTimedLoginDetails()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_greeter_complete_get_timed_login_details() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="8926">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="8920">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-select-session" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8848">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectSession"&gt;SelectSession()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_greeter_complete_select_session() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="8858">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="8851">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="8852">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-select-user" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8871">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.SelectUser"&gt;SelectUser()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_greeter_complete_select_user() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="8881">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="8874">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="8875">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-start-session-when-ready" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8939">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.StartSessionWhenReady"&gt;StartSessionWhenReady()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_greeter_complete_start_session_when_ready() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="8950">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="8942">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="8943">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_should_start_session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="8944">Argument passed by remote caller.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-stop-conflicting-session" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8963">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Greeter.StopConflictingSession"&gt;StopConflictingSession()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_greeter_complete_stop_conflicting_session() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="8972">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="8966">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="reauthenticated" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9088">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.Reauthenticated"&gt;"Reauthenticated"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9091">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="selected-user-changed" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8986">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.SelectedUserChanged"&gt;"SelectedUserChanged"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="8989">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="session-opened" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9067">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.SessionOpened"&gt;"SessionOpened"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9070">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_session_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9071">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="timed-login-requested" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9046">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-Greeter.TimedLoginRequested"&gt;"TimedLoginRequested"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9049">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_delay" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="9050">Argument.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="GreeterIface"
            c:type="GdmGreeterIface"
            glib:is-gtype-struct-for="Greeter">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="8822">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt;.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1228"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8824">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_begin_auto_login">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8825">Handler for the #GdmGreeter::handle-begin-auto-login signal.</doc>
        <callback name="handle_begin_auto_login">
          <source-position filename="libgdm/gdm-client-glue.h" line="1173"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_timed_login_details">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8826">Handler for the #GdmGreeter::handle-get-timed-login-details signal.</doc>
        <callback name="handle_get_timed_login_details">
          <source-position filename="libgdm/gdm-client-glue.h" line="1178"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_select_session">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8827">Handler for the #GdmGreeter::handle-select-session signal.</doc>
        <callback name="handle_select_session">
          <source-position filename="libgdm/gdm-client-glue.h" line="1182"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_session" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_select_user">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8828">Handler for the #GdmGreeter::handle-select-user signal.</doc>
        <callback name="handle_select_user">
          <source-position filename="libgdm/gdm-client-glue.h" line="1187"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_start_session_when_ready">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8829">Handler for the #GdmGreeter::handle-start-session-when-ready signal.</doc>
        <callback name="handle_start_session_when_ready">
          <source-position filename="libgdm/gdm-client-glue.h" line="1192"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_should_start_session"
                       transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_stop_conflicting_session">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8830">Handler for the #GdmGreeter::handle-stop-conflicting-session signal.</doc>
        <callback name="handle_stop_conflicting_session">
          <source-position filename="libgdm/gdm-client-glue.h" line="1198"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="default_language_name_changed">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8831">Handler for the #GdmGreeter::default-language-name-changed signal.</doc>
        <callback name="default_language_name_changed">
          <source-position filename="libgdm/gdm-client-glue.h" line="1202"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_language_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="default_session_name_changed">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8832">Handler for the #GdmGreeter::default-session-name-changed signal.</doc>
        <callback name="default_session_name_changed">
          <source-position filename="libgdm/gdm-client-glue.h" line="1206"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_session_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reauthenticated">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8833">Handler for the #GdmGreeter::reauthenticated signal.</doc>
        <callback name="reauthenticated">
          <source-position filename="libgdm/gdm-client-glue.h" line="1210"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="selected_user_changed">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8834">Handler for the #GdmGreeter::selected-user-changed signal.</doc>
        <callback name="selected_user_changed">
          <source-position filename="libgdm/gdm-client-glue.h" line="1214"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="session_opened">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8835">Handler for the #GdmGreeter::session-opened signal.</doc>
        <callback name="session_opened">
          <source-position filename="libgdm/gdm-client-glue.h" line="1218"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_session_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="timed_login_requested">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8836">Handler for the #GdmGreeter::timed-login-requested signal.</doc>
        <callback name="timed_login_requested">
          <source-position filename="libgdm/gdm-client-glue.h" line="1223"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Greeter" c:type="GdmGreeter*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_delay" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="GreeterProxy"
           c:symbol-prefix="greeter_proxy"
           c:type="GdmGreeterProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmGreeterProxy"
           glib:get-type="gdm_greeter_proxy_get_type"
           glib:type-struct="GreeterProxyClass">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="9923">The #GdmGreeterProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1437"/>
      <implements name="Greeter"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_greeter_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="10114">Finishes an operation started with gdm_greeter_proxy_new().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1453"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="10121">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GreeterProxy" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10116">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_greeter_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="10204">Finishes an operation started with gdm_greeter_proxy_new_for_bus().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1472"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="10211">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GreeterProxy" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10206">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_greeter_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_greeter_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="10229">Like gdm_greeter_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_greeter_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1475"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="10244">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GreeterProxy" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10231">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10232">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10233">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10234">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10235">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_greeter_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="10139">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_greeter_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1456"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="10154">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="GreeterProxy" c:type="GdmGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10141">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10142">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10143">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10144">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10145">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="gdm_greeter_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="10084">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_greeter_proxy_new_finish() to get the result of the operation.

See gdm_greeter_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1445"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10086">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10087">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10088">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10089">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10090">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10091">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10092">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_greeter_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="10174">Like gdm_greeter_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_greeter_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_greeter_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1464"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10176">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10177">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10178">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10179">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10180">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10181">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10182">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GreeterProxyPrivate" c:type="GdmGreeterProxyPrivate*"/>
      </field>
    </class>
    <record name="GreeterProxyClass"
            c:type="GdmGreeterProxyClass"
            glib:is-gtype-struct-for="GreeterProxy">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="9929">Class structure for #GdmGreeterProxy.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1437"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="9931">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="GreeterProxyPrivate"
            c:type="GdmGreeterProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libgdm/gdm-client-glue.h" line="1425"/>
    </record>
    <class name="GreeterSkeleton"
           c:symbol-prefix="greeter_skeleton"
           c:type="GdmGreeterSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmGreeterSkeleton"
           glib:get-type="gdm_greeter_skeleton_get_type"
           glib:type-struct="GreeterSkeletonClass">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="10266">The #GdmGreeterSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1507"/>
      <implements name="Greeter"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_greeter_skeleton_new">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="10691">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt;.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1515"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="10696">The skeleton object.</doc>
          <type name="GreeterSkeleton" c:type="GdmGreeter*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="GreeterSkeletonPrivate"
              c:type="GdmGreeterSkeletonPrivate*"/>
      </field>
    </class>
    <record name="GreeterSkeletonClass"
            c:type="GdmGreeterSkeletonClass"
            glib:is-gtype-struct-for="GreeterSkeleton">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="10272">Class structure for #GdmGreeterSkeleton.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1507"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="10274">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="GreeterSkeletonPrivate"
            c:type="GdmGreeterSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libgdm/gdm-client-glue.h" line="1495"/>
    </record>
    <function-macro name="IS_CHOOSER"
                    c:identifier="GDM_IS_CHOOSER"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1685"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CHOOSER_PROXY"
                    c:identifier="GDM_IS_CHOOSER_PROXY"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1771"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CHOOSER_PROXY_CLASS"
                    c:identifier="GDM_IS_CHOOSER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1772"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CHOOSER_SKELETON"
                    c:identifier="GDM_IS_CHOOSER_SKELETON"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1841"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CHOOSER_SKELETON_CLASS"
                    c:identifier="GDM_IS_CHOOSER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1842"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GREETER"
                    c:identifier="GDM_IS_GREETER"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1161"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GREETER_PROXY"
                    c:identifier="GDM_IS_GREETER_PROXY"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1420"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GREETER_PROXY_CLASS"
                    c:identifier="GDM_IS_GREETER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1421"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GREETER_SKELETON"
                    c:identifier="GDM_IS_GREETER_SKELETON"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1490"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GREETER_SKELETON_CLASS"
                    c:identifier="GDM_IS_GREETER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1491"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER"
                    c:identifier="GDM_IS_MANAGER"
                    introspectable="0">
      <source-position filename="libgdm/gdm-manager-glue.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_PROXY"
                    c:identifier="GDM_IS_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="libgdm/gdm-manager-glue.h" line="177"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_PROXY_CLASS"
                    c:identifier="GDM_IS_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-manager-glue.h" line="178"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_SKELETON"
                    c:identifier="GDM_IS_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="libgdm/gdm-manager-glue.h" line="247"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_SKELETON_CLASS"
                    c:identifier="GDM_IS_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-manager-glue.h" line="248"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REMOTE_GREETER"
                    c:identifier="GDM_IS_REMOTE_GREETER"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1523"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REMOTE_GREETER_PROXY"
                    c:identifier="GDM_IS_REMOTE_GREETER_PROXY"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1582"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REMOTE_GREETER_PROXY_CLASS"
                    c:identifier="GDM_IS_REMOTE_GREETER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1583"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REMOTE_GREETER_SKELETON"
                    c:identifier="GDM_IS_REMOTE_GREETER_SKELETON"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1652"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_REMOTE_GREETER_SKELETON_CLASS"
                    c:identifier="GDM_IS_REMOTE_GREETER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1653"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER"
                    c:identifier="GDM_IS_USER_VERIFIER"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="385"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_CHOICE_LIST"
                    c:identifier="GDM_IS_USER_VERIFIER_CHOICE_LIST"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="761"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_CHOICE_LIST_PROXY"
                    c:identifier="GDM_IS_USER_VERIFIER_CHOICE_LIST_PROXY"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="842"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_CHOICE_LIST_PROXY_CLASS"
                    c:identifier="GDM_IS_USER_VERIFIER_CHOICE_LIST_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="843"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_CHOICE_LIST_SKELETON"
                    c:identifier="GDM_IS_USER_VERIFIER_CHOICE_LIST_SKELETON"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="912"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_CHOICE_LIST_SKELETON_CLASS"
                    c:identifier="GDM_IS_USER_VERIFIER_CHOICE_LIST_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="913"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_CUSTOM_JSON"
                    c:identifier="GDM_IS_USER_VERIFIER_CUSTOM_JSON"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="945"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_CUSTOM_JSON_PROXY"
                    c:identifier="GDM_IS_USER_VERIFIER_CUSTOM_JSON_PROXY"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1058"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_CUSTOM_JSON_PROXY_CLASS"
                    c:identifier="GDM_IS_USER_VERIFIER_CUSTOM_JSON_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1059"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_CUSTOM_JSON_SKELETON"
                    c:identifier="GDM_IS_USER_VERIFIER_CUSTOM_JSON_SKELETON"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1128"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_CUSTOM_JSON_SKELETON_CLASS"
                    c:identifier="GDM_IS_USER_VERIFIER_CUSTOM_JSON_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1129"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_PROXY"
                    c:identifier="GDM_IS_USER_VERIFIER_PROXY"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="658"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_PROXY_CLASS"
                    c:identifier="GDM_IS_USER_VERIFIER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="659"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_SKELETON"
                    c:identifier="GDM_IS_USER_VERIFIER_SKELETON"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="728"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_USER_VERIFIER_SKELETON_CLASS"
                    c:identifier="GDM_IS_USER_VERIFIER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="729"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WORKER_MANAGER"
                    c:identifier="GDM_IS_WORKER_MANAGER"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="22"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WORKER_MANAGER_PROXY"
                    c:identifier="GDM_IS_WORKER_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="282"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WORKER_MANAGER_PROXY_CLASS"
                    c:identifier="GDM_IS_WORKER_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="283"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WORKER_MANAGER_SKELETON"
                    c:identifier="GDM_IS_WORKER_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="352"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WORKER_MANAGER_SKELETON_CLASS"
                    c:identifier="GDM_IS_WORKER_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="353"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER"
                    c:identifier="GDM_MANAGER"
                    introspectable="0">
      <source-position filename="libgdm/gdm-manager-glue.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_GET_IFACE"
                    c:identifier="GDM_MANAGER_GET_IFACE"
                    introspectable="0">
      <source-position filename="libgdm/gdm-manager-glue.h" line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_PROXY"
                    c:identifier="GDM_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="libgdm/gdm-manager-glue.h" line="174"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_PROXY_CLASS"
                    c:identifier="GDM_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-manager-glue.h" line="175"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_PROXY_GET_CLASS"
                    c:identifier="GDM_MANAGER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-manager-glue.h" line="176"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_SKELETON"
                    c:identifier="GDM_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="libgdm/gdm-manager-glue.h" line="244"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_SKELETON_CLASS"
                    c:identifier="GDM_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-manager-glue.h" line="245"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_SKELETON_GET_CLASS"
                    c:identifier="GDM_MANAGER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-manager-glue.h" line="246"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Manager"
               c:symbol-prefix="manager"
               c:type="GdmManager"
               glib:type-name="GdmManager"
               glib:get-type="gdm_manager_get_type"
               glib:type-struct="ManagerIface">
      <doc xml:space="preserve"
           filename="libgdm/gdm-manager-glue.c"
           line="612">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt;.</doc>
      <source-position filename="libgdm/gdm-manager-glue.h" line="55"/>
      <function name="interface_info"
                c:identifier="gdm_manager_interface_info">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="528">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-manager-glue.c"
               line="533">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_manager_override_properties">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="541">Overrides all #GObject properties in the #GdmManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-manager-glue.c"
               line="549">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="543">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="544">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_version"
                      invoker="get_version"
                      introspectable="0">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="740">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-DisplayManager-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use gdm_manager_dup_version() if on another thread.</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="53"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-manager-glue.c"
               line="750">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="742">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_open_reauthentication_channel">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="621">Handler for the #GdmManager::handle-open-reauthentication-channel signal.</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_open_session">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="622">Handler for the #GdmManager::handle-open-session signal.</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_register_display">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="623">Handler for the #GdmManager::handle-register-display signal.</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_register_session">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="624">Handler for the #GdmManager::handle-register-session signal.</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_open_reauthentication_channel"
              c:identifier="gdm_manager_call_open_reauthentication_channel"
              glib:finish-func="call_open_reauthentication_channel_finish"
              glib:sync-func="call_open_reauthentication_channel_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="1087">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenReauthenticationChannel"&gt;OpenReauthenticationChannel()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_manager_call_open_reauthentication_channel_finish() to get the result of the operation.

See gdm_manager_call_open_reauthentication_channel_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="143"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1089">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1090">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1091">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1092">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1093">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_reauthentication_channel_finish"
              c:identifier="gdm_manager_call_open_reauthentication_channel_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="1120">Finishes an operation started with gdm_manager_call_open_reauthentication_channel().</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="150"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-manager-glue.c"
               line="1129">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1122">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="out_address"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1123">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1124">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_call_open_reauthentication_channel().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_reauthentication_channel_sync"
              c:identifier="gdm_manager_call_open_reauthentication_channel_sync"
              throws="1"
              glib:async-func="call_open_reauthentication_channel">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="1150">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenReauthenticationChannel"&gt;OpenReauthenticationChannel()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_manager_call_open_reauthentication_channel() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="156"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-manager-glue.c"
               line="1162">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1152">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1153">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_address"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1154">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1155">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_session"
              c:identifier="gdm_manager_call_open_session"
              glib:finish-func="call_open_session_finish"
              glib:sync-func="call_open_session_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="989">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenSession"&gt;OpenSession()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_manager_call_open_session_finish() to get the result of the operation.

See gdm_manager_call_open_session_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="125"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="991">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="992">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="993">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="994">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_session_finish"
              c:identifier="gdm_manager_call_open_session_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="1019">Finishes an operation started with gdm_manager_call_open_session().</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="131"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-manager-glue.c"
               line="1028">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1021">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="out_address"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1022">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1023">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_call_open_session().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_open_session_sync"
              c:identifier="gdm_manager_call_open_session_sync"
              throws="1"
              glib:async-func="call_open_session">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="1049">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenSession"&gt;OpenSession()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_manager_call_open_session() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="137"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-manager-glue.c"
               line="1060">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1051">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="out_address"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1052">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1053">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_display"
              c:identifier="gdm_manager_call_register_display"
              glib:finish-func="call_register_display_finish"
              glib:sync-func="call_register_display_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="793">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterDisplay"&gt;RegisterDisplay()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_manager_call_register_display_finish() to get the result of the operation.

See gdm_manager_call_register_display_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="795">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="796">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="797">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="798">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="799">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_display_finish"
              c:identifier="gdm_manager_call_register_display_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="826">Finishes an operation started with gdm_manager_call_register_display().</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="96"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-manager-glue.c"
               line="834">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="828">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="829">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_call_register_display().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_display_sync"
              c:identifier="gdm_manager_call_register_display_sync"
              throws="1"
              glib:async-func="call_register_display">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="853">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterDisplay"&gt;RegisterDisplay()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_manager_call_register_display() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="101"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-manager-glue.c"
               line="864">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="855">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="856">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="857">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_session"
              c:identifier="gdm_manager_call_register_session"
              glib:finish-func="call_register_session_finish"
              glib:sync-func="call_register_session_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="891">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterSession"&gt;RegisterSession()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_manager_call_register_session_finish() to get the result of the operation.

See gdm_manager_call_register_session_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="893">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="894">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="895">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="896">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="897">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_session_finish"
              c:identifier="gdm_manager_call_register_session_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="924">Finishes an operation started with gdm_manager_call_register_session().</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="114"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-manager-glue.c"
               line="932">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="926">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="927">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_call_register_session().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_register_session_sync"
              c:identifier="gdm_manager_call_register_session_sync"
              throws="1"
              glib:async-func="call_register_session">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="951">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterSession"&gt;RegisterSession()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_manager_call_register_session() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="119"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-manager-glue.c"
               line="962">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="953">A #GdmManagerProxy.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="954">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="955">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_open_reauthentication_channel"
              c:identifier="gdm_manager_complete_open_reauthentication_channel">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="1248">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenReauthenticationChannel"&gt;OpenReauthenticationChannel()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1250">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1251">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1252">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_open_session"
              c:identifier="gdm_manager_complete_open_session">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="1227">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenSession"&gt;OpenSession()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1229">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1230">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1231">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_register_display"
              c:identifier="gdm_manager_complete_register_display">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="1191">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterDisplay"&gt;RegisterDisplay()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1193">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1194">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_register_session"
              c:identifier="gdm_manager_complete_register_session">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="1209">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterSession"&gt;RegisterSession()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1211">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1212">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_version"
              c:identifier="gdm_manager_dup_version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="760">Gets a copy of the &lt;link linkend="gdbus-property-org-gnome-DisplayManager-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="167"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-manager-glue.c"
               line="768">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="762">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version"
              c:identifier="gdm_manager_get_version"
              glib:get-property="version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="740">Gets the value of the &lt;link linkend="gdbus-property-org-gnome-DisplayManager-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use gdm_manager_dup_version() if on another thread.</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="166"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-manager-glue.c"
               line="750">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="742">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_version"
              c:identifier="gdm_manager_set_version"
              glib:set-property="version"
              introspectable="0">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="778">Sets the &lt;link linkend="gdbus-property-org-gnome-DisplayManager-Manager.Version"&gt;"Version"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="168"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="780">A #GdmManager.</doc>
            <type name="Manager" c:type="GdmManager*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="781">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="version"
                writable="1"
                transfer-ownership="none"
                setter="set_version"
                getter="get_version"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="729">Represents the D-Bus property &lt;link linkend="gdbus-property-org-gnome-DisplayManager-Manager.Version"&gt;"Version"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="handle-open-reauthentication-channel" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="705">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenReauthenticationChannel"&gt;OpenReauthenticationChannel()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_manager_complete_open_reauthentication_channel() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-manager-glue.c"
               line="715">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="708">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="709">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-open-session" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="683">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.OpenSession"&gt;OpenSession()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_manager_complete_open_session() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-manager-glue.c"
               line="692">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="686">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-register-display" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="637">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterDisplay"&gt;RegisterDisplay()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_manager_complete_register_display() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-manager-glue.c"
               line="647">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="640">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="641">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-register-session" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="660">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-Manager.RegisterSession"&gt;RegisterSession()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_manager_complete_register_session() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-manager-glue.c"
               line="670">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="663">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="664">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="ManagerIface"
            c:type="GdmManagerIface"
            glib:is-gtype-struct-for="Manager">
      <doc xml:space="preserve"
           filename="libgdm/gdm-manager-glue.c"
           line="618">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt;.</doc>
      <source-position filename="libgdm/gdm-manager-glue.h" line="55"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="620">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_open_reauthentication_channel">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="621">Handler for the #GdmManager::handle-open-reauthentication-channel signal.</doc>
        <callback name="handle_open_reauthentication_channel">
          <source-position filename="libgdm/gdm-manager-glue.h" line="34"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="GdmManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_open_session">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="622">Handler for the #GdmManager::handle-open-session signal.</doc>
        <callback name="handle_open_session">
          <source-position filename="libgdm/gdm-manager-glue.h" line="39"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="GdmManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_register_display">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="623">Handler for the #GdmManager::handle-register-display signal.</doc>
        <callback name="handle_register_display">
          <source-position filename="libgdm/gdm-manager-glue.h" line="43"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="GdmManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_details" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_register_session">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="624">Handler for the #GdmManager::handle-register-session signal.</doc>
        <callback name="handle_register_session">
          <source-position filename="libgdm/gdm-manager-glue.h" line="48"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="Manager" c:type="GdmManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_details" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_version">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="625">Getter for the #GdmManager:version property.</doc>
        <callback name="get_version">
          <source-position filename="libgdm/gdm-manager-glue.h" line="53"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="750">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libgdm/gdm-manager-glue.c"
                   line="742">A #GdmManager.</doc>
              <type name="Manager" c:type="GdmManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ManagerProxy"
           c:symbol-prefix="manager_proxy"
           c:type="GdmManagerProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmManagerProxy"
           glib:get-type="gdm_manager_proxy_get_type"
           glib:type-struct="ManagerProxyClass">
      <doc xml:space="preserve"
           filename="libgdm/gdm-manager-glue.c"
           line="1271">The #GdmManagerProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="libgdm/gdm-manager-glue.h" line="194"/>
      <implements name="Manager"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_manager_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="1531">Finishes an operation started with gdm_manager_proxy_new().</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="210"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-manager-glue.c"
               line="1538">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="GdmManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1533">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_manager_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="1621">Finishes an operation started with gdm_manager_proxy_new_for_bus().</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="229"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-manager-glue.c"
               line="1628">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="GdmManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1623">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_manager_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_manager_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="1646">Like gdm_manager_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_manager_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="232"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-manager-glue.c"
               line="1661">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="GdmManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1648">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1649">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1650">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1651">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1652">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_manager_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="1556">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_manager_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="213"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-manager-glue.c"
               line="1571">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ManagerProxy" c:type="GdmManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1558">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1559">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1560">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1561">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1562">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="gdm_manager_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="1501">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_manager_proxy_new_finish() to get the result of the operation.

See gdm_manager_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="202"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1503">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1504">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1505">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1506">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1507">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1508">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1509">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_manager_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="1591">Like gdm_manager_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_manager_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_manager_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="221"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1593">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1594">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1595">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1596">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1597">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1598">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-manager-glue.c"
                 line="1599">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerProxyPrivate" c:type="GdmManagerProxyPrivate*"/>
      </field>
    </class>
    <record name="ManagerProxyClass"
            c:type="GdmManagerProxyClass"
            glib:is-gtype-struct-for="ManagerProxy">
      <doc xml:space="preserve"
           filename="libgdm/gdm-manager-glue.c"
           line="1277">Class structure for #GdmManagerProxy.</doc>
      <source-position filename="libgdm/gdm-manager-glue.h" line="194"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="1279">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="ManagerProxyPrivate"
            c:type="GdmManagerProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libgdm/gdm-manager-glue.h" line="182"/>
    </record>
    <class name="ManagerSkeleton"
           c:symbol-prefix="manager_skeleton"
           c:type="GdmManagerSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmManagerSkeleton"
           glib:get-type="gdm_manager_skeleton_get_type"
           glib:type-struct="ManagerSkeletonClass">
      <doc xml:space="preserve"
           filename="libgdm/gdm-manager-glue.c"
           line="1683">The #GdmManagerSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="libgdm/gdm-manager-glue.h" line="264"/>
      <implements name="Manager"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_manager_skeleton_new">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="2136">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt;.</doc>
        <source-position filename="libgdm/gdm-manager-glue.h" line="272"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-manager-glue.c"
               line="2141">The skeleton object.</doc>
          <type name="ManagerSkeleton" c:type="GdmManager*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ManagerSkeletonPrivate"
              c:type="GdmManagerSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ManagerSkeletonClass"
            c:type="GdmManagerSkeletonClass"
            glib:is-gtype-struct-for="ManagerSkeleton">
      <doc xml:space="preserve"
           filename="libgdm/gdm-manager-glue.c"
           line="1689">Class structure for #GdmManagerSkeleton.</doc>
      <source-position filename="libgdm/gdm-manager-glue.h" line="264"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="1691">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="ManagerSkeletonPrivate"
            c:type="GdmManagerSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libgdm/gdm-manager-glue.h" line="252"/>
    </record>
    <function-macro name="REMOTE_GREETER"
                    c:identifier="GDM_REMOTE_GREETER"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1522"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REMOTE_GREETER_GET_IFACE"
                    c:identifier="GDM_REMOTE_GREETER_GET_IFACE"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1524"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REMOTE_GREETER_PROXY"
                    c:identifier="GDM_REMOTE_GREETER_PROXY"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1579"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REMOTE_GREETER_PROXY_CLASS"
                    c:identifier="GDM_REMOTE_GREETER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1580"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REMOTE_GREETER_PROXY_GET_CLASS"
                    c:identifier="GDM_REMOTE_GREETER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1581"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REMOTE_GREETER_SKELETON"
                    c:identifier="GDM_REMOTE_GREETER_SKELETON"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1649"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REMOTE_GREETER_SKELETON_CLASS"
                    c:identifier="GDM_REMOTE_GREETER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1650"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="REMOTE_GREETER_SKELETON_GET_CLASS"
                    c:identifier="GDM_REMOTE_GREETER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1651"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="RemoteGreeter"
               c:symbol-prefix="remote_greeter"
               c:type="GdmRemoteGreeter"
               glib:type-name="GdmRemoteGreeter"
               glib:get-type="gdm_remote_greeter_get_type"
               glib:type-struct="RemoteGreeterIface">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="10796">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt;.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1538"/>
      <function name="interface_info"
                c:identifier="gdm_remote_greeter_interface_info">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="10752">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1546"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="10757">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_remote_greeter_override_properties">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="10765">Overrides all #GObject properties in the #GdmRemoteGreeter interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1547"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="10773">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10767">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10768">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_disconnect">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="10805">Handler for the #GdmRemoteGreeter::handle-disconnect signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1534"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_disconnect"
              c:identifier="gdm_remote_greeter_call_disconnect"
              glib:finish-func="call_disconnect_finish"
              glib:sync-func="call_disconnect_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="10841">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-RemoteGreeter.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_remote_greeter_call_disconnect_finish() to get the result of the operation.

See gdm_remote_greeter_call_disconnect_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1558"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10843">A #GdmRemoteGreeterProxy.</doc>
            <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10844">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10845">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10846">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_finish"
              c:identifier="gdm_remote_greeter_call_disconnect_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="10871">Finishes an operation started with gdm_remote_greeter_call_disconnect().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1564"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="10879">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10873">A #GdmRemoteGreeterProxy.</doc>
            <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10874">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_remote_greeter_call_disconnect().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_disconnect_sync"
              c:identifier="gdm_remote_greeter_call_disconnect_sync"
              throws="1"
              glib:async-func="call_disconnect">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="10898">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-RemoteGreeter.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_remote_greeter_call_disconnect() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1569"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="10908">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10900">A #GdmRemoteGreeterProxy.</doc>
            <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10901">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_disconnect"
              c:identifier="gdm_remote_greeter_complete_disconnect">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="10933">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-RemoteGreeter.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1551"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10935">A #GdmRemoteGreeter.</doc>
            <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10936">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-disconnect" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="10817">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-RemoteGreeter.Disconnect"&gt;Disconnect()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_remote_greeter_complete_disconnect() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="10826">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="10820">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="RemoteGreeterIface"
            c:type="GdmRemoteGreeterIface"
            glib:is-gtype-struct-for="RemoteGreeter">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="10802">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt;.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1538"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="10804">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_disconnect">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="10805">Handler for the #GdmRemoteGreeter::handle-disconnect signal.</doc>
        <callback name="handle_disconnect">
          <source-position filename="libgdm/gdm-client-glue.h" line="1534"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="RemoteGreeter" c:type="GdmRemoteGreeter*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="RemoteGreeterProxy"
           c:symbol-prefix="remote_greeter_proxy"
           c:type="GdmRemoteGreeterProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmRemoteGreeterProxy"
           glib:get-type="gdm_remote_greeter_proxy_get_type"
           glib:type-struct="RemoteGreeterProxyClass">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="10953">The #GdmRemoteGreeterProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1599"/>
      <implements name="RemoteGreeter"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_remote_greeter_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="11144">Finishes an operation started with gdm_remote_greeter_proxy_new().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1615"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="11151">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="RemoteGreeterProxy" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11146">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_remote_greeter_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_remote_greeter_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="11234">Finishes an operation started with gdm_remote_greeter_proxy_new_for_bus().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1634"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="11241">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="RemoteGreeterProxy" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11236">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_remote_greeter_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_remote_greeter_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="11259">Like gdm_remote_greeter_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_remote_greeter_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1637"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="11274">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="RemoteGreeterProxy" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11261">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11262">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11263">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11264">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11265">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_remote_greeter_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="11169">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_remote_greeter_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1618"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="11184">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="RemoteGreeterProxy" c:type="GdmRemoteGreeter*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11171">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11172">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11173">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11174">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11175">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="gdm_remote_greeter_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="11114">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_remote_greeter_proxy_new_finish() to get the result of the operation.

See gdm_remote_greeter_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1607"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11116">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11117">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11118">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11119">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11120">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11121">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11122">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_remote_greeter_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="11204">Like gdm_remote_greeter_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_remote_greeter_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_remote_greeter_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1626"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11206">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11207">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11208">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11209">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11210">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11211">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="11212">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RemoteGreeterProxyPrivate"
              c:type="GdmRemoteGreeterProxyPrivate*"/>
      </field>
    </class>
    <record name="RemoteGreeterProxyClass"
            c:type="GdmRemoteGreeterProxyClass"
            glib:is-gtype-struct-for="RemoteGreeterProxy">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="10959">Class structure for #GdmRemoteGreeterProxy.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1599"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="10961">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="RemoteGreeterProxyPrivate"
            c:type="GdmRemoteGreeterProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libgdm/gdm-client-glue.h" line="1587"/>
    </record>
    <class name="RemoteGreeterSkeleton"
           c:symbol-prefix="remote_greeter_skeleton"
           c:type="GdmRemoteGreeterSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmRemoteGreeterSkeleton"
           glib:get-type="gdm_remote_greeter_skeleton_get_type"
           glib:type-struct="RemoteGreeterSkeletonClass">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="11296">The #GdmRemoteGreeterSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1669"/>
      <implements name="RemoteGreeter"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_remote_greeter_skeleton_new">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="11567">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt;.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1677"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="11572">The skeleton object.</doc>
          <type name="RemoteGreeterSkeleton" c:type="GdmRemoteGreeter*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RemoteGreeterSkeletonPrivate"
              c:type="GdmRemoteGreeterSkeletonPrivate*"/>
      </field>
    </class>
    <record name="RemoteGreeterSkeletonClass"
            c:type="GdmRemoteGreeterSkeletonClass"
            glib:is-gtype-struct-for="RemoteGreeterSkeleton">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="11302">Class structure for #GdmRemoteGreeterSkeleton.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1669"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="11304">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="RemoteGreeterSkeletonPrivate"
            c:type="GdmRemoteGreeterSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libgdm/gdm-client-glue.h" line="1657"/>
    </record>
    <function-macro name="USER_VERIFIER"
                    c:identifier="GDM_USER_VERIFIER"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="384"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CHOICE_LIST"
                    c:identifier="GDM_USER_VERIFIER_CHOICE_LIST"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="760"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CHOICE_LIST_GET_IFACE"
                    c:identifier="GDM_USER_VERIFIER_CHOICE_LIST_GET_IFACE"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="762"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CHOICE_LIST_PROXY"
                    c:identifier="GDM_USER_VERIFIER_CHOICE_LIST_PROXY"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="839"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CHOICE_LIST_PROXY_CLASS"
                    c:identifier="GDM_USER_VERIFIER_CHOICE_LIST_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="840"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CHOICE_LIST_PROXY_GET_CLASS"
                    c:identifier="GDM_USER_VERIFIER_CHOICE_LIST_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="841"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CHOICE_LIST_SKELETON"
                    c:identifier="GDM_USER_VERIFIER_CHOICE_LIST_SKELETON"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="909"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CHOICE_LIST_SKELETON_CLASS"
                    c:identifier="GDM_USER_VERIFIER_CHOICE_LIST_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="910"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CHOICE_LIST_SKELETON_GET_CLASS"
                    c:identifier="GDM_USER_VERIFIER_CHOICE_LIST_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="911"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CUSTOM_JSON"
                    c:identifier="GDM_USER_VERIFIER_CUSTOM_JSON"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="944"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CUSTOM_JSON_GET_IFACE"
                    c:identifier="GDM_USER_VERIFIER_CUSTOM_JSON_GET_IFACE"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="946"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CUSTOM_JSON_PROXY"
                    c:identifier="GDM_USER_VERIFIER_CUSTOM_JSON_PROXY"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1055"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CUSTOM_JSON_PROXY_CLASS"
                    c:identifier="GDM_USER_VERIFIER_CUSTOM_JSON_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1056"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CUSTOM_JSON_PROXY_GET_CLASS"
                    c:identifier="GDM_USER_VERIFIER_CUSTOM_JSON_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1057"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CUSTOM_JSON_SKELETON"
                    c:identifier="GDM_USER_VERIFIER_CUSTOM_JSON_SKELETON"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1125"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CUSTOM_JSON_SKELETON_CLASS"
                    c:identifier="GDM_USER_VERIFIER_CUSTOM_JSON_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1126"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_CUSTOM_JSON_SKELETON_GET_CLASS"
                    c:identifier="GDM_USER_VERIFIER_CUSTOM_JSON_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="1127"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_GET_IFACE"
                    c:identifier="GDM_USER_VERIFIER_GET_IFACE"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="386"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_PROXY"
                    c:identifier="GDM_USER_VERIFIER_PROXY"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="655"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_PROXY_CLASS"
                    c:identifier="GDM_USER_VERIFIER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="656"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_PROXY_GET_CLASS"
                    c:identifier="GDM_USER_VERIFIER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="657"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_SKELETON"
                    c:identifier="GDM_USER_VERIFIER_SKELETON"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="725"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_SKELETON_CLASS"
                    c:identifier="GDM_USER_VERIFIER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="726"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="USER_VERIFIER_SKELETON_GET_CLASS"
                    c:identifier="GDM_USER_VERIFIER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="727"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="UserVerifier"
               c:symbol-prefix="user_verifier"
               c:type="GdmUserVerifier"
               glib:type-name="GdmUserVerifier"
               glib:get-type="gdm_user_verifier_get_type"
               glib:type-struct="UserVerifierIface">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="3767">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt;.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="471"/>
      <function name="interface_info"
                c:identifier="gdm_user_verifier_interface_info">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3528">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="479"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="3533">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_user_verifier_override_properties">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3541">Overrides all #GObject properties in the #GdmUserVerifier interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="480"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="3549">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="3543">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="3544">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="conversation_started">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3781">Handler for the #GdmUserVerifier::conversation-started signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="423"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="conversation_stopped">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3782">Handler for the #GdmUserVerifier::conversation-stopped signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="427"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_answer_query">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3776">Handler for the #GdmUserVerifier::handle-answer-query signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="397"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_answer" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_begin_verification">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3777">Handler for the #GdmUserVerifier::handle-begin-verification signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="403"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_begin_verification_for_user">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3778">Handler for the #GdmUserVerifier::handle-begin-verification-for-user signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="408"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_cancel">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3779">Handler for the #GdmUserVerifier::handle-cancel signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="414"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_enable_extensions">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3780">Handler for the #GdmUserVerifier::handle-enable-extensions signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="418"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_extensions" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="info">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3783">Handler for the #GdmUserVerifier::info signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="431"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="info_query">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3784">Handler for the #GdmUserVerifier::info-query signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="436"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="problem">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3785">Handler for the #GdmUserVerifier::problem signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="441"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reauthentication_started">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3786">Handler for the #GdmUserVerifier::reauthentication-started signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="446"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_pid_of_caller" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reset">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3787">Handler for the #GdmUserVerifier::reset signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="450"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="secret_info_query">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3788">Handler for the #GdmUserVerifier::secret-info-query signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="453"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="service_unavailable">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3789">Handler for the #GdmUserVerifier::service-unavailable signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="458"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="verification_complete">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3790">Handler for the #GdmUserVerifier::verification-complete signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="463"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="verification_failed">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3791">Handler for the #GdmUserVerifier::verification-failed signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="467"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_answer_query"
              c:identifier="gdm_user_verifier_call_answer_query"
              glib:finish-func="call_answer_query_finish"
              glib:sync-func="call_answer_query_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4619">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.AnswerQuery"&gt;AnswerQuery()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_user_verifier_call_answer_query_finish() to get the result of the operation.

See gdm_user_verifier_call_answer_query_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="614"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4621">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4622">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_answer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4623">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4624">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4625">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4626">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_answer_query_finish"
              c:identifier="gdm_user_verifier_call_answer_query_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4655">Finishes an operation started with gdm_user_verifier_call_answer_query().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="622"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="4663">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4657">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4658">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_call_answer_query().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_answer_query_sync"
              c:identifier="gdm_user_verifier_call_answer_query_sync"
              throws="1"
              glib:async-func="call_answer_query">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4682">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.AnswerQuery"&gt;AnswerQuery()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_call_answer_query() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="627"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="4694">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4684">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4685">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_answer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4686">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4687">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification"
              c:identifier="gdm_user_verifier_call_begin_verification"
              glib:finish-func="call_begin_verification_finish"
              glib:sync-func="call_begin_verification_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4417">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerification"&gt;BeginVerification()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_user_verifier_call_begin_verification_finish() to get the result of the operation.

See gdm_user_verifier_call_begin_verification_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="576"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4419">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4420">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4421">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4422">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4423">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification_finish"
              c:identifier="gdm_user_verifier_call_begin_verification_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4450">Finishes an operation started with gdm_user_verifier_call_begin_verification().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="583"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="4458">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4452">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4453">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_call_begin_verification().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification_for_user"
              c:identifier="gdm_user_verifier_call_begin_verification_for_user"
              glib:finish-func="call_begin_verification_for_user_finish"
              glib:sync-func="call_begin_verification_for_user_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4515">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerificationForUser"&gt;BeginVerificationForUser()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_user_verifier_call_begin_verification_for_user_finish() to get the result of the operation.

See gdm_user_verifier_call_begin_verification_for_user_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="594"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4517">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4518">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4519">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4520">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4521">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4522">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification_for_user_finish"
              c:identifier="gdm_user_verifier_call_begin_verification_for_user_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4551">Finishes an operation started with gdm_user_verifier_call_begin_verification_for_user().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="602"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="4559">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4553">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4554">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_call_begin_verification_for_user().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification_for_user_sync"
              c:identifier="gdm_user_verifier_call_begin_verification_for_user_sync"
              throws="1"
              glib:async-func="call_begin_verification_for_user">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4578">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerificationForUser"&gt;BeginVerificationForUser()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_call_begin_verification_for_user() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="607"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="4590">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4580">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4581">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4582">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4583">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_begin_verification_sync"
              c:identifier="gdm_user_verifier_call_begin_verification_sync"
              throws="1"
              glib:async-func="call_begin_verification">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4477">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerification"&gt;BeginVerification()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_call_begin_verification() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="588"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="4488">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4479">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4480">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4481">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel"
              c:identifier="gdm_user_verifier_call_cancel"
              glib:finish-func="call_cancel_finish"
              glib:sync-func="call_cancel_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4723">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_user_verifier_call_cancel_finish() to get the result of the operation.

See gdm_user_verifier_call_cancel_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="634"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4725">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4726">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4727">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4728">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel_finish"
              c:identifier="gdm_user_verifier_call_cancel_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4753">Finishes an operation started with gdm_user_verifier_call_cancel().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="640"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="4761">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4755">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4756">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_call_cancel().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_cancel_sync"
              c:identifier="gdm_user_verifier_call_cancel_sync"
              throws="1"
              glib:async-func="call_cancel">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4780">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_call_cancel() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="645"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="4790">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4782">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4783">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_extensions"
              c:identifier="gdm_user_verifier_call_enable_extensions"
              glib:finish-func="call_enable_extensions_finish"
              glib:sync-func="call_enable_extensions_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4319">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.EnableExtensions"&gt;EnableExtensions()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_user_verifier_call_enable_extensions_finish() to get the result of the operation.

See gdm_user_verifier_call_enable_extensions_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="558"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4321">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_extensions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4322">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4323">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4324">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4325">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_extensions_finish"
              c:identifier="gdm_user_verifier_call_enable_extensions_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4352">Finishes an operation started with gdm_user_verifier_call_enable_extensions().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="565"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="4360">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4354">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4355">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_call_enable_extensions().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enable_extensions_sync"
              c:identifier="gdm_user_verifier_call_enable_extensions_sync"
              throws="1"
              glib:async-func="call_enable_extensions">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4379">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.EnableExtensions"&gt;EnableExtensions()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_call_enable_extensions() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="570"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="4390">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4381">A #GdmUserVerifierProxy.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_extensions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4382">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4383">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_answer_query"
              c:identifier="gdm_user_verifier_complete_answer_query">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4869">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.AnswerQuery"&gt;AnswerQuery()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="496"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4871">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4872">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_begin_verification"
              c:identifier="gdm_user_verifier_complete_begin_verification">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4833">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerification"&gt;BeginVerification()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="488"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4835">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4836">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_begin_verification_for_user"
              c:identifier="gdm_user_verifier_complete_begin_verification_for_user">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4851">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerificationForUser"&gt;BeginVerificationForUser()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="492"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4853">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4854">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_cancel"
              c:identifier="gdm_user_verifier_complete_cancel">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4887">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="500"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4889">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4890">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_enable_extensions"
              c:identifier="gdm_user_verifier_complete_enable_extensions">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4815">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.EnableExtensions"&gt;EnableExtensions()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="484"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4817">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4818">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_conversation_started"
              c:identifier="gdm_user_verifier_emit_conversation_started">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4146">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ConversationStarted"&gt;"ConversationStarted"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="507"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4148">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4149">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_conversation_stopped"
              c:identifier="gdm_user_verifier_emit_conversation_stopped">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4161">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ConversationStopped"&gt;"ConversationStopped"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="511"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4163">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4164">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_info" c:identifier="gdm_user_verifier_emit_info">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4191">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Info"&gt;"Info"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="519"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4193">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4194">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4195">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_info_query"
              c:identifier="gdm_user_verifier_emit_info_query">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4225">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.InfoQuery"&gt;"InfoQuery"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="529"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4227">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4228">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4229">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_problem"
              c:identifier="gdm_user_verifier_emit_problem">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4208">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Problem"&gt;"Problem"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="524"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4210">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4211">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4212">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_reauthentication_started"
              c:identifier="gdm_user_verifier_emit_reauthentication_started">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4176">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ReauthenticationStarted"&gt;"ReauthenticationStarted"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="515"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4178">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_pid_of_caller" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4179">Argument to pass with the signal.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_reset" c:identifier="gdm_user_verifier_emit_reset">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4259">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Reset"&gt;"Reset"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="539"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4261">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_secret_info_query"
              c:identifier="gdm_user_verifier_emit_secret_info_query">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4242">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.SecretInfoQuery"&gt;"SecretInfoQuery"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="534"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4244">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4245">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4246">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_service_unavailable"
              c:identifier="gdm_user_verifier_emit_service_unavailable">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4272">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ServiceUnavailable"&gt;"ServiceUnavailable"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="542"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4274">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4275">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4276">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_verification_complete"
              c:identifier="gdm_user_verifier_emit_verification_complete">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4304">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.VerificationComplete"&gt;"VerificationComplete"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="551"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4306">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4307">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_verification_failed"
              c:identifier="gdm_user_verifier_emit_verification_failed">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4289">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.VerificationFailed"&gt;"VerificationFailed"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="547"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4291">A #GdmUserVerifier.</doc>
            <type name="UserVerifier" c:type="GdmUserVerifier*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4292">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="conversation-started" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3920">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ConversationStarted"&gt;"ConversationStarted"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="3923">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="conversation-stopped" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3940">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ConversationStopped"&gt;"ConversationStopped"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="3943">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-answer-query" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3873">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.AnswerQuery"&gt;AnswerQuery()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_complete_answer_query() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="3884">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="3876">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="3877">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_answer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="3878">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-begin-verification" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3826">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerification"&gt;BeginVerification()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_complete_begin_verification() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="3836">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="3829">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="3830">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-begin-verification-for-user" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3849">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.BeginVerificationForUser"&gt;BeginVerificationForUser()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_complete_begin_verification_for_user() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="3860">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="3852">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="3853">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="3854">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-cancel" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3897">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.Cancel"&gt;Cancel()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_complete_cancel() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="3906">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="3900">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-enable-extensions" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3803">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier.EnableExtensions"&gt;EnableExtensions()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_complete_enable_extensions() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="3813">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="3806">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_extensions" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="3807">Argument passed by remote caller.</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="info" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3980">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Info"&gt;"Info"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="3983">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="3984">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="info-query" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4022">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.InfoQuery"&gt;"InfoQuery"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4025">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4026">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="problem" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4001">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Problem"&gt;"Problem"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4004">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4005">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="reauthentication-started" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3960">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ReauthenticationStarted"&gt;"ReauthenticationStarted"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_pid_of_caller" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="3963">Argument.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="reset" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4064">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.Reset"&gt;"Reset"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="secret-info-query" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4043">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.SecretInfoQuery"&gt;"SecretInfoQuery"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4046">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4047">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="service-unavailable" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4083">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.ServiceUnavailable"&gt;"ServiceUnavailable"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4086">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4087">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="verification-complete" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4124">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.VerificationComplete"&gt;"VerificationComplete"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4127">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="verification-failed" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4104">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier.VerificationFailed"&gt;"VerificationFailed"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="4107">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <interface name="UserVerifierChoiceList"
               c:symbol-prefix="user_verifier_choice_list"
               c:type="GdmUserVerifierChoiceList"
               glib:type-name="GdmUserVerifierChoiceList"
               glib:get-type="gdm_user_verifier_choice_list_get_type"
               glib:type-struct="UserVerifierChoiceListIface">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="6016">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt;.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="785"/>
      <function name="interface_info"
                c:identifier="gdm_user_verifier_choice_list_interface_info">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="5959">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="793"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="5964">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_user_verifier_choice_list_override_properties">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="5972">Overrides all #GObject properties in the #GdmUserVerifierChoiceList interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="794"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="5980">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5974">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5975">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="choice_query">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="6026">Handler for the #GdmUserVerifierChoiceList::choice-query signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="779"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_list" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_select_choice">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="6025">Handler for the #GdmUserVerifierChoiceList::handle-select-choice signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="773"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_choice" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_select_choice"
              c:identifier="gdm_user_verifier_choice_list_call_select_choice"
              glib:finish-func="call_select_choice_finish"
              glib:sync-func="call_select_choice_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="6106">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-ChoiceList.SelectChoice"&gt;SelectChoice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_user_verifier_choice_list_call_select_choice_finish() to get the result of the operation.

See gdm_user_verifier_choice_list_call_select_choice_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="814"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6108">A #GdmUserVerifierChoiceListProxy.</doc>
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6109">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_choice" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6110">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6111">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6112">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6113">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_choice_finish"
              c:identifier="gdm_user_verifier_choice_list_call_select_choice_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="6142">Finishes an operation started with gdm_user_verifier_choice_list_call_select_choice().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="822"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="6150">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6144">A #GdmUserVerifierChoiceListProxy.</doc>
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6145">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_choice_list_call_select_choice().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_select_choice_sync"
              c:identifier="gdm_user_verifier_choice_list_call_select_choice_sync"
              throws="1"
              glib:async-func="call_select_choice">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="6169">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-ChoiceList.SelectChoice"&gt;SelectChoice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_choice_list_call_select_choice() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="827"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="6181">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6171">A #GdmUserVerifierChoiceListProxy.</doc>
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6172">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_choice" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6173">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6174">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_select_choice"
              c:identifier="gdm_user_verifier_choice_list_complete_select_choice">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="6210">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-ChoiceList.SelectChoice"&gt;SelectChoice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="798"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6212">A #GdmUserVerifierChoiceList.</doc>
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6213">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_choice_query"
              c:identifier="gdm_user_verifier_choice_list_emit_choice_query">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="6087">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier-ChoiceList.ChoiceQuery"&gt;"ChoiceQuery"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="805"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6089">A #GdmUserVerifierChoiceList.</doc>
            <type name="UserVerifierChoiceList"
                  c:type="GdmUserVerifierChoiceList*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6090">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6091">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6092">Argument to pass with the signal.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="choice-query" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="6063">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier-ChoiceList.ChoiceQuery"&gt;"ChoiceQuery"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6066">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6067">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6068">Argument.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-select-choice" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="6038">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-ChoiceList.SelectChoice"&gt;SelectChoice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_choice_list_complete_select_choice() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="6049">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6041">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6042">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_choice" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6043">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="UserVerifierChoiceListIface"
            c:type="GdmUserVerifierChoiceListIface"
            glib:is-gtype-struct-for="UserVerifierChoiceList">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="6022">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt;.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="785"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="6024">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_select_choice">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="6025">Handler for the #GdmUserVerifierChoiceList::handle-select-choice signal.</doc>
        <callback name="handle_select_choice">
          <source-position filename="libgdm/gdm-client-glue.h" line="773"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifierChoiceList"
                    c:type="GdmUserVerifierChoiceList*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_choice" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="choice_query">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="6026">Handler for the #GdmUserVerifierChoiceList::choice-query signal.</doc>
        <callback name="choice_query">
          <source-position filename="libgdm/gdm-client-glue.h" line="779"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifierChoiceList"
                    c:type="GdmUserVerifierChoiceList*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_prompt_message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_list" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="UserVerifierChoiceListProxy"
           c:symbol-prefix="user_verifier_choice_list_proxy"
           c:type="GdmUserVerifierChoiceListProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmUserVerifierChoiceListProxy"
           glib:get-type="gdm_user_verifier_choice_list_proxy_get_type"
           glib:type-struct="UserVerifierChoiceListProxyClass">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="6230">The #GdmUserVerifierChoiceListProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="859"/>
      <implements name="UserVerifierChoiceList"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_user_verifier_choice_list_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="6421">Finishes an operation started with gdm_user_verifier_choice_list_proxy_new().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="875"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="6428">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierChoiceListProxy"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6423">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_choice_list_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_user_verifier_choice_list_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="6511">Finishes an operation started with gdm_user_verifier_choice_list_proxy_new_for_bus().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="894"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="6518">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierChoiceListProxy"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6513">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_choice_list_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_user_verifier_choice_list_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="6536">Like gdm_user_verifier_choice_list_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_user_verifier_choice_list_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="897"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="6551">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierChoiceListProxy"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6538">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6539">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6540">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6541">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6542">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_user_verifier_choice_list_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="6446">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_user_verifier_choice_list_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="878"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="6461">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierChoiceListProxy"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6448">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6449">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6450">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6451">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6452">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="gdm_user_verifier_choice_list_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="6391">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_user_verifier_choice_list_proxy_new_finish() to get the result of the operation.

See gdm_user_verifier_choice_list_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="867"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6393">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6394">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6395">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6396">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6397">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6398">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6399">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_user_verifier_choice_list_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="6481">Like gdm_user_verifier_choice_list_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_user_verifier_choice_list_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_user_verifier_choice_list_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="886"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6483">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6484">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6485">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6486">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6487">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6488">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="6489">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="UserVerifierChoiceListProxyPrivate"
              c:type="GdmUserVerifierChoiceListProxyPrivate*"/>
      </field>
    </class>
    <record name="UserVerifierChoiceListProxyClass"
            c:type="GdmUserVerifierChoiceListProxyClass"
            glib:is-gtype-struct-for="UserVerifierChoiceListProxy">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="6236">Class structure for #GdmUserVerifierChoiceListProxy.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="859"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="6238">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="UserVerifierChoiceListProxyPrivate"
            c:type="GdmUserVerifierChoiceListProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libgdm/gdm-client-glue.h" line="847"/>
    </record>
    <class name="UserVerifierChoiceListSkeleton"
           c:symbol-prefix="user_verifier_choice_list_skeleton"
           c:type="GdmUserVerifierChoiceListSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmUserVerifierChoiceListSkeleton"
           glib:get-type="gdm_user_verifier_choice_list_skeleton_get_type"
           glib:type-struct="UserVerifierChoiceListSkeletonClass">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="6573">The #GdmUserVerifierChoiceListSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="929"/>
      <implements name="UserVerifierChoiceList"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new"
                   c:identifier="gdm_user_verifier_choice_list_skeleton_new">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="6873">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt;.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="937"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="6878">The skeleton object.</doc>
          <type name="UserVerifierChoiceListSkeleton"
                c:type="GdmUserVerifierChoiceList*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="UserVerifierChoiceListSkeletonPrivate"
              c:type="GdmUserVerifierChoiceListSkeletonPrivate*"/>
      </field>
    </class>
    <record name="UserVerifierChoiceListSkeletonClass"
            c:type="GdmUserVerifierChoiceListSkeletonClass"
            glib:is-gtype-struct-for="UserVerifierChoiceListSkeleton">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="6579">Class structure for #GdmUserVerifierChoiceListSkeleton.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="929"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="6581">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="UserVerifierChoiceListSkeletonPrivate"
            c:type="GdmUserVerifierChoiceListSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libgdm/gdm-client-glue.h" line="917"/>
    </record>
    <interface name="UserVerifierCustomJSON"
               c:symbol-prefix="user_verifier_custom_json"
               c:type="GdmUserVerifierCustomJSON"
               glib:type-name="GdmUserVerifierCustomJSON"
               glib:get-type="gdm_user_verifier_custom_json_get_type"
               glib:type-struct="UserVerifierCustomJSONIface">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="7153">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-CustomJSON.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.CustomJSON&lt;/link&gt;.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="976"/>
      <function name="interface_info"
                c:identifier="gdm_user_verifier_custom_json_interface_info">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7083">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-CustomJSON.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.CustomJSON&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="984"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="7088">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_user_verifier_custom_json_override_properties">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7096">Overrides all #GObject properties in the #GdmUserVerifierCustomJSON interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="985"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="7104">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7098">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7099">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_reply">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7162">Handler for the #GdmUserVerifierCustomJSON::handle-reply signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="957"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifierCustomJSON"
                  c:type="GdmUserVerifierCustomJSON*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_reply" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_report_error">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7163">Handler for the #GdmUserVerifierCustomJSON::handle-report-error signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="963"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifierCustomJSON"
                  c:type="GdmUserVerifierCustomJSON*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_error" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="request">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7164">Handler for the #GdmUserVerifierCustomJSON::request signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="969"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="UserVerifierCustomJSON"
                  c:type="GdmUserVerifierCustomJSON*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_protocol" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_version" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_request" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_reply"
              c:identifier="gdm_user_verifier_custom_json_call_reply"
              glib:finish-func="call_reply_finish"
              glib:sync-func="call_reply_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7271">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-CustomJSON.Reply"&gt;Reply()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_user_verifier_custom_json_call_reply_finish() to get the result of the operation.

See gdm_user_verifier_custom_json_call_reply_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1010"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7273">A #GdmUserVerifierCustomJSONProxy.</doc>
            <type name="UserVerifierCustomJSON"
                  c:type="GdmUserVerifierCustomJSON*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7274">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_reply" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7275">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7276">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7277">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7278">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_reply_finish"
              c:identifier="gdm_user_verifier_custom_json_call_reply_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7307">Finishes an operation started with gdm_user_verifier_custom_json_call_reply().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1018"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="7315">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7309">A #GdmUserVerifierCustomJSONProxy.</doc>
            <type name="UserVerifierCustomJSON"
                  c:type="GdmUserVerifierCustomJSON*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7310">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_custom_json_call_reply().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_reply_sync"
              c:identifier="gdm_user_verifier_custom_json_call_reply_sync"
              throws="1"
              glib:async-func="call_reply">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7334">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-CustomJSON.Reply"&gt;Reply()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_custom_json_call_reply() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1023"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="7346">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7336">A #GdmUserVerifierCustomJSONProxy.</doc>
            <type name="UserVerifierCustomJSON"
                  c:type="GdmUserVerifierCustomJSON*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7337">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_reply" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7338">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7339">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_report_error"
              c:identifier="gdm_user_verifier_custom_json_call_report_error"
              glib:finish-func="call_report_error_finish"
              glib:sync-func="call_report_error_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7375">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-CustomJSON.ReportError"&gt;ReportError()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_user_verifier_custom_json_call_report_error_finish() to get the result of the operation.

See gdm_user_verifier_custom_json_call_report_error_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1030"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7377">A #GdmUserVerifierCustomJSONProxy.</doc>
            <type name="UserVerifierCustomJSON"
                  c:type="GdmUserVerifierCustomJSON*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7378">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7379">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7380">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7381">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7382">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_report_error_finish"
              c:identifier="gdm_user_verifier_custom_json_call_report_error_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7411">Finishes an operation started with gdm_user_verifier_custom_json_call_report_error().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1038"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="7419">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7413">A #GdmUserVerifierCustomJSONProxy.</doc>
            <type name="UserVerifierCustomJSON"
                  c:type="GdmUserVerifierCustomJSON*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7414">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_custom_json_call_report_error().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_report_error_sync"
              c:identifier="gdm_user_verifier_custom_json_call_report_error_sync"
              throws="1"
              glib:async-func="call_report_error">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7438">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-CustomJSON.ReportError"&gt;ReportError()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_user_verifier_custom_json_call_report_error() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1043"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="7450">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7440">A #GdmUserVerifierCustomJSONProxy.</doc>
            <type name="UserVerifierCustomJSON"
                  c:type="GdmUserVerifierCustomJSON*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7441">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7442">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7443">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_reply"
              c:identifier="gdm_user_verifier_custom_json_complete_reply">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7479">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-CustomJSON.Reply"&gt;Reply()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="989"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7481">A #GdmUserVerifierCustomJSON.</doc>
            <type name="UserVerifierCustomJSON"
                  c:type="GdmUserVerifierCustomJSON*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7482">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_report_error"
              c:identifier="gdm_user_verifier_custom_json_complete_report_error">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7497">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-CustomJSON.ReportError"&gt;ReportError()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="993"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7499">A #GdmUserVerifierCustomJSON.</doc>
            <type name="UserVerifierCustomJSON"
                  c:type="GdmUserVerifierCustomJSON*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7500">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_request"
              c:identifier="gdm_user_verifier_custom_json_emit_request">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7250">Emits the &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier-CustomJSON.Request"&gt;"Request"&lt;/link&gt; D-Bus signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1000"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7252">A #GdmUserVerifierCustomJSON.</doc>
            <type name="UserVerifierCustomJSON"
                  c:type="GdmUserVerifierCustomJSON*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7253">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_protocol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7254">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_version" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7255">Argument to pass with the signal.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7256">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-reply" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7176">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-CustomJSON.Reply"&gt;Reply()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_custom_json_complete_reply() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="7187">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7179">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7180">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_reply" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7181">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-report-error" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7200">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-UserVerifier-CustomJSON.ReportError"&gt;ReportError()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_user_verifier_custom_json_complete_report_error() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="7211">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7203">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7204">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7205">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="request" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7225">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-gnome-DisplayManager-UserVerifier-CustomJSON.Request"&gt;"Request"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7228">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_protocol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7229">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_version" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7230">Argument.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7231">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="UserVerifierCustomJSONIface"
            c:type="GdmUserVerifierCustomJSONIface"
            glib:is-gtype-struct-for="UserVerifierCustomJSON">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="7159">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-CustomJSON.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.CustomJSON&lt;/link&gt;.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="976"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7161">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_reply">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7162">Handler for the #GdmUserVerifierCustomJSON::handle-reply signal.</doc>
        <callback name="handle_reply">
          <source-position filename="libgdm/gdm-client-glue.h" line="957"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifierCustomJSON"
                    c:type="GdmUserVerifierCustomJSON*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_reply" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_report_error">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7163">Handler for the #GdmUserVerifierCustomJSON::handle-report-error signal.</doc>
        <callback name="handle_report_error">
          <source-position filename="libgdm/gdm-client-glue.h" line="963"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifierCustomJSON"
                    c:type="GdmUserVerifierCustomJSON*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_error" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="request">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7164">Handler for the #GdmUserVerifierCustomJSON::request signal.</doc>
        <callback name="request">
          <source-position filename="libgdm/gdm-client-glue.h" line="969"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifierCustomJSON"
                    c:type="GdmUserVerifierCustomJSON*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_protocol" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_version" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_request" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="UserVerifierCustomJSONProxy"
           c:symbol-prefix="user_verifier_custom_json_proxy"
           c:type="GdmUserVerifierCustomJSONProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmUserVerifierCustomJSONProxy"
           glib:get-type="gdm_user_verifier_custom_json_proxy_get_type"
           glib:type-struct="UserVerifierCustomJSONProxyClass">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="7517">The #GdmUserVerifierCustomJSONProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1075"/>
      <implements name="UserVerifierCustomJSON"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_user_verifier_custom_json_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7708">Finishes an operation started with gdm_user_verifier_custom_json_proxy_new().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1091"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="7715">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierCustomJSONProxy"
                c:type="GdmUserVerifierCustomJSON*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7710">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_custom_json_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_user_verifier_custom_json_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7798">Finishes an operation started with gdm_user_verifier_custom_json_proxy_new_for_bus().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1110"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="7805">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierCustomJSONProxy"
                c:type="GdmUserVerifierCustomJSON*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7800">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_custom_json_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_user_verifier_custom_json_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7823">Like gdm_user_verifier_custom_json_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_user_verifier_custom_json_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1113"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="7838">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierCustomJSONProxy"
                c:type="GdmUserVerifierCustomJSON*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7825">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7826">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7827">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7828">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7829">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_user_verifier_custom_json_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7733">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-CustomJSON.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.CustomJSON&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_user_verifier_custom_json_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1094"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="7748">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierCustomJSONProxy"
                c:type="GdmUserVerifierCustomJSON*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7735">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7736">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7737">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7738">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7739">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="gdm_user_verifier_custom_json_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7678">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-CustomJSON.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.CustomJSON&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_user_verifier_custom_json_proxy_new_finish() to get the result of the operation.

See gdm_user_verifier_custom_json_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1083"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7680">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7681">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7682">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7683">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7684">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7685">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7686">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_user_verifier_custom_json_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7768">Like gdm_user_verifier_custom_json_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_user_verifier_custom_json_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_user_verifier_custom_json_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7770">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7771">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7772">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7773">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7774">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7775">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="7776">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="UserVerifierCustomJSONProxyPrivate"
              c:type="GdmUserVerifierCustomJSONProxyPrivate*"/>
      </field>
    </class>
    <record name="UserVerifierCustomJSONProxyClass"
            c:type="GdmUserVerifierCustomJSONProxyClass"
            glib:is-gtype-struct-for="UserVerifierCustomJSONProxy">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="7523">Class structure for #GdmUserVerifierCustomJSONProxy.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1075"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7525">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="UserVerifierCustomJSONProxyPrivate"
            c:type="GdmUserVerifierCustomJSONProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libgdm/gdm-client-glue.h" line="1063"/>
    </record>
    <class name="UserVerifierCustomJSONSkeleton"
           c:symbol-prefix="user_verifier_custom_json_skeleton"
           c:type="GdmUserVerifierCustomJSONSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmUserVerifierCustomJSONSkeleton"
           glib:get-type="gdm_user_verifier_custom_json_skeleton_get_type"
           glib:type-struct="UserVerifierCustomJSONSkeletonClass">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="7860">The #GdmUserVerifierCustomJSONSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1145"/>
      <implements name="UserVerifierCustomJSON"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new"
                   c:identifier="gdm_user_verifier_custom_json_skeleton_new">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8162">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-CustomJSON.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.CustomJSON&lt;/link&gt;.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="1153"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="8167">The skeleton object.</doc>
          <type name="UserVerifierCustomJSONSkeleton"
                c:type="GdmUserVerifierCustomJSON*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="UserVerifierCustomJSONSkeletonPrivate"
              c:type="GdmUserVerifierCustomJSONSkeletonPrivate*"/>
      </field>
    </class>
    <record name="UserVerifierCustomJSONSkeletonClass"
            c:type="GdmUserVerifierCustomJSONSkeletonClass"
            glib:is-gtype-struct-for="UserVerifierCustomJSONSkeleton">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="7866">Class structure for #GdmUserVerifierCustomJSONSkeleton.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1145"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7868">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="UserVerifierCustomJSONSkeletonPrivate"
            c:type="GdmUserVerifierCustomJSONSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libgdm/gdm-client-glue.h" line="1133"/>
    </record>
    <record name="UserVerifierIface"
            c:type="GdmUserVerifierIface"
            glib:is-gtype-struct-for="UserVerifier">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="3773">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt;.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="471"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3775">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_answer_query">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3776">Handler for the #GdmUserVerifier::handle-answer-query signal.</doc>
        <callback name="handle_answer_query">
          <source-position filename="libgdm/gdm-client-glue.h" line="397"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_answer" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_begin_verification">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3777">Handler for the #GdmUserVerifier::handle-begin-verification signal.</doc>
        <callback name="handle_begin_verification">
          <source-position filename="libgdm/gdm-client-glue.h" line="403"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_begin_verification_for_user">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3778">Handler for the #GdmUserVerifier::handle-begin-verification-for-user signal.</doc>
        <callback name="handle_begin_verification_for_user">
          <source-position filename="libgdm/gdm-client-glue.h" line="408"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_username" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_cancel">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3779">Handler for the #GdmUserVerifier::handle-cancel signal.</doc>
        <callback name="handle_cancel">
          <source-position filename="libgdm/gdm-client-glue.h" line="414"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_enable_extensions">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3780">Handler for the #GdmUserVerifier::handle-enable-extensions signal.</doc>
        <callback name="handle_enable_extensions">
          <source-position filename="libgdm/gdm-client-glue.h" line="418"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_extensions" transfer-ownership="none">
              <type name="utf8" c:type="const gchar* const*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="conversation_started">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3781">Handler for the #GdmUserVerifier::conversation-started signal.</doc>
        <callback name="conversation_started">
          <source-position filename="libgdm/gdm-client-glue.h" line="423"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="conversation_stopped">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3782">Handler for the #GdmUserVerifier::conversation-stopped signal.</doc>
        <callback name="conversation_stopped">
          <source-position filename="libgdm/gdm-client-glue.h" line="427"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="info">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3783">Handler for the #GdmUserVerifier::info signal.</doc>
        <callback name="info">
          <source-position filename="libgdm/gdm-client-glue.h" line="431"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_info" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="info_query">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3784">Handler for the #GdmUserVerifier::info-query signal.</doc>
        <callback name="info_query">
          <source-position filename="libgdm/gdm-client-glue.h" line="436"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_query" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="problem">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3785">Handler for the #GdmUserVerifier::problem signal.</doc>
        <callback name="problem">
          <source-position filename="libgdm/gdm-client-glue.h" line="441"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_problem" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reauthentication_started">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3786">Handler for the #GdmUserVerifier::reauthentication-started signal.</doc>
        <callback name="reauthentication_started">
          <source-position filename="libgdm/gdm-client-glue.h" line="446"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_pid_of_caller" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reset">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3787">Handler for the #GdmUserVerifier::reset signal.</doc>
        <callback name="reset">
          <source-position filename="libgdm/gdm-client-glue.h" line="450"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="secret_info_query">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3788">Handler for the #GdmUserVerifier::secret-info-query signal.</doc>
        <callback name="secret_info_query">
          <source-position filename="libgdm/gdm-client-glue.h" line="453"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_query" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="service_unavailable">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3789">Handler for the #GdmUserVerifier::service-unavailable signal.</doc>
        <callback name="service_unavailable">
          <source-position filename="libgdm/gdm-client-glue.h" line="458"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="verification_complete">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3790">Handler for the #GdmUserVerifier::verification-complete signal.</doc>
        <callback name="verification_complete">
          <source-position filename="libgdm/gdm-client-glue.h" line="463"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="verification_failed">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3791">Handler for the #GdmUserVerifier::verification-failed signal.</doc>
        <callback name="verification_failed">
          <source-position filename="libgdm/gdm-client-glue.h" line="467"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="UserVerifier" c:type="GdmUserVerifier*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="UserVerifierProxy"
           c:symbol-prefix="user_verifier_proxy"
           c:type="GdmUserVerifierProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmUserVerifierProxy"
           glib:get-type="gdm_user_verifier_proxy_get_type"
           glib:type-struct="UserVerifierProxyClass">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="4907">The #GdmUserVerifierProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="675"/>
      <implements name="UserVerifier"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_user_verifier_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="5098">Finishes an operation started with gdm_user_verifier_proxy_new().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="691"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="5105">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierProxy" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5100">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_user_verifier_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="5188">Finishes an operation started with gdm_user_verifier_proxy_new_for_bus().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="710"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="5195">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierProxy" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5190">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_user_verifier_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_user_verifier_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="5213">Like gdm_user_verifier_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_user_verifier_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="713"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="5228">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierProxy" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5215">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5216">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5217">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5218">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5219">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_user_verifier_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="5123">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_user_verifier_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="694"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="5138">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="UserVerifierProxy" c:type="GdmUserVerifier*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5125">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5126">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5127">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5128">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5129">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="gdm_user_verifier_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="5068">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_user_verifier_proxy_new_finish() to get the result of the operation.

See gdm_user_verifier_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="683"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5070">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5071">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5072">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5073">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5074">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5075">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5076">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_user_verifier_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="5158">Like gdm_user_verifier_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_user_verifier_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_user_verifier_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="702"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5160">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5161">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5162">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5163">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5164">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5165">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="5166">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="UserVerifierProxyPrivate"
              c:type="GdmUserVerifierProxyPrivate*"/>
      </field>
    </class>
    <record name="UserVerifierProxyClass"
            c:type="GdmUserVerifierProxyClass"
            glib:is-gtype-struct-for="UserVerifierProxy">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="4913">Class structure for #GdmUserVerifierProxy.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="675"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="4915">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="UserVerifierProxyPrivate"
            c:type="GdmUserVerifierProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libgdm/gdm-client-glue.h" line="663"/>
    </record>
    <class name="UserVerifierSkeleton"
           c:symbol-prefix="user_verifier_skeleton"
           c:type="GdmUserVerifierSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmUserVerifierSkeleton"
           glib:get-type="gdm_user_verifier_skeleton_get_type"
           glib:type-struct="UserVerifierSkeletonClass">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="5250">The #GdmUserVerifierSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="745"/>
      <implements name="UserVerifier"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_user_verifier_skeleton_new">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="5804">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt;.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="753"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="5809">The skeleton object.</doc>
          <type name="UserVerifierSkeleton" c:type="GdmUserVerifier*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="UserVerifierSkeletonPrivate"
              c:type="GdmUserVerifierSkeletonPrivate*"/>
      </field>
    </class>
    <record name="UserVerifierSkeletonClass"
            c:type="GdmUserVerifierSkeletonClass"
            glib:is-gtype-struct-for="UserVerifierSkeleton">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="5256">Class structure for #GdmUserVerifierSkeleton.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="745"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="5258">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="UserVerifierSkeletonPrivate"
            c:type="GdmUserVerifierSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libgdm/gdm-client-glue.h" line="733"/>
    </record>
    <function-macro name="WORKER_MANAGER"
                    c:identifier="GDM_WORKER_MANAGER"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="21"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WORKER_MANAGER_GET_IFACE"
                    c:identifier="GDM_WORKER_MANAGER_GET_IFACE"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="23"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WORKER_MANAGER_PROXY"
                    c:identifier="GDM_WORKER_MANAGER_PROXY"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="279"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WORKER_MANAGER_PROXY_CLASS"
                    c:identifier="GDM_WORKER_MANAGER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="280"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WORKER_MANAGER_PROXY_GET_CLASS"
                    c:identifier="GDM_WORKER_MANAGER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="281"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WORKER_MANAGER_SKELETON"
                    c:identifier="GDM_WORKER_MANAGER_SKELETON"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="349"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WORKER_MANAGER_SKELETON_CLASS"
                    c:identifier="GDM_WORKER_MANAGER_SKELETON_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="350"/>
      <parameters>
        <parameter name="k">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WORKER_MANAGER_SKELETON_GET_CLASS"
                    c:identifier="GDM_WORKER_MANAGER_SKELETON_GET_CLASS"
                    introspectable="0">
      <source-position filename="libgdm/gdm-client-glue.h" line="351"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="WorkerManager"
               c:symbol-prefix="worker_manager"
               c:type="GdmWorkerManager"
               glib:type-name="GdmWorkerManager"
               glib:get-type="gdm_worker_manager_get_type"
               glib:type-struct="WorkerManagerIface">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="1225">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt;.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="76"/>
      <function name="interface_info"
                c:identifier="gdm_worker_manager_interface_info">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1103">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt; D-Bus interface.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="1108">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="gdm_worker_manager_override_properties">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1116">Overrides all #GObject properties in the #GdmWorkerManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="1124">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1118">The class structure for a #GObject derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1119">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="handle_choice_list_query">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1234">Handler for the #GdmWorkerManager::handle-choice-list-query signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_custom_json_request">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1235">Handler for the #GdmWorkerManager::handle-custom-json-request signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_protocol" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_version" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_request" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_hello">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1236">Handler for the #GdmWorkerManager::handle-hello signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_info">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1237">Handler for the #GdmWorkerManager::handle-info signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_info_query">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1238">Handler for the #GdmWorkerManager::handle-info-query signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_problem">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1239">Handler for the #GdmWorkerManager::handle-problem signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_secret_info_query">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1240">Handler for the #GdmWorkerManager::handle-secret-info-query signal.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_choice_list_query"
              c:identifier="gdm_worker_manager_call_choice_list_query"
              glib:finish-func="call_choice_list_query_finish"
              glib:sync-func="call_choice_list_query_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1943">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.ChoiceListQuery"&gt;ChoiceListQuery()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_worker_manager_call_choice_list_query_finish() to get the result of the operation.

See gdm_worker_manager_call_choice_list_query_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="224"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1945">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1946">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1947">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1948">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1949">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1950">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1951">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_choice_list_query_finish"
              c:identifier="gdm_worker_manager_call_choice_list_query_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1982">Finishes an operation started with gdm_worker_manager_call_choice_list_query().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="233"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="1991">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1984">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1985">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1986">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_choice_list_query().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_choice_list_query_sync"
              c:identifier="gdm_worker_manager_call_choice_list_query_sync"
              throws="1"
              glib:async-func="call_choice_list_query">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="2012">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.ChoiceListQuery"&gt;ChoiceListQuery()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_choice_list_query() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="239"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="2026">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2014">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2015">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2016">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2017">Argument to pass with the method invocation.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2018">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2019">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_custom_json_request"
              c:identifier="gdm_worker_manager_call_custom_json_request"
              glib:finish-func="call_custom_json_request_finish"
              glib:sync-func="call_custom_json_request_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="2059">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.CustomJSONRequest"&gt;CustomJSONRequest()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_worker_manager_call_custom_json_request_finish() to get the result of the operation.

See gdm_worker_manager_call_custom_json_request_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="248"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2061">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2062">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_protocol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2063">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_version" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2064">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2065">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2066">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2067">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2068">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_custom_json_request_finish"
              c:identifier="gdm_worker_manager_call_custom_json_request_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="2101">Finishes an operation started with gdm_worker_manager_call_custom_json_request().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="258"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="2110">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2103">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="out_response"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2104">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2105">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_custom_json_request().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_custom_json_request_sync"
              c:identifier="gdm_worker_manager_call_custom_json_request_sync"
              throws="1"
              glib:async-func="call_custom_json_request">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="2131">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.CustomJSONRequest"&gt;CustomJSONRequest()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_custom_json_request() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="264"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="2146">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2133">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2134">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_protocol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2135">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_version" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2136">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2137">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_response"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2138">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2139">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_hello"
              c:identifier="gdm_worker_manager_call_hello"
              glib:finish-func="call_hello_finish"
              glib:sync-func="call_hello_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1423">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Hello"&gt;Hello()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_worker_manager_call_hello_finish() to get the result of the operation.

See gdm_worker_manager_call_hello_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="124"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1425">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1426">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1427">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1428">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_hello_finish"
              c:identifier="gdm_worker_manager_call_hello_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1453">Finishes an operation started with gdm_worker_manager_call_hello().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="130"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="1461">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1455">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1456">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_hello().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_hello_sync"
              c:identifier="gdm_worker_manager_call_hello_sync"
              throws="1"
              glib:async-func="call_hello">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1480">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Hello"&gt;Hello()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_hello() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="135"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="1490">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1482">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1483">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info"
              c:identifier="gdm_worker_manager_call_info"
              glib:finish-func="call_info_finish"
              glib:sync-func="call_info_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1735">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Info"&gt;Info()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_worker_manager_call_info_finish() to get the result of the operation.

See gdm_worker_manager_call_info_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="184"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1737">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1738">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1739">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1740">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1741">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1742">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info_finish"
              c:identifier="gdm_worker_manager_call_info_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1771">Finishes an operation started with gdm_worker_manager_call_info().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="192"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="1779">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1773">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1774">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_info().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info_query"
              c:identifier="gdm_worker_manager_call_info_query"
              glib:finish-func="call_info_query_finish"
              glib:sync-func="call_info_query_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1515">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.InfoQuery"&gt;InfoQuery()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_worker_manager_call_info_query_finish() to get the result of the operation.

See gdm_worker_manager_call_info_query_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="140"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1517">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1518">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1519">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1520">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1521">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1522">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info_query_finish"
              c:identifier="gdm_worker_manager_call_info_query_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1551">Finishes an operation started with gdm_worker_manager_call_info_query().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="148"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="1560">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1553">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1554">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1555">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_info_query().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info_query_sync"
              c:identifier="gdm_worker_manager_call_info_query_sync"
              throws="1"
              glib:async-func="call_info_query">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1581">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.InfoQuery"&gt;InfoQuery()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_info_query() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="154"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="1594">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1583">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1584">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1585">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1586">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1587">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_info_sync"
              c:identifier="gdm_worker_manager_call_info_sync"
              throws="1"
              glib:async-func="call_info">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1798">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Info"&gt;Info()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_info() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="197"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="1810">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1800">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1801">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1802">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1803">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_problem"
              c:identifier="gdm_worker_manager_call_problem"
              glib:finish-func="call_problem_finish"
              glib:sync-func="call_problem_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1839">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Problem"&gt;Problem()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_worker_manager_call_problem_finish() to get the result of the operation.

See gdm_worker_manager_call_problem_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="204"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1841">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1842">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1843">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1844">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1845">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1846">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_problem_finish"
              c:identifier="gdm_worker_manager_call_problem_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1875">Finishes an operation started with gdm_worker_manager_call_problem().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="212"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="1883">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1877">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1878">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_problem().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_problem_sync"
              c:identifier="gdm_worker_manager_call_problem_sync"
              throws="1"
              glib:async-func="call_problem">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1902">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Problem"&gt;Problem()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_problem() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="217"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="1914">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1904">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1905">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1906">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1907">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_secret_info_query"
              c:identifier="gdm_worker_manager_call_secret_info_query"
              glib:finish-func="call_secret_info_query_finish"
              glib:sync-func="call_secret_info_query_sync">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1625">Asynchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.SecretInfoQuery"&gt;SecretInfoQuery()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_worker_manager_call_secret_info_query_finish() to get the result of the operation.

See gdm_worker_manager_call_secret_info_query_sync() for the synchronous, blocking version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="162"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1627">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1628">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1629">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1630">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1631">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1632">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_secret_info_query_finish"
              c:identifier="gdm_worker_manager_call_secret_info_query_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1661">Finishes an operation started with gdm_worker_manager_call_secret_info_query().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="170"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="1670">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1663">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1664">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1665">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_call_secret_info_query().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_secret_info_query_sync"
              c:identifier="gdm_worker_manager_call_secret_info_query_sync"
              throws="1"
              glib:async-func="call_secret_info_query">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1691">Synchronously invokes the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.SecretInfoQuery"&gt;SecretInfoQuery()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See gdm_worker_manager_call_secret_info_query() for the asynchronous version of this method.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="176"/>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="1704">%TRUE if the call succeeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1693">A #GdmWorkerManagerProxy.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1694">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1695">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_answer"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1696">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1697">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_choice_list_query"
              c:identifier="gdm_worker_manager_complete_choice_list_query">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="2277">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.ChoiceListQuery"&gt;ChoiceListQuery()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2279">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2280">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="answer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2281">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_custom_json_request"
              c:identifier="gdm_worker_manager_complete_custom_json_request">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="2298">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.CustomJSONRequest"&gt;CustomJSONRequest()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2300">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2301">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2302">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_hello"
              c:identifier="gdm_worker_manager_complete_hello">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="2181">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Hello"&gt;Hello()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2183">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2184">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_info"
              c:identifier="gdm_worker_manager_complete_info">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="2241">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Info"&gt;Info()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2243">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2244">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_info_query"
              c:identifier="gdm_worker_manager_complete_info_query">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="2199">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.InfoQuery"&gt;InfoQuery()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2201">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2202">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="answer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2203">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_problem"
              c:identifier="gdm_worker_manager_complete_problem">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="2259">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Problem"&gt;Problem()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2261">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2262">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_secret_info_query"
              c:identifier="gdm_worker_manager_complete_secret_info_query">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="2220">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.SecretInfoQuery"&gt;SecretInfoQuery()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2222">A #GdmWorkerManager.</doc>
            <type name="WorkerManager" c:type="GdmWorkerManager*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2223">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="answer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2224">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="handle-choice-list-query" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1370">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.ChoiceListQuery"&gt;ChoiceListQuery()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_choice_list_query() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="1382">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1373">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1374">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_prompt_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1375">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1376">Argument passed by remote caller.</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-custom-json-request" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1395">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.CustomJSONRequest"&gt;CustomJSONRequest()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_custom_json_request() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="1408">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1398">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1399">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_protocol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1400">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_version" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1401">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1402">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-hello" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1252">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Hello"&gt;Hello()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_hello() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="1261">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1255">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-info" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1322">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Info"&gt;Info()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_info() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="1333">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1325">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1326">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1327">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-info-query" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1274">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.InfoQuery"&gt;InfoQuery()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_info_query() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="1285">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1277">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1278">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1279">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-problem" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1346">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.Problem"&gt;Problem()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_problem() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="1357">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1349">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1350">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_problem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1351">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-secret-info-query" when="last">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1298">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-gnome-DisplayManager-WorkerManager.SecretInfoQuery"&gt;SecretInfoQuery()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call gdm_worker_manager_complete_secret_info_query() or e.g. g_dbus_method_invocation_return_error() on it) and no other signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="1309">%G_DBUS_METHOD_INVOCATION_HANDLED or %TRUE if the invocation was handled, %G_DBUS_METHOD_INVOCATION_UNHANDLED or %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1301">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1302">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="1303">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="WorkerManagerIface"
            c:type="GdmWorkerManagerIface"
            glib:is-gtype-struct-for="WorkerManager">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="1231">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt;.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="76"/>
      <field name="parent_iface">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1233">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_choice_list_query">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1234">Handler for the #GdmWorkerManager::handle-choice-list-query signal.</doc>
        <callback name="handle_choice_list_query">
          <source-position filename="libgdm/gdm-client-glue.h" line="33"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_prompt_message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_query" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_custom_json_request">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1235">Handler for the #GdmWorkerManager::handle-custom-json-request signal.</doc>
        <callback name="handle_custom_json_request">
          <source-position filename="libgdm/gdm-client-glue.h" line="40"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_protocol" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_version" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_request" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_hello">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1236">Handler for the #GdmWorkerManager::handle-hello signal.</doc>
        <callback name="handle_hello">
          <source-position filename="libgdm/gdm-client-glue.h" line="48"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_info">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1237">Handler for the #GdmWorkerManager::handle-info signal.</doc>
        <callback name="handle_info">
          <source-position filename="libgdm/gdm-client-glue.h" line="52"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_info" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_info_query">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1238">Handler for the #GdmWorkerManager::handle-info-query signal.</doc>
        <callback name="handle_info_query">
          <source-position filename="libgdm/gdm-client-glue.h" line="58"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_query" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_problem">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1239">Handler for the #GdmWorkerManager::handle-problem signal.</doc>
        <callback name="handle_problem">
          <source-position filename="libgdm/gdm-client-glue.h" line="64"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_problem" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_secret_info_query">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1240">Handler for the #GdmWorkerManager::handle-secret-info-query signal.</doc>
        <callback name="handle_secret_info_query">
          <source-position filename="libgdm/gdm-client-glue.h" line="70"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WorkerManager" c:type="GdmWorkerManager*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_service_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_query" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="WorkerManagerProxy"
           c:symbol-prefix="worker_manager_proxy"
           c:type="GdmWorkerManagerProxy"
           parent="Gio.DBusProxy"
           glib:type-name="GdmWorkerManagerProxy"
           glib:get-type="gdm_worker_manager_proxy_get_type"
           glib:type-struct="WorkerManagerProxyClass">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="2321">The #GdmWorkerManagerProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="299"/>
      <implements name="WorkerManager"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="gdm_worker_manager_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="2512">Finishes an operation started with gdm_worker_manager_proxy_new().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="315"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="2519">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="WorkerManagerProxy" c:type="GdmWorkerManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2514">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="gdm_worker_manager_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="2602">Finishes an operation started with gdm_worker_manager_proxy_new_for_bus().</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="334"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="2609">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="WorkerManagerProxy" c:type="GdmWorkerManager*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2604">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to gdm_worker_manager_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="gdm_worker_manager_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="2627">Like gdm_worker_manager_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See gdm_worker_manager_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="337"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="2642">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="WorkerManagerProxy" c:type="GdmWorkerManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2629">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2630">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2631">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2632">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2633">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="gdm_worker_manager_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="2537">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See gdm_worker_manager_proxy_new() for the asynchronous version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="318"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="2552">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="WorkerManagerProxy" c:type="GdmWorkerManager*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2539">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2540">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2541">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2542">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2543">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new"
                c:identifier="gdm_worker_manager_proxy_new"
                glib:finish-func="new_finish">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="2482">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_worker_manager_proxy_new_finish() to get the result of the operation.

See gdm_worker_manager_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="307"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2484">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2485">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2486">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2487">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2488">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2489">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2490">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="gdm_worker_manager_proxy_new_for_bus"
                glib:finish-func="new_for_bus_finish">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="2572">Like gdm_worker_manager_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the thread-default main loop of the thread you are calling this method from (see g_main_context_push_thread_default()).
You can then call gdm_worker_manager_proxy_new_for_bus_finish() to get the result of the operation.

See gdm_worker_manager_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="326"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2574">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2575">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2576">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2577">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2578">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2579">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgdm/gdm-client-glue.c"
                 line="2580">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WorkerManagerProxyPrivate"
              c:type="GdmWorkerManagerProxyPrivate*"/>
      </field>
    </class>
    <record name="WorkerManagerProxyClass"
            c:type="GdmWorkerManagerProxyClass"
            glib:is-gtype-struct-for="WorkerManagerProxy">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="2327">Class structure for #GdmWorkerManagerProxy.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="299"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="2329">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="WorkerManagerProxyPrivate"
            c:type="GdmWorkerManagerProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libgdm/gdm-client-glue.h" line="287"/>
    </record>
    <class name="WorkerManagerSkeleton"
           c:symbol-prefix="worker_manager_skeleton"
           c:type="GdmWorkerManagerSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="GdmWorkerManagerSkeleton"
           glib:get-type="gdm_worker_manager_skeleton_get_type"
           glib:type-struct="WorkerManagerSkeletonClass">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="2664">The #GdmWorkerManagerSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="369"/>
      <implements name="WorkerManager"/>
      <implements name="Gio.DBusInterface"/>
      <constructor name="new" c:identifier="gdm_worker_manager_skeleton_new">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="2935">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt;.</doc>
        <source-position filename="libgdm/gdm-client-glue.h" line="377"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="2940">The skeleton object.</doc>
          <type name="WorkerManagerSkeleton" c:type="GdmWorkerManager*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WorkerManagerSkeletonPrivate"
              c:type="GdmWorkerManagerSkeletonPrivate*"/>
      </field>
    </class>
    <record name="WorkerManagerSkeletonClass"
            c:type="GdmWorkerManagerSkeletonClass"
            glib:is-gtype-struct-for="WorkerManagerSkeleton">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="2670">Class structure for #GdmWorkerManagerSkeleton.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="369"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="2672">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="WorkerManagerSkeletonPrivate"
            c:type="GdmWorkerManagerSkeletonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libgdm/gdm-client-glue.h" line="357"/>
    </record>
    <function name="chooser_interface_info"
              c:identifier="gdm_chooser_interface_info"
              moved-to="Chooser.interface_info">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="11659">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Chooser.top_of_page"&gt;org.gnome.DisplayManager.Chooser&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1713"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="11664">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="chooser_override_properties"
              c:identifier="gdm_chooser_override_properties"
              moved-to="Chooser.override_properties">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="11672">Overrides all #GObject properties in the #GdmChooser interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1714"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="11680">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="11674">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="11675">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_session_ids" c:identifier="gdm_get_session_ids">
      <doc xml:space="preserve"
           filename="libgdm/gdm-sessions.c"
           line="422">Reads /usr/share/xsessions and other relevant places for possible sessions
to log into and returns the complete list.</doc>
      <source-position filename="libgdm/gdm-sessions.h" line="31"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgdm/gdm-sessions.c"
             line="428">a %NULL terminated list of session ids</doc>
        <array c:type="char**">
          <type name="utf8"/>
        </array>
      </return-value>
    </function>
    <function name="get_session_name_and_description"
              c:identifier="gdm_get_session_name_and_description">
      <doc xml:space="preserve"
           filename="libgdm/gdm-sessions.c"
           line="459">Takes an xsession id and returns the name and comment about it.</doc>
      <source-position filename="libgdm/gdm-sessions.h" line="32"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libgdm/gdm-sessions.c"
             line="466">The session name if found, or %NULL otherwise</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-sessions.c"
               line="461">an id from gdm_get_session_ids()</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="description"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgdm/gdm-sessions.c"
               line="462">optional returned session description</doc>
          <type name="utf8" c:type="char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="goto_login_session_sync"
              c:identifier="gdm_goto_login_session_sync"
              throws="1">
      <source-position filename="libgdm/gdm-user-switching.h" line="28"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="greeter_interface_info"
              c:identifier="gdm_greeter_interface_info"
              moved-to="Greeter.interface_info">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="8629">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Greeter.top_of_page"&gt;org.gnome.DisplayManager.Greeter&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1236"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8634">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="greeter_override_properties"
              c:identifier="gdm_greeter_override_properties"
              moved-to="Greeter.override_properties">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="8642">Overrides all #GObject properties in the #GdmGreeter interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1237"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="8650">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="8644">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="8645">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="manager_interface_info"
              c:identifier="gdm_manager_interface_info"
              moved-to="Manager.interface_info">
      <doc xml:space="preserve"
           filename="libgdm/gdm-manager-glue.c"
           line="528">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-Manager.top_of_page"&gt;org.gnome.DisplayManager.Manager&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="libgdm/gdm-manager-glue.h" line="63"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="533">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="manager_override_properties"
              c:identifier="gdm_manager_override_properties"
              moved-to="Manager.override_properties">
      <doc xml:space="preserve"
           filename="libgdm/gdm-manager-glue.c"
           line="541">Overrides all #GObject properties in the #GdmManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="libgdm/gdm-manager-glue.h" line="64"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgdm/gdm-manager-glue.c"
             line="549">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-manager-glue.c"
               line="543">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-manager-glue.c"
               line="544">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="remote_greeter_interface_info"
              c:identifier="gdm_remote_greeter_interface_info"
              moved-to="RemoteGreeter.interface_info">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="10752">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-RemoteGreeter.top_of_page"&gt;org.gnome.DisplayManager.RemoteGreeter&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1546"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="10757">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="remote_greeter_override_properties"
              c:identifier="gdm_remote_greeter_override_properties"
              moved-to="RemoteGreeter.override_properties">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="10765">Overrides all #GObject properties in the #GdmRemoteGreeter interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="1547"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="10773">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="10767">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="10768">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="user_verifier_choice_list_interface_info"
              c:identifier="gdm_user_verifier_choice_list_interface_info"
              moved-to="UserVerifierChoiceList.interface_info">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="5959">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-ChoiceList.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.ChoiceList&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="793"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="5964">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="user_verifier_choice_list_override_properties"
              c:identifier="gdm_user_verifier_choice_list_override_properties"
              moved-to="UserVerifierChoiceList.override_properties">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="5972">Overrides all #GObject properties in the #GdmUserVerifierChoiceList interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="794"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="5980">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="5974">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="5975">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="user_verifier_custom_json_interface_info"
              c:identifier="gdm_user_verifier_custom_json_interface_info"
              moved-to="UserVerifierCustomJSON.interface_info">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="7083">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier-CustomJSON.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier.CustomJSON&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="984"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7088">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="user_verifier_custom_json_override_properties"
              c:identifier="gdm_user_verifier_custom_json_override_properties"
              moved-to="UserVerifierCustomJSON.override_properties">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="7096">Overrides all #GObject properties in the #GdmUserVerifierCustomJSON interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="985"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="7104">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="7098">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="7099">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="user_verifier_interface_info"
              c:identifier="gdm_user_verifier_interface_info"
              moved-to="UserVerifier.interface_info">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="3528">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-UserVerifier.top_of_page"&gt;org.gnome.DisplayManager.UserVerifier&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="479"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3533">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="user_verifier_override_properties"
              c:identifier="gdm_user_verifier_override_properties"
              moved-to="UserVerifier.override_properties">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="3541">Overrides all #GObject properties in the #GdmUserVerifier interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="480"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="3549">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="3543">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="3544">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="worker_manager_interface_info"
              c:identifier="gdm_worker_manager_interface_info"
              moved-to="WorkerManager.interface_info">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="1103">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-gnome-DisplayManager-WorkerManager.top_of_page"&gt;org.gnome.DisplayManager.WorkerManager&lt;/link&gt; D-Bus interface.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="84"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1108">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="worker_manager_override_properties"
              c:identifier="gdm_worker_manager_override_properties"
              moved-to="WorkerManager.override_properties">
      <doc xml:space="preserve"
           filename="libgdm/gdm-client-glue.c"
           line="1116">Overrides all #GObject properties in the #GdmWorkerManager interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <source-position filename="libgdm/gdm-client-glue.h" line="85"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgdm/gdm-client-glue.c"
             line="1124">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="1118">The class structure for a #GObject derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgdm/gdm-client-glue.c"
               line="1119">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
