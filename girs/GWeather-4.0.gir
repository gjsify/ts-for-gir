<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Gio" version="2.0"/>
  <package name="gweather4"/>
  <c:include name="libgweather/gweather.h"/>
  <namespace name="GWeather"
             version="4.0"
             shared-library="libgweather-4.so.0"
             c:identifier-prefixes="GWeather"
             c:symbol-prefixes="gweather">
    <alias name="MoonLatitude" c:type="GWeatherMoonLatitude">
      <doc xml:space="preserve"
           filename="libgweather/gweather-info.h"
           line="325">The moon declension, in degrees.</doc>
      <source-position filename="libgweather/gweather-info.h" line="330"/>
      <type name="gdouble" c:type="double"/>
    </alias>
    <alias name="MoonPhase" c:type="GWeatherMoonPhase">
      <doc xml:space="preserve"
           filename="libgweather/gweather-info.h"
           line="317">The current phase of the moon, represented as degrees,
where 0 is the new moon, 90 is the first quarter, etc.</doc>
      <source-position filename="libgweather/gweather-info.h" line="323"/>
      <type name="gdouble" c:type="double"/>
    </alias>
    <enumeration name="ConditionPhenomenon"
                 glib:type-name="GWeatherConditionPhenomenon"
                 glib:get-type="gweather_phenomenon_get_type"
                 c:type="GWeatherConditionPhenomenon">
      <doc xml:space="preserve"
           filename="libgweather/gweather-info.h"
           line="220">The current or forecasted significant phenomenon.</doc>
      <member name="invalid"
              value="-1"
              c:identifier="GWEATHER_PHENOMENON_INVALID"
              glib:nick="invalid"
              glib:name="GWEATHER_PHENOMENON_INVALID">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="222">value not available</doc>
      </member>
      <member name="none"
              value="0"
              c:identifier="GWEATHER_PHENOMENON_NONE"
              glib:nick="none"
              glib:name="GWEATHER_PHENOMENON_NONE">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="223">no significant phenomenon</doc>
      </member>
      <member name="drizzle"
              value="1"
              c:identifier="GWEATHER_PHENOMENON_DRIZZLE"
              glib:nick="drizzle"
              glib:name="GWEATHER_PHENOMENON_DRIZZLE">
      </member>
      <member name="rain"
              value="2"
              c:identifier="GWEATHER_PHENOMENON_RAIN"
              glib:nick="rain"
              glib:name="GWEATHER_PHENOMENON_RAIN">
      </member>
      <member name="snow"
              value="3"
              c:identifier="GWEATHER_PHENOMENON_SNOW"
              glib:nick="snow"
              glib:name="GWEATHER_PHENOMENON_SNOW">
      </member>
      <member name="snow_grains"
              value="4"
              c:identifier="GWEATHER_PHENOMENON_SNOW_GRAINS"
              glib:nick="snow-grains"
              glib:name="GWEATHER_PHENOMENON_SNOW_GRAINS">
      </member>
      <member name="ice_crystals"
              value="5"
              c:identifier="GWEATHER_PHENOMENON_ICE_CRYSTALS"
              glib:nick="ice-crystals"
              glib:name="GWEATHER_PHENOMENON_ICE_CRYSTALS">
      </member>
      <member name="ice_pellets"
              value="6"
              c:identifier="GWEATHER_PHENOMENON_ICE_PELLETS"
              glib:nick="ice-pellets"
              glib:name="GWEATHER_PHENOMENON_ICE_PELLETS">
      </member>
      <member name="hail"
              value="7"
              c:identifier="GWEATHER_PHENOMENON_HAIL"
              glib:nick="hail"
              glib:name="GWEATHER_PHENOMENON_HAIL">
      </member>
      <member name="small_hail"
              value="8"
              c:identifier="GWEATHER_PHENOMENON_SMALL_HAIL"
              glib:nick="small-hail"
              glib:name="GWEATHER_PHENOMENON_SMALL_HAIL">
      </member>
      <member name="unknown_precipitation"
              value="9"
              c:identifier="GWEATHER_PHENOMENON_UNKNOWN_PRECIPITATION"
              glib:nick="unknown-precipitation"
              glib:name="GWEATHER_PHENOMENON_UNKNOWN_PRECIPITATION">
      </member>
      <member name="mist"
              value="10"
              c:identifier="GWEATHER_PHENOMENON_MIST"
              glib:nick="mist"
              glib:name="GWEATHER_PHENOMENON_MIST">
      </member>
      <member name="fog"
              value="11"
              c:identifier="GWEATHER_PHENOMENON_FOG"
              glib:nick="fog"
              glib:name="GWEATHER_PHENOMENON_FOG">
      </member>
      <member name="smoke"
              value="12"
              c:identifier="GWEATHER_PHENOMENON_SMOKE"
              glib:nick="smoke"
              glib:name="GWEATHER_PHENOMENON_SMOKE">
      </member>
      <member name="volcanic_ash"
              value="13"
              c:identifier="GWEATHER_PHENOMENON_VOLCANIC_ASH"
              glib:nick="volcanic-ash"
              glib:name="GWEATHER_PHENOMENON_VOLCANIC_ASH">
      </member>
      <member name="sand"
              value="14"
              c:identifier="GWEATHER_PHENOMENON_SAND"
              glib:nick="sand"
              glib:name="GWEATHER_PHENOMENON_SAND">
      </member>
      <member name="haze"
              value="15"
              c:identifier="GWEATHER_PHENOMENON_HAZE"
              glib:nick="haze"
              glib:name="GWEATHER_PHENOMENON_HAZE">
      </member>
      <member name="spray"
              value="16"
              c:identifier="GWEATHER_PHENOMENON_SPRAY"
              glib:nick="spray"
              glib:name="GWEATHER_PHENOMENON_SPRAY">
      </member>
      <member name="dust"
              value="17"
              c:identifier="GWEATHER_PHENOMENON_DUST"
              glib:nick="dust"
              glib:name="GWEATHER_PHENOMENON_DUST">
      </member>
      <member name="squall"
              value="18"
              c:identifier="GWEATHER_PHENOMENON_SQUALL"
              glib:nick="squall"
              glib:name="GWEATHER_PHENOMENON_SQUALL">
      </member>
      <member name="sandstorm"
              value="19"
              c:identifier="GWEATHER_PHENOMENON_SANDSTORM"
              glib:nick="sandstorm"
              glib:name="GWEATHER_PHENOMENON_SANDSTORM">
      </member>
      <member name="duststorm"
              value="20"
              c:identifier="GWEATHER_PHENOMENON_DUSTSTORM"
              glib:nick="duststorm"
              glib:name="GWEATHER_PHENOMENON_DUSTSTORM">
      </member>
      <member name="funnel_cloud"
              value="21"
              c:identifier="GWEATHER_PHENOMENON_FUNNEL_CLOUD"
              glib:nick="funnel-cloud"
              glib:name="GWEATHER_PHENOMENON_FUNNEL_CLOUD">
      </member>
      <member name="tornado"
              value="22"
              c:identifier="GWEATHER_PHENOMENON_TORNADO"
              glib:nick="tornado"
              glib:name="GWEATHER_PHENOMENON_TORNADO">
      </member>
      <member name="dust_whirls"
              value="23"
              c:identifier="GWEATHER_PHENOMENON_DUST_WHIRLS"
              glib:nick="dust-whirls"
              glib:name="GWEATHER_PHENOMENON_DUST_WHIRLS">
      </member>
      <member name="last"
              value="24"
              c:identifier="GWEATHER_PHENOMENON_LAST"
              glib:nick="last"
              glib:name="GWEATHER_PHENOMENON_LAST">
      </member>
    </enumeration>
    <enumeration name="ConditionQualifier"
                 glib:type-name="GWeatherConditionQualifier"
                 glib:get-type="gweather_qualifier_get_type"
                 c:type="GWeatherConditionQualifier">
      <doc xml:space="preserve"
           filename="libgweather/gweather-info.h"
           line="261">An additional modifier applied to a #GWeatherConditionPhenomenon to
describe the current or forecasted weather conditions.

The exact meaning of each qualifier is described at
http://www.weather.com/glossary/ and
http://www.crh.noaa.gov/arx/wx.tbl.php</doc>
      <member name="invalid"
              value="-1"
              c:identifier="GWEATHER_QUALIFIER_INVALID"
              glib:nick="invalid"
              glib:name="GWEATHER_QUALIFIER_INVALID">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="263">value not available</doc>
      </member>
      <member name="none"
              value="0"
              c:identifier="GWEATHER_QUALIFIER_NONE"
              glib:nick="none"
              glib:name="GWEATHER_QUALIFIER_NONE">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="264">no qualifier for the phenomenon</doc>
      </member>
      <member name="vicinity"
              value="1"
              c:identifier="GWEATHER_QUALIFIER_VICINITY"
              glib:nick="vicinity"
              glib:name="GWEATHER_QUALIFIER_VICINITY">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="265">phenomenon happening in the proximity of the
  location, not in the actual location</doc>
      </member>
      <member name="light"
              value="2"
              c:identifier="GWEATHER_QUALIFIER_LIGHT"
              glib:nick="light"
              glib:name="GWEATHER_QUALIFIER_LIGHT">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="267">phenomenon is light or predicted to be light</doc>
      </member>
      <member name="moderate"
              value="3"
              c:identifier="GWEATHER_QUALIFIER_MODERATE"
              glib:nick="moderate"
              glib:name="GWEATHER_QUALIFIER_MODERATE">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="268">phenomenon is moderate or predicted to be
  moderate</doc>
      </member>
      <member name="heavy"
              value="4"
              c:identifier="GWEATHER_QUALIFIER_HEAVY"
              glib:nick="heavy"
              glib:name="GWEATHER_QUALIFIER_HEAVY">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="270">phenomenon is heavy or predicted to be heavy</doc>
      </member>
      <member name="shallow"
              value="5"
              c:identifier="GWEATHER_QUALIFIER_SHALLOW"
              glib:nick="shallow"
              glib:name="GWEATHER_QUALIFIER_SHALLOW">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="271">shallow fog (only valid with
  %GWEATHER_PHENOMENON_FOG)</doc>
      </member>
      <member name="patches"
              value="6"
              c:identifier="GWEATHER_QUALIFIER_PATCHES"
              glib:nick="patches"
              glib:name="GWEATHER_QUALIFIER_PATCHES">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="273">patches of fog (only valid with
  %GWEATHER_PHENOMENON_FOG)</doc>
      </member>
      <member name="partial"
              value="7"
              c:identifier="GWEATHER_QUALIFIER_PARTIAL"
              glib:nick="partial"
              glib:name="GWEATHER_QUALIFIER_PARTIAL">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="275">partial fog (only valid with
  %GWEATHER_PHENOMENON_FOG)</doc>
      </member>
      <member name="thunderstorm"
              value="8"
              c:identifier="GWEATHER_QUALIFIER_THUNDERSTORM"
              glib:nick="thunderstorm"
              glib:name="GWEATHER_QUALIFIER_THUNDERSTORM">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="277">phenomenon will be a thunderstorm and/or
  will include lightning</doc>
      </member>
      <member name="blowing"
              value="9"
              c:identifier="GWEATHER_QUALIFIER_BLOWING"
              glib:nick="blowing"
              glib:name="GWEATHER_QUALIFIER_BLOWING">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="279">phenomenon is blowing (valid with
  %GWEATHER_PHENOMENON_SNOW, %GWEATHER_PHENOMENON_SAND,
  %GWEATHER_PHENOMENON_SPRAY, %GWEATHER_PHENOMENON_DUST)</doc>
      </member>
      <member name="showers"
              value="10"
              c:identifier="GWEATHER_QUALIFIER_SHOWERS"
              glib:nick="showers"
              glib:name="GWEATHER_QUALIFIER_SHOWERS">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="282">phenomenon is heavy and involves showers</doc>
      </member>
      <member name="drifting"
              value="11"
              c:identifier="GWEATHER_QUALIFIER_DRIFTING"
              glib:nick="drifting"
              glib:name="GWEATHER_QUALIFIER_DRIFTING">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="283">phenomenon is moving across (valid with
  %GWEATHER_PHENOMENON_SAND and %GWEATHER_PHENOMENON_DUST)</doc>
      </member>
      <member name="freezing"
              value="12"
              c:identifier="GWEATHER_QUALIFIER_FREEZING"
              glib:nick="freezing"
              glib:name="GWEATHER_QUALIFIER_FREEZING">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="285">phenomenon is freezing and involves ice</doc>
      </member>
      <member name="last"
              value="13"
              c:identifier="GWEATHER_QUALIFIER_LAST"
              glib:nick="last"
              glib:name="GWEATHER_QUALIFIER_LAST">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="286">maximum value of the enumeration</doc>
      </member>
    </enumeration>
    <record name="Conditions" c:type="GWeatherConditions">
      <doc xml:space="preserve"
           filename="libgweather/gweather-info.h"
           line="391">A convenient way to describe the current or forecast
weather phenomenon, if significant, and its associated
modifier. If the value is not significant, the weather conditions
are described by gweather_info_get_sky() instead.

In general it is discouraged to use this value directly to compute
the forecast icon: applications should instead use
gweather_info_get_icon_name() or
gweather_info_get_symbolic_icon_name().</doc>
      <source-position filename="libgweather/gweather-info.h" line="411"/>
      <field name="significant" writable="1">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="393">%TRUE if the struct contains usable data, %FALSE otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="phenomenon" writable="1">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="394">the main weather phenomenon</doc>
        <type name="ConditionPhenomenon" c:type="GWeatherConditionPhenomenon"/>
      </field>
      <field name="qualifier" writable="1">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="395">a modifier for @phenomenon</doc>
        <type name="ConditionQualifier" c:type="GWeatherConditionQualifier"/>
      </field>
      <method name="to_string" c:identifier="gweather_conditions_to_string">
        <source-position filename="libgweather/gweather-info.h" line="414"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="conditions" transfer-ownership="none">
            <type name="Conditions" c:type="GWeatherConditions*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_string_full"
              c:identifier="gweather_conditions_to_string_full">
        <source-position filename="libgweather/gweather-info.h" line="416"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="conditions" transfer-ownership="none">
            <type name="Conditions" c:type="GWeatherConditions*"/>
          </instance-parameter>
          <parameter name="options" transfer-ownership="none">
            <type name="FormatOptions" c:type="GWeatherFormatOptions"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="DistanceUnit"
                 glib:type-name="GWeatherDistanceUnit"
                 glib:get-type="gweather_distance_unit_get_type"
                 c:type="GWeatherDistanceUnit">
      <doc xml:space="preserve"
           filename="libgweather/gweather-enums.h"
           line="85">The measure unit to use for sky visibility values, when retrieved
by gweather_info_get_value_visibility().</doc>
      <member name="invalid"
              value="0"
              c:identifier="GWEATHER_DISTANCE_UNIT_INVALID"
              glib:nick="invalid"
              glib:name="GWEATHER_DISTANCE_UNIT_INVALID">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="87">invalid unit</doc>
      </member>
      <member name="default"
              value="1"
              c:identifier="GWEATHER_DISTANCE_UNIT_DEFAULT"
              glib:nick="default"
              glib:name="GWEATHER_DISTANCE_UNIT_DEFAULT">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="88">the user preferred distance unit</doc>
      </member>
      <member name="meters"
              value="2"
              c:identifier="GWEATHER_DISTANCE_UNIT_METERS"
              glib:nick="meters"
              glib:name="GWEATHER_DISTANCE_UNIT_METERS">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="89">meters</doc>
      </member>
      <member name="km"
              value="3"
              c:identifier="GWEATHER_DISTANCE_UNIT_KM"
              glib:nick="km"
              glib:name="GWEATHER_DISTANCE_UNIT_KM">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="90">kilometers (= 1000 meters)</doc>
      </member>
      <member name="miles"
              value="4"
              c:identifier="GWEATHER_DISTANCE_UNIT_MILES"
              glib:nick="miles"
              glib:name="GWEATHER_DISTANCE_UNIT_MILES">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="91">miles</doc>
      </member>
    </enumeration>
    <callback name="FilterFunc" c:type="GWeatherFilterFunc">
      <doc xml:space="preserve"
           filename="libgweather/gweather-location.h"
           line="30">A filter function for locations.</doc>
      <source-position filename="libgweather/gweather-location.h" line="39"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.h"
             line="37">`FALSE` if the location should be skipped, and `TRUE` otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="location" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.h"
               line="32">the location to check</doc>
          <type name="Location" c:type="GWeatherLocation*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.h"
               line="33">data passed to [method@GWeather.Location.find_nearest_city_full]</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <bitfield name="FormatOptions"
              glib:type-name="GWeatherFormatOptions"
              glib:get-type="gweather_format_options_get_type"
              c:type="GWeatherFormatOptions">
      <doc xml:space="preserve"
           filename="libgweather/gweather-enums.h"
           line="104">Format options to influence the text returned by the
`gweather_*_to_string_full()` functions.</doc>
      <member name="default"
              value="0"
              c:identifier="GWEATHER_FORMAT_OPTION_DEFAULT"
              glib:nick="default"
              glib:name="GWEATHER_FORMAT_OPTION_DEFAULT">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="106">The default string format</doc>
      </member>
      <member name="sentence_capitalization"
              value="1"
              c:identifier="GWEATHER_FORMAT_OPTION_SENTENCE_CAPITALIZATION"
              glib:nick="sentence-capitalization"
              glib:name="GWEATHER_FORMAT_OPTION_SENTENCE_CAPITALIZATION">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="107">Capitalize as if the string
  was starting a sentence</doc>
      </member>
      <member name="no_capitalization"
              value="2"
              c:identifier="GWEATHER_FORMAT_OPTION_NO_CAPITALIZATION"
              glib:nick="no-capitalization"
              glib:name="GWEATHER_FORMAT_OPTION_NO_CAPITALIZATION">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="109">Capitalize as if the string was
  appearing within a sentence</doc>
      </member>
    </bitfield>
    <class name="Info"
           c:symbol-prefix="info"
           c:type="GWeatherInfo"
           parent="GObject.Object"
           glib:type-name="GWeatherInfo"
           glib:get-type="gweather_info_get_type"
           glib:type-struct="InfoClass">
      <doc xml:space="preserve"
           filename="libgweather/gweather-info.c"
           line="29">`GWeatherInfo` provides a handy way to access weather conditions
and forecasts from a [class@GWeather.Location], aggregating multiple
different web services.

It includes also astronomical data such as sunrise times and
moon phases.</doc>
      <source-position filename="libgweather/gweather-info.h" line="42"/>
      <constructor name="new" c:identifier="gweather_info_new">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.c"
             line="2467">Builds a new `GWeatherInfo` that will provide weather information about
the given location.

In order to retrieve the weather information, you will need to enable
the desired providers and then call [method@GWeather.Info.update]. If
you want to be notified of the completion of the weather information
update, you should connect to the [signal@GWeather.Info::updated]
signal before updating the `GWeatherInfo` instance.</doc>
        <source-position filename="libgweather/gweather-info.h" line="48"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgweather/gweather-info.c"
               line="2480">a new weather information instance</doc>
          <type name="Info" c:type="GWeatherInfo*"/>
        </return-value>
        <parameters>
          <parameter name="location"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="2469">the desidered location</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="store_cache" c:identifier="gweather_info_store_cache">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.c"
             line="644">Ensures that any data cached from the network is stored to disk.
Calling this is not necessary, as the cache will be saved when
the last reference to a #GWeatherInfo will be dropped.
On the other hand, it must be called if there is any chance that
the application will be closed without unreffing all objects, such
as when using a language binding that employs a GC.</doc>
        <source-position filename="libgweather/gweather-info.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <method name="abort" c:identifier="gweather_info_abort">
        <source-position filename="libgweather/gweather-info.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_apparent" c:identifier="gweather_info_get_apparent">
        <source-position filename="libgweather/gweather-info.h" line="108"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_application_id"
              c:identifier="gweather_info_get_application_id"
              glib:get-property="application-id">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.c"
             line="2218">Get the [application ID](https://docs.flatpak.org/en/latest/conventions.html#application-ids)
of the application fetching the weather.</doc>
        <source-position filename="libgweather/gweather-info.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-info.c"
               line="2225">the application ID</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="2220">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_attribution"
              c:identifier="gweather_info_get_attribution">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.c"
             line="1345">Some weather services require the application showing the
data to include an attribution text, possibly including links
to the service website.
This must be shown prominently toghether with the data.</doc>
        <source-position filename="libgweather/gweather-info.h" line="116"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-info.c"
               line="1354">the required attribution text, in Pango
         markup form, or %NULL if not required</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1347">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_conditions"
              c:identifier="gweather_info_get_conditions">
        <source-position filename="libgweather/gweather-info.h" line="89"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_contact_info"
              c:identifier="gweather_info_get_contact_info"
              glib:get-property="contact-info">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.c"
             line="2263">Get the contact information of the application fetching the weather.</doc>
        <source-position filename="libgweather/gweather-info.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-info.c"
               line="2269">the contact information</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="2265">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dew" c:identifier="gweather_info_get_dew">
        <source-position filename="libgweather/gweather-info.h" line="98"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enabled_providers"
              c:identifier="gweather_info_get_enabled_providers"
              glib:get-property="enabled-providers">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.c"
             line="2169">Gets the bitmask of enabled #GWeatherProvider weather
providers.</doc>
        <source-position filename="libgweather/gweather-info.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="Provider" c:type="GWeatherProvider"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="2171">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_forecast_list"
              c:identifier="gweather_info_get_forecast_list">
        <source-position filename="libgweather/gweather-info.h" line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-info.c"
               line="1328">list
of GWeatherInfo* objects for the forecast.
The list is owned by the 'info' object thus is alive as long
as the 'info'. The 'update' property is the date/time when the
forecast info is used for.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Info"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1326">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_humidity" c:identifier="gweather_info_get_humidity">
        <source-position filename="libgweather/gweather-info.h" line="100"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name" c:identifier="gweather_info_get_icon_name">
        <source-position filename="libgweather/gweather-info.h" line="124"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_location"
              c:identifier="gweather_info_get_location"
              glib:get-property="location">
        <source-position filename="libgweather/gweather-info.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="Location" c:type="const GWeatherLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_location_name"
              c:identifier="gweather_info_get_location_name">
        <source-position filename="libgweather/gweather-info.h" line="83"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pressure" c:identifier="gweather_info_get_pressure">
        <source-position filename="libgweather/gweather-info.h" line="104"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sky" c:identifier="gweather_info_get_sky">
        <source-position filename="libgweather/gweather-info.h" line="87"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sunrise" c:identifier="gweather_info_get_sunrise">
        <source-position filename="libgweather/gweather-info.h" line="110"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sunset" c:identifier="gweather_info_get_sunset">
        <source-position filename="libgweather/gweather-info.h" line="112"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_symbolic_icon_name"
              c:identifier="gweather_info_get_symbolic_icon_name">
        <source-position filename="libgweather/gweather-info.h" line="126"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_temp" c:identifier="gweather_info_get_temp">
        <source-position filename="libgweather/gweather-info.h" line="92"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_temp_max" c:identifier="gweather_info_get_temp_max">
        <source-position filename="libgweather/gweather-info.h" line="96"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_temp_min" c:identifier="gweather_info_get_temp_min">
        <source-position filename="libgweather/gweather-info.h" line="94"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_temp_summary"
              c:identifier="gweather_info_get_temp_summary">
        <source-position filename="libgweather/gweather-info.h" line="119"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_upcoming_moonphases"
              c:identifier="gweather_info_get_upcoming_moonphases">
        <source-position filename="libgweather/gweather-info.h" line="386"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="phases" transfer-ownership="none">
            <type name="glong" c:type="time_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_update" c:identifier="gweather_info_get_update">
        <source-position filename="libgweather/gweather-info.h" line="85"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value_apparent"
              c:identifier="gweather_info_get_value_apparent">
        <source-position filename="libgweather/gweather-info.h" line="359"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-info.c"
               line="1907">TRUE is @value is valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1903">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1904">the desired unit, as a #GWeatherTemperatureUnit</doc>
            <type name="TemperatureUnit" c:type="GWeatherTemperatureUnit"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1905">the apparent temperature</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_conditions"
              c:identifier="gweather_info_get_value_conditions">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.c"
             line="1780">Fills out @phenomenon and @qualifier with current weather conditions.</doc>
        <source-position filename="libgweather/gweather-info.h" line="339"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-info.c"
               line="1787">TRUE is out arguments are valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1782">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="phenomenon"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1783">a location for a #GWeatherConditionPhenomenon.</doc>
            <type name="ConditionPhenomenon"
                  c:type="GWeatherConditionPhenomenon*"/>
          </parameter>
          <parameter name="qualifier"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1784">a location for a #GWeatherConditionQualifier.</doc>
            <type name="ConditionQualifier"
                  c:type="GWeatherConditionQualifier*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_dew" c:identifier="gweather_info_get_value_dew">
        <source-position filename="libgweather/gweather-info.h" line="355"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-info.c"
               line="1880">TRUE is @value is valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1876">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1877">the desired unit, as a #GWeatherTemperatureUnit</doc>
            <type name="TemperatureUnit" c:type="GWeatherTemperatureUnit"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1878">the dew point</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_moonphase"
              c:identifier="gweather_info_get_value_moonphase">
        <source-position filename="libgweather/gweather-info.h" line="382"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-info.c"
               line="1996">TRUE is @value is valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1992">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1993">the current moon phase</doc>
            <type name="MoonPhase" c:type="GWeatherMoonPhase*"/>
          </parameter>
          <parameter name="lat"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1994">the moon declension</doc>
            <type name="MoonLatitude" c:type="GWeatherMoonLatitude*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_pressure"
              c:identifier="gweather_info_get_value_pressure">
        <source-position filename="libgweather/gweather-info.h" line="368"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-info.c"
               line="2057">TRUE if @value is valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="2053">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="2054">the desired unit, as a #GWeatherPressureUnit</doc>
            <type name="PressureUnit" c:type="GWeatherPressureUnit"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="2055">forecasted pressure, expressed in @unit</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_sky" c:identifier="gweather_info_get_value_sky">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.c"
             line="1755">Fills out @sky with current sky conditions.</doc>
        <source-position filename="libgweather/gweather-info.h" line="336"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-info.c"
               line="1761">TRUE is @sky is valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1757">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="sky"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1758">a location for a #GWeatherSky.</doc>
            <type name="Sky" c:type="GWeatherSky*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_sunrise"
              c:identifier="gweather_info_get_value_sunrise">
        <source-position filename="libgweather/gweather-info.h" line="376"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-info.c"
               line="1949">TRUE is @value is valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1946">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1947">the time of sunrise</doc>
            <type name="gulong" c:type="time_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_sunset"
              c:identifier="gweather_info_get_value_sunset">
        <source-position filename="libgweather/gweather-info.h" line="379"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-info.c"
               line="1972">TRUE is @value is valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1969">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1970">the time of sunset</doc>
            <type name="gulong" c:type="time_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_temp"
              c:identifier="gweather_info_get_value_temp">
        <source-position filename="libgweather/gweather-info.h" line="343"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-info.c"
               line="1820">TRUE is @value is valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1816">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1817">the desired unit, as a #GWeatherTemperatureUnit</doc>
            <type name="TemperatureUnit" c:type="GWeatherTemperatureUnit"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1818">the temperature value</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_temp_max"
              c:identifier="gweather_info_get_value_temp_max">
        <source-position filename="libgweather/gweather-info.h" line="351"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-info.c"
               line="1860">TRUE is @value is valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1856">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1857">the desired unit, as a #GWeatherTemperatureUnit</doc>
            <type name="TemperatureUnit" c:type="GWeatherTemperatureUnit"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1858">the maximum temperature value</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_temp_min"
              c:identifier="gweather_info_get_value_temp_min">
        <source-position filename="libgweather/gweather-info.h" line="347"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-info.c"
               line="1840">TRUE is @value is valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1836">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1837">the desired unit, as a #GWeatherTemperatureUnit</doc>
            <type name="TemperatureUnit" c:type="GWeatherTemperatureUnit"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1838">the minimum temperature value</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_update"
              c:identifier="gweather_info_get_value_update">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.c"
             line="1921">Note that @value may be 0 if @info has not yet been updated.</doc>
        <source-position filename="libgweather/gweather-info.h" line="333"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-info.c"
               line="1928">TRUE is @value is valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1923">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1924">the time @info was last updated</doc>
            <type name="glong" c:type="time_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_visibility"
              c:identifier="gweather_info_get_value_visibility">
        <source-position filename="libgweather/gweather-info.h" line="372"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-info.c"
               line="2079">TRUE if @value is valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="2075">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="2076">the desired unit, as a #GWeatherDistanceUnit</doc>
            <type name="DistanceUnit" c:type="GWeatherDistanceUnit"/>
          </parameter>
          <parameter name="value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="2077">forecasted visibility, expressed in @unit</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value_wind"
              c:identifier="gweather_info_get_value_wind">
        <source-position filename="libgweather/gweather-info.h" line="363"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-info.c"
               line="2025">TRUE if @speed and @direction are valid, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="2020">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="2021">the desired unit, as a #GWeatherSpeedUnit</doc>
            <type name="SpeedUnit" c:type="GWeatherSpeedUnit"/>
          </parameter>
          <parameter name="speed"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="2022">forecasted wind speed</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="direction"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="2023">forecasted wind direction</doc>
            <type name="WindDirection" c:type="GWeatherWindDirection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_visibility"
              c:identifier="gweather_info_get_visibility">
        <source-position filename="libgweather/gweather-info.h" line="106"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_weather_summary"
              c:identifier="gweather_info_get_weather_summary">
        <source-position filename="libgweather/gweather-info.h" line="121"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgweather/gweather-info.c"
               line="1380">a summary for current weather conditions.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1378">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wind" c:identifier="gweather_info_get_wind">
        <source-position filename="libgweather/gweather-info.h" line="102"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_daytime" c:identifier="gweather_info_is_daytime">
        <source-position filename="libgweather/gweather-info.h" line="131"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-info.c"
               line="1408">Whether it is daytime (that is, if the sun is visible)
  or not at the location and the point of time referred by @info.
  This is mostly equivalent to comparing the return value
  of gweather_info_get_value_sunrise() and
  gweather_info_get_value_sunset(), but it accounts also
  for midnight sun and polar night, for locations within
  the Artic and Antartic circles.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1406">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_valid" c:identifier="gweather_info_is_valid">
        <source-position filename="libgweather/gweather-info.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="network_error" c:identifier="gweather_info_network_error">
        <source-position filename="libgweather/gweather-info.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="next_sun_event"
              c:identifier="gweather_info_next_sun_event">
        <source-position filename="libgweather/gweather-info.h" line="129"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_application_id"
              c:identifier="gweather_info_set_application_id"
              glib:set-property="application-id">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.c"
             line="2235">Sets the [application ID](https://docs.flatpak.org/en/latest/conventions.html#application-ids)
of the application fetching the weather. It is a requirement
for using any of the online weather providers.

If the application uses #GApplication, then the application ID
will be automatically filled in.</doc>
        <source-position filename="libgweather/gweather-info.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="2237">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="application_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="2238">the application ID to set</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_contact_info"
              c:identifier="gweather_info_set_contact_info"
              glib:set-property="contact-info">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.c"
             line="2279">Sets the contact information for the application fetching the
weather. It is a requirement for using any of the online
weather providers as it allows API providers to contact application
developers in case of terms of use breaches.

The contact information should be an email address, or the full
URL to an online contact form which weather providers can use
to contact the application developer. Avoid using bug tracker
URLs which require creating accounts.</doc>
        <source-position filename="libgweather/gweather-info.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="2281">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="contact_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="2282">the contact information for the application</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enabled_providers"
              c:identifier="gweather_info_set_enabled_providers"
              glib:set-property="enabled-providers">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.c"
             line="2185">Sets the enabled providers for fetching the weather. Note
that it is up to the application developer to make sure that
the terms of use for each service are respected.

Online providers will not be enabled if the application ID is
not set to a valid value.</doc>
        <source-position filename="libgweather/gweather-info.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="2187">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="providers" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="2188">a bitmask of #GWeatherProvider</doc>
            <type name="Provider" c:type="GWeatherProvider"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_location"
              c:identifier="gweather_info_set_location"
              glib:set-property="location">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.c"
             line="2149">Changes the location of the weather report.

Note that this will clear any forecast or current conditions, and
you must call [method@GWeather.Info.update] to obtain the new data.</doc>
        <source-position filename="libgweather/gweather-info.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="2151">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
          <parameter name="location"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="2152">a location for which weather is desired</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update" c:identifier="gweather_info_update">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.c"
             line="666">Requests a reload of weather conditions and forecast data from
enabled network services.
This call does no synchronous IO: rather, the result is delivered
by emitting the #GWeatherInfo::updated signal.
Note that if no network services are enabled, the signal will not
be emitted. See #GWeatherInfo:enabled-providers for details.</doc>
        <source-position filename="libgweather/gweather-info.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="668">a #GWeatherInfo</doc>
            <type name="Info" c:type="GWeatherInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="application-id"
                writable="1"
                transfer-ownership="none"
                setter="set_application_id"
                getter="get_application_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.c"
             line="2415">A unique identifier, typically in the form of reverse DNS notation,
for the application that is querying the weather information.

Weather providers require this information.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="contact-info"
                writable="1"
                transfer-ownership="none"
                setter="set_contact_info"
                getter="get_contact_info"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.c"
             line="2429">An email address or any other contact form URL.

Weather providers require this information.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="enabled-providers"
                writable="1"
                transfer-ownership="none"
                setter="set_enabled_providers"
                getter="get_enabled_providers"
                default-value="GWEATHER_PROVIDER_NONE">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.c"
             line="2403">The enabled weather providers.</doc>
        <type name="Provider"/>
      </property>
      <property name="location"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_location"
                getter="get_location">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.c"
             line="2392">The location of the weather information.</doc>
        <type name="Location"/>
      </property>
      <glib:signal name="updated" when="first">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.c"
             line="2445">This signal is emitted after the initial fetch of the weather
data from upstream services, and after every successful call
to [method@GWeather.Info.update].</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="InfoClass"
            c:type="GWeatherInfoClass"
            glib:is-gtype-struct-for="Info">
      <source-position filename="libgweather/gweather-info.h" line="42"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Location"
           c:symbol-prefix="location"
           c:type="GWeatherLocation"
           parent="GObject.Object"
           glib:type-name="GWeatherLocation"
           glib:get-type="gweather_location_get_type"
           glib:type-struct="LocationClass">
      <doc xml:space="preserve"
           filename="libgweather/gweather-location.h"
           line="18">A `GWeatherLocation` represents a "location" of some type known to
libgweather; anything from a single weather station to the entire
world.

See [enum@GWeather.LocationLevel] for information about how the
hierarchy of locations works.</doc>
      <source-position filename="libgweather/gweather-location.h" line="88"/>
      <constructor name="new_detached"
                   c:identifier="gweather_location_new_detached">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="1752">Construct a new location from the given data, supplementing
any missing information from the static database.</doc>
        <source-position filename="libgweather/gweather-location.h"
                         line="179"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="1762">the newly created detached location</doc>
          <type name="Location" c:type="GWeatherLocation*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="1754">the user visible location name</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="icao"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="1755">the ICAO code of the location</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="latitude" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="1756">the latitude of the location</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="longitude" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="1757">the longitude of the location</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="detect_nearest_city_finish"
                c:identifier="gweather_location_detect_nearest_city_finish"
                throws="1">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="867">Fetches the location from @result.</doc>
        <source-position filename="libgweather/gweather-location.h"
                         line="138"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="874">Customized GWeatherLocation</doc>
          <type name="Location" c:type="GWeatherLocation*"/>
        </return-value>
        <parameters>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="869">the result of the asynchronous operation</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_world" c:identifier="gweather_location_get_world">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="258">Obtains the shared `GWeatherLocation` of type `GWEATHER_LOCATION_WORLD`,
representing a hierarchy containing all of the locations from the
location data.</doc>
        <source-position filename="libgweather/gweather-location.h" line="91"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="265">a `GWEATHER_LOCATION_WORLD`
  location, or `NULL` if the locations data could not be found or could
  not be parsed.</doc>
          <type name="Location" c:type="GWeatherLocation*"/>
        </return-value>
      </function>
      <method name="deserialize" c:identifier="gweather_location_deserialize">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="1710">This call undoes the effect of gweather_location_serialize(), that
is, it turns a #GVariant into a #GWeatherLocation. The conversion
happens in the context of @world (i.e, for a city or weather station,
the resulting location will be attached to a administrative division,
country and region as appropriate).</doc>
        <source-position filename="libgweather/gweather-location.h"
                         line="175"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="1721">the deserialized location.</doc>
          <type name="Location" c:type="GWeatherLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="world" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="1712">a world-level #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
          <parameter name="serialized" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="1713">the #GVariant representing the #GWeatherLocation</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="detect_nearest_city"
              c:identifier="gweather_location_detect_nearest_city">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="821">Initializes geocode reversing to find place for (@lat, @lon) coordinates.

Calls the callback function passed by user when the result is ready.

The given location must be at most a %GWEATHER_LOCATION_ADM1 location; this
restriction may be lifted in a future version.</doc>
        <source-position filename="libgweather/gweather-location.h"
                         line="131"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="823">the parent location, which will be searched recursively</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
          <parameter name="lat" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="824">Latitude, in degrees</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="lon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="825">Longitude, in degrees</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="826">a cancellable instance</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="827">callback function</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="828">user data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="gweather_location_equal">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="1350">Compares two #GWeatherLocation and sees if they represent the same
place.
It is only legal to call this for cities, weather stations or
detached locations.
Note that this function only checks for geographical characteristics,
such as coordinates and METAR code. It is still possible that the two
locations belong to different worlds (in which case care must be
taken when passing them GWeatherLocationEntry and GWeatherInfo), or
if one is them is detached it could have a custom name.</doc>
        <source-position filename="libgweather/gweather-location.h"
                         line="169"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="1365">%TRUE if the two locations represent the same place as
         far as libgweather can tell, and %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="one" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="1352">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
          <parameter name="two" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="1353">another #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_by_country_code"
              c:identifier="gweather_location_find_by_country_code">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="1322">Retrieves the country identified by the specified ISO 3166 code,
if present in the database.</doc>
        <source-position filename="libgweather/gweather-location.h"
                         line="165"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="1330">a country level #GWeatherLocation, or %NULL.</doc>
          <type name="Location" c:type="GWeatherLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="world" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="1324">a #GWeatherLocation at the world</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
          <parameter name="country_code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="1325">a country code</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_by_station_code"
              c:identifier="gweather_location_find_by_station_code">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="1288">Retrieves the weather station identifier by @station_code.

Note that multiple instances of the same weather station can exist
in the database, and this function will return any of them, so this
not usually what you want.

See [method@GWeather.Location.deserialize] to recover a stored location.</doc>
        <source-position filename="libgweather/gweather-location.h"
                         line="162"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="1301">a weather station level location
  for the given station code, or `NULL` if none exists in the database</doc>
          <type name="Location" c:type="GWeatherLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="world" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="1290">a #GWeatherLocation at the world level</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
          <parameter name="station_code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="1291">a 4 letter METAR code</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_nearest_city"
              c:identifier="gweather_location_find_nearest_city">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="671">Finds the nearest city to the passed latitude and
longitude, among the descendants of @loc.

The given location must be at most a %GWEATHER_LOCATION_ADM1 location.
This restriction may be lifted in a future version.

Note that this function does not check if (@lat, @lon) fall inside
@loc, or are in the same region and time zone as the return value.</doc>
        <source-position filename="libgweather/gweather-location.h"
                         line="119"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="686">the city closest to (@lat, @lon), in the
  region or administrative district of @loc.</doc>
          <type name="Location" c:type="GWeatherLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="673">The parent location, which will be searched recursively</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
          <parameter name="lat" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="674">Latitude, in degrees</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="lon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="675">Longitude, in degrees</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_nearest_city_full"
              c:identifier="gweather_location_find_nearest_city_full">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="715">Finds the nearest city to the passed latitude and
longitude, among the descendants of @loc.

Supports the use of own filter function to filter out locations.

Geocoding should be done on the application side if needed.

@loc must be at most a %GWEATHER_LOCATION_ADM1 location.
This restriction may be lifted in a future version.</doc>
        <source-position filename="libgweather/gweather-location.h"
                         line="124"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="736">the city closest to (@lat, @lon), in the
  region or administrative district of @loc with validation of
  filter function</doc>
          <type name="Location" c:type="GWeatherLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="717">the parent location, which will be searched recursively</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
          <parameter name="lat" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="718">Latitude, in degrees</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="lon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="719">Longitude, in degrees</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="3"
                     destroy="4">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="720">a function to iterate
  over the locations; the function must return `TRUE` to continue checking
  for the location, and `FALSE` to filter the location out</doc>
            <type name="FilterFunc" c:type="GWeatherFilterFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="723">for customization</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="724">to destroy user_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="free_timezones"
              c:identifier="gweather_location_free_timezones">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="1120">Frees the array of timezones returned by
gweather_location_get_timezones().</doc>
        <source-position filename="libgweather/gweather-location.h"
                         line="152"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="1122">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
          <parameter name="zones" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="1123">an array of timezones
  returned by [method@GWeather.Location.get_timezones]</doc>
            <array c:type="GTimeZone**">
              <type name="GLib.TimeZone" c:type="GTimeZone*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="get_city_name"
              c:identifier="gweather_location_get_city_name">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="1166">Retrieves the city name for the given location.

For a `GWEATHER_LOCATION_CITY` or `GWEATHER_LOCATION_DETACHED` location,
this method is equivalent to [method@GWeather.Location.get_name].

For a `GWEATHER_LOCATION_WEATHER_STATION` location, this is equivalent to
calling [method@GWeather.Location.get_name] on the location's parent.

For other locations this method will return `NULL`.</doc>
        <source-position filename="libgweather/gweather-location.h"
                         line="157"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="1180">the city name of the location</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="1168">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_code" c:identifier="gweather_location_get_code">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="1142">Gets the METAR station code associated with a
`GWEATHER_LOCATION_WEATHER_STATION` location.</doc>
        <source-position filename="libgweather/gweather-location.h"
                         line="155"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="1149">the location's METAR station code</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="1144">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_coords" c:identifier="gweather_location_get_coords">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="901">Gets @loc's coordinates.

You must call [method@GWeather.Location.has_coords] before calling
this function.</doc>
        <source-position filename="libgweather/gweather-location.h"
                         line="112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="903">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
          <parameter name="latitude"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="904">the return location for the latitude</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
          <parameter name="longitude"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="905">the return location for the longitude</doc>
            <type name="gdouble" c:type="double*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_country" c:identifier="gweather_location_get_country">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="951">Gets the ISO 3166 country code of the given location.

For `GWEATHER_LOCATION_WORLD` and `GWEATHER_LOCATION_REGION`, this
function returns `NULL`.</doc>
        <source-position filename="libgweather/gweather-location.h"
                         line="142"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="960">the location's country code</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="953">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_country_name"
              c:identifier="gweather_location_get_country_name">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="1204">Retrieves the country name for the given location.

For a `GWEATHER_LOCATION_COUNTRY` location, this is equivalent to
[method@GWeather.Location.get_name].

For a `GWEATHER_LOCATION_REGION` and `GWEATHER_LOCATION_WORLD` location,
this method will return `NULL`.

For other location levels, this method will find the parent
`GWEATHER_LOCATION_COUNTRY` and return its name.</doc>
        <source-position filename="libgweather/gweather-location.h"
                         line="159"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="1219">the location's country name</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="1206">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_distance"
              c:identifier="gweather_location_get_distance">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="926">Determines the distance in kilometers between @loc and @loc2.</doc>
        <source-position filename="libgweather/gweather-location.h"
                         line="116"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="933">the distance between @loc and @loc2.</doc>
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="928">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
          <parameter name="loc2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="929">a second #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_english_name"
              c:identifier="gweather_location_get_english_name">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="348">Gets the location's name.</doc>
        <source-position filename="libgweather/gweather-location.h" line="98"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="354">the location's name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="350">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_english_sort_name"
              c:identifier="gweather_location_get_english_sort_name">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="370">Gets the location's name, in a representation useful for comparisons.

The "sort name" is the location's name after having g_utf8_normalize()
(with `G_NORMALIZE_ALL`) and g_utf8_casefold() called on it. You can
use this to sort locations, or to comparing user input against a
location name.</doc>
        <source-position filename="libgweather/gweather-location.h"
                         line="100"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="381">the sort name of the location</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="372">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_level" c:identifier="gweather_location_get_level">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="404">Gets @loc's level, from %GWEATHER_LOCATION_WORLD, to
%GWEATHER_LOCATION_WEATHER_STATION.</doc>
        <source-position filename="libgweather/gweather-location.h"
                         line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="411">@loc's level</doc>
          <type name="LocationLevel" c:type="GWeatherLocationLevel"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="406">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="gweather_location_get_name">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="277">Gets the location's name, localized into the current language.</doc>
        <source-position filename="libgweather/gweather-location.h" line="94"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="283">the location's name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="279">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent" c:identifier="gweather_location_get_parent">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="457">Gets the location's parent.</doc>
        <source-position filename="libgweather/gweather-location.h"
                         line="104"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="463">the location's parent</doc>
          <type name="Location" c:type="GWeatherLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="459">a location</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sort_name"
              c:identifier="gweather_location_get_sort_name">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="313">Gets the location's name, localized into the current language,
in a representation useful for comparisons.

The "sort name" is the location's name after having g_utf8_normalize()
(with `G_NORMALIZE_ALL`) and g_utf8_casefold() called on it. You can
use this to sort locations, or to comparing user input against a
location name.</doc>
        <source-position filename="libgweather/gweather-location.h" line="96"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="325">the sort name of the location</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="315">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_timezone"
              c:identifier="gweather_location_get_timezone">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="983">Gets the timezone associated with @loc, if known.</doc>
        <source-position filename="libgweather/gweather-location.h"
                         line="146"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="989">the location's timezone</doc>
          <type name="GLib.TimeZone" c:type="GTimeZone*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="985">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_timezone_str"
              c:identifier="gweather_location_get_timezone_str">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="1042">Gets the timezone associated with @loc, if known, as a string.</doc>
        <source-position filename="libgweather/gweather-location.h"
                         line="148"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="1048">the location's timezone as
  a string</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="1044">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_timezones"
              c:identifier="gweather_location_get_timezones">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="1096">Gets an array of all timezones associated with any location under
@loc.

Use gweather_location_free_timezones() to free this array.</doc>
        <source-position filename="libgweather/gweather-location.h"
                         line="150"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="1105">the timezones
  associated with the location</doc>
          <array c:type="GTimeZone**">
            <type name="GLib.TimeZone" c:type="GTimeZone*"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="1098">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_coords" c:identifier="gweather_location_has_coords">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="885">Checks if @loc has valid latitude and longitude.</doc>
        <source-position filename="libgweather/gweather-location.h"
                         line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="891">%TRUE if @loc has valid latitude and longitude.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="887">a #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_timezone"
              c:identifier="gweather_location_has_timezone">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="1013">Checks whether the location has a timezone.</doc>
        <source-position filename="libgweather/gweather-location.h"
                         line="144"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="1019">true if the location has a timezone; false otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="1015">the location</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="next_child" c:identifier="gweather_location_next_child">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="487">Allows iterating all children of a location.

Pass `NULL` to get the first child, and any child to get the next one.

Note that the reference to @child is taken, meaning iterating all
children is as simple as:

```c
  g_autoptr (GWeatherLocation) child = NULL;
  while ((child = gweather_location_next_child (location, child)))
    {
       // Do something with child
    }
```</doc>
        <source-position filename="libgweather/gweather-location.h"
                         line="106"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="507">The next child, if one exists</doc>
          <type name="Location" c:type="GWeatherLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="489">the location to iterate</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
          <parameter name="child"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="490">the next child</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="serialize" c:identifier="gweather_location_serialize">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="1685">Transforms a #GWeatherLocation into a #GVariant, in a way that
calling gweather_location_deserialize() will hold an equivalent
#GWeatherLocation.
The resulting variant can then be stored into GSettings or on disk.
This call is only valid for cities, weather stations and detached
locations.
The format of the resulting #GVariant is private to libgweather,
and it is subject to change. You should use the "v" format in GSettings,
to ensure maximum compatibility with future versions of the library.</doc>
        <source-position filename="libgweather/gweather-location.h"
                         line="173"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="1699">the serialization of @location.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="loc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="1687">a city, weather station or detached #GWeatherLocation</doc>
            <type name="Location" c:type="GWeatherLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="LocationClass"
            c:type="GWeatherLocationClass"
            glib:is-gtype-struct-for="Location">
      <source-position filename="libgweather/gweather-location.h" line="88"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="LocationLevel"
                 glib:type-name="GWeatherLocationLevel"
                 glib:get-type="gweather_location_level_get_type"
                 c:type="GWeatherLocationLevel">
      <doc xml:space="preserve"
           filename="libgweather/gweather-location.h"
           line="42">The size/scope of a particular [class@GWeather.Location].

Locations form a hierarchy, with a `GWEATHER_LOCATION_WORLD` location
at the top, divided into regions or countries, and so on.

Countries may or may not be divided into "adm1"s, and "adm1"s may or
may not be divided into "adm2"s. A city will have at least one, and
possibly several, weather stations inside it. Weather stations will
never appear outside of cities.

Building a database with [func@GWeather.Location.get_world] will never
create detached instances, but deserializing might.</doc>
      <member name="world"
              value="0"
              c:identifier="GWEATHER_LOCATION_WORLD"
              glib:nick="world"
              glib:name="GWEATHER_LOCATION_WORLD">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.h"
             line="44">A location representing the entire world</doc>
      </member>
      <member name="region"
              value="1"
              c:identifier="GWEATHER_LOCATION_REGION"
              glib:nick="region"
              glib:name="GWEATHER_LOCATION_REGION">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.h"
             line="45">A location representing a continent or other
  top-level region</doc>
      </member>
      <member name="country"
              value="2"
              c:identifier="GWEATHER_LOCATION_COUNTRY"
              glib:nick="country"
              glib:name="GWEATHER_LOCATION_COUNTRY">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.h"
             line="47">A location representing a "country" (or other
  geographic unit that has an ISO-3166 country code)</doc>
      </member>
      <member name="adm1"
              value="3"
              c:identifier="GWEATHER_LOCATION_ADM1"
              glib:nick="adm1"
              glib:name="GWEATHER_LOCATION_ADM1">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.h"
             line="49">A location representing a "first-level
  administrative division"; ie, a state, province, or similar division</doc>
      </member>
      <member name="city"
              value="4"
              c:identifier="GWEATHER_LOCATION_CITY"
              glib:nick="city"
              glib:name="GWEATHER_LOCATION_CITY">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.h"
             line="51">A location representing a city</doc>
      </member>
      <member name="weather_station"
              value="5"
              c:identifier="GWEATHER_LOCATION_WEATHER_STATION"
              glib:nick="weather-station"
              glib:name="GWEATHER_LOCATION_WEATHER_STATION">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.h"
             line="52">A location representing a weather
  station</doc>
      </member>
      <member name="detached"
              value="6"
              c:identifier="GWEATHER_LOCATION_DETACHED"
              glib:nick="detached"
              glib:name="GWEATHER_LOCATION_DETACHED">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.h"
             line="54">A location that is detached from the database,
  for example because it was loaded from external storage and could not be
  fully recovered. The parent of this location is the nearest weather
  station</doc>
      </member>
      <member name="named_timezone"
              value="7"
              c:identifier="GWEATHER_LOCATION_NAMED_TIMEZONE"
              glib:nick="named-timezone"
              glib:name="GWEATHER_LOCATION_NAMED_TIMEZONE">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.h"
             line="58">A location representing a named or
  special timezone in the world, such as UTC</doc>
      </member>
      <function name="to_string"
                c:identifier="gweather_location_level_to_string">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="421">Returns the location level as a string, useful for debugging
purposes.</doc>
        <source-position filename="libgweather/gweather-location.h"
                         line="185"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="428">a string</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="level" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-location.c"
                 line="423">a #GWeatherLocationLevel</doc>
            <type name="LocationLevel" c:type="GWeatherLocationLevel"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <enumeration name="PressureUnit"
                 glib:type-name="GWeatherPressureUnit"
                 glib:get-type="gweather_pressure_unit_get_type"
                 c:type="GWeatherPressureUnit">
      <doc xml:space="preserve"
           filename="libgweather/gweather-enums.h"
           line="59">The measure unit to use for atmospheric pressure values, when
retrieved by gweather_info_get_value_pressure().</doc>
      <member name="invalid"
              value="0"
              c:identifier="GWEATHER_PRESSURE_UNIT_INVALID"
              glib:nick="invalid"
              glib:name="GWEATHER_PRESSURE_UNIT_INVALID">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="61">invalid unit</doc>
      </member>
      <member name="default"
              value="1"
              c:identifier="GWEATHER_PRESSURE_UNIT_DEFAULT"
              glib:nick="default"
              glib:name="GWEATHER_PRESSURE_UNIT_DEFAULT">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="62">the user preferred pressure unit</doc>
      </member>
      <member name="kpa"
              value="2"
              c:identifier="GWEATHER_PRESSURE_UNIT_KPA"
              glib:nick="kpa"
              glib:name="GWEATHER_PRESSURE_UNIT_KPA">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="63">kiloPascal (* 10^3 Pa)</doc>
      </member>
      <member name="hpa"
              value="3"
              c:identifier="GWEATHER_PRESSURE_UNIT_HPA"
              glib:nick="hpa"
              glib:name="GWEATHER_PRESSURE_UNIT_HPA">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="64">hectoPascal (* 10^2 Pa); also known
  as millibars, but formatted differently</doc>
      </member>
      <member name="mb"
              value="4"
              c:identifier="GWEATHER_PRESSURE_UNIT_MB"
              glib:nick="mb"
              glib:name="GWEATHER_PRESSURE_UNIT_MB">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="66">millibars; same as %GWEATHER_PRESSURE_UNIT_HPA</doc>
      </member>
      <member name="mm_hg"
              value="5"
              c:identifier="GWEATHER_PRESSURE_UNIT_MM_HG"
              glib:nick="mm-hg"
              glib:name="GWEATHER_PRESSURE_UNIT_MM_HG">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="67">millimeters of mercury</doc>
      </member>
      <member name="inch_hg"
              value="6"
              c:identifier="GWEATHER_PRESSURE_UNIT_INCH_HG"
              glib:nick="inch-hg"
              glib:name="GWEATHER_PRESSURE_UNIT_INCH_HG">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="68">inches of mercury</doc>
      </member>
      <member name="atm"
              value="7"
              c:identifier="GWEATHER_PRESSURE_UNIT_ATM"
              glib:nick="atm"
              glib:name="GWEATHER_PRESSURE_UNIT_ATM">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="69">atmospheres</doc>
      </member>
    </enumeration>
    <bitfield name="Provider"
              glib:type-name="GWeatherProvider"
              glib:get-type="gweather_provider_get_type"
              c:type="GWeatherProvider">
      <member name="none"
              value="0"
              c:identifier="GWEATHER_PROVIDER_NONE"
              glib:nick="none"
              glib:name="GWEATHER_PROVIDER_NONE">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="21">no provider, no weather information available</doc>
      </member>
      <member name="metar"
              value="1"
              c:identifier="GWEATHER_PROVIDER_METAR"
              glib:nick="metar"
              glib:name="GWEATHER_PROVIDER_METAR">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="22">METAR office, providing current conditions worldwide</doc>
      </member>
      <member name="iwin"
              value="4"
              c:identifier="GWEATHER_PROVIDER_IWIN"
              glib:nick="iwin"
              glib:name="GWEATHER_PROVIDER_IWIN">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="23">US weather office (old API), providing 7 days of forecast</doc>
      </member>
      <member name="met_no"
              value="8"
              c:identifier="GWEATHER_PROVIDER_MET_NO"
              glib:nick="met-no"
              glib:name="GWEATHER_PROVIDER_MET_NO">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="24">MET.no service, worldwide but requires attribution and a subscription to the [API users mailing-list](https://lists.met.no/mailman/listinfo/api-users).</doc>
      </member>
      <member name="owm"
              value="16"
              c:identifier="GWEATHER_PROVIDER_OWM"
              glib:nick="owm"
              glib:name="GWEATHER_PROVIDER_OWM">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="25">OpenWeatherMap, worldwide and possibly more reliable, but requires attribution and is limited in the number of queries</doc>
      </member>
      <member name="nws"
              value="32"
              c:identifier="GWEATHER_PROVIDER_NWS"
              glib:nick="nws"
              glib:name="GWEATHER_PROVIDER_NWS">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="26">US weather office (new API), providing 7 days of hourly forecast (available since 4.2)</doc>
      </member>
      <member name="all"
              value="61"
              c:identifier="GWEATHER_PROVIDER_ALL"
              glib:nick="all"
              glib:name="GWEATHER_PROVIDER_ALL">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="27">enable all available providers</doc>
      </member>
    </bitfield>
    <enumeration name="Sky"
                 glib:type-name="GWeatherSky"
                 glib:get-type="gweather_sky_get_type"
                 c:type="GWeatherSky">
      <doc xml:space="preserve"
           filename="libgweather/gweather-info.h"
           line="189">The sky and cloud visibility. In general it is discouraged to
use this value directly to compute the forecast icon: applications
should instead use gweather_info_get_icon_name() or
gweather_info_get_symbolic_icon_name().</doc>
      <member name="invalid"
              value="-1"
              c:identifier="GWEATHER_SKY_INVALID"
              glib:nick="invalid"
              glib:name="GWEATHER_SKY_INVALID">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="191">value not available</doc>
      </member>
      <member name="clear"
              value="0"
              c:identifier="GWEATHER_SKY_CLEAR"
              glib:nick="clear"
              glib:name="GWEATHER_SKY_CLEAR">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="192">sky completely clear, no clouds visible</doc>
      </member>
      <member name="broken"
              value="1"
              c:identifier="GWEATHER_SKY_BROKEN"
              glib:nick="broken"
              glib:name="GWEATHER_SKY_BROKEN">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="193">sky mostly clear, few clouds</doc>
      </member>
      <member name="scattered"
              value="2"
              c:identifier="GWEATHER_SKY_SCATTERED"
              glib:nick="scattered"
              glib:name="GWEATHER_SKY_SCATTERED">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="194">sky mostly clear, patches of clouds</doc>
      </member>
      <member name="few"
              value="3"
              c:identifier="GWEATHER_SKY_FEW"
              glib:nick="few"
              glib:name="GWEATHER_SKY_FEW">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="195">few clouds, sky cloudy but patches of sky visible</doc>
      </member>
      <member name="overcast"
              value="4"
              c:identifier="GWEATHER_SKY_OVERCAST"
              glib:nick="overcast"
              glib:name="GWEATHER_SKY_OVERCAST">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="196">sky completely clouded, sun not visible</doc>
      </member>
      <member name="last"
              value="5"
              c:identifier="GWEATHER_SKY_LAST"
              glib:nick="last"
              glib:name="GWEATHER_SKY_LAST">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="197">the maximum value for the enumeration</doc>
      </member>
      <function name="to_string" c:identifier="gweather_sky_to_string">
        <source-position filename="libgweather/gweather-info.h" line="215"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="sky" transfer-ownership="none">
            <type name="Sky" c:type="GWeatherSky"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_string_full"
                c:identifier="gweather_sky_to_string_full">
        <source-position filename="libgweather/gweather-info.h" line="217"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="sky" transfer-ownership="none">
            <type name="Sky" c:type="GWeatherSky"/>
          </parameter>
          <parameter name="options" transfer-ownership="none">
            <type name="FormatOptions" c:type="GWeatherFormatOptions"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <enumeration name="SpeedUnit"
                 glib:type-name="GWeatherSpeedUnit"
                 glib:get-type="gweather_speed_unit_get_type"
                 c:type="GWeatherSpeedUnit">
      <doc xml:space="preserve"
           filename="libgweather/gweather-enums.h"
           line="36">The measure unit to use for wind speed values, when retrieved by
gweather_info_get_value_wind().</doc>
      <member name="invalid"
              value="0"
              c:identifier="GWEATHER_SPEED_UNIT_INVALID"
              glib:nick="invalid"
              glib:name="GWEATHER_SPEED_UNIT_INVALID">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="38">invalid unit</doc>
      </member>
      <member name="default"
              value="1"
              c:identifier="GWEATHER_SPEED_UNIT_DEFAULT"
              glib:nick="default"
              glib:name="GWEATHER_SPEED_UNIT_DEFAULT">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="39">the user preferred speed unit</doc>
      </member>
      <member name="ms"
              value="2"
              c:identifier="GWEATHER_SPEED_UNIT_MS"
              glib:nick="ms"
              glib:name="GWEATHER_SPEED_UNIT_MS">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="40">meters per second</doc>
      </member>
      <member name="kph"
              value="3"
              c:identifier="GWEATHER_SPEED_UNIT_KPH"
              glib:nick="kph"
              glib:name="GWEATHER_SPEED_UNIT_KPH">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="41">kilometers per hour</doc>
      </member>
      <member name="mph"
              value="4"
              c:identifier="GWEATHER_SPEED_UNIT_MPH"
              glib:nick="mph"
              glib:name="GWEATHER_SPEED_UNIT_MPH">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="42">miles per hour</doc>
      </member>
      <member name="knots"
              value="5"
              c:identifier="GWEATHER_SPEED_UNIT_KNOTS"
              glib:nick="knots"
              glib:name="GWEATHER_SPEED_UNIT_KNOTS">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="43">knots</doc>
      </member>
      <member name="bft"
              value="6"
              c:identifier="GWEATHER_SPEED_UNIT_BFT"
              glib:nick="bft"
              glib:name="GWEATHER_SPEED_UNIT_BFT">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="44">Beaufort scale</doc>
      </member>
      <function name="to_string" c:identifier="gweather_speed_unit_to_string">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.c"
             line="1141">Creates a human-readable, localized representation of @unit</doc>
        <source-position filename="libgweather/gweather-info.h" line="423"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="1143">a speed unit, or %GWEATHER_SPEED_UNIT_DEFAULT</doc>
            <type name="SpeedUnit" c:type="GWeatherSpeedUnit"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <enumeration name="TemperatureUnit"
                 glib:type-name="GWeatherTemperatureUnit"
                 glib:get-type="gweather_temperature_unit_get_type"
                 c:type="GWeatherTemperatureUnit">
      <doc xml:space="preserve"
           filename="libgweather/gweather-enums.h"
           line="17">The measure unit to use for temperature values, when retrieved by
the gweather_info_get_value_temp() family of functions.</doc>
      <member name="invalid"
              value="0"
              c:identifier="GWEATHER_TEMP_UNIT_INVALID"
              glib:nick="invalid"
              glib:name="GWEATHER_TEMP_UNIT_INVALID">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="19">invalid unit</doc>
      </member>
      <member name="default"
              value="1"
              c:identifier="GWEATHER_TEMP_UNIT_DEFAULT"
              glib:nick="default"
              glib:name="GWEATHER_TEMP_UNIT_DEFAULT">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="20">the user preferred temperature unit</doc>
      </member>
      <member name="kelvin"
              value="2"
              c:identifier="GWEATHER_TEMP_UNIT_KELVIN"
              glib:nick="kelvin"
              glib:name="GWEATHER_TEMP_UNIT_KELVIN">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="21">Kelvin (absolute) temperature scale</doc>
      </member>
      <member name="centigrade"
              value="3"
              c:identifier="GWEATHER_TEMP_UNIT_CENTIGRADE"
              glib:nick="centigrade"
              glib:name="GWEATHER_TEMP_UNIT_CENTIGRADE">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="22">Celsius temperature scale</doc>
      </member>
      <member name="fahrenheit"
              value="4"
              c:identifier="GWEATHER_TEMP_UNIT_FAHRENHEIT"
              glib:nick="fahrenheit"
              glib:name="GWEATHER_TEMP_UNIT_FAHRENHEIT">
        <doc xml:space="preserve"
             filename="libgweather/gweather-enums.h"
             line="23">Fahrenheit temperature scale</doc>
      </member>
      <function name="to_real"
                c:identifier="gweather_temperature_unit_to_real">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.c"
             line="893">Resolve @unit into a real temperature unit, potentially considering
locale defaults.</doc>
        <source-position filename="libgweather/gweather-info.h" line="420"/>
        <return-value transfer-ownership="none">
          <type name="TemperatureUnit" c:type="GWeatherTemperatureUnit"/>
        </return-value>
        <parameters>
          <parameter name="unit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libgweather/gweather-info.c"
                 line="895">a tempeature unit, or %GWEATHER_TEMP_UNIT_DEFAULT</doc>
            <type name="TemperatureUnit" c:type="GWeatherTemperatureUnit"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <enumeration name="WindDirection"
                 glib:type-name="GWeatherWindDirection"
                 glib:get-type="gweather_wind_direction_get_type"
                 c:type="GWeatherWindDirection">
      <doc xml:space="preserve"
           filename="libgweather/gweather-info.h"
           line="135">The direction of the prevailing wind. Composite values
such as north-north-east indicate a direction between the
two component value (north and north-east).</doc>
      <member name="invalid"
              value="-1"
              c:identifier="GWEATHER_WIND_INVALID"
              glib:nick="invalid"
              glib:name="GWEATHER_WIND_INVALID">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="137">value not available</doc>
      </member>
      <member name="variable"
              value="0"
              c:identifier="GWEATHER_WIND_VARIABLE"
              glib:nick="variable"
              glib:name="GWEATHER_WIND_VARIABLE">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="138">variable throughout the day</doc>
      </member>
      <member name="n"
              value="1"
              c:identifier="GWEATHER_WIND_N"
              glib:nick="n"
              glib:name="GWEATHER_WIND_N">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="139">north</doc>
      </member>
      <member name="nne"
              value="2"
              c:identifier="GWEATHER_WIND_NNE"
              glib:nick="nne"
              glib:name="GWEATHER_WIND_NNE">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="140">north-north-east</doc>
      </member>
      <member name="ne"
              value="3"
              c:identifier="GWEATHER_WIND_NE"
              glib:nick="ne"
              glib:name="GWEATHER_WIND_NE">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="141">north-east</doc>
      </member>
      <member name="ene"
              value="4"
              c:identifier="GWEATHER_WIND_ENE"
              glib:nick="ene"
              glib:name="GWEATHER_WIND_ENE">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="142">east-north-east</doc>
      </member>
      <member name="e"
              value="5"
              c:identifier="GWEATHER_WIND_E"
              glib:nick="e"
              glib:name="GWEATHER_WIND_E">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="143">east</doc>
      </member>
      <member name="ese"
              value="6"
              c:identifier="GWEATHER_WIND_ESE"
              glib:nick="ese"
              glib:name="GWEATHER_WIND_ESE">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="144">east-south-east</doc>
      </member>
      <member name="se"
              value="7"
              c:identifier="GWEATHER_WIND_SE"
              glib:nick="se"
              glib:name="GWEATHER_WIND_SE">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="145">south-east</doc>
      </member>
      <member name="sse"
              value="8"
              c:identifier="GWEATHER_WIND_SSE"
              glib:nick="sse"
              glib:name="GWEATHER_WIND_SSE">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="146">south-south-east</doc>
      </member>
      <member name="s"
              value="9"
              c:identifier="GWEATHER_WIND_S"
              glib:nick="s"
              glib:name="GWEATHER_WIND_S">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="147">south</doc>
      </member>
      <member name="ssw"
              value="10"
              c:identifier="GWEATHER_WIND_SSW"
              glib:nick="ssw"
              glib:name="GWEATHER_WIND_SSW">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="148">south-south-west</doc>
      </member>
      <member name="sw"
              value="11"
              c:identifier="GWEATHER_WIND_SW"
              glib:nick="sw"
              glib:name="GWEATHER_WIND_SW">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="149">south-west</doc>
      </member>
      <member name="wsw"
              value="12"
              c:identifier="GWEATHER_WIND_WSW"
              glib:nick="wsw"
              glib:name="GWEATHER_WIND_WSW">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="150">west-south-west</doc>
      </member>
      <member name="w"
              value="13"
              c:identifier="GWEATHER_WIND_W"
              glib:nick="w"
              glib:name="GWEATHER_WIND_W">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="151">west</doc>
      </member>
      <member name="wnw"
              value="14"
              c:identifier="GWEATHER_WIND_WNW"
              glib:nick="wnw"
              glib:name="GWEATHER_WIND_WNW">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="152">west-north-west</doc>
      </member>
      <member name="nw"
              value="15"
              c:identifier="GWEATHER_WIND_NW"
              glib:nick="nw"
              glib:name="GWEATHER_WIND_NW">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="153">north-west</doc>
      </member>
      <member name="nnw"
              value="16"
              c:identifier="GWEATHER_WIND_NNW"
              glib:nick="nnw"
              glib:name="GWEATHER_WIND_NNW">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="154">north-north-west</doc>
      </member>
      <member name="last"
              value="17"
              c:identifier="GWEATHER_WIND_LAST"
              glib:nick="last"
              glib:name="GWEATHER_WIND_LAST">
        <doc xml:space="preserve"
             filename="libgweather/gweather-info.h"
             line="155">maximum value for the enumeration</doc>
      </member>
      <function name="to_string"
                c:identifier="gweather_wind_direction_to_string">
        <source-position filename="libgweather/gweather-info.h" line="184"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="wind" transfer-ownership="none">
            <type name="WindDirection" c:type="GWeatherWindDirection"/>
          </parameter>
        </parameters>
      </function>
      <function name="to_string_full"
                c:identifier="gweather_wind_direction_to_string_full">
        <source-position filename="libgweather/gweather-info.h" line="186"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="wind" transfer-ownership="none">
            <type name="WindDirection" c:type="GWeatherWindDirection"/>
          </parameter>
          <parameter name="options" transfer-ownership="none">
            <type name="FormatOptions" c:type="GWeatherFormatOptions"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <function name="location_level_to_string"
              c:identifier="gweather_location_level_to_string"
              moved-to="LocationLevel.to_string">
      <doc xml:space="preserve"
           filename="libgweather/gweather-location.c"
           line="421">Returns the location level as a string, useful for debugging
purposes.</doc>
      <source-position filename="libgweather/gweather-location.h" line="185"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libgweather/gweather-location.c"
             line="428">a string</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="level" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-location.c"
               line="423">a #GWeatherLocationLevel</doc>
          <type name="LocationLevel" c:type="GWeatherLocationLevel"/>
        </parameter>
      </parameters>
    </function>
    <function name="sky_to_string"
              c:identifier="gweather_sky_to_string"
              moved-to="Sky.to_string">
      <source-position filename="libgweather/gweather-info.h" line="215"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="sky" transfer-ownership="none">
          <type name="Sky" c:type="GWeatherSky"/>
        </parameter>
      </parameters>
    </function>
    <function name="sky_to_string_full"
              c:identifier="gweather_sky_to_string_full"
              moved-to="Sky.to_string_full">
      <source-position filename="libgweather/gweather-info.h" line="217"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="sky" transfer-ownership="none">
          <type name="Sky" c:type="GWeatherSky"/>
        </parameter>
        <parameter name="options" transfer-ownership="none">
          <type name="FormatOptions" c:type="GWeatherFormatOptions"/>
        </parameter>
      </parameters>
    </function>
    <function name="speed_unit_to_string"
              c:identifier="gweather_speed_unit_to_string"
              moved-to="SpeedUnit.to_string">
      <doc xml:space="preserve"
           filename="libgweather/gweather-info.c"
           line="1141">Creates a human-readable, localized representation of @unit</doc>
      <source-position filename="libgweather/gweather-info.h" line="423"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="unit" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-info.c"
               line="1143">a speed unit, or %GWEATHER_SPEED_UNIT_DEFAULT</doc>
          <type name="SpeedUnit" c:type="GWeatherSpeedUnit"/>
        </parameter>
      </parameters>
    </function>
    <function name="temperature_unit_to_real"
              c:identifier="gweather_temperature_unit_to_real"
              moved-to="TemperatureUnit.to_real">
      <doc xml:space="preserve"
           filename="libgweather/gweather-info.c"
           line="893">Resolve @unit into a real temperature unit, potentially considering
locale defaults.</doc>
      <source-position filename="libgweather/gweather-info.h" line="420"/>
      <return-value transfer-ownership="none">
        <type name="TemperatureUnit" c:type="GWeatherTemperatureUnit"/>
      </return-value>
      <parameters>
        <parameter name="unit" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libgweather/gweather-info.c"
               line="895">a tempeature unit, or %GWEATHER_TEMP_UNIT_DEFAULT</doc>
          <type name="TemperatureUnit" c:type="GWeatherTemperatureUnit"/>
        </parameter>
      </parameters>
    </function>
    <function name="wind_direction_to_string"
              c:identifier="gweather_wind_direction_to_string"
              moved-to="WindDirection.to_string">
      <source-position filename="libgweather/gweather-info.h" line="184"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="wind" transfer-ownership="none">
          <type name="WindDirection" c:type="GWeatherWindDirection"/>
        </parameter>
      </parameters>
    </function>
    <function name="wind_direction_to_string_full"
              c:identifier="gweather_wind_direction_to_string_full"
              moved-to="WindDirection.to_string_full">
      <source-position filename="libgweather/gweather-info.h" line="186"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="wind" transfer-ownership="none">
          <type name="WindDirection" c:type="GWeatherWindDirection"/>
        </parameter>
        <parameter name="options" transfer-ownership="none">
          <type name="FormatOptions" c:type="GWeatherFormatOptions"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
