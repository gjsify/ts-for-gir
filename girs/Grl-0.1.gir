<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GModule" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <namespace name="Grl"
             version="0.1"
             shared-library="libgrilo-0.1.so.0"
             c:identifier-prefixes="Grl"
             c:symbol-prefixes="grl">
    <alias name="KeyID" c:type="GrlKeyID">
      <type name="gpointer" c:type="gpointer"/>
    </alias>
    <constant name="CONFIG_KEY_APIKEY"
              value="api-key"
              c:type="GRL_CONFIG_KEY_APIKEY">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CONFIG_KEY_APIKEY_BLOB"
              value="api-key-blob"
              c:type="GRL_CONFIG_KEY_APIKEY_BLOB">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CONFIG_KEY_APISECRET"
              value="api-secret"
              c:type="GRL_CONFIG_KEY_APISECRET">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CONFIG_KEY_APITOKEN"
              value="api-token"
              c:type="GRL_CONFIG_KEY_APITOKEN">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CONFIG_KEY_PASSWORD"
              value="password"
              c:type="GRL_CONFIG_KEY_PASSWORD">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CONFIG_KEY_PLUGIN"
              value="target-plugin"
              c:type="GRL_CONFIG_KEY_PLUGIN">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CONFIG_KEY_SOURCE"
              value="target-source"
              c:type="GRL_CONFIG_KEY_SOURCE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CONFIG_KEY_USERNAME"
              value="username"
              c:type="GRL_CONFIG_KEY_USERNAME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Config"
           c:symbol-prefix="config"
           c:type="GrlConfig"
           parent="GObject.Object"
           glib:type-name="GrlConfig"
           glib:get-type="grl_config_get_type"
           glib:type-struct="ConfigClass">
      <constructor name="new" c:identifier="grl_config_new" version="0.1.4">
        <doc xml:whitespace="preserve">Creates a new data config object that will be associated with a plugin
(if @source is NULL), or a specific source spawned from a plugin (if
@source is not NULL). The latter may be useful for plugins
spawning various sources, each one needing a different configuration.

config associated with the plugin should not be freed until the plugin
has been unloaded.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a newly-allocated data config. The data</doc>
          <type name="Config" c:type="GrlConfig*"/>
        </return-value>
        <parameters>
          <parameter name="plugin" transfer-ownership="none">
            <doc xml:whitespace="preserve">plugin id for this configuration</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="source" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">source id for this configuration</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_api_key"
              c:identifier="grl_config_get_api_key"
              version="0.1.4">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the webservice API key</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_api_key_blob"
              c:identifier="grl_config_get_api_key_blob"
              version="0.1.9">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the binary API key, size will reflect the size of the buffer</doc>
          <type name="guint8" c:type="guint8*"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">pointer to size of data</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_api_secret"
              c:identifier="grl_config_get_api_secret"
              version="0.1.4">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the webservice API passphrase</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_api_token"
              c:identifier="grl_config_get_api_token"
              version="0.1.4">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the webservice API token</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_binary" c:identifier="grl_config_get_binary">
        <return-value transfer-ownership="none">
          <type name="guint8" c:type="guint8*"/>
        </return-value>
        <parameters>
          <parameter name="param" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_boolean" c:identifier="grl_config_get_boolean">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="param" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_float" c:identifier="grl_config_get_float">
        <return-value transfer-ownership="none">
          <type name="gfloat" c:type="gfloat"/>
        </return-value>
        <parameters>
          <parameter name="param" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_int" c:identifier="grl_config_get_int">
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="param" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_password"
              c:identifier="grl_config_get_password"
              version="0.1.8">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the password</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_plugin"
              c:identifier="grl_config_get_plugin"
              version="0.1.4">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the plugin id</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_string" c:identifier="grl_config_get_string">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="param" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_username"
              c:identifier="grl_config_get_username"
              version="0.1.8">
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the username</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="has_param"
              c:identifier="grl_config_has_param"
              version="0.1.8">
        <doc xml:whitespace="preserve">otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">TRUE if @params has a defined value within @config, FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="param" transfer-ownership="none">
            <doc xml:whitespace="preserve">the param</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="grl_config_set">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="param" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_api_key"
              c:identifier="grl_config_set_api_key"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the webservice API key in the configuration</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">the API key</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_api_key_blob"
              c:identifier="grl_config_set_api_key_blob"
              version="0.1.9">
        <doc xml:whitespace="preserve">Set the binary API key in the configuration</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="blob" transfer-ownership="none">
            <doc xml:whitespace="preserve">the binary API key blob</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">the size of the blob</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_api_secret"
              c:identifier="grl_config_set_api_secret"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the webservice passphrase in the configuration</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="secret" transfer-ownership="none">
            <doc xml:whitespace="preserve">the webservice passphrase</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_api_token"
              c:identifier="grl_config_set_api_token"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the webservice API token in the configuration</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="token" transfer-ownership="none">
            <doc xml:whitespace="preserve">the API token</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_binary" c:identifier="grl_config_set_binary">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="param" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="blob" transfer-ownership="none">
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_boolean" c:identifier="grl_config_set_boolean">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="param" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_float" c:identifier="grl_config_set_float">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="param" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_int" c:identifier="grl_config_set_int">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="param" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_password"
              c:identifier="grl_config_set_password"
              version="0.1.8">
        <doc xml:whitespace="preserve">Set the password in the configuration</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="password" transfer-ownership="none">
            <doc xml:whitespace="preserve">the password</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_plugin"
              c:identifier="grl_config_set_plugin"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the plugin key in the configuration</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="plugin" transfer-ownership="none">
            <doc xml:whitespace="preserve">the plugin id</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_source"
              c:identifier="grl_config_set_source"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the plugin key in the configuration</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:whitespace="preserve">the source id</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string" c:identifier="grl_config_set_string">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="param" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_username"
              c:identifier="grl_config_set_username"
              version="0.1.8">
        <doc xml:whitespace="preserve">Set the username in the configuration</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="username" transfer-ownership="none">
            <doc xml:whitespace="preserve">the username</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ConfigPrivate" c:type="GrlConfigPrivate*"/>
      </field>
      <field name="_grl_reserved">
        <array zero-terminated="0" c:type="gpointer" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="ConfigClass"
            c:type="GrlConfigClass"
            glib:is-gtype-struct-for="Config">
      <doc xml:whitespace="preserve">Grilo Config Class</doc>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ConfigPrivate" c:type="GrlConfigPrivate" disguised="1">
    </record>
    <enumeration name="CoreError" c:type="GrlCoreError">
      <doc xml:whitespace="preserve">These constants identify all the available core errors</doc>
      <member name="browse_failed"
              value="1"
              c:identifier="GRL_CORE_ERROR_BROWSE_FAILED"/>
      <member name="search_failed"
              value="2"
              c:identifier="GRL_CORE_ERROR_SEARCH_FAILED"/>
      <member name="search_null_unsupported"
              value="3"
              c:identifier="GRL_CORE_ERROR_SEARCH_NULL_UNSUPPORTED"/>
      <member name="query_failed"
              value="4"
              c:identifier="GRL_CORE_ERROR_QUERY_FAILED"/>
      <member name="metadata_failed"
              value="5"
              c:identifier="GRL_CORE_ERROR_METADATA_FAILED"/>
      <member name="resolve_failed"
              value="6"
              c:identifier="GRL_CORE_ERROR_RESOLVE_FAILED"/>
      <member name="media_not_found"
              value="7"
              c:identifier="GRL_CORE_ERROR_MEDIA_NOT_FOUND"/>
      <member name="store_failed"
              value="8"
              c:identifier="GRL_CORE_ERROR_STORE_FAILED"/>
      <member name="remove_failed"
              value="9"
              c:identifier="GRL_CORE_ERROR_REMOVE_FAILED"/>
      <member name="set_metadata_failed"
              value="10"
              c:identifier="GRL_CORE_ERROR_SET_METADATA_FAILED"/>
      <member name="media_from_uri_failed"
              value="11"
              c:identifier="GRL_CORE_ERROR_MEDIA_FROM_URI_FAILED"/>
      <member name="config_load_failed"
              value="12"
              c:identifier="GRL_CORE_ERROR_CONFIG_LOAD_FAILED"/>
      <member name="config_failed"
              value="13"
              c:identifier="GRL_CORE_ERROR_CONFIG_FAILED"/>
      <member name="unregister_source_failed"
              value="14"
              c:identifier="GRL_CORE_ERROR_UNREGISTER_SOURCE_FAILED"/>
      <member name="load_plugin_failed"
              value="15"
              c:identifier="GRL_CORE_ERROR_LOAD_PLUGIN_FAILED"/>
      <member name="unload_plugin_failed"
              value="16"
              c:identifier="GRL_CORE_ERROR_UNLOAD_PLUGIN_FAILED"/>
      <member name="register_metadata_key_failed"
              value="17"
              c:identifier="GRL_CORE_ERROR_REGISTER_METADATA_KEY_FAILED"/>
      <member name="notify_changed_failed"
              value="18"
              c:identifier="GRL_CORE_ERROR_NOTIFY_CHANGED_FAILED"/>
      <member name="operation_cancelled"
              value="19"
              c:identifier="GRL_CORE_ERROR_OPERATION_CANCELLED"/>
    </enumeration>
    <class name="Data"
           c:symbol-prefix="data"
           c:type="GrlData"
           parent="GObject.Object"
           glib:type-name="GrlData"
           glib:get-type="grl_data_get_type"
           glib:type-struct="DataClass">
      <constructor name="new" c:identifier="grl_data_new" version="0.1.4">
        <doc xml:whitespace="preserve">Creates a new data object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new data object.</doc>
          <type name="Data" c:type="GrlData*"/>
        </return-value>
      </constructor>
      <method name="add"
              c:identifier="grl_data_add"
              version="0.1.4"
              deprecated="Use grl_data_add_related_keys() instead"
              deprecated-version="0.1.13">
        <doc xml:whitespace="preserve">Adds a new @key to @data, with no value. If key already exists, it does
nothing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to add</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_binary"
              c:identifier="grl_data_add_binary"
              version="0.1.10">
        <doc xml:whitespace="preserve">Appends a new binary value for @key in @data.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to append</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
          <parameter name="buf" transfer-ownership="none">
            <doc xml:whitespace="preserve">the buffer containing the new value</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">size of buffer</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_float"
              c:identifier="grl_data_add_float"
              version="0.1.10">
        <doc xml:whitespace="preserve">Appends a new float value for @key in @data.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to append</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
          <parameter name="floatvalue" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_int" c:identifier="grl_data_add_int" version="0.1.10">
        <doc xml:whitespace="preserve">Appends a new int value for @key in @data.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to append</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
          <parameter name="intvalue" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_related_keys"
              c:identifier="grl_data_add_related_keys"
              version="0.1.10">
        <doc xml:whitespace="preserve">Adds a new set of values into @data.

All keys in @prop must be related among them.

@data will take the ownership of @relkeys, so do not modify it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="relkeys" transfer-ownership="none">
            <doc xml:whitespace="preserve">a set of related properties with their values</doc>
            <type name="RelatedKeys" c:type="GrlRelatedKeys*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_string"
              c:identifier="grl_data_add_string"
              version="0.1.10">
        <doc xml:whitespace="preserve">Appends a new string value for @key in @data.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to append</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
          <parameter name="strvalue" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="grl_data_dup" version="0.1.10">
        <doc xml:whitespace="preserve">Makes a deep copy of @data and all its contents.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GrlData. Free it with #g_object_unref.</doc>
          <type name="Data" c:type="GrlData*"/>
        </return-value>
      </method>
      <method name="get" c:identifier="grl_data_get" version="0.1.4">
        <doc xml:whitespace="preserve">Get the first value from @data associated with @key.

freed by user.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GValue. This value should not be modified nor</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to look up.</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_all_single_related_keys"
              c:identifier="grl_data_get_all_single_related_keys"
              version="0.1.10"
              deprecated="Use grl_data_get_single_values_for_key() instead"
              deprecated-version="0.1.13">
        <doc xml:whitespace="preserve">Returns all non-%NULL values for @key from @data. This ignores related keys.

values. Do not change or free the values. Free the list with #g_list_free.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a #GList with</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="GObject.Value"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">a metadata key</doc>
            <type name="KeyID" c:type="GrlKeyID"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_all_single_related_keys_string"
              c:identifier="grl_data_get_all_single_related_keys_string"
              version="0.1.10"
              deprecated="Use grl_data_get_single_values_for_key_string() instead"
              deprecated-version="0.1.13">
        <doc xml:whitespace="preserve">Returns all non-%NULL values for @key from @data. @key must have been
registered as a string-type key. This ignores related keys.

not change or free the strings. Free the list with #g_list_free.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a #GList with values. Do</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">a metadata key</doc>
            <type name="KeyID" c:type="GrlKeyID"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_binary" c:identifier="grl_data_get_binary">
        <doc xml:whitespace="preserve">Returns the first binary value associated with @key from @data. If @key has
no first value, or value is not a gfloat, or @key is not in data, then %NULL
is returned.

successful @size will be set the to the buffer size.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">buffer location associated with the @key, or %NULL in other case. If</doc>
          <type name="guint8" c:type="guint8*"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to use</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
          <parameter name="size"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">location to store the buffer size</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_float"
              c:identifier="grl_data_get_float"
              version="0.1.5">
        <doc xml:whitespace="preserve">Returns the first float value associated with @key from @data. If @key has no
first value, or value is not a gfloat, or @key is not in data, then 0 is
returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">float value associated with @key, or 0 in other case.</doc>
          <type name="gfloat" c:type="gfloat"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to use</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_int" c:identifier="grl_data_get_int" version="0.1.4">
        <doc xml:whitespace="preserve">Returns the first int value associated with @key from @data. If @key has no
first value, or value is not a gint, or @key is not in data, then 0 is
returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">int value associated with @key, or 0 in other case.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to use</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_keys" c:identifier="grl_data_get_keys" version="0.1.4">
        <doc xml:whitespace="preserve">Returns a list with keys contained in @data.

keys. The content of the list should not be modified or freed. Use
g_list_free() when done using the list.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">an array with the</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="GObject.ParamSpec"/>
          </type>
        </return-value>
      </method>
      <method name="get_overwrite"
              c:identifier="grl_data_get_overwrite"
              version="0.1.4"
              deprecated="0.1.13">
        <doc xml:whitespace="preserve">Checks if old values are replaced when calling #grl_data_set.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if values will be overwritten.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="get_related_keys"
              c:identifier="grl_data_get_related_keys"
              version="0.1.10">
        <doc xml:whitespace="preserve">Returns a set containing the values for @key and related keys at position
@index from @data.

If user changes any of the values in the related keys, the changes will
become permanent.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GrlRelatedKeys. Do not free it.</doc>
          <type name="RelatedKeys" c:type="GrlRelatedKeys*"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">a metadata key</doc>
            <type name="KeyID" c:type="GrlKeyID"/>
          </parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:whitespace="preserve">element to retrieve, starting at 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_single_values_for_key"
              c:identifier="grl_data_get_single_values_for_key"
              version="0.1.13">
        <doc xml:whitespace="preserve">Returns all non-%NULL values for @key from @data. This ignores related keys.

values. Do not change or free the values. Free the list with #g_list_free.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a #GList with</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="GObject.Value"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">a metadata key</doc>
            <type name="KeyID" c:type="GrlKeyID"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_single_values_for_key_string"
              c:identifier="grl_data_get_single_values_for_key_string"
              version="0.1.13">
        <doc xml:whitespace="preserve">Returns all non-%NULL values for @key from @data. @key must have been
registered as a string-type key. This ignores related keys.

not change or free the strings. Free the list with #g_list_free.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a #GList with values. Do</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">a metadata key</doc>
            <type name="KeyID" c:type="GrlKeyID"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_string"
              c:identifier="grl_data_get_string"
              version="0.1.4">
        <doc xml:whitespace="preserve">Returns the first string value associated with @key from @data. If @key has
no first value, or value is not string, or @key is not in @data, then %NULL
is returned.

not change nor free the value.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">string associated with @key, or %NULL in other case. Caller should</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to use</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_key" c:identifier="grl_data_has_key" version="0.1.4">
        <doc xml:whitespace="preserve">Checks if @key is in @data.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @key is in @data, %FALSE in other case.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to search</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
        </parameters>
      </method>
      <method name="key_is_known"
              c:identifier="grl_data_key_is_known"
              version="0.1.4"
              deprecated="Use grl_data_has_key() instead"
              deprecated-version="0.1.13">
        <doc xml:whitespace="preserve">Checks if the @key has a first value in @data.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if key has a value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to search</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
        </parameters>
      </method>
      <method name="length" c:identifier="grl_data_length" version="0.1.10">
        <doc xml:whitespace="preserve">Returns how many values @key or related keys have in @data: if @key has no
value, but a related key has, then it is counted as positive.

As example, let's think in three related keys, K1, K2 and K3, and then thinks
we have added several values for those keys, as:

(V10, V20, V30),, (V11, NULL, V31), (V12, NULL, V32)

Therefore, when invoking grl_data_length (data, K2) it will return 3:
considering K2 and the related keys (K1 and K3), there are 3 values.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">number of values</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">a metadata key</doc>
            <type name="KeyID" c:type="GrlKeyID"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="grl_data_remove" version="0.1.4">
        <doc xml:whitespace="preserve">Removes the first value for @key from @data. If there are other keys related
to @key their values will also be removed from @data.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to remove</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_nth"
              c:identifier="grl_data_remove_nth"
              version="0.1.10">
        <doc xml:whitespace="preserve">Removes the value at position @index for @key from @data. If there are other
keys related to @key, their values at position @index will also be removed
from @data.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">a metadata key</doc>
            <type name="KeyID" c:type="GrlKeyID"/>
          </parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:whitespace="preserve">index of key to be removed, starting at 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="grl_data_set" version="0.1.4">
        <doc xml:whitespace="preserve">Sets the first value associated with @key in @data. If key already has a
value old value is freed and the new one is set.

Also, checks that @value is compliant with @key specification, modifying it
accordingly. For instance, if @key requires a number between 0 and 10, but
@value is outside this range, it will be adapted accordingly.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to change or add</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_binary" c:identifier="grl_data_set_binary">
        <doc xml:whitespace="preserve">Sets the first binary value associated with @key in @data. If @key already
has a first value old value is replaced by the new one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to change or add</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
          <parameter name="buf" transfer-ownership="none">
            <doc xml:whitespace="preserve">buffer holding the data</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">size of the buffer</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_float"
              c:identifier="grl_data_set_float"
              version="0.1.5">
        <doc xml:whitespace="preserve">Sets the first float value associated with @key in @data. If @key already has
a first value old value is replaced by the new one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to change or add</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
          <parameter name="floatvalue" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_int" c:identifier="grl_data_set_int" version="0.1.4">
        <doc xml:whitespace="preserve">Sets the first int value associated with @key in @data. If @key already has a
first value old value is replaced by the new one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to change or add</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
          <parameter name="intvalue" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_overwrite"
              c:identifier="grl_data_set_overwrite"
              version="0.1.4"
              deprecated="0.1.13">
        <doc xml:whitespace="preserve">This controls if #grl_data_set will overwrite the current value of a property
with the new one.

Set it to %TRUE so old values are overwritten, or %FALSE in other case
(default is %FALSE).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="overwrite" transfer-ownership="none">
            <doc xml:whitespace="preserve">if data can be overwritten</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_related_keys"
              c:identifier="grl_data_set_related_keys"
              version="0.1.10">
        <doc xml:whitespace="preserve">Updates the values at position @index in @data with values in @relkeys.

@data will take ownership of @relkeys, so do not free it after invoking this
function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="relkeys" transfer-ownership="none">
            <doc xml:whitespace="preserve">a set of related keys</doc>
            <type name="RelatedKeys" c:type="GrlRelatedKeys*"/>
          </parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:whitespace="preserve">position to be updated, starting at 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string"
              c:identifier="grl_data_set_string"
              version="0.1.4">
        <doc xml:whitespace="preserve">Sets the first string value associated with @key in @data. If @key already
has a value old value is freed and the new one is set.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to change or add</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
          <parameter name="strvalue" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="overwrite" writable="1" transfer-ownership="none">
        <type name="gboolean"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="DataPrivate" c:type="GrlDataPrivate*"/>
      </field>
      <field name="_grl_reserved">
        <array zero-terminated="0" c:type="gpointer" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="DataClass"
            c:type="GrlDataClass"
            glib:is-gtype-struct-for="Data">
      <doc xml:whitespace="preserve">Grilo Data class</doc>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="DataPrivate" c:type="GrlDataPrivate" disguised="1">
    </record>
    <constant name="KEYID_FORMAT" value="p" c:type="GRL_KEYID_FORMAT">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <record name="LogDomain" c:type="GrlLogDomain" disguised="1">
      <method name="free" c:identifier="grl_log_domain_free">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </method>
      <function name="new"
                c:identifier="grl_log_domain_new"
                version="0.1.7"
                introspectable="0">
        <return-value>
          <doc xml:whitespace="preserve">The new log domain</doc>
          <type name="LogDomain" c:type="GrlLogDomain*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:whitespace="preserve">The name for the new log domain</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="LogLevel" c:type="GrlLogLevel">
      <doc xml:whitespace="preserve">Grilo log levels. Defines the level of verbosity selected in Grilo.</doc>
      <member name="none" value="0" c:identifier="GRL_LOG_LEVEL_NONE"/>
      <member name="error" value="1" c:identifier="GRL_LOG_LEVEL_ERROR"/>
      <member name="warning" value="2" c:identifier="GRL_LOG_LEVEL_WARNING"/>
      <member name="message" value="3" c:identifier="GRL_LOG_LEVEL_MESSAGE"/>
      <member name="info" value="4" c:identifier="GRL_LOG_LEVEL_INFO"/>
      <member name="debug" value="5" c:identifier="GRL_LOG_LEVEL_DEBUG"/>
      <member name="last" value="6" c:identifier="GRL_LOG_LEVEL_LAST"/>
    </enumeration>
    <constant name="MEDIA_PLUGIN_AUTHOR"
              value="author"
              c:type="GRL_MEDIA_PLUGIN_AUTHOR">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MEDIA_PLUGIN_DESCRIPTION"
              value="description"
              c:type="GRL_MEDIA_PLUGIN_DESCRIPTION">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MEDIA_PLUGIN_LICENSE"
              value="license"
              c:type="GRL_MEDIA_PLUGIN_LICENSE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MEDIA_PLUGIN_NAME"
              value="name"
              c:type="GRL_MEDIA_PLUGIN_NAME">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MEDIA_PLUGIN_SITE"
              value="site"
              c:type="GRL_MEDIA_PLUGIN_SITE">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MEDIA_PLUGIN_VERSION"
              value="version"
              c:type="GRL_MEDIA_PLUGIN_VERSION">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="METADATA_KEY_CHILDCOUNT_UNKNOWN"
              value="-1"
              c:type="GRL_METADATA_KEY_CHILDCOUNT_UNKNOWN">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="Media"
           c:symbol-prefix="media"
           c:type="GrlMedia"
           parent="Data"
           glib:type-name="GrlMedia"
           glib:get-type="grl_media_get_type"
           glib:type-struct="MediaClass">
      <constructor name="new" c:identifier="grl_media_new" version="0.1.4">
        <doc xml:whitespace="preserve">Creates a new data media object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly-allocated data media.</doc>
          <type name="Media" c:type="GrlMedia*"/>
        </return-value>
      </constructor>
      <function name="unserialize"
                c:identifier="grl_media_unserialize"
                version="0.1.6">
        <doc xml:whitespace="preserve">Unserializes a GrlMedia.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the GrlMedia from the serial</doc>
          <type name="Media" c:type="GrlMedia*"/>
        </return-value>
        <parameters>
          <parameter name="serial" transfer-ownership="none">
            <doc xml:whitespace="preserve">a serialized media</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_author"
              c:identifier="grl_media_add_author"
              version="0.1.10">
        <doc xml:whitespace="preserve">Adds a new author to @media.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="author" transfer-ownership="none">
            <doc xml:whitespace="preserve">an author for @media</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_external_player"
              c:identifier="grl_media_add_external_player"
              version="0.1.10">
        <doc xml:whitespace="preserve">Adds a new external player to @media.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="player" transfer-ownership="none">
            <doc xml:whitespace="preserve">an external player for @media</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_external_url"
              c:identifier="grl_media_add_external_url"
              version="0.1.10">
        <doc xml:whitespace="preserve">Adds a new external url to @media.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <doc xml:whitespace="preserve">an external url for @media</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_thumbnail"
              c:identifier="grl_media_add_thumbnail"
              version="0.1.10">
        <doc xml:whitespace="preserve">Adds a new thumbnail to @media.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="thumbnail" transfer-ownership="none">
            <doc xml:whitespace="preserve">a thumbnail for @media</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_thumbnail_binary"
              c:identifier="grl_media_add_thumbnail_binary"
              version="0.1.10">
        <doc xml:whitespace="preserve">Adds a new thumbnail to @media.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="thumbnail" transfer-ownership="none">
            <doc xml:whitespace="preserve">a buffer containing the thumbnail for @media</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">size of buffer</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_url_data"
              c:identifier="grl_media_add_url_data"
              version="0.1.10">
        <doc xml:whitespace="preserve">Adds a new media's URL with its mime-type.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <doc xml:whitespace="preserve">a media's URL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="mime" transfer-ownership="none">
            <doc xml:whitespace="preserve">th @url mime type</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_author"
              c:identifier="grl_media_get_author"
              version="0.1.4">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the media's author</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_author_nth"
              c:identifier="grl_media_get_author_nth"
              version="0.1.10">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the n-th media's author.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <doc xml:whitespace="preserve">element to retrieve</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_certificate"
              c:identifier="grl_media_get_certificate"
              version="0.1.6">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the media's certificate</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_creation_date"
              c:identifier="grl_media_get_creation_date"
              version="0.1.12">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">date when media was created</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_date"
              c:identifier="grl_media_get_date"
              version="0.1.4">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the media's date (TBD)</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_description"
              c:identifier="grl_media_get_description"
              version="0.1.4">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the media's description</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_duration"
              c:identifier="grl_media_get_duration"
              version="0.1.4">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the media's duration</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_external_url"
              c:identifier="grl_media_get_external_url"
              version="0.1.6">
        <doc xml:whitespace="preserve">where the user play the media.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">URL of an external location</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_external_url_nth"
              c:identifier="grl_media_get_external_url_nth"
              version="0.1.10">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the n-th media's external location where the user can play it.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <doc xml:whitespace="preserve">element to retrieve</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="grl_media_get_id" version="0.1.4">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the media's identifier</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_last_played"
              c:identifier="grl_media_get_last_played"
              version="0.1.4">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the media's last played time</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_last_position"
              c:identifier="grl_media_get_last_position"
              version="0.1.4">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the media's last_played position (in seconds)</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_license"
              c:identifier="grl_media_get_license"
              version="0.1.6">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the license the media is under</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_mime"
              c:identifier="grl_media_get_mime"
              version="0.1.4">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the media's mime-type</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_play_count"
              c:identifier="grl_media_get_play_count"
              version="0.1.4">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the media's play count</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_player"
              c:identifier="grl_media_get_player"
              version="0.1.6">
        <doc xml:whitespace="preserve">object for this media</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">URL of an external player</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_player_nth"
              c:identifier="grl_media_get_player_nth"
              version="0.1.10">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the n-th media's external player object.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <doc xml:whitespace="preserve">element to retrieve</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_rating"
              c:identifier="grl_media_get_rating"
              version="0.1.5">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the media's rating</doc>
          <type name="gfloat" c:type="gfloat"/>
        </return-value>
      </method>
      <method name="get_site"
              c:identifier="grl_media_get_site"
              version="0.1.4">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the media's site</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_source"
              c:identifier="grl_media_get_source"
              version="0.1.4">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the media's source</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_studio"
              c:identifier="grl_media_get_studio"
              version="0.1.6">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the studio the media is from</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_thumbnail"
              c:identifier="grl_media_get_thumbnail"
              version="0.1.4">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the media's thumbnail URL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_thumbnail_binary"
              c:identifier="grl_media_get_thumbnail_binary"
              version="0.1.9">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the media's thumbnail data and set size to the thumbnail buffer size</doc>
          <type name="guint8" c:type="guint8*"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">pointer to storing the thumbnail buffer size</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_thumbnail_binary_nth"
              c:identifier="grl_media_get_thumbnail_binary_nth"
              version="0.1.10">
        <doc xml:whitespace="preserve">buffer size.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the n-th media's thumbnail binary and sets size to the thumbnail</doc>
          <type name="guint8" c:type="guint8*"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">pointer to store the thumbnail buffer size</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:whitespace="preserve">element to retrieve</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_thumbnail_nth"
              c:identifier="grl_media_get_thumbnail_nth"
              version="0.1.10">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the n-th media's thumbnail.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <doc xml:whitespace="preserve">element to retrieve</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="grl_media_get_title"
              version="0.1.4">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the media's title</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_url" c:identifier="grl_media_get_url" version="0.1.4">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the media's URL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_url_data"
              c:identifier="grl_media_get_url_data"
              version="0.1.10">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the media's URL and its mime-type.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="mime"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">the mime-type, or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_url_data_nth"
              c:identifier="grl_media_get_url_data_nth"
              version="0.1.10">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the n-th media's URL and its mime-type.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <doc xml:whitespace="preserve">element to retrieve</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="mime"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">the mime-type, or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="serialize"
              c:identifier="grl_media_serialize"
              version="0.1.6">
        <doc xml:whitespace="preserve">Serializes a GrlMedia into a string. It does a basic serialization.

See grl_media_serialize_extended() to get more serialization approaches.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">serialized media</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="serialize_extended"
              c:identifier="grl_media_serialize_extended"
              version="0.1.6"
              introspectable="0">
        <doc xml:whitespace="preserve">Serializes a GrlMedia into a string.

See grl_media_unserialize() to recover back the GrlMedia from the string.

If serialization type is @GRL_MEDIA_SERIALIZE_PARTIAL then it requires a
@GList with the properties to consider in serialization (id and source are
always considered).</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">serialized media</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="serial_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">type of serialization</doc>
            <type name="MediaSerializeType" c:type="GrlMediaSerializeType"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </method>
      <method name="set_author"
              c:identifier="grl_media_set_author"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the media's author</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="author" transfer-ownership="none">
            <doc xml:whitespace="preserve">the media's author</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_certificate"
              c:identifier="grl_media_set_certificate"
              version="0.1.6">
        <doc xml:whitespace="preserve">Set the media certificate</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="certificate" transfer-ownership="none">
            <doc xml:whitespace="preserve">The rating certificate of the media</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_creation_date"
              c:identifier="grl_media_set_creation_date"
              version="0.1.12">
        <doc xml:whitespace="preserve">Set the creation_date of the media</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="creation_date" transfer-ownership="none">
            <doc xml:whitespace="preserve">date when media was created</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_date" c:identifier="grl_media_set_date">
        <doc xml:whitespace="preserve">Set the media's date (TBD)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="date" transfer-ownership="none">
            <doc xml:whitespace="preserve">the date</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_description"
              c:identifier="grl_media_set_description"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the media's description</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="description" transfer-ownership="none">
            <doc xml:whitespace="preserve">the description</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_duration"
              c:identifier="grl_media_set_duration"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the media's duration</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:whitespace="preserve">the duration</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_external_player"
              c:identifier="grl_media_set_external_player"
              version="0.1.6">
        <doc xml:whitespace="preserve">Set the location of a player for the media (usually a flash player)</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="player" transfer-ownership="none">
            <doc xml:whitespace="preserve">location of an external player for this media</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_external_url"
              c:identifier="grl_media_set_external_url"
              version="0.1.6">
        <doc xml:whitespace="preserve">Set an external location where users can play the media</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <doc xml:whitespace="preserve">external location where this media can be played.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id" c:identifier="grl_media_set_id" version="0.1.4">
        <doc xml:whitespace="preserve">Set the media identifier</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the identifier of the media</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_last_played"
              c:identifier="grl_media_set_last_played"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the media last played date</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="last_played" transfer-ownership="none">
            <doc xml:whitespace="preserve">date when the media was last played</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_last_position"
              c:identifier="grl_media_set_last_position"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the media last played position</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="last_position" transfer-ownership="none">
            <doc xml:whitespace="preserve">second at which the media playback was interrupted</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_license"
              c:identifier="grl_media_set_license"
              version="0.1.6">
        <doc xml:whitespace="preserve">Set the media license</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="license" transfer-ownership="none">
            <doc xml:whitespace="preserve">The license of the media</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mime"
              c:identifier="grl_media_set_mime"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the media's mime-type</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mime" transfer-ownership="none">
            <doc xml:whitespace="preserve">the mime type</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_play_count"
              c:identifier="grl_media_set_play_count"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the media play count</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="play_count" transfer-ownership="none">
            <doc xml:whitespace="preserve">the play count</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_rating"
              c:identifier="grl_media_set_rating"
              version="0.1.5">
        <doc xml:whitespace="preserve">This method receives a rating and its scale and normalizes it</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="rating" transfer-ownership="none">
            <doc xml:whitespace="preserve">a rating value</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="max" transfer-ownership="none">
            <doc xml:whitespace="preserve">maximum rating value</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_site"
              c:identifier="grl_media_set_site"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the media's site</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="site" transfer-ownership="none">
            <doc xml:whitespace="preserve">the site</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_source"
              c:identifier="grl_media_set_source"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the media's source</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:whitespace="preserve">the source</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_studio"
              c:identifier="grl_media_set_studio"
              version="0.1.6">
        <doc xml:whitespace="preserve">Set the media studio</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="studio" transfer-ownership="none">
            <doc xml:whitespace="preserve">The studio the media is from</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_thumbnail"
              c:identifier="grl_media_set_thumbnail"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the media's thumbnail URL</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="thumbnail" transfer-ownership="none">
            <doc xml:whitespace="preserve">the thumbnail URL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_thumbnail_binary"
              c:identifier="grl_media_set_thumbnail_binary"
              version="0.1.9">
        <doc xml:whitespace="preserve">Set the media's binary thumbnail</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="thumbnail" transfer-ownership="none">
            <doc xml:whitespace="preserve">thumbnail buffer</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">thumbnail buffer size</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="grl_media_set_title"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the media's title</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <doc xml:whitespace="preserve">the title</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_url" c:identifier="grl_media_set_url" version="0.1.4">
        <doc xml:whitespace="preserve">Set the media's URL</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <doc xml:whitespace="preserve">the media's URL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_url_data"
              c:identifier="grl_media_set_url_data"
              version="0.1.10">
        <doc xml:whitespace="preserve">Set the media's URL and its mime-type.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <doc xml:whitespace="preserve">the media's URL</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="mime" transfer-ownership="none">
            <doc xml:whitespace="preserve">the @url mime type</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Data" c:type="GrlData"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <class name="MediaAudio"
           c:symbol-prefix="media_audio"
           c:type="GrlMediaAudio"
           parent="Media"
           glib:type-name="GrlMediaAudio"
           glib:get-type="grl_media_audio_get_type"
           glib:type-struct="MediaAudioClass">
      <constructor name="new"
                   c:identifier="grl_media_audio_new"
                   version="0.1.4">
        <doc xml:whitespace="preserve">Creates a new data audio object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly-allocated data audio.</doc>
          <type name="Media" c:type="GrlMedia*"/>
        </return-value>
      </constructor>
      <method name="add_artist"
              c:identifier="grl_media_audio_add_artist"
              version="0.1.10">
        <doc xml:whitespace="preserve">Adds a new artist to @audio.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="artist" transfer-ownership="none">
            <doc xml:whitespace="preserve">an audio's artist</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_genre"
              c:identifier="grl_media_audio_add_genre"
              version="0.1.10">
        <doc xml:whitespace="preserve">Adds a new genre to @audio.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="genre" transfer-ownership="none">
            <doc xml:whitespace="preserve">an audio's genre</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_lyrics"
              c:identifier="grl_media_audio_add_lyrics"
              version="0.1.10">
        <doc xml:whitespace="preserve">Adds a new lyrics to @audio.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="lyrics" transfer-ownership="none">
            <doc xml:whitespace="preserve">an audio's lyrics</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_url_data"
              c:identifier="grl_media_audio_add_url_data"
              version="0.1.10">
        <doc xml:whitespace="preserve">Sets all the keys related with the URL of a media resource and adds it to
@audio (useful for resources with more than one URL).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <doc xml:whitespace="preserve">an audio's url</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="mime" transfer-ownership="none">
            <doc xml:whitespace="preserve">the @url mime-type</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="bitrate" transfer-ownership="none">
            <doc xml:whitespace="preserve">the @url bitrate, or -1 to ignore</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_album"
              c:identifier="grl_media_audio_get_album"
              version="0.1.4">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the album of the audio</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_artist"
              c:identifier="grl_media_audio_get_artist"
              version="0.1.4">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the artist of the audio</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_artist_nth"
              c:identifier="grl_media_audio_get_artist_nth"
              version="0.1.10">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the n-th artist of the audio</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <doc xml:whitespace="preserve">element to retrieve, starting at 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_bitrate"
              c:identifier="grl_media_audio_get_bitrate"
              version="0.1.4">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the bitrate of the audio</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_genre"
              c:identifier="grl_media_audio_get_genre"
              version="0.1.4">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the genre of the audio</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_genre_nth"
              c:identifier="grl_media_audio_get_genre_nth"
              version="0.1.10">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the n-th genre of the audio</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <doc xml:whitespace="preserve">element to retrieve, starting at 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_lyrics"
              c:identifier="grl_media_audio_get_lyrics"
              version="0.1.4">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the lyrics of the audio</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_lyrics_nth"
              c:identifier="grl_media_audio_get_lyrics_nth"
              version="0.1.10">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the n-th lyrics of the audio</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <doc xml:whitespace="preserve">element to retrieve, starting at 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_track_number"
              c:identifier="grl_media_audio_get_track_number"
              version="0.1.17">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the track number of the audio</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_url_data"
              c:identifier="grl_media_audio_get_url_data"
              version="0.1.10">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">all the keys related with the URL of an audio resource in one go.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="mime"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">the url mime-type, or %NULL to ignore</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="bitrate"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">the url bitrate, or %NULL to ignore</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_url_data_nth"
              c:identifier="grl_media_audio_get_url_data_nth"
              version="0.1.10">
        <doc xml:whitespace="preserve">in one go.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">all the keys related with the URL number @index of an audio resource</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <doc xml:whitespace="preserve">element to retrieve, starting at 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="mime"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">the url mime-type, or %NULL to ignore</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="bitrate"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">the url bitrate, or %NULL to ignore</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_album"
              c:identifier="grl_media_audio_set_album"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the album of the audio</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="album" transfer-ownership="none">
            <doc xml:whitespace="preserve">the audio's album</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_artist"
              c:identifier="grl_media_audio_set_artist"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the artist of the audio</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="artist" transfer-ownership="none">
            <doc xml:whitespace="preserve">the audio's artist</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_bitrate"
              c:identifier="grl_media_audio_set_bitrate"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the bitrate of the audio</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bitrate" transfer-ownership="none">
            <doc xml:whitespace="preserve">the audio's bitrate</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_genre"
              c:identifier="grl_media_audio_set_genre"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the genre of the audio</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="genre" transfer-ownership="none">
            <doc xml:whitespace="preserve">the audio's genre</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lyrics"
              c:identifier="grl_media_audio_set_lyrics"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the lyrics of the audio</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="lyrics" transfer-ownership="none">
            <doc xml:whitespace="preserve">the audio's lyrics</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_track_number"
              c:identifier="grl_media_audio_set_track_number"
              version="0.1.17">
        <doc xml:whitespace="preserve">Set the track number of the audio</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="track_number" transfer-ownership="none">
            <doc xml:whitespace="preserve">the audio's track number</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_url_data"
              c:identifier="grl_media_audio_set_url_data"
              version="0.1.10">
        <doc xml:whitespace="preserve">Sets all the keys related with the URL of an audio resource in one go.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <doc xml:whitespace="preserve">the audio's url</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="mime" transfer-ownership="none">
            <doc xml:whitespace="preserve">the @url mime-type</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="bitrate" transfer-ownership="none">
            <doc xml:whitespace="preserve">the @url bitrate, or -1 to ignore</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Media" c:type="GrlMedia"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="MediaAudioClass"
            c:type="GrlMediaAudioClass"
            glib:is-gtype-struct-for="MediaAudio">
      <doc xml:whitespace="preserve">Grilo Media audio Class</doc>
      <field name="parent_class">
        <type name="MediaClass" c:type="GrlMediaClass"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="MediaBox"
           c:symbol-prefix="media_box"
           c:type="GrlMediaBox"
           parent="Media"
           glib:type-name="GrlMediaBox"
           glib:get-type="grl_media_box_get_type"
           glib:type-struct="MediaBoxClass">
      <constructor name="new" c:identifier="grl_media_box_new" version="0.1.4">
        <doc xml:whitespace="preserve">Creates a new data box object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly-allocated data box.</doc>
          <type name="Media" c:type="GrlMedia*"/>
        </return-value>
      </constructor>
      <method name="get_childcount"
              c:identifier="grl_media_box_get_childcount"
              version="0.1.4">
        <doc xml:whitespace="preserve">Number of children of this box.

unknown.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">number of children, or #GRL_METADATA_KEY_CHILDCOUNT_UNKNOWN if</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="set_childcount"
              c:identifier="grl_media_box_set_childcount"
              version="0.1.4">
        <doc xml:whitespace="preserve">Sets the number of children of this box. Use
#GRL_METADATA_KEY_CHILDCOUNT_UNKNOWN if it is unknown.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="childcount" transfer-ownership="none">
            <doc xml:whitespace="preserve">number of children</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Media" c:type="GrlMedia"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="MediaBoxClass"
            c:type="GrlMediaBoxClass"
            glib:is-gtype-struct-for="MediaBox">
      <doc xml:whitespace="preserve">Grilo Media box Class</doc>
      <field name="parent_class">
        <type name="MediaClass" c:type="GrlMediaClass"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="MediaClass"
            c:type="GrlMediaClass"
            glib:is-gtype-struct-for="Media">
      <doc xml:whitespace="preserve">Grilo Media Class</doc>
      <field name="parent_class">
        <type name="DataClass" c:type="GrlDataClass"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="MediaImage"
           c:symbol-prefix="media_image"
           c:type="GrlMediaImage"
           parent="Media"
           glib:type-name="GrlMediaImage"
           glib:get-type="grl_media_image_get_type"
           glib:type-struct="MediaImageClass">
      <constructor name="new"
                   c:identifier="grl_media_image_new"
                   version="0.1.4">
        <doc xml:whitespace="preserve">Creates a new data image object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly-allocated data image.</doc>
          <type name="Media" c:type="GrlMedia*"/>
        </return-value>
      </constructor>
      <method name="add_url_data"
              c:identifier="grl_media_image_add_url_data"
              version="0.1.10">
        <doc xml:whitespace="preserve">Sets all the keys related with the URL of a media resource and adds it to
@image (useful for resources with more than one URL).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <doc xml:whitespace="preserve">a image's url</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="mime" transfer-ownership="none">
            <doc xml:whitespace="preserve">image mime-type</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">image width, or -1 to ignore</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">image height, or -1 to ignore</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_camera_model"
              c:identifier="grl_media_image_get_camera_model"
              version="0.1.12">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">model of camera used to take picture</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_exposure_time"
              c:identifier="grl_media_image_get_exposure_time"
              version="0.1.12">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">picture's exposure time</doc>
          <type name="gfloat" c:type="gfloat"/>
        </return-value>
      </method>
      <method name="get_flash_used"
              c:identifier="grl_media_image_get_flash_used"
              version="0.1.12">
        <doc xml:whitespace="preserve">See
http://library.gnome.org/devel/ontology/unstable/nmm-classes.html#nmm-Flash</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">whether the flash was used</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_height"
              c:identifier="grl_media_image_get_height"
              version="0.1.4">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the height of the image</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_iso_speed"
              c:identifier="grl_media_image_get_iso_speed"
              version="0.1.12">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">picture's iso speed</doc>
          <type name="gfloat" c:type="gfloat"/>
        </return-value>
      </method>
      <method name="get_orientation"
              c:identifier="grl_media_image_get_orientation"
              version="0.1.12">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">degrees clockwise orientation of the picture</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_url_data"
              c:identifier="grl_media_image_get_url_data"
              version="0.1.10">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">all the keys related with the URL of an image resource in one go.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="mime"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">the url mime-type, or %NULL to ignore</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the width, or %NULL to ignore</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the height, or %NULL to ignore</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_url_data_nth"
              c:identifier="grl_media_image_get_url_data_nth"
              version="0.1.10">
        <doc xml:whitespace="preserve">in one go.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">all the keys related with the URL number @index of an image resource</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <doc xml:whitespace="preserve">element to retrieve</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="mime"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">the url mime-type, or %NULL to ignore</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the width, or %NULL to ignore</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the height, or %NULL to ignore</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_width"
              c:identifier="grl_media_image_get_width"
              version="0.1.4">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the width of the image</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="set_camera_model"
              c:identifier="grl_media_image_set_camera_model">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="camera_model" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_exposure_time"
              c:identifier="grl_media_image_set_exposure_time">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="exposure_time" transfer-ownership="none">
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_flash_used"
              c:identifier="grl_media_image_set_flash_used">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="flash_used" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_height"
              c:identifier="grl_media_image_set_height"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the height of the image</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the image's height</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_iso_speed"
              c:identifier="grl_media_image_set_iso_speed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iso_speed" transfer-ownership="none">
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_orientation"
              c:identifier="grl_media_image_set_orientation">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="orientation" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="grl_media_image_set_size"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the size of the image</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the image's width</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the image's height</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_url_data"
              c:identifier="grl_media_image_set_url_data"
              version="0.1.10">
        <doc xml:whitespace="preserve">Sets all the keys related with the URL of an image resource in one go.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <doc xml:whitespace="preserve">the image's url</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="mime" transfer-ownership="none">
            <doc xml:whitespace="preserve">image mime-type</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">image width, or -1 to ignore</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">image height, or -1 to ignore</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_width"
              c:identifier="grl_media_image_set_width"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the width of the image</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the image's width</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Media" c:type="GrlMedia"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="MediaImageClass"
            c:type="GrlMediaImageClass"
            glib:is-gtype-struct-for="MediaImage">
      <doc xml:whitespace="preserve">Grilo Media image Class</doc>
      <field name="parent_class">
        <type name="MediaClass" c:type="GrlMediaClass"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="MediaPlugin"
           c:symbol-prefix="media_plugin"
           c:type="GrlMediaPlugin"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GrlMediaPlugin"
           glib:get-type="grl_media_plugin_get_type"
           glib:type-struct="MediaPluginClass">
      <method name="get_author"
              c:identifier="grl_media_plugin_get_author"
              version="0.1.1">
        <doc xml:whitespace="preserve">Get the author of the plugin</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the author of the @plugin</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_description"
              c:identifier="grl_media_plugin_get_description"
              version="0.1.1">
        <doc xml:whitespace="preserve">Get the description of the plugin</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the description of the @plugin</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_filename"
              c:identifier="grl_media_plugin_get_filename"
              version="0.1.6">
        <doc xml:whitespace="preserve">Get the filename containing the plugin</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the filename containing @plugin</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_id"
              c:identifier="grl_media_plugin_get_id"
              version="0.1.1">
        <doc xml:whitespace="preserve">Get the id of the plugin</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the id of the @plugin</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_info"
              c:identifier="grl_media_plugin_get_info"
              version="0.1.6">
        <doc xml:whitespace="preserve">Get the information of the @plugin that is associated with the given key</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the information assigned to the given @key or NULL if there is no such information</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">a key representing information about this plugin</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_info_keys"
              c:identifier="grl_media_plugin_get_info_keys"
              version="0.1.6">
        <doc xml:whitespace="preserve">Returns a list of keys that can be queried to retrieve information about the
plugin.

a #GList of strings containing the keys. The content of the list is
owned by the plugin and should not be modified or freed. Use g_list_free()
when done using the list.</doc>
        <return-value transfer-ownership="container">
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
      </method>
      <method name="get_license"
              c:identifier="grl_media_plugin_get_license"
              version="0.1.1">
        <doc xml:whitespace="preserve">Get the license of the plugin</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the license of the @plugin</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_name"
              c:identifier="grl_media_plugin_get_name"
              version="0.1.1">
        <doc xml:whitespace="preserve">Get the name of the plugin</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the name of the @plugin</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_rank"
              c:identifier="grl_media_plugin_get_rank"
              version="0.1.3">
        <doc xml:whitespace="preserve">Get the #GrlPluginRank of the plugin</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the rank of the plugin</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_site"
              c:identifier="grl_media_plugin_get_site"
              version="0.1.1">
        <doc xml:whitespace="preserve">Get the site of the plugin</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the site of the @plugin</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_version"
              c:identifier="grl_media_plugin_get_version"
              version="0.1.1">
        <doc xml:whitespace="preserve">Get the version of the plugin</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the version of the @plugin</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="set_plugin_info"
              c:identifier="grl_media_plugin_set_plugin_info">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="info" transfer-ownership="none">
            <type name="PluginInfo" c:type="GrlPluginInfo*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MediaPluginPrivate" c:type="GrlMediaPluginPrivate*"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="MediaPluginClass"
            c:type="GrlMediaPluginClass"
            glib:is-gtype-struct-for="MediaPlugin">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="MediaPluginPrivate"
            c:type="GrlMediaPluginPrivate"
            disguised="1">
    </record>
    <enumeration name="MediaSerializeType" c:type="GrlMediaSerializeType">
      <doc xml:whitespace="preserve">GrlMedia serialize type</doc>
      <member name="basic" value="0" c:identifier="GRL_MEDIA_SERIALIZE_BASIC"/>
      <member name="partial"
              value="1"
              c:identifier="GRL_MEDIA_SERIALIZE_PARTIAL"/>
      <member name="full" value="2" c:identifier="GRL_MEDIA_SERIALIZE_FULL"/>
    </enumeration>
    <class name="MediaSource"
           c:symbol-prefix="media_source"
           c:type="GrlMediaSource"
           parent="MetadataSource"
           abstract="1"
           glib:type-name="GrlMediaSource"
           glib:get-type="grl_media_source_get_type"
           glib:type-struct="MediaSourceClass">
      <virtual-method name="browse">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bs" transfer-ownership="none">
            <type name="MediaSourceBrowseSpec"
                  c:type="GrlMediaSourceBrowseSpec*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="cancel"
                      invoker="cancel"
                      version="0.1.1"
                      deprecated="Use grl_operation_cancel() instead"
                      deprecated-version="0.1.14">
        <doc xml:whitespace="preserve">Cancel a running method.

The derived class must implement the cancel vmethod in order to honour the
request correctly. Otherwise, the operation will not be interrupted.

In all cases, if this function is called on an ongoing operation, the
corresponding callback will be called with the
@GRL_CORE_ERROR_OPERATION_CANCELLED error set, and no more action will be
taken for that operation after the said callback with error has been called.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="operation_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the identifier of the running operation, as returned by the function that started it</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="media_from_uri">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="mfss" transfer-ownership="none">
            <type name="MediaSourceMediaFromUriSpec"
                  c:type="GrlMediaSourceMediaFromUriSpec*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="metadata">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ms" transfer-ownership="none">
            <type name="MediaSourceMetadataSpec"
                  c:type="GrlMediaSourceMetadataSpec*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="notify_change_start"
                      invoker="notify_change_start"
                      version="0.1.9"
                      throws="1">
        <doc xml:whitespace="preserve">Starts emitting ::content-changed signals when @source discovers changes in
the content. This instructs @source to setup the machinery needed to be aware
of changes in the content.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@TRUE if initialization has succeed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <virtual-method name="notify_change_stop"
                      invoker="notify_change_stop"
                      version="0.1.9"
                      throws="1">
        <doc xml:whitespace="preserve">This will drop emission of ::content-changed signals from @source. When this
is done @source should stop the machinery required for it to track changes in
the content.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@TRUE if stop has succeed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </virtual-method>
      <virtual-method name="query">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="qs" transfer-ownership="none">
            <type name="MediaSourceQuerySpec"
                  c:type="GrlMediaSourceQuerySpec*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ss" transfer-ownership="none">
            <type name="MediaSourceRemoveSpec"
                  c:type="GrlMediaSourceRemoveSpec*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="search">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ss" transfer-ownership="none">
            <type name="MediaSourceSearchSpec"
                  c:type="GrlMediaSourceSearchSpec*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="store">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ss" transfer-ownership="none">
            <type name="MediaSourceStoreSpec"
                  c:type="GrlMediaSourceStoreSpec*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="test_media_from_uri"
                      invoker="test_media_from_uri"
                      version="0.1.7">
        <doc xml:whitespace="preserve">Tests whether @source can instantiate a #GrlMedia object representing
the media resource exposed at @uri.


This method is synchronous.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if it can, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">A URI that can be used to identify a media resource</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="browse"
              c:identifier="grl_media_source_browse"
              version="0.1.4">
        <doc xml:whitespace="preserve">Browse from @skip, a @count number of media elements through an available list.

This method is asynchronous.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the operation identifier</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="container" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a container of data transfer objects</doc>
            <type name="Media" c:type="GrlMedia*"/>
          </parameter>
          <parameter name="keys" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GList of #GrlKeyID&lt;!-- --&gt;s to request</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GObject.ParamSpec"/>
            </type>
          </parameter>
          <parameter name="skip" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number if elements to skip in the browse operation</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of elements to retrieve in the browse operation</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">the resolution mode</doc>
            <type name="MetadataResolutionFlags"
                  c:type="GrlMetadataResolutionFlags"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="6">
            <doc xml:whitespace="preserve">the user defined callback</doc>
            <type name="MediaSourceResultCb" c:type="GrlMediaSourceResultCb"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">the user data to pass in the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="browse_sync"
              c:identifier="grl_media_source_browse_sync"
              version="0.1.6"
              throws="1">
        <doc xml:whitespace="preserve">Browse from @skip, a @count number of media elements through an available
list.

This method is synchronous.

elements. After use g_object_unref() every element and g_list_free() the
list.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GList with #GrlMedia</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Media"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="container" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a container of data transfer objects</doc>
            <type name="Media" c:type="GrlMedia*"/>
          </parameter>
          <parameter name="keys" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GList of #GrlKeyID&lt;!-- --&gt;s to request</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GObject.ParamSpec"/>
            </type>
          </parameter>
          <parameter name="skip" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number if elements to skip in the browse operation</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of elements to retrieve in the browse operation</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">the resolution mode</doc>
            <type name="MetadataResolutionFlags"
                  c:type="GrlMetadataResolutionFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="cancel"
              c:identifier="grl_media_source_cancel"
              version="0.1.1"
              deprecated="Use grl_operation_cancel() instead"
              deprecated-version="0.1.14">
        <doc xml:whitespace="preserve">Cancel a running method.

The derived class must implement the cancel vmethod in order to honour the
request correctly. Otherwise, the operation will not be interrupted.

In all cases, if this function is called on an ongoing operation, the
corresponding callback will be called with the
@GRL_CORE_ERROR_OPERATION_CANCELLED error set, and no more action will be
taken for that operation after the said callback with error has been called.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="operation_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the identifier of the running operation, as returned by the function that started it</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_auto_split_threshold"
              c:identifier="grl_media_source_get_auto_split_threshold"
              version="0.1.1">
        <doc xml:whitespace="preserve">TBD</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the assigned threshold</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_media_from_uri"
              c:identifier="grl_media_source_get_media_from_uri"
              version="0.1.14">
        <doc xml:whitespace="preserve">Creates an instance of #GrlMedia representing the media resource
exposed at @uri.

It is recommended to call grl_media_source_test_media_from_uri() before
invoking this to check whether the target source can theoretically do the
resolution.

This method is asynchronous.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the operation identifier</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">A URI that can be used to identify a media resource</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="keys" transfer-ownership="none">
            <doc xml:whitespace="preserve">A list of keys to resolve</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="KeyID"/>
            </type>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">the resolution mode</doc>
            <type name="MetadataResolutionFlags"
                  c:type="GrlMetadataResolutionFlags"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4">
            <doc xml:whitespace="preserve">the user defined callback</doc>
            <type name="MediaSourceMetadataCb"
                  c:type="GrlMediaSourceMetadataCb"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">the user data to pass in the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_media_from_uri_sync"
              c:identifier="grl_media_source_get_media_from_uri_sync"
              version="0.1.8"
              throws="1">
        <doc xml:whitespace="preserve">Creates an instance of #GrlMedia representing the media resource
exposed at @uri.

It is recommended to call grl_media_source_test_media_from_uri() before
invoking this to check whether the target source can theoretically do the
resolution.

This method is synchronous.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a filled #GrlMedia</doc>
          <type name="Media" c:type="GrlMedia*"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">A URI that can be used to identify a media resource</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="keys" transfer-ownership="none">
            <doc xml:whitespace="preserve">A list of keys to resolve</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="KeyID"/>
            </type>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">the resolution mode</doc>
            <type name="MetadataResolutionFlags"
                  c:type="GrlMetadataResolutionFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_operation_data"
              c:identifier="grl_media_source_get_operation_data"
              version="0.1.1"
              deprecated="Use grl_operation_get_data() instead"
              deprecated-version="0.1.14">
        <doc xml:whitespace="preserve">Obtains the previously attached data</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The previously attached data.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <parameter name="operation_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the identifier of a running operation</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="metadata"
              c:identifier="grl_media_source_metadata"
              version="0.1.6">
        <doc xml:whitespace="preserve">This method is intended to fetch the requested keys of metadata of
a given @media to the media source.

This method is asynchronous.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the operation identifier</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="media" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a data transfer object</doc>
            <type name="Media" c:type="GrlMedia*"/>
          </parameter>
          <parameter name="keys" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GList of #GrlKeyID&lt;!-- --&gt;s to request</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GObject.ParamSpec"/>
            </type>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">the resolution mode</doc>
            <type name="MetadataResolutionFlags"
                  c:type="GrlMetadataResolutionFlags"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4">
            <doc xml:whitespace="preserve">the user defined callback</doc>
            <type name="MediaSourceMetadataCb"
                  c:type="GrlMediaSourceMetadataCb"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">the user data to pass in the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="metadata_sync"
              c:identifier="grl_media_source_metadata_sync"
              version="0.1.6"
              throws="1">
        <doc xml:whitespace="preserve">This method is intended to fetch the requested keys of metadata of
a given @media to the media source.

This method is synchronous.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a filled #GrlMedia</doc>
          <type name="Media" c:type="GrlMedia*"/>
        </return-value>
        <parameters>
          <parameter name="media" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a data transfer object</doc>
            <type name="Media" c:type="GrlMedia*"/>
          </parameter>
          <parameter name="keys" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GList of #GrlKeyID&lt;!-- --&gt;s to request</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GObject.ParamSpec"/>
            </type>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">the resolution mode</doc>
            <type name="MetadataResolutionFlags"
                  c:type="GrlMetadataResolutionFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="notify_change"
              c:identifier="grl_media_source_notify_change"
              version="0.1.9">
        <doc xml:whitespace="preserve">Emits "content-changed" signal to notify subscribers that a change ocurred
in @source.

See #grl_media_source_notify_change_list() function.

&lt;note&gt;
&lt;para&gt;
This function is intended to be used only by plugins.
&lt;/para&gt;
&lt;/note&gt;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="media" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the media which has changed, or @NULL to use the root box.</doc>
            <type name="Media" c:type="GrlMedia*"/>
          </parameter>
          <parameter name="change_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the type of change</doc>
            <type name="MediaSourceChangeType"
                  c:type="GrlMediaSourceChangeType"/>
          </parameter>
          <parameter name="location_unknown" transfer-ownership="none">
            <doc xml:whitespace="preserve">if change has happened in @media or any descendant</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="notify_change_list"
              c:identifier="grl_media_source_notify_change_list"
              version="0.1.14">
        <doc xml:whitespace="preserve">Emits "content-changed" signal to notify subscribers that a change ocurred
in @source.

The function will take ownership of @changed medias and it should not be
manipulated in any way by the caller after invoking this function. If that is
needed, the caller must ref the array in advance.

See GrlMediaSource::content-changed signal.

&lt;note&gt;
&lt;para&gt;
This function is intended to be used only by plugins.
&lt;/para&gt;
&lt;/note&gt;</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="changed_medias" transfer-ownership="full">
            <doc xml:whitespace="preserve">: the list of medias that have changed</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="Media"/>
            </array>
          </parameter>
          <parameter name="change_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the type of change</doc>
            <type name="MediaSourceChangeType"
                  c:type="GrlMediaSourceChangeType"/>
          </parameter>
          <parameter name="location_unknown" transfer-ownership="none">
            <doc xml:whitespace="preserve">if change has happpened in @media or any descendant</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="notify_change_start"
              c:identifier="grl_media_source_notify_change_start"
              version="0.1.9"
              throws="1">
        <doc xml:whitespace="preserve">Starts emitting ::content-changed signals when @source discovers changes in
the content. This instructs @source to setup the machinery needed to be aware
of changes in the content.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@TRUE if initialization has succeed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="notify_change_stop"
              c:identifier="grl_media_source_notify_change_stop"
              version="0.1.9"
              throws="1">
        <doc xml:whitespace="preserve">This will drop emission of ::content-changed signals from @source. When this
is done @source should stop the machinery required for it to track changes in
the content.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@TRUE if stop has succeed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="query"
              c:identifier="grl_media_source_query"
              version="0.1.1">
        <doc xml:whitespace="preserve">Execute a specialized query (specific for each provider) on a media
repository.

It is different from grl_media_source_search() semantically, because
the query implies a carefully crafted string, rather than a simple
string to search.

This method is asynchronous.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the operation identifier</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="query" transfer-ownership="none">
            <doc xml:whitespace="preserve">the query to process</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="keys" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GList of #GrlKeyID&lt;!-- --&gt;s to request</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GObject.ParamSpec"/>
            </type>
          </parameter>
          <parameter name="skip" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number if elements to skip in the query operation</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of elements to retrieve in the query operation</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">the resolution mode</doc>
            <type name="MetadataResolutionFlags"
                  c:type="GrlMetadataResolutionFlags"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="6">
            <doc xml:whitespace="preserve">the user defined callback</doc>
            <type name="MediaSourceResultCb" c:type="GrlMediaSourceResultCb"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">the user data to pass in the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="query_sync"
              c:identifier="grl_media_source_query_sync"
              version="0.1.6"
              throws="1">
        <doc xml:whitespace="preserve">Execute a specialized query (specific for each provider) on a media
repository.

This method is synchronous.

elements. After use g_object_unref() every element and g_list_free() the
list.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GList with #GrlMedia</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Media"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="query" transfer-ownership="none">
            <doc xml:whitespace="preserve">the query to process</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="keys" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GList of #GrlKeyID&lt;!-- --&gt;s to request</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GObject.ParamSpec"/>
            </type>
          </parameter>
          <parameter name="skip" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number if elements to skip in the query operation</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of elements to retrieve in the query operation</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">the resolution mode</doc>
            <type name="MetadataResolutionFlags"
                  c:type="GrlMetadataResolutionFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove"
              c:identifier="grl_media_source_remove"
              version="0.1.4">
        <doc xml:whitespace="preserve">Remove a @media from the @source repository.

This method is asynchronous.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="media" transfer-ownership="none">
            <doc xml:whitespace="preserve">a data transfer object</doc>
            <type name="Media" c:type="GrlMedia*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2">
            <doc xml:whitespace="preserve">the user defined callback</doc>
            <type name="MediaSourceRemoveCb" c:type="GrlMediaSourceRemoveCb"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">the user data to pass in the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_sync"
              c:identifier="grl_media_source_remove_sync"
              version="0.1.6"
              throws="1">
        <doc xml:whitespace="preserve">Remove a @media from the @source repository.

This method is synchronous.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="media" transfer-ownership="none">
            <doc xml:whitespace="preserve">a data transfer object</doc>
            <type name="Media" c:type="GrlMedia*"/>
          </parameter>
        </parameters>
      </method>
      <method name="search"
              c:identifier="grl_media_source_search"
              version="0.1.1">
        <doc xml:whitespace="preserve">Search for the @text string in a media source for data identified with
that string.

If @text is @NULL then no text filter will be applied, and thus, no media
items from @source will be filtered. If @source does not support NULL-text
search operations it should notiy the client by setting
@GRL_CORE_ERROR_SEARCH_NULL_UNSUPPORTED in @callback's error parameter.

This method is asynchronous.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the operation identifier</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">the text to search</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="keys" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GList of #GrlKeyID&lt;!-- --&gt;s to request</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GObject.ParamSpec"/>
            </type>
          </parameter>
          <parameter name="skip" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number if elements to skip in the search operation</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of elements to retrieve in the search operation</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">the resolution mode</doc>
            <type name="MetadataResolutionFlags"
                  c:type="GrlMetadataResolutionFlags"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="6">
            <doc xml:whitespace="preserve">the user defined callback</doc>
            <type name="MediaSourceResultCb" c:type="GrlMediaSourceResultCb"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">the user data to pass in the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_sync"
              c:identifier="grl_media_source_search_sync"
              version="0.1.6"
              throws="1">
        <doc xml:whitespace="preserve">Search for the @text string in a media source for data identified with
that string.

If @text is @NULL then no text filter will be applied, and thus, no media
items from @source will be filtered. If @source does not support NULL-text
search operations it should notiy the client by setting
@GRL_CORE_ERROR_SEARCH_NULL_UNSUPPORTED in the error parameter.

This method is synchronous.

elements. After use g_object_unref() every element and g_list_free() the
list.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GList with #GrlMedia</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Media"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:whitespace="preserve">the text to search</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="keys" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GList of #GrlKeyID&lt;!-- --&gt;s to request</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GObject.ParamSpec"/>
            </type>
          </parameter>
          <parameter name="skip" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number if elements to skip in the search operation</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:whitespace="preserve">the number of elements to retrieve in the search operation</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">the resolution mode</doc>
            <type name="MetadataResolutionFlags"
                  c:type="GrlMetadataResolutionFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_auto_split_threshold"
              c:identifier="grl_media_source_set_auto_split_threshold"
              version="0.1.1">
        <doc xml:whitespace="preserve">TBD</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="threshold" transfer-ownership="none">
            <doc xml:whitespace="preserve">the threshold to request</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_operation_data"
              c:identifier="grl_media_source_set_operation_data"
              version="0.1.1"
              deprecated="Use grl_operation_set_data() instead"
              deprecated-version="0.1.14">
        <doc xml:whitespace="preserve">Attach a pointer to the specific operation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="operation_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the identifier of a running operation</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">the data to attach</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="store"
              c:identifier="grl_media_source_store"
              version="0.1.4">
        <doc xml:whitespace="preserve">Store the @media into the @parent container

This method is asynchronous.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a parent to store the data transfer objects</doc>
            <type name="MediaBox" c:type="GrlMediaBox*"/>
          </parameter>
          <parameter name="media" transfer-ownership="none">
            <doc xml:whitespace="preserve">a data transfer object</doc>
            <type name="Media" c:type="GrlMedia*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3">
            <doc xml:whitespace="preserve">the user defined callback</doc>
            <type name="MediaSourceStoreCb" c:type="GrlMediaSourceStoreCb"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">the user data to pass in the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="store_sync"
              c:identifier="grl_media_source_store_sync"
              version="0.1.6"
              throws="1">
        <doc xml:whitespace="preserve">Store the @media into the @parent container.

This method is synchronous.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a #GrlMediaBox to store the data transfer objects</doc>
            <type name="MediaBox" c:type="GrlMediaBox*"/>
          </parameter>
          <parameter name="media" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GrlMedia data transfer object</doc>
            <type name="Media" c:type="GrlMedia*"/>
          </parameter>
        </parameters>
      </method>
      <method name="test_media_from_uri"
              c:identifier="grl_media_source_test_media_from_uri"
              version="0.1.7">
        <doc xml:whitespace="preserve">Tests whether @source can instantiate a #GrlMedia object representing
the media resource exposed at @uri.


This method is synchronous.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if it can, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:whitespace="preserve">A URI that can be used to identify a media resource</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="auto-split-threshold"
                writable="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">Transparently split queries with count requests
bigger than a certain threshold into smaller queries.</doc>
        <type name="guint"/>
      </property>
      <field name="parent">
        <type name="MetadataSource" c:type="GrlMetadataSource"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MediaSourcePrivate" c:type="GrlMediaSourcePrivate*"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <glib:signal name="content-changed"
                   when="first"
                   action="1"
                   version="0.1.9">
        <doc xml:whitespace="preserve">Signals that the content in the source has changed. @changed_medias is the
list of elements that have changed. Usually these medias are of type
#GrlMediaBox, meaning that the content of that box has changed.

If @location_unknown is @TRUE it means the source cannot establish where the
change happened: could be either in the box, in any child, or in any other
descendant of the box in the hierarchy.

Both @change_type and @location_unknown are applied to all elements in the
list.

For the cases where the source can only signal that a change happened, but
not where, it would use a list with the the root box (@NULL id) and set
location_unknown as @TRUE.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="changed_medias" transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GPtrArray with the medias that changed or a common ancestor of them of type #GrlMediaBox.</doc>
            <array name="GLib.PtrArray">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
          <parameter name="change_type" transfer-ownership="none">
            <doc xml:whitespace="preserve">the kind of change that ocurred</doc>
            <type name="MediaSourceChangeType"/>
          </parameter>
          <parameter name="location_unknown" transfer-ownership="none">
            <doc xml:whitespace="preserve">@TRUE if the change happened in @media itself or in one of its direct children (when @media is a #GrlMediaBox). @FALSE otherwise</doc>
            <type name="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="MediaSourceBrowseSpec" c:type="GrlMediaSourceBrowseSpec">
      <doc xml:whitespace="preserve">Data transport structure used internally by the plugins which support
browse vmethod.</doc>
      <field name="source" writable="1">
        <type name="MediaSource" c:type="GrlMediaSource*"/>
      </field>
      <field name="browse_id" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="container" writable="1">
        <type name="Media" c:type="GrlMedia*"/>
      </field>
      <field name="keys" writable="1">
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="skip" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="count" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="flags" writable="1">
        <type name="MetadataResolutionFlags"
              c:type="GrlMetadataResolutionFlags"/>
      </field>
      <field name="callback" writable="1">
        <type name="MediaSourceResultCb" c:type="GrlMediaSourceResultCb"/>
      </field>
      <field name="user_data" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="MediaSourceChangeType"
                 glib:type-name="GrlMediaSourceChangeType"
                 glib:get-type="grl_media_source_change_type_get_type"
                 c:type="GrlMediaSourceChangeType">
      <doc xml:whitespace="preserve">Specifies which kind of change has happened in the plugin</doc>
      <member name="changed"
              value="0"
              c:identifier="GRL_CONTENT_CHANGED"
              glib:nick="changed"/>
      <member name="added"
              value="1"
              c:identifier="GRL_CONTENT_ADDED"
              glib:nick="added"/>
      <member name="removed"
              value="2"
              c:identifier="GRL_CONTENT_REMOVED"
              glib:nick="removed"/>
    </enumeration>
    <record name="MediaSourceClass"
            c:type="GrlMediaSourceClass"
            glib:is-gtype-struct-for="MediaSource">
      <doc xml:whitespace="preserve">Grilo MediaSource class. Override the vmethods to implement the
source functionality.</doc>
      <field name="parent_class">
        <type name="MetadataSourceClass" c:type="GrlMetadataSourceClass"/>
      </field>
      <field name="browse">
        <callback name="browse">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="MediaSource" c:type="GrlMediaSource*"/>
            </parameter>
            <parameter name="bs" transfer-ownership="none">
              <type name="MediaSourceBrowseSpec"
                    c:type="GrlMediaSourceBrowseSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="search">
        <callback name="search">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="MediaSource" c:type="GrlMediaSource*"/>
            </parameter>
            <parameter name="ss" transfer-ownership="none">
              <type name="MediaSourceSearchSpec"
                    c:type="GrlMediaSourceSearchSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="query">
        <callback name="query">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="MediaSource" c:type="GrlMediaSource*"/>
            </parameter>
            <parameter name="qs" transfer-ownership="none">
              <type name="MediaSourceQuerySpec"
                    c:type="GrlMediaSourceQuerySpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cancel">
        <callback name="cancel">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="MediaSource" c:type="GrlMediaSource*"/>
            </parameter>
            <parameter name="operation_id" transfer-ownership="none">
              <doc xml:whitespace="preserve">the identifier of the running operation, as returned by the function that started it</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="metadata">
        <callback name="metadata">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="MediaSource" c:type="GrlMediaSource*"/>
            </parameter>
            <parameter name="ms" transfer-ownership="none">
              <type name="MediaSourceMetadataSpec"
                    c:type="GrlMediaSourceMetadataSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="store">
        <callback name="store">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="MediaSource" c:type="GrlMediaSource*"/>
            </parameter>
            <parameter name="ss" transfer-ownership="none">
              <type name="MediaSourceStoreSpec"
                    c:type="GrlMediaSourceStoreSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove">
        <callback name="remove">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="MediaSource" c:type="GrlMediaSource*"/>
            </parameter>
            <parameter name="ss" transfer-ownership="none">
              <type name="MediaSourceRemoveSpec"
                    c:type="GrlMediaSourceRemoveSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="test_media_from_uri">
        <callback name="test_media_from_uri">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">%TRUE if it can, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="MediaSource" c:type="GrlMediaSource*"/>
            </parameter>
            <parameter name="uri" transfer-ownership="none">
              <doc xml:whitespace="preserve">A URI that can be used to identify a media resource</doc>
              <type name="utf8" c:type="gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="media_from_uri">
        <callback name="media_from_uri">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="MediaSource" c:type="GrlMediaSource*"/>
            </parameter>
            <parameter name="mfss" transfer-ownership="none">
              <type name="MediaSourceMediaFromUriSpec"
                    c:type="GrlMediaSourceMediaFromUriSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="notify_change_start">
        <callback name="notify_change_start" throws="1">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">@TRUE if initialization has succeed.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="MediaSource" c:type="GrlMediaSource*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="notify_change_stop">
        <callback name="notify_change_stop" throws="1">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">@TRUE if stop has succeed.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="MediaSource" c:type="GrlMediaSource*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="15">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="MediaSourceMediaFromUriSpec"
            c:type="GrlMediaSourceMediaFromUriSpec">
      <doc xml:whitespace="preserve">Data transport structure used internally by the plugins which support
media_from_uri vmethod.</doc>
      <field name="source" writable="1">
        <type name="MediaSource" c:type="GrlMediaSource*"/>
      </field>
      <field name="media_from_uri_id" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="uri" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="keys" writable="1">
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="flags" writable="1">
        <type name="MetadataResolutionFlags"
              c:type="GrlMetadataResolutionFlags"/>
      </field>
      <field name="callback" writable="1">
        <type name="MediaSourceMetadataCb" c:type="GrlMediaSourceMetadataCb"/>
      </field>
      <field name="user_data" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="15">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <callback name="MediaSourceMetadataCb" c:type="GrlMediaSourceMetadataCb">
      <doc xml:whitespace="preserve">Prototype for the callback passed to grl_media_source_metadata()</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="source" transfer-ownership="none">
          <doc xml:whitespace="preserve">a media source</doc>
          <type name="MediaSource" c:type="GrlMediaSource*"/>
        </parameter>
        <parameter name="operation_id" transfer-ownership="none">
          <doc xml:whitespace="preserve">operation identifier</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="media" transfer-ownership="full">
          <doc xml:whitespace="preserve">a data transfer object</doc>
          <type name="Media" c:type="GrlMedia*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="3">
          <doc xml:whitespace="preserve">user data passed to grl_media_source_metadata()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:whitespace="preserve">possible #GError generated at processing</doc>
          <type name="guint" c:type="GError*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="MediaSourceMetadataSpec" c:type="GrlMediaSourceMetadataSpec">
      <doc xml:whitespace="preserve">Data transport structure used internally by the plugins which support
metadata vmethod.</doc>
      <field name="source" writable="1">
        <type name="MediaSource" c:type="GrlMediaSource*"/>
      </field>
      <field name="metadata_id" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="media" writable="1">
        <type name="Media" c:type="GrlMedia*"/>
      </field>
      <field name="keys" writable="1">
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="flags" writable="1">
        <type name="MetadataResolutionFlags"
              c:type="GrlMetadataResolutionFlags"/>
      </field>
      <field name="callback" writable="1">
        <type name="MediaSourceMetadataCb" c:type="GrlMediaSourceMetadataCb"/>
      </field>
      <field name="user_data" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="MediaSourcePrivate"
            c:type="GrlMediaSourcePrivate"
            disguised="1">
    </record>
    <record name="MediaSourceQuerySpec" c:type="GrlMediaSourceQuerySpec">
      <doc xml:whitespace="preserve">Data transport structure used internally by the plugins which support
query vmethod.</doc>
      <field name="source" writable="1">
        <type name="MediaSource" c:type="GrlMediaSource*"/>
      </field>
      <field name="query_id" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="query" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="keys" writable="1">
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="skip" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="count" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="flags" writable="1">
        <type name="MetadataResolutionFlags"
              c:type="GrlMetadataResolutionFlags"/>
      </field>
      <field name="callback" writable="1">
        <type name="MediaSourceResultCb" c:type="GrlMediaSourceResultCb"/>
      </field>
      <field name="user_data" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <callback name="MediaSourceRemoveCb" c:type="GrlMediaSourceRemoveCb">
      <doc xml:whitespace="preserve">Prototype for the callback passed to grl_media_source_remove()</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="source" transfer-ownership="none">
          <doc xml:whitespace="preserve">a media source</doc>
          <type name="MediaSource" c:type="GrlMediaSource*"/>
        </parameter>
        <parameter name="media" transfer-ownership="full">
          <doc xml:whitespace="preserve">a data transfer object</doc>
          <type name="Media" c:type="GrlMedia*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="2">
          <doc xml:whitespace="preserve">user data passed to grl_media_source_remove()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:whitespace="preserve">possible #GError generated at processing</doc>
          <type name="guint" c:type="GError*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="MediaSourceRemoveSpec" c:type="GrlMediaSourceRemoveSpec">
      <doc xml:whitespace="preserve">Data transport structure used internally by the plugins which support
store vmethod.</doc>
      <field name="source" writable="1">
        <type name="MediaSource" c:type="GrlMediaSource*"/>
      </field>
      <field name="media_id" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="media" writable="1">
        <type name="Media" c:type="GrlMedia*"/>
      </field>
      <field name="callback" writable="1">
        <type name="MediaSourceRemoveCb" c:type="GrlMediaSourceRemoveCb"/>
      </field>
      <field name="user_data" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <callback name="MediaSourceResultCb" c:type="GrlMediaSourceResultCb">
      <doc xml:whitespace="preserve">Prototype for the callback passed to the media sources' methods</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="source" transfer-ownership="none">
          <doc xml:whitespace="preserve">a media source</doc>
          <type name="MediaSource" c:type="GrlMediaSource*"/>
        </parameter>
        <parameter name="operation_id" transfer-ownership="none">
          <doc xml:whitespace="preserve">operation identifier</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="media" transfer-ownership="full">
          <doc xml:whitespace="preserve">a data transfer object</doc>
          <type name="Media" c:type="GrlMedia*"/>
        </parameter>
        <parameter name="remaining" transfer-ownership="none">
          <doc xml:whitespace="preserve">the number of remaining #GrlMedia to process, or GRL_SOURCE_REMAINING_UNKNOWN if it is unknown</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="4">
          <doc xml:whitespace="preserve">user data passed to the used method</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:whitespace="preserve">possible #GError generated at processing</doc>
          <type name="guint" c:type="GError*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="MediaSourceSearchSpec" c:type="GrlMediaSourceSearchSpec">
      <doc xml:whitespace="preserve">Data transport structure used internally by the plugins which support
search vmethod.</doc>
      <field name="source" writable="1">
        <type name="MediaSource" c:type="GrlMediaSource*"/>
      </field>
      <field name="search_id" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="text" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="keys" writable="1">
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="skip" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="count" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="flags" writable="1">
        <type name="MetadataResolutionFlags"
              c:type="GrlMetadataResolutionFlags"/>
      </field>
      <field name="callback" writable="1">
        <type name="MediaSourceResultCb" c:type="GrlMediaSourceResultCb"/>
      </field>
      <field name="user_data" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <callback name="MediaSourceStoreCb" c:type="GrlMediaSourceStoreCb">
      <doc xml:whitespace="preserve">Prototype for the callback passed to grl_media_source_store()</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="source" transfer-ownership="none">
          <doc xml:whitespace="preserve">a media source</doc>
          <type name="MediaSource" c:type="GrlMediaSource*"/>
        </parameter>
        <parameter name="parent" transfer-ownership="none">
          <doc xml:whitespace="preserve">The #GrlMediaBox who parents the @media</doc>
          <type name="MediaBox" c:type="GrlMediaBox*"/>
        </parameter>
        <parameter name="media" transfer-ownership="full">
          <doc xml:whitespace="preserve">a data transfer object</doc>
          <type name="Media" c:type="GrlMedia*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="3">
          <doc xml:whitespace="preserve">user data passed to grl_media_source_store()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:whitespace="preserve">possible #GError generated at processing</doc>
          <type name="guint" c:type="GError*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="MediaSourceStoreSpec" c:type="GrlMediaSourceStoreSpec">
      <doc xml:whitespace="preserve">Data transport structure used internally by the plugins which support
store vmethod.</doc>
      <field name="source" writable="1">
        <type name="MediaSource" c:type="GrlMediaSource*"/>
      </field>
      <field name="parent" writable="1">
        <type name="MediaBox" c:type="GrlMediaBox*"/>
      </field>
      <field name="media" writable="1">
        <type name="Media" c:type="GrlMedia*"/>
      </field>
      <field name="callback" writable="1">
        <type name="MediaSourceStoreCb" c:type="GrlMediaSourceStoreCb"/>
      </field>
      <field name="user_data" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="MediaVideo"
           c:symbol-prefix="media_video"
           c:type="GrlMediaVideo"
           parent="Media"
           glib:type-name="GrlMediaVideo"
           glib:get-type="grl_media_video_get_type"
           glib:type-struct="MediaVideoClass">
      <constructor name="new"
                   c:identifier="grl_media_video_new"
                   version="0.1.4">
        <doc xml:whitespace="preserve">Creates a new data video object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a newly-allocated data video.</doc>
          <type name="Media" c:type="GrlMedia*"/>
        </return-value>
      </constructor>
      <method name="add_url_data"
              c:identifier="grl_media_video_add_url_data"
              version="0.1.10">
        <doc xml:whitespace="preserve">Sets all the keys related with the URL of a media resource and adds it to
@video (useful for resources with more than one URL).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <doc xml:whitespace="preserve">a video's url</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="mime" transfer-ownership="none">
            <doc xml:whitespace="preserve">video mime-type</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="framerate" transfer-ownership="none">
            <doc xml:whitespace="preserve">video framerate, or -1 to ignore</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">video width, or -1 to ignore</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">video height, or -1 to ignore</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_episode"
              c:identifier="grl_media_video_get_episode"
              version="0.1.11">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the episode number of the video</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_framerate"
              c:identifier="grl_media_video_get_framerate"
              version="0.1.4">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the framerate of the video</doc>
          <type name="gfloat" c:type="gfloat"/>
        </return-value>
      </method>
      <method name="get_height"
              c:identifier="grl_media_video_get_height"
              version="0.1.4">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the height of the video</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_season"
              c:identifier="grl_media_video_get_season"
              version="0.1.11">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the season number of the video</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="get_show"
              c:identifier="grl_media_video_get_show"
              version="0.1.11">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the show title of the video</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_url_data"
              c:identifier="grl_media_video_get_url_data"
              version="0.1.10">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">all the keys related with the URL of a video resource in one go.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="mime"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">the url mime-type, or %NULL to ignore</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="framerate" transfer-ownership="none">
            <doc xml:whitespace="preserve">the url framerate, or %NULL to ignore</doc>
            <type name="gfloat" c:type="gfloat*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the url width, or %NULL to ignore</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the url height, or %NULL to ignore</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_url_data_nth"
              c:identifier="grl_media_video_get_url_data_nth"
              version="0.1.10">
        <doc xml:whitespace="preserve">in one go.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">all the keys related with the URL number @index of a video resource</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <doc xml:whitespace="preserve">element to retrieve</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="mime"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:whitespace="preserve">the url mime-type, or %NULL to ignore</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="framerate" transfer-ownership="none">
            <doc xml:whitespace="preserve">the url framerate, or %NULL to ignore</doc>
            <type name="gfloat" c:type="gfloat*"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the url width, or %NULL to ignore</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the url height, or %NULL to ignore</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_width"
              c:identifier="grl_media_video_get_width"
              version="0.1.4">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the width of the video</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
      </method>
      <method name="set_episode"
              c:identifier="grl_media_video_set_episode"
              version="0.1.11">
        <doc xml:whitespace="preserve">Sets the episode number of the video</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="episode" transfer-ownership="none">
            <doc xml:whitespace="preserve">the video's episode</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_framerate"
              c:identifier="grl_media_video_set_framerate"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the framerate of the video</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="framerate" transfer-ownership="none">
            <doc xml:whitespace="preserve">the video's framerate</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_height"
              c:identifier="grl_media_video_set_height"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the height of the video</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the video's height</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_season"
              c:identifier="grl_media_video_set_season"
              version="0.1.11">
        <doc xml:whitespace="preserve">Sets the season number of the video</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="season" transfer-ownership="none">
            <doc xml:whitespace="preserve">the video's season</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show"
              c:identifier="grl_media_video_set_show"
              version="0.1.11">
        <doc xml:whitespace="preserve">Sets the show title of the video</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="show" transfer-ownership="none">
            <doc xml:whitespace="preserve">the video's show name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size"
              c:identifier="grl_media_video_set_size"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the width and the height of the video</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the video's width</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">the video's height</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_url_data"
              c:identifier="grl_media_video_set_url_data"
              version="0.1.10">
        <doc xml:whitespace="preserve">Sets all the keys related with the URL of a video resource in one go.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="url" transfer-ownership="none">
            <doc xml:whitespace="preserve">the video's url</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="mime" transfer-ownership="none">
            <doc xml:whitespace="preserve">video mime-type</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="framerate" transfer-ownership="none">
            <doc xml:whitespace="preserve">video framerate, or -1 to ignore</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">video width, or -1 to ignore</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:whitespace="preserve">video height, or -1 to ignore</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_width"
              c:identifier="grl_media_video_set_width"
              version="0.1.4">
        <doc xml:whitespace="preserve">Set the width of the video</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="width" transfer-ownership="none">
            <doc xml:whitespace="preserve">the video's width</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Media" c:type="GrlMedia"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="MediaVideoClass"
            c:type="GrlMediaVideoClass"
            glib:is-gtype-struct-for="MediaVideo">
      <doc xml:whitespace="preserve">Grilo Media video Class</doc>
      <field name="parent_class">
        <type name="MediaClass" c:type="GrlMediaClass"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <bitfield name="MetadataResolutionFlags"
              c:type="GrlMetadataResolutionFlags">
      <doc xml:whitespace="preserve">GrlMetadata resolution flags</doc>
      <member name="normal" value="0" c:identifier="GRL_RESOLVE_NORMAL"/>
      <member name="full" value="1" c:identifier="GRL_RESOLVE_FULL"/>
      <member name="idle_relay"
              value="2"
              c:identifier="GRL_RESOLVE_IDLE_RELAY"/>
      <member name="fast_only" value="4" c:identifier="GRL_RESOLVE_FAST_ONLY"/>
    </bitfield>
    <class name="MetadataSource"
           c:symbol-prefix="metadata_source"
           c:type="GrlMetadataSource"
           parent="MediaPlugin"
           abstract="1"
           glib:type-name="GrlMetadataSource"
           glib:get-type="grl_metadata_source_get_type"
           glib:type-struct="MetadataSourceClass">
      <virtual-method name="cancel"
                      invoker="cancel"
                      version="0.1.14"
                      deprecated="use grl_operation_cancel() instead."
                      deprecated-version="0.1.16">
        <doc xml:whitespace="preserve">Cancel a running method.

The derived class must implement the cancel vmethod in order to honour the
request correctly. Otherwise, the operation will not be interrupted.

In all cases, if this function is called on an ongoing operation, the
corresponding callback will be called with the
@GRL_CORE_ERROR_OPERATION_CANCELLED error set, and no more action will be
taken for that operation after the said callback with error has been called.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="operation_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the identifier of the running operation, as returned by the function that started it</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="key_depends"
                      invoker="key_depends"
                      version="0.1.1"
                      deprecated="use grl_metadata_source_may_resolve() instead."
                      deprecated-version="0.1.10">
        <doc xml:whitespace="preserve">Get the list of #GrlKeyID which are needed a priori, in order to fetch
and store the requested @key_id

a #GList with the keys, or @NULL if it can not resolve @key_id</doc>
        <return-value transfer-ownership="none">
          <type name="GLib.List" c:type="GList*">
            <type name="GObject.ParamSpec"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="key_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the requested metadata key</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="may_resolve"
                      invoker="may_resolve"
                      version="0.1.10">
        <doc xml:whitespace="preserve">Checks whether @key_id may be resolved with @source for @media, so that the
caller can avoid calling grl_metadata_source_resolve() if it can be known in
advance it will fail.

If the resolution is known to be impossible because more keys are needed in
@media, and @missing_keys is not @NULL, it is populated with the list of
GrlKeyID that would be needed.

This function is synchronous and should not block.

@media, @FALSE otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@TRUE if there's a possibility that @source resolves @key_id for</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="media" transfer-ownership="none">
            <doc xml:whitespace="preserve">a media on which we want more metadata</doc>
            <type name="Media" c:type="GrlMedia*"/>
          </parameter>
          <parameter name="key_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the key corresponding to a metadata we might want</doc>
            <type name="KeyID" c:type="GrlKeyID"/>
          </parameter>
          <parameter name="missing_keys"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">an optional originally empty list</doc>
            <type name="GLib.List" c:type="GList**">
              <type name="KeyID"/>
            </type>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="resolve">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="rs" transfer-ownership="none">
            <type name="MetadataSourceResolveSpec"
                  c:type="GrlMetadataSourceResolveSpec*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_metadata">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="sms" transfer-ownership="none">
            <type name="MetadataSourceSetMetadataSpec"
                  c:type="GrlMetadataSourceSetMetadataSpec*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="slow_keys" invoker="slow_keys" version="0.1.1">
        <doc xml:whitespace="preserve">Similar to grl_metadata_source_supported_keys(), but this keys
are marked as slow because of the amount of traffic/processing needed
to fetch them.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GList with the keys</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="GObject.ParamSpec"/>
          </type>
        </return-value>
      </virtual-method>
      <virtual-method name="supported_keys"
                      invoker="supported_keys"
                      version="0.1.1">
        <doc xml:whitespace="preserve">Get a list of #GrlKeyID, which describe a metadata types that this
source can fetch and store.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GList with the keys</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="GObject.ParamSpec"/>
          </type>
        </return-value>
      </virtual-method>
      <virtual-method name="supported_operations">
        <return-value transfer-ownership="none">
          <type name="SupportedOps" c:type="GrlSupportedOps"/>
        </return-value>
      </virtual-method>
      <virtual-method name="writable_keys"
                      invoker="writable_keys"
                      version="0.1.4">
        <doc xml:whitespace="preserve">Similar to grl_metadata_source_supported_keys(), but these keys
are marked as writable, meaning the source allows the client
to provide new values for these keys that will be stored permanently.

a #GList with the keys</doc>
        <return-value transfer-ownership="none">
          <type name="GLib.List" c:type="GList*">
            <type name="GObject.ParamSpec"/>
          </type>
        </return-value>
      </virtual-method>
      <method name="cancel"
              c:identifier="grl_metadata_source_cancel"
              version="0.1.14"
              deprecated="use grl_operation_cancel() instead."
              deprecated-version="0.1.16">
        <doc xml:whitespace="preserve">Cancel a running method.

The derived class must implement the cancel vmethod in order to honour the
request correctly. Otherwise, the operation will not be interrupted.

In all cases, if this function is called on an ongoing operation, the
corresponding callback will be called with the
@GRL_CORE_ERROR_OPERATION_CANCELLED error set, and no more action will be
taken for that operation after the said callback with error has been called.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="operation_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the identifier of the running operation, as returned by the function that started it</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="expand_operation_keys"
              c:identifier="grl_metadata_source_expand_operation_keys"
              introspectable="0">
        <doc xml:whitespace="preserve">Will add to @keys the keys that should be asked to @source when
doing an operation with GRL_RESOLVE_FULL.

The added keys are the keys that will be needed by other sources to
obtain the ones that @source says it cannot resolve.</doc>
        <return-value>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="media" transfer-ownership="none">
            <type name="Media" c:type="GrlMedia*"/>
          </parameter>
          <parameter name="keys" transfer-ownership="none">
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="filter_slow"
              c:identifier="grl_metadata_source_filter_slow"
              version="0.1.1">
        <doc xml:whitespace="preserve">This function does the opposite of other filter functions: removes the slow
keys from @keys. If @return_filtered is %TRUE the removed slow keys are
returned in a new list.

@return_filtered is %TRUE will return the list of slow keys; otherwise
%NULL</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">if</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="GObject.ParamSpec"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="keys"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="container"
                     allow-none="1">
            <doc xml:whitespace="preserve"> the list of keys to filter out</doc>
            <type name="GLib.List" c:type="GList**">
              <type name="GObject.ParamSpec"/>
            </type>
          </parameter>
          <parameter name="return_filtered" transfer-ownership="none">
            <doc xml:whitespace="preserve">if %TRUE the return value shall be a new list with the slow keys</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="filter_supported"
              c:identifier="grl_metadata_source_filter_supported"
              version="0.1.1">
        <doc xml:whitespace="preserve">Compares the received @keys list with the supported key list by the
metadata @source, and deletes those keys which are not supported.

if @return_filtered is %TRUE will return the list of removed keys;
otherwise %NULL</doc>
        <return-value transfer-ownership="container">
          <type name="GLib.List" c:type="GList*">
            <type name="GObject.ParamSpec"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="keys"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="container"
                     allow-none="1">
            <doc xml:whitespace="preserve"> the list of keys to filter out</doc>
            <type name="GLib.List" c:type="GList**">
              <type name="GObject.ParamSpec"/>
            </type>
          </parameter>
          <parameter name="return_filtered" transfer-ownership="none">
            <doc xml:whitespace="preserve">if %TRUE the return value shall be a new list with the unsupported keys</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="filter_writable"
              c:identifier="grl_metadata_source_filter_writable"
              version="0.1.4">
        <doc xml:whitespace="preserve">Similar to grl_metadata_source_filter_supported() but applied to
the writable keys in grl_metadata_source_writable_keys().

Filter the @keys list keeping only those keys that are writtable in
@source. If @return_filtered is %TRUE then the removed keys are returned in a
new list.

if @return_filtered is %TRUE will return the list of non-writtable keys;
otherwise %NULL</doc>
        <return-value transfer-ownership="container">
          <type name="GLib.List" c:type="GList*">
            <type name="GObject.ParamSpec"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="keys"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="container"
                     allow-none="1">
            <doc xml:whitespace="preserve"> the list of keys to filter out</doc>
            <type name="GLib.List" c:type="GList**">
              <type name="GObject.ParamSpec"/>
            </type>
          </parameter>
          <parameter name="return_filtered" transfer-ownership="none">
            <doc xml:whitespace="preserve">if %TRUE the return value shall be a new list with the non-writable keys</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="gen_operation_id"
              c:identifier="grl_metadata_source_gen_operation_id">
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
      </method>
      <method name="get_additional_sources"
              c:identifier="grl_metadata_source_get_additional_sources"
              introspectable="0">
        <doc xml:whitespace="preserve">Find the sources that should be queried to add @keys to @media.

If @additional_keys is provided, the result may include sources
that need more metadata to be present in @media, the keys
corresponding to that metadata will be put in @additional_keys.

If @additional_keys is NULL, will only consider sources that can
resolve @keys immediately

If @main_source_is_only_resolver is TRUE and @additional_keys is
not @NULL, only additional keys that can be resolved directly by
@source will be considered. Sources that need other additional keys
will not be put in the returned list.

Ignore elements of @keys that are already in @media.</doc>
        <return-value>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="media" transfer-ownership="none">
            <type name="Media" c:type="GrlMedia*"/>
          </parameter>
          <parameter name="keys" transfer-ownership="none">
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="additional_keys" transfer-ownership="none">
            <type name="GLib.List" c:type="GList**">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="main_source_is_only_resolver"
                     transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="grl_metadata_source_get_description"
              version="0.1.1">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the description of the @source</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_id"
              c:identifier="grl_metadata_source_get_id"
              version="0.1.1">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the ID of the @source</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_name"
              c:identifier="grl_metadata_source_get_name"
              version="0.1.1">
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the name of the @source</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
      </method>
      <method name="get_operation_data"
              c:identifier="grl_metadata_source_get_operation_data"
              version="0.1.14"
              deprecated="use grl_operation_get_data() instead."
              deprecated-version="0.1.16">
        <doc xml:whitespace="preserve">Obtains the previously attached data</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The previously attached data.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <parameter name="operation_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the identifier of a running operation</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="key_depends"
              c:identifier="grl_metadata_source_key_depends"
              version="0.1.1"
              deprecated="use grl_metadata_source_may_resolve() instead."
              deprecated-version="0.1.10">
        <doc xml:whitespace="preserve">Get the list of #GrlKeyID which are needed a priori, in order to fetch
and store the requested @key_id

a #GList with the keys, or @NULL if it can not resolve @key_id</doc>
        <return-value transfer-ownership="none">
          <type name="GLib.List" c:type="GList*">
            <type name="GObject.ParamSpec"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="key_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the requested metadata key</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
        </parameters>
      </method>
      <method name="may_resolve"
              c:identifier="grl_metadata_source_may_resolve"
              version="0.1.10">
        <doc xml:whitespace="preserve">Checks whether @key_id may be resolved with @source for @media, so that the
caller can avoid calling grl_metadata_source_resolve() if it can be known in
advance it will fail.

If the resolution is known to be impossible because more keys are needed in
@media, and @missing_keys is not @NULL, it is populated with the list of
GrlKeyID that would be needed.

This function is synchronous and should not block.

@media, @FALSE otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">@TRUE if there's a possibility that @source resolves @key_id for</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="media" transfer-ownership="none">
            <doc xml:whitespace="preserve">a media on which we want more metadata</doc>
            <type name="Media" c:type="GrlMedia*"/>
          </parameter>
          <parameter name="key_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the key corresponding to a metadata we might want</doc>
            <type name="KeyID" c:type="GrlKeyID"/>
          </parameter>
          <parameter name="missing_keys"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">an optional originally empty list</doc>
            <type name="GLib.List" c:type="GList**">
              <type name="KeyID"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="operation_is_cancelled"
              c:identifier="grl_metadata_source_operation_is_cancelled">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="operation_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="operation_is_completed"
              c:identifier="grl_metadata_source_operation_is_completed">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="operation_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="operation_is_finished"
              c:identifier="grl_metadata_source_operation_is_finished">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="operation_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="operation_is_ongoing"
              c:identifier="grl_metadata_source_operation_is_ongoing">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="operation_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="resolve"
              c:identifier="grl_metadata_source_resolve"
              version="0.1.14">
        <doc xml:whitespace="preserve">This is the main method of the #GrlMetadataSource class. It will fetch the
metadata of the requested keys.

This function is asynchronous.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">the operation identifier</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="keys" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the #GList of #GrlKeyID to retrieve</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GObject.ParamSpec"/>
            </type>
          </parameter>
          <parameter name="media" transfer-ownership="none">
            <doc xml:whitespace="preserve">Transfer object where all the metadata is stored.</doc>
            <type name="Media" c:type="GrlMedia*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">bitwise mask of #GrlMetadataResolutionFlags with the resolution strategy</doc>
            <type name="MetadataResolutionFlags"
                  c:type="GrlMetadataResolutionFlags"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4">
            <doc xml:whitespace="preserve">the callback to execute when the @media metadata is filled up</doc>
            <type name="MetadataSourceResolveCb"
                  c:type="GrlMetadataSourceResolveCb"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data set for the @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="resolve_sync"
              c:identifier="grl_metadata_source_resolve_sync"
              version="0.1.6"
              throws="1">
        <doc xml:whitespace="preserve">This is the main method of the #GrlMetadataSource class. It will fetch the
metadata of the requested keys.

This function is synchronous.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">the updated #GrlMedia</doc>
          <type name="Media" c:type="GrlMedia*"/>
        </return-value>
        <parameters>
          <parameter name="keys" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">the #GList of #GrlKeyID to retrieve</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GObject.ParamSpec"/>
            </type>
          </parameter>
          <parameter name="media" transfer-ownership="none">
            <doc xml:whitespace="preserve">Transfer object where all the metadata is stored</doc>
            <type name="Media" c:type="GrlMedia*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">bitwise mask of #GrlMetadataResolutionFlags with the resolution strategy</doc>
            <type name="MetadataResolutionFlags"
                  c:type="GrlMetadataResolutionFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metadata"
              c:identifier="grl_metadata_source_set_metadata"
              version="0.1.4">
        <doc xml:whitespace="preserve">This is the main method of the #GrlMetadataSource class. It will
get the values for @keys from @media and store it permanently. After
calling this method, future queries that return this media object
shall return this new values for the selected keys.

This function is asynchronous and uses the Glib's main loop.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="media" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GrlMedia object that we want to operate on.</doc>
            <type name="Media" c:type="GrlMedia*"/>
          </parameter>
          <parameter name="keys" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a list of #GrlKeyID whose values we want to change.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GObject.ParamSpec"/>
            </type>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">Flags to configure specific behaviors of the operation.</doc>
            <type name="MetadataWritingFlags"
                  c:type="GrlMetadataWritingFlags"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4">
            <doc xml:whitespace="preserve">the callback to execute when the operation is finished.</doc>
            <type name="MetadataSourceSetMetadataCb"
                  c:type="GrlMetadataSourceSetMetadataCb"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:whitespace="preserve">user data set for the @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metadata_sync"
              c:identifier="grl_metadata_source_set_metadata_sync"
              version="0.1.6"
              throws="1">
        <doc xml:whitespace="preserve">This is the main method of the #GrlMetadataSource class. It will
get the value for @key from @media and store it permanently. After
calling this method, future queries that return this media object
shall return this new value for the selected key.

This function is synchronous.

a #GList of keys that could not be updated, or @NULL</doc>
        <return-value transfer-ownership="container">
          <type name="GLib.List" c:type="GList*">
            <type name="GObject.ParamSpec"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="media" transfer-ownership="none">
            <doc xml:whitespace="preserve">the #GrlMedia object that we want to operate on</doc>
            <type name="Media" c:type="GrlMedia*"/>
          </parameter>
          <parameter name="keys" transfer-ownership="none" allow-none="1">
            <doc xml:whitespace="preserve">a list of #GrlKeyID whose values we want to change</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GObject.ParamSpec"/>
            </type>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:whitespace="preserve">Flags to configure specific behaviors of the operation.</doc>
            <type name="MetadataWritingFlags"
                  c:type="GrlMetadataWritingFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_operation_cancelled"
              c:identifier="grl_metadata_source_set_operation_cancelled">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="operation_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_operation_completed"
              c:identifier="grl_metadata_source_set_operation_completed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="operation_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_operation_data"
              c:identifier="grl_metadata_source_set_operation_data"
              version="0.1.14"
              deprecated="use grl_operation_set_data() instead."
              deprecated-version="0.1.16">
        <doc xml:whitespace="preserve">Attach a pointer to the specific operation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="operation_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the identifier of a running operation</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:whitespace="preserve">the data to attach</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_operation_finished"
              c:identifier="grl_metadata_source_set_operation_finished">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="operation_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_operation_ongoing"
              c:identifier="grl_metadata_source_set_operation_ongoing">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="operation_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="slow_keys"
              c:identifier="grl_metadata_source_slow_keys"
              version="0.1.1">
        <doc xml:whitespace="preserve">Similar to grl_metadata_source_supported_keys(), but this keys
are marked as slow because of the amount of traffic/processing needed
to fetch them.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GList with the keys</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="GObject.ParamSpec"/>
          </type>
        </return-value>
      </method>
      <method name="supported_keys"
              c:identifier="grl_metadata_source_supported_keys"
              version="0.1.1">
        <doc xml:whitespace="preserve">Get a list of #GrlKeyID, which describe a metadata types that this
source can fetch and store.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GList with the keys</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="GObject.ParamSpec"/>
          </type>
        </return-value>
      </method>
      <method name="supported_operations"
              c:identifier="grl_metadata_source_supported_operations"
              version="0.1.1">
        <doc xml:whitespace="preserve">By default the derived objects of #GrlMetadataSource can only resolve.

the source</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a bitwise mangle with the supported operations by</doc>
          <type name="guint" c:type="GrlSupportedOps"/>
        </return-value>
      </method>
      <method name="writable_keys"
              c:identifier="grl_metadata_source_writable_keys"
              version="0.1.4">
        <doc xml:whitespace="preserve">Similar to grl_metadata_source_supported_keys(), but these keys
are marked as writable, meaning the source allows the client
to provide new values for these keys that will be stored permanently.

a #GList with the keys</doc>
        <return-value transfer-ownership="none">
          <type name="GLib.List" c:type="GList*">
            <type name="GObject.ParamSpec"/>
          </type>
        </return-value>
      </method>
      <property name="source-desc"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">A description of the source</doc>
        <type name="utf8"/>
      </property>
      <property name="source-id"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The identifier of the source.</doc>
        <type name="utf8"/>
      </property>
      <property name="source-name"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:whitespace="preserve">The name of the source.</doc>
        <type name="utf8"/>
      </property>
      <field name="parent">
        <type name="MediaPlugin" c:type="GrlMediaPlugin"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="MetadataSourcePrivate" c:type="GrlMetadataSourcePrivate*"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="MetadataSourceClass"
            c:type="GrlMetadataSourceClass"
            glib:is-gtype-struct-for="MetadataSource">
      <doc xml:whitespace="preserve">Grilo MetadataSource class. Override the vmethods to implement the
element functionality.</doc>
      <field name="parent_class">
        <type name="MediaPluginClass" c:type="GrlMediaPluginClass"/>
      </field>
      <field name="operation_id">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="supported_operations">
        <callback name="supported_operations">
          <return-value transfer-ownership="none">
            <type name="SupportedOps" c:type="GrlSupportedOps"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="MetadataSource" c:type="GrlMetadataSource*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="supported_keys">
        <callback name="supported_keys">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GList with the keys</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GObject.ParamSpec"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="MetadataSource" c:type="GrlMetadataSource*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="slow_keys">
        <callback name="slow_keys">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">a #GList with the keys</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GObject.ParamSpec"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="MetadataSource" c:type="GrlMetadataSource*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="key_depends">
        <callback name="key_depends">
          <return-value transfer-ownership="none">
            <type name="GLib.List" c:type="GList*">
              <type name="GObject.ParamSpec"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="MetadataSource" c:type="GrlMetadataSource*"/>
            </parameter>
            <parameter name="key_id" transfer-ownership="none">
              <doc xml:whitespace="preserve">the requested metadata key</doc>
              <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="writable_keys">
        <callback name="writable_keys">
          <return-value transfer-ownership="none">
            <type name="GLib.List" c:type="GList*">
              <type name="GObject.ParamSpec"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="MetadataSource" c:type="GrlMetadataSource*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="resolve">
        <callback name="resolve">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="MetadataSource" c:type="GrlMetadataSource*"/>
            </parameter>
            <parameter name="rs" transfer-ownership="none">
              <type name="MetadataSourceResolveSpec"
                    c:type="GrlMetadataSourceResolveSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_metadata">
        <callback name="set_metadata">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="MetadataSource" c:type="GrlMetadataSource*"/>
            </parameter>
            <parameter name="sms" transfer-ownership="none">
              <type name="MetadataSourceSetMetadataSpec"
                    c:type="GrlMetadataSourceSetMetadataSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="may_resolve">
        <callback name="may_resolve">
          <return-value transfer-ownership="none">
            <doc xml:whitespace="preserve">@TRUE if there's a possibility that @source resolves @key_id for</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="MetadataSource" c:type="GrlMetadataSource*"/>
            </parameter>
            <parameter name="media" transfer-ownership="none">
              <doc xml:whitespace="preserve">a media on which we want more metadata</doc>
              <type name="Media" c:type="GrlMedia*"/>
            </parameter>
            <parameter name="key_id" transfer-ownership="none">
              <doc xml:whitespace="preserve">the key corresponding to a metadata we might want</doc>
              <type name="KeyID" c:type="GrlKeyID"/>
            </parameter>
            <parameter name="missing_keys"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:whitespace="preserve">an optional originally empty list</doc>
              <type name="GLib.List" c:type="GList**">
                <type name="KeyID"/>
              </type>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cancel">
        <callback name="cancel">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="MetadataSource" c:type="GrlMetadataSource*"/>
            </parameter>
            <parameter name="operation_id" transfer-ownership="none">
              <doc xml:whitespace="preserve">the identifier of the running operation, as returned by the function that started it</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="13">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="MetadataSourcePrivate"
            c:type="GrlMetadataSourcePrivate"
            disguised="1">
    </record>
    <callback name="MetadataSourceResolveCb"
              c:type="GrlMetadataSourceResolveCb">
      <doc xml:whitespace="preserve">Prototype for the callback passed to grl_metadata_source_resolve()</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="source" transfer-ownership="none">
          <doc xml:whitespace="preserve">a metadata source</doc>
          <type name="MetadataSource" c:type="GrlMetadataSource*"/>
        </parameter>
        <parameter name="operation_id" transfer-ownership="none">
          <doc xml:whitespace="preserve">operation identifier</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="media" transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GrlMedia transfer object</doc>
          <type name="Media" c:type="GrlMedia*"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="3">
          <doc xml:whitespace="preserve">user data passed to grl_metadata_source_resolve()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:whitespace="preserve">possible #GError generated when resolving the metadata</doc>
          <type name="guint" c:type="GError*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="MetadataSourceResolveSpec"
            c:type="GrlMetadataSourceResolveSpec">
      <doc xml:whitespace="preserve">Represents the closure used by the derived objects to fetch, store and
return the transfer object to the client's code.</doc>
      <field name="source" writable="1">
        <type name="MetadataSource" c:type="GrlMetadataSource*"/>
      </field>
      <field name="resolve_id" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="keys" writable="1">
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="media" writable="1">
        <type name="Media" c:type="GrlMedia*"/>
      </field>
      <field name="flags" writable="1">
        <type name="MetadataResolutionFlags"
              c:type="GrlMetadataResolutionFlags"/>
      </field>
      <field name="callback" writable="1">
        <type name="MetadataSourceResolveCb"
              c:type="GrlMetadataSourceResolveCb"/>
      </field>
      <field name="user_data" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="15">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <callback name="MetadataSourceSetMetadataCb"
              c:type="GrlMetadataSourceSetMetadataCb">
      <doc xml:whitespace="preserve">Prototype for the callback passed to grl_metadata_source_set_metadata()</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="source" transfer-ownership="none">
          <doc xml:whitespace="preserve">a metadata source</doc>
          <type name="MetadataSource" c:type="GrlMetadataSource*"/>
        </parameter>
        <parameter name="media" transfer-ownership="full">
          <doc xml:whitespace="preserve">a #GrlMedia transfer object</doc>
          <type name="Media" c:type="GrlMedia*"/>
        </parameter>
        <parameter name="failed_keys" transfer-ownership="container">
          <doc xml:whitespace="preserve">#GList of keys that could not be updated, if any</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="GObject.ParamSpec"/>
          </type>
        </parameter>
        <parameter name="user_data" transfer-ownership="none" closure="3">
          <doc xml:whitespace="preserve">user data passed to grl_metadata_source_set_metadata()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:whitespace="preserve">possible #GError generated when updating the metadata</doc>
          <type name="guint" c:type="GError*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="MetadataSourceSetMetadataSpec"
            c:type="GrlMetadataSourceSetMetadataSpec">
      <doc xml:whitespace="preserve">Represents the closure used by the derived objects to operate.</doc>
      <field name="source" writable="1">
        <type name="MetadataSource" c:type="GrlMetadataSource*"/>
      </field>
      <field name="media" writable="1">
        <type name="Media" c:type="GrlMedia*"/>
      </field>
      <field name="keys" writable="1">
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="flags" writable="1">
        <type name="MetadataWritingFlags" c:type="GrlMetadataWritingFlags"/>
      </field>
      <field name="callback" writable="1">
        <type name="MetadataSourceSetMetadataCb"
              c:type="GrlMetadataSourceSetMetadataCb"/>
      </field>
      <field name="user_data" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="failed_keys" writable="1">
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <bitfield name="MetadataWritingFlags" c:type="GrlMetadataWritingFlags">
      <doc xml:whitespace="preserve">Flags for metadata writing operations.</doc>
      <member name="normal" value="0" c:identifier="GRL_WRITE_NORMAL"/>
      <member name="full" value="1" c:identifier="GRL_WRITE_FULL"/>
    </bitfield>
    <constant name="PADDING" value="16" c:type="GRL_PADDING">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PADDING_SMALL" value="8" c:type="GRL_PADDING_SMALL">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PLUGIN_LIST_VAR"
              value="GRL_PLUGIN_LIST"
              c:type="GRL_PLUGIN_LIST_VAR">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PLUGIN_PATH_VAR"
              value="GRL_PLUGIN_PATH"
              c:type="GRL_PLUGIN_PATH_VAR">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PLUGIN_RANKS_VAR"
              value="GRL_PLUGIN_RANKS"
              c:type="GRL_PLUGIN_RANKS_VAR">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <record name="PluginDescriptor" c:type="GrlPluginDescriptor">
      <field name="plugin_id" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="plugin_init" introspectable="0">
        <callback name="plugin_init" introspectable="0">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter transfer-ownership="none">
              <type name="PluginRegistry" c:type="GrlPluginRegistry*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="PluginInfo" c:type="GrlPluginInfo*"/>
            </parameter>
            <parameter transfer-ownership="none">
              <type name="GLib.List" c:type="GList*">
                <type name="gpointer" c:type="gpointer"/>
              </type>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="plugin_deinit">
        <callback name="plugin_deinit">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="module" writable="1">
        <type name="GModule.Module" c:type="GModule*"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="PluginInfo" c:type="GrlPluginInfo">
      <doc xml:whitespace="preserve">This structure stores the information related to a module</doc>
      <field name="id" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="filename" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="optional_info" writable="1">
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="rank" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="PluginRank" c:type="GrlPluginRank">
      <doc xml:whitespace="preserve">Module priority ranks. Defines the order in which the resolver
(or similar rank-picking mechanisms) will choose this plugin
over an alternative one with the same function.

These constants serve as a rough guidance for defining the rank
of a GrlPluginInfo. Any value is valid, including values bigger
than GRL_PLUGIN_RANK_HIGHEST.</doc>
      <member name="lowest" value="-64" c:identifier="GRL_PLUGIN_RANK_LOWEST"/>
      <member name="low" value="-32" c:identifier="GRL_PLUGIN_RANK_LOW"/>
      <member name="default" value="0" c:identifier="GRL_PLUGIN_RANK_DEFAULT"/>
      <member name="high" value="32" c:identifier="GRL_PLUGIN_RANK_HIGH"/>
      <member name="highest"
              value="64"
              c:identifier="GRL_PLUGIN_RANK_HIGHEST"/>
    </enumeration>
    <class name="PluginRegistry"
           c:symbol-prefix="plugin_registry"
           c:type="GrlPluginRegistry"
           parent="GObject.Object"
           glib:type-name="GrlPluginRegistry"
           glib:get-type="grl_plugin_registry_get_type"
           glib:type-struct="PluginRegistryClass">
      <function name="get_default"
                c:identifier="grl_plugin_registry_get_default"
                version="0.1.6">
        <doc xml:whitespace="preserve">As the registry is designed to work as a singleton, this
method is in charge of creating the only instance or
returned it if it is already in memory.


It is NOT MT-safe</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a new or an already created instance of the registry.</doc>
          <type name="PluginRegistry" c:type="GrlPluginRegistry*"/>
        </return-value>
      </function>
      <method name="add_config"
              c:identifier="grl_plugin_registry_add_config"
              version="0.1.7"
              throws="1">
        <doc xml:whitespace="preserve">Add a configuration for a plugin/source.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="config" transfer-ownership="full">
            <doc xml:whitespace="preserve">a configuration set</doc>
            <type name="Config" c:type="GrlConfig*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_config_from_file"
              c:identifier="grl_plugin_registry_add_config_from_file"
              version="0.1.7"
              throws="1">
        <doc xml:whitespace="preserve">Load plugin configurations from a .ini-like config file.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="config_file" transfer-ownership="none">
            <doc xml:whitespace="preserve">a key-value file containing the configuration</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_directory"
              c:identifier="grl_plugin_registry_add_directory"
              version="0.1.6">
        <doc xml:whitespace="preserve">Set this path as part of default paths to load plugins.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">a path with plugins</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_metadata_keys"
              c:identifier="grl_plugin_registry_get_metadata_keys"
              version="0.1.6">
        <doc xml:whitespace="preserve">Returns a list with all registered keys in system.

with all the available #GrlKeyID&lt;!-- --&gt;s. The content of the list should
not be modified or freed. Use g_list_free() when done using the list.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a #GList</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="GObject.ParamSpec"/>
          </type>
        </return-value>
      </method>
      <method name="get_sources"
              c:identifier="grl_plugin_registry_get_sources"
              version="0.1.7">
        <doc xml:whitespace="preserve">This function will return all the available sources in the @registry.

If @ranked is %TRUE, the source list will be ordered by rank.

available #GrlMediaPlugins&lt;!-- --&gt;s. The content of the list should not be
modified or freed. Use g_list_free() when done using the list.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a #GList of</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="MediaPlugin"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="ranked" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the returned list shall be returned ordered by rank</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sources_by_operations"
              c:identifier="grl_plugin_registry_get_sources_by_operations"
              version="0.1.7">
        <doc xml:whitespace="preserve">Give an array of all the available sources in the @registry capable of
perform the operations requested in @ops.

If @ranked is %TRUE, the source list will be ordered by rank.

available #GrlMediaPlugins&lt;!-- --&gt;s. The content of the list should not be
modified or freed. Use g_list_free() when done using the list.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a #GList of</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="MediaPlugin"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="ops" transfer-ownership="none">
            <doc xml:whitespace="preserve">a bitwise mangle of the requested operations.</doc>
            <type name="SupportedOps" c:type="GrlSupportedOps"/>
          </parameter>
          <parameter name="ranked" transfer-ownership="none">
            <doc xml:whitespace="preserve">whether the returned list shall be returned ordered by rank</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="load"
              c:identifier="grl_plugin_registry_load"
              version="0.1.7"
              throws="1">
        <doc xml:whitespace="preserve">Loads a module from shared object file stored in @path</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the module is loaded correctly</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="library_filename" transfer-ownership="none">
            <doc xml:whitespace="preserve">the path to the so file</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_all"
              c:identifier="grl_plugin_registry_load_all"
              version="0.1.1"
              throws="1">
        <doc xml:whitespace="preserve">Load all the modules available in the default directory path.

The default directory path can be changed through the environment
variable %GRL_PLUGIN_PATH and it can contain several paths separated
by ":"

%TRUE% otherwise.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%FALSE% is all the configured plugin paths are invalid,</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </method>
      <method name="load_by_id"
              c:identifier="grl_plugin_registry_load_by_id"
              version="0.1.14"
              throws="1">
        <doc xml:whitespace="preserve">Loads plugin identified by @plugin_id.

This requires the XML plugin information file to define a "module" key with
the name of the module that provides the plugin or the absolute path of the
actual module file.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the plugin is loaded correctly</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="plugin_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">plugin identifier</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_directory"
              c:identifier="grl_plugin_registry_load_directory"
              version="0.1.7"
              throws="1">
        <doc xml:whitespace="preserve">Loads a set of modules from directory in @path which contains
a group shared object files.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if the directory is valid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:whitespace="preserve">the path to the directory</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_metadata_key"
              c:identifier="grl_plugin_registry_lookup_metadata_key"
              version="0.1.6">
        <doc xml:whitespace="preserve">Look up for the metadata key with name @key_name.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The metadata key, or @NULL if not found</doc>
          <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
        </return-value>
        <parameters>
          <parameter name="key_name" transfer-ownership="none">
            <doc xml:whitespace="preserve">the key name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_metadata_key_relation"
              c:identifier="grl_plugin_registry_lookup_metadata_key_relation"
              version="0.1.10">
        <doc xml:whitespace="preserve">Look up the list of keys that have a relation with @key.

@key is included in that list.

related keys, or @NULL if key is invalid.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GList of</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="GObject.ParamSpec"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">a metadata key</doc>
            <type name="KeyID" c:type="GrlKeyID"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_source"
              c:identifier="grl_plugin_registry_lookup_source"
              version="0.1.1">
        <doc xml:whitespace="preserve">This function will search and retrieve a source given its identifier.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The source found.</doc>
          <type name="MediaPlugin" c:type="GrlMediaPlugin*"/>
        </return-value>
        <parameters>
          <parameter name="source_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the id of a source</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="register_metadata_key"
              c:identifier="grl_plugin_registry_register_metadata_key"
              version="0.1.7"
              throws="1">
        <doc xml:whitespace="preserve">Registers a metadata key

or @NULL on error.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">The #GrlKeyID registered</doc>
          <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">The key to register</doc>
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </method>
      <method name="register_metadata_key_relation"
              c:identifier="grl_plugin_registry_register_metadata_key_relation"
              version="0.1.10">
        <doc xml:whitespace="preserve">Creates a relation between @key1 and @key2, meaning that the values of both
keys are somehow related.

One example of a relation would be the one between the URI of a media
resource and its mime-type: they are both tied together and one does not make
sense without the other.

Relations between keys allow the framework to provide all the data that is
somehow related when any of the related keys are requested.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key1" transfer-ownership="none">
            <doc xml:whitespace="preserve">key involved in relationship</doc>
            <type name="KeyID" c:type="GrlKeyID"/>
          </parameter>
          <parameter name="key2" transfer-ownership="none">
            <doc xml:whitespace="preserve">key involved in relationship</doc>
            <type name="KeyID" c:type="GrlKeyID"/>
          </parameter>
        </parameters>
      </method>
      <method name="register_source"
              c:identifier="grl_plugin_registry_register_source"
              version="0.1.7"
              throws="1">
        <doc xml:whitespace="preserve">Register a @source in the @registry with the given @plugin information</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if success, %FALSE% otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="plugin" transfer-ownership="none">
            <doc xml:whitespace="preserve">the descriptor of the plugin which owns the source</doc>
            <type name="PluginInfo" c:type="GrlPluginInfo*"/>
          </parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:whitespace="preserve">the source to register</doc>
            <type name="MediaPlugin" c:type="GrlMediaPlugin*"/>
          </parameter>
        </parameters>
      </method>
      <method name="restrict_plugins"
              c:identifier="grl_plugin_registry_restrict_plugins">
        <doc xml:whitespace="preserve">Restrict the plugins that application sees to this list.

Other plugins will not be available for the application, unless it uses
directly #grl_plugin_registry_load() function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="plugins" transfer-ownership="none">
            <doc xml:whitespace="preserve">a @NULL-terminated array of plugins identifiers</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload"
              c:identifier="grl_plugin_registry_unload"
              version="0.1.7"
              throws="1">
        <doc xml:whitespace="preserve">Unload from memory a module identified by @plugin_id. This means call the
module's deinit function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE% on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="plugin_id" transfer-ownership="none">
            <doc xml:whitespace="preserve">the identifier of the plugin</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unregister_source"
              c:identifier="grl_plugin_registry_unregister_source"
              version="0.1.7"
              throws="1">
        <doc xml:whitespace="preserve">Removes the @source from the @registry hash table</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if success, %FALSE% otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:whitespace="preserve">the source to unregister</doc>
            <type name="MediaPlugin" c:type="GrlMediaPlugin*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PluginRegistryPrivate" c:type="GrlPluginRegistryPrivate*"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <glib:signal name="source-added" when="first" action="1">
        <doc xml:whitespace="preserve">Signals that a plugin has been added to the registry.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="plugin" transfer-ownership="none">
            <doc xml:whitespace="preserve">the plugin that has been added</doc>
            <type name="MediaPlugin"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="source-removed" when="first" action="1">
        <doc xml:whitespace="preserve">Signals that a plugin has been removed from the registry.</doc>
        <return-value transfer-ownership="none">
          <type name="none"/>
        </return-value>
        <parameters>
          <parameter name="plugin" transfer-ownership="none">
            <doc xml:whitespace="preserve">the plugin that has been removed</doc>
            <type name="MediaPlugin"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="PluginRegistryClass"
            c:type="GrlPluginRegistryClass"
            glib:is-gtype-struct-for="PluginRegistry">
      <doc xml:whitespace="preserve">Grilo PluginRegistry class. Dynamic loader of plugins.</doc>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="PluginRegistryPrivate"
            c:type="GrlPluginRegistryPrivate"
            disguised="1">
    </record>
    <class name="RelatedKeys"
           c:symbol-prefix="related_keys"
           c:type="GrlRelatedKeys"
           parent="GObject.Object"
           glib:type-name="GrlRelatedKeys"
           glib:get-type="grl_related_keys_get_type"
           glib:type-struct="RelatedKeysClass">
      <constructor name="new"
                   c:identifier="grl_related_keys_new"
                   version="0.1.10">
        <doc xml:whitespace="preserve">Creates a new #GrlRelatedKeys instance that can be used to store related
keys and their values.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new object.</doc>
          <type name="RelatedKeys" c:type="GrlRelatedKeys*"/>
        </return-value>
      </constructor>
      <constructor name="new_valist"
                   c:identifier="grl_related_keys_new_valist"
                   version="0.1.10"
                   introspectable="0">
        <doc xml:whitespace="preserve">Creates a new #GrlRelatedKeys containing pairs of (key, value). Finish the
list with %NULL.

In case of a binary-type key, the expected element is (key, value, size).

value type will be extracted from key information.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GrlRelatedKeys</doc>
          <type name="RelatedKeys" c:type="GrlRelatedKeys*"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">first key</doc>
            <type name="KeyID" c:type="GrlKeyID"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:whitespace="preserve">#va_list of value, followed by (key,value) pairs to insert</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_keys"
                   c:identifier="grl_related_keys_new_with_keys"
                   version="0.1.10"
                   introspectable="0">
        <doc xml:whitespace="preserve">Creates a initial #GrlRelatedKeys containing the list of (key, value)
pairs. Finish the list with %NULL.

For more information see #grl_related_keys_new_valist.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GrlRelatedKeys</doc>
          <type name="RelatedKeys" c:type="GrlRelatedKeys*"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">first key</doc>
            <type name="KeyID" c:type="GrlKeyID"/>
          </parameter>
          <parameter transfer-ownership="none">
            <varargs>
            </varargs>
          </parameter>
        </parameters>
      </constructor>
      <method name="add"
              c:identifier="grl_related_keys_add"
              version="0.1.10"
              deprecated="Use grl_related_keys_set() instead"
              deprecated-version="0.1.13">
        <doc xml:whitespace="preserve">Adds a new @key to @relkeys, with no value. If @key already exists, it does
nothing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to add</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="grl_related_keys_dup" version="0.1.10">
        <doc xml:whitespace="preserve">Makes a deep copy of @relkeys and its contents.

Free it with #g_object_unref.</doc>
        <return-value transfer-ownership="full">
          <doc xml:whitespace="preserve">a new #GrlRelatedKeys.</doc>
          <type name="RelatedKeys" c:type="GrlRelatedKeys*"/>
        </return-value>
      </method>
      <method name="get" c:identifier="grl_related_keys_get" version="0.1.10">
        <doc xml:whitespace="preserve">Get the value associated with @key from @relkeys. If it does not contain any
value, %NULL will be returned.

freed by user.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">a #GValue. This value should not be modified nor</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to look up.</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_binary"
              c:identifier="grl_related_keys_get_binary"
              version="0.1.10">
        <doc xml:whitespace="preserve">Returns the value associated with @key from @relkeys. If @key has no value,
or value is not a binary, or @key is not in @relkeys, then 0 is returned.

successful @size will be set to the buffer size.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">buffer location associated with @key, or %NULL in other case. If</doc>
          <type name="guint8" c:type="guint8*"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to use</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
          <parameter name="size"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:whitespace="preserve">location to store the buffer size</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_float"
              c:identifier="grl_related_keys_get_float"
              version="0.1.10">
        <doc xml:whitespace="preserve">Returns the value associated with @key from @relkeys. If @key has no value,
or value is not a gfloat, or @key is not in @relkeys, then 0 is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">float value associated with @key, or 0 in other case.</doc>
          <type name="gfloat" c:type="gfloat"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to use</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_int"
              c:identifier="grl_related_keys_get_int"
              version="0.1.10">
        <doc xml:whitespace="preserve">Returns the value associated with @key from @relkeys. If @key has no value,
or value is not a gint, or @key is not in @relkeys, then 0 is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">int value associated with @key, or 0 in other case.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to use</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_keys"
              c:identifier="grl_related_keys_get_keys"
              version="0.1.13">
        <doc xml:whitespace="preserve">Returns a list with keys contained in @relkeys.

the keys. The content of the list should not be modified or freed. Use
g_list_free() when done using the list.</doc>
        <return-value transfer-ownership="container">
          <doc xml:whitespace="preserve">a list with</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="GObject.ParamSpec"/>
          </type>
        </return-value>
      </method>
      <method name="get_string"
              c:identifier="grl_related_keys_get_string"
              version="0.1.10">
        <doc xml:whitespace="preserve">Returns the value associated with @key from @relkeys. If @key has no value,
or value is not string, or @key is not in @relkeys, then %NULL is returned.

not change nor free the value.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">string associated with @key, or %NULL in other case. Caller should</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to use</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_key"
              c:identifier="grl_related_keys_has_key"
              version="0.1.10">
        <doc xml:whitespace="preserve">Checks if @key is in @relkeys.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @key is in @relkeys, %FALSE in other case.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to search</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
        </parameters>
      </method>
      <method name="key_is_known"
              c:identifier="grl_related_keys_key_is_known"
              version="0.1.10"
              deprecated="Use grl_related_keys_has_key() instead"
              deprecated-version="0.1.13">
        <doc xml:whitespace="preserve">Checks if @key has a value in @relkeys.</doc>
        <return-value transfer-ownership="none">
          <doc xml:whitespace="preserve">%TRUE if @key has a value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to search</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="grl_related_keys_set" version="0.1.10">
        <doc xml:whitespace="preserve">Sets the value associated with @key into @relkeys. Old value is freed and
the new one is set.

Also, checks that @value is compliant with @key specification, modifying it
accordingly. For instance, if @key requires a number between 0 and 10, but
value is outside this range, it will be adapted accordingly.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to change or add</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_binary"
              c:identifier="grl_related_keys_set_binary"
              version="0.1.10">
        <doc xml:whitespace="preserve">Sets the value associated with @key into @relkeys. @key must have been
registered as a binary-type key. Old value is replaced by the new one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to change or add</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
          <parameter name="buf" transfer-ownership="none">
            <doc xml:whitespace="preserve">buffer holding the relkeys</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:whitespace="preserve">size of the buffer</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_float"
              c:identifier="grl_related_keys_set_float"
              version="0.1.10">
        <doc xml:whitespace="preserve">Sets the value associated with @key into @relkeys. @key must have been
registered as a float-type key. Old value is replaced by the new one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to change or add</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
          <parameter name="floatvalue" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_int"
              c:identifier="grl_related_keys_set_int"
              version="0.1.10">
        <doc xml:whitespace="preserve">Sets the value associated with @key into @relkeys. @key must have been
registered as an int-type key. Old value is replaced by the new one.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to change or add</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
          <parameter name="intvalue" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string"
              c:identifier="grl_related_keys_set_string"
              version="0.1.10">
        <doc xml:whitespace="preserve">Sets the value associated with @key into @relkeys. @key must have been
registered as a strying-type key. Old value is freed and the new one is set.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <doc xml:whitespace="preserve">key to change or add</doc>
            <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
          </parameter>
          <parameter name="strvalue" transfer-ownership="none">
            <doc xml:whitespace="preserve">the new value</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RelatedKeysPrivate" c:type="GrlRelatedKeysPrivate*"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="RelatedKeysClass"
            c:type="GrlRelatedKeysClass"
            glib:is-gtype-struct-for="RelatedKeys">
      <doc xml:whitespace="preserve">Grilo Data Multivalued class</doc>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_grl_reserved" readable="0" private="1">
        <array zero-terminated="0" c:type="gpointer" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="RelatedKeysPrivate"
            c:type="GrlRelatedKeysPrivate"
            disguised="1">
    </record>
    <constant name="SOURCE_REMAINING_UNKNOWN"
              value="-1"
              c:type="GRL_SOURCE_REMAINING_UNKNOWN">
      <type name="gint" c:type="gint"/>
    </constant>
    <bitfield name="SupportedOps" c:type="GrlSupportedOps">
      <doc xml:whitespace="preserve">Bitwise flags which reflect the kind of operations that a
#GrlMediaPlugin supports.</doc>
      <member name="none" value="0" c:identifier="GRL_OP_NONE"/>
      <member name="metadata" value="1" c:identifier="GRL_OP_METADATA"/>
      <member name="resolve" value="2" c:identifier="GRL_OP_RESOLVE"/>
      <member name="browse" value="4" c:identifier="GRL_OP_BROWSE"/>
      <member name="search" value="8" c:identifier="GRL_OP_SEARCH"/>
      <member name="query" value="16" c:identifier="GRL_OP_QUERY"/>
      <member name="store" value="32" c:identifier="GRL_OP_STORE"/>
      <member name="store_parent"
              value="64"
              c:identifier="GRL_OP_STORE_PARENT"/>
      <member name="remove" value="128" c:identifier="GRL_OP_REMOVE"/>
      <member name="set_metadata"
              value="256"
              c:identifier="GRL_OP_SET_METADATA"/>
      <member name="media_from_uri"
              value="512"
              c:identifier="GRL_OP_MEDIA_FROM_URI"/>
      <member name="notify_change"
              value="1024"
              c:identifier="GRL_OP_NOTIFY_CHANGE"/>
    </bitfield>
    <function name="init" c:identifier="grl_init" version="0.1.6">
      <doc xml:whitespace="preserve">Initializes the Grilo library</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="argc"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full"
                   allow-none="1">
          <doc xml:whitespace="preserve">number of input arguments, length of @argv</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="argv"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full"
                   allow-none="1">
          <doc xml:whitespace="preserve">list of arguments</doc>
          <array length="0" zero-terminated="0" c:type="gchar**">
            <type name="utf8"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="init_get_option_group"
              c:identifier="grl_init_get_option_group"
              version="0.1.6"
              introspectable="0">
      <doc xml:whitespace="preserve">Returns a #GOptionGroup with Grilo's argument specifications.

This function is useful if you want to integrate Grilo with other
libraries that use the GOption commandline parser
(see g_option_context_add_group() ).

after use.</doc>
      <return-value>
        <doc xml:whitespace="preserve">a pointer to Grilo's option group. Should be dereferenced</doc>
        <type name="GLib.OptionGroup" c:type="GOptionGroup*"/>
      </return-value>
    </function>
    <function name="list_from_va"
              c:identifier="grl_list_from_va"
              version="0.1.6"
              introspectable="0">
      <doc xml:whitespace="preserve">Returns a #GList containing the va_list pointers. Use @NULL to finalize them,</doc>
      <return-value>
        <doc xml:whitespace="preserve">a #GList.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="p" transfer-ownership="none">
          <doc xml:whitespace="preserve">first pointer</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter transfer-ownership="none">
          <varargs>
          </varargs>
        </parameter>
      </parameters>
    </function>
    <function name="log" c:identifier="grl_log" introspectable="0">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="domain" transfer-ownership="none">
          <type name="LogDomain" c:type="GrlLogDomain*"/>
        </parameter>
        <parameter name="level" transfer-ownership="none">
          <type name="LogLevel" c:type="GrlLogLevel"/>
        </parameter>
        <parameter name="strloc" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter transfer-ownership="none">
          <varargs>
          </varargs>
        </parameter>
      </parameters>
    </function>
    <function name="log_configure"
              c:identifier="grl_log_configure"
              version="0.1.7">
      <doc xml:whitespace="preserve">Configure a set of log domains. The default configuration is to display
warning and error messages only for all the log domains.

The configuration string follows the following grammar:

|[
config-list: config | config ',' config-list
config: domain ':' level
domain: '*' | [a-zA-Z0-9]+
level: '*' | '-' | named-level | num-level
named-level: "none" | "error" | "warning" | "message" | "info" | "debug"
num-level: [0-5]
]|

examples:
&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;para&gt;"*:*": maximum verbosity for all the log domains&lt;/para&gt;
&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;"*:-": don't print any message&lt;/para&gt;&lt;/listitem&gt;
&lt;listitem&gt;&lt;para&gt;"media-source:debug,metadata-source:debug": prints debug,
info, message warning and error messages for the media-source and
metadata-source log domains&lt;/para&gt;&lt;/listitem&gt;
&lt;/itemizedlist&gt;

&lt;note&gt;It's possible to override the log configuration at runtime by
defining the GRL_DEBUG environment variable to a configuration string
as described above&lt;/note&gt;</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="config" transfer-ownership="none">
          <doc xml:whitespace="preserve">A string describing the wanted log configuration</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="log_domain_new"
              c:identifier="grl_log_domain_new"
              moved-to="LogDomain.new"
              version="0.1.7"
              introspectable="0">
      <return-value>
        <doc xml:whitespace="preserve">The new log domain</doc>
        <type name="LogDomain" c:type="GrlLogDomain*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:whitespace="preserve">The name for the new log domain</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="marshal_VOID__BOXED_ENUM_BOOLEAN"
              c:identifier="grl_marshal_VOID__BOXED_ENUM_BOOLEAN">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="closure" transfer-ownership="none">
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="return_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="n_param_values" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="param_values" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="invocation_hint" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="marshal_data" transfer-ownership="none">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="metadata_key_get_desc"
              c:identifier="grl_metadata_key_get_desc"
              version="0.1.6">
      <doc xml:whitespace="preserve">Retrieves the description associated with the key</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the description of the key</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="key" transfer-ownership="none">
          <doc xml:whitespace="preserve">key to look up</doc>
          <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
        </parameter>
      </parameters>
    </function>
    <function name="metadata_key_get_name"
              c:identifier="grl_metadata_key_get_name"
              version="0.1.6">
      <doc xml:whitespace="preserve">Retrieves the name associated with the key</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">The name of the key</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="key" transfer-ownership="none">
          <doc xml:whitespace="preserve">key to look up</doc>
          <type name="GObject.ParamSpec" c:type="GrlKeyID"/>
        </parameter>
      </parameters>
    </function>
    <function name="metadata_key_setup_system_keys"
              c:identifier="grl_metadata_key_setup_system_keys">
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="registry" transfer-ownership="none">
          <type name="PluginRegistry" c:type="GrlPluginRegistry*"/>
        </parameter>
      </parameters>
    </function>
    <function name="multiple_cancel"
              c:identifier="grl_multiple_cancel"
              version="0.1.6"
              deprecated="use grl_operation_cancel() instead."
              deprecated-version="0.1.16">
      <doc xml:whitespace="preserve">Cancel a running multiple search by issuing a cancel operation on each
source involved involved in the operation.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="search_id" transfer-ownership="none">
          <doc xml:whitespace="preserve">the identifier of the multiple operation to cancel</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="multiple_get_media_from_uri"
              c:identifier="grl_multiple_get_media_from_uri"
              version="0.1.7">
      <doc xml:whitespace="preserve">Goes though all available media sources until it finds one capable of
constructing a GrlMedia object representing the media resource exposed
by @uri.

This method is asynchronous.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="uri" transfer-ownership="none">
          <doc xml:whitespace="preserve">A URI that can be used to identify a media resource</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="keys" transfer-ownership="none">
          <doc xml:whitespace="preserve">List of metadata keys we want to obtain.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="KeyID"/>
          </type>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:whitespace="preserve">the operation flags</doc>
          <type name="MetadataResolutionFlags"
                c:type="GrlMetadataResolutionFlags"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   scope="notified"
                   closure="4">
          <doc xml:whitespace="preserve">the user defined callback</doc>
          <type name="MediaSourceMetadataCb"
                c:type="GrlMediaSourceMetadataCb"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none">
          <doc xml:whitespace="preserve">the user data to pass to the user callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="multiple_search"
              c:identifier="grl_multiple_search"
              version="0.1.6">
      <doc xml:whitespace="preserve">Search for @text in all the sources specified in @sources.

If @text is @NULL then NULL-text searchs will be used for each searchable
plugin (see #grl_media_source_search for more details).

This method is asynchronous.</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">the operation identifier</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="sources" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve"> a #GList of #GrlMediaSource&lt;!-- --&gt;s to search from (%NULL for all searchable sources)</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="MediaSource"/>
          </type>
        </parameter>
        <parameter name="text" transfer-ownership="none">
          <doc xml:whitespace="preserve">the text to search for</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="keys" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GList of #GrlKeyID to retrieve</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="GObject.ParamSpec"/>
          </type>
        </parameter>
        <parameter name="count" transfer-ownership="none">
          <doc xml:whitespace="preserve">the maximum number of elements to retrieve</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:whitespace="preserve">the operation flags</doc>
          <type name="MetadataResolutionFlags"
                c:type="GrlMetadataResolutionFlags"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   scope="notified"
                   closure="6">
          <doc xml:whitespace="preserve">the user defined callback</doc>
          <type name="MediaSourceResultCb" c:type="GrlMediaSourceResultCb"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none">
          <doc xml:whitespace="preserve">the user data to pass to the user callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="multiple_search_sync"
              c:identifier="grl_multiple_search_sync"
              version="0.1.6"
              throws="1">
      <doc xml:whitespace="preserve">Search for @text in all the sources specified in @sources.

This method is synchronous.</doc>
      <return-value transfer-ownership="full">
        <doc xml:whitespace="preserve">a list with #GrlMedia elements</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="Media"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="sources" transfer-ownership="none" allow-none="1">
          <doc xml:whitespace="preserve"> a #GList of #GrlMediaSource&lt;!-- --&gt;s where to search from (%NULL for all available sources with search capability)</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="MediaSource"/>
          </type>
        </parameter>
        <parameter name="text" transfer-ownership="none">
          <doc xml:whitespace="preserve">the text to search for</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="keys" transfer-ownership="none">
          <doc xml:whitespace="preserve">the #GList of #GrlKeyID to retrieve</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="GObject.ParamSpec"/>
          </type>
        </parameter>
        <parameter name="count" transfer-ownership="none">
          <doc xml:whitespace="preserve">the maximum number of elements to retrieve</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:whitespace="preserve">the operation flags</doc>
          <type name="MetadataResolutionFlags"
                c:type="GrlMetadataResolutionFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="operation_cancel"
              c:identifier="grl_operation_cancel"
              version="0.1.16">
      <doc xml:whitespace="preserve">Cancel an operation.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="operation_id" transfer-ownership="none">
          <doc xml:whitespace="preserve">the identifier of a running operation</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="operation_get_data"
              c:identifier="grl_operation_get_data"
              version="0.1.16">
      <doc xml:whitespace="preserve">Obtains the previously attached data</doc>
      <return-value transfer-ownership="none">
        <doc xml:whitespace="preserve">The previously attached data.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="operation_id" transfer-ownership="none">
          <doc xml:whitespace="preserve">the identifier of a running operation</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="operation_set_data"
              c:identifier="grl_operation_set_data"
              version="0.1.16">
      <doc xml:whitespace="preserve">Attach a pointer to the specific operation.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="operation_id" transfer-ownership="none">
          <doc xml:whitespace="preserve">the identifier of a running operation</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="user_data" transfer-ownership="none">
          <doc xml:whitespace="preserve">the data to attach</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="paging_translate"
              c:identifier="grl_paging_translate"
              version="0.1.6">
      <doc xml:whitespace="preserve">Grilo browsing implements a paging mechanism through @skip and @count values.

But there are some services (like Jamendo or Flickr) where paging is done
through a page number and page size: user request all elements in a page,
specifying in most cases what is the page size.

This function is a helper for this task, computing from @skip and @count what
is the optimal value of page size (limited by @max_page_size), which page
should the user request, and where requested data start inside the page.

By optimal we mean that it computes those values so only one page is required
to satisfy the data, using the smallest page size. If user is limiting page
size, then more requests to services might be needed. But still page size
will be an optimal value.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="skip" transfer-ownership="none">
          <doc xml:whitespace="preserve">number of elements to skip</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="count" transfer-ownership="none">
          <doc xml:whitespace="preserve">number of elements to retrieve</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="max_page_size" transfer-ownership="none">
          <doc xml:whitespace="preserve">maximum value for page size</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="page_size" transfer-ownership="none">
          <doc xml:whitespace="preserve">optimal page size</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
        <parameter name="page_number" transfer-ownership="none">
          <doc xml:whitespace="preserve">page which contain the first element to retrieve (starting at 1)</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
        <parameter name="internal_offset" transfer-ownership="none">
          <doc xml:whitespace="preserve">in the @page_number, offset where first element can be found (starting at 0)</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
