---
description: Yarn workspace structure and package organization
globs: 
alwaysApply: false
---
# ts-for-gir Workspace Structure

## Purpose
TypeScript type definition generator for GObject Introspection (GIR) files. Generates TypeScript definitions for GNOME libraries to use with GJS (GNOME JavaScript).

## Monorepo Structure
- Uses Yarn v4 workspaces
- Node.js >= 22 required
- All packages use ES modules (`"type": "module"`)

## Package Categories

### Core Generator Packages (`/packages/*`)
- `@ts-for-gir/cli` - Main CLI tool, entry point for users
- `@gi.ts/parser` - GIR XML parser (uses different namespace)
- `@ts-for-gir/lib` - Core library with shared functionality
- `@ts-for-gir/reporter` - Reporting system for problems and statistics with dependency injection
- `@ts-for-gir/generator-base` - Base classes for generators
- `@ts-for-gir/generator-typescript` - TypeScript definition generator
- `@ts-for-gir/generator-html-doc` - HTML documentation generator
- `@ts-for-gir/templates` - Additional templates for the generated `.d.ts` files

**Important:** Core packages run directly as TypeScript files - no build step required!

### Generated Type Packages (`/types/*`)
- Namespace: `@girs/*` (e.g., @girs/gtk-4.0, @girs/glib-2.0)
- Auto-generated - DO NOT manually edit
- Published to npm: https://github.com/gjsify/types

### Examples (`/examples/*`)
- Namespace: `@ts-for-gir-example/*`
- Private packages demonstrating usage
- Use workspace `@girs/*` packages
- **Require building** since GJS cannot execute TypeScript directly

### Tests (`/tests/*`)
- Namespace: `@ts-for-gir-test/*`
- Automated tests for the generator

## Type Generation System

### Template System (`/packages/templates/templates/`)
- **Primary approach** for manual type definitions and overrides
- Templates are injected **before** auto-generated content
- Use for complex types like GLib.Variant with advanced features
- Templates support TSDoc comments and backward compatibility
- Example: `glib-2.0.d.ts` template provides `deepUnpack<T extends $ParseDeepVariant<S> = $ParseDeepVariant<S>>(): T;`

### Override System (`/packages/generator-typescript/src/overrides/`)
- Secondary approach for preventing auto-generation of specific classes
- Use `node.assertClass("ClassName").noEmit()` to disable auto-generation
- Allows templates to provide complete manual implementations
- Prefer templates over large override strings for maintainability

### Output Directory Behavior
- **`/types/*` (Git submodule)**: Official published types, may have cached/different results
- **Custom output dirs**: Fresh generation, immediately reflects template/override changes
- **Testing approach**: Use `--outdir=./test-types-*` for development and testing
- **Template changes**: Require regeneration to take effect (`yarn ts-for-gir generate`)

### Advanced Variants Feature
- Controlled by `noAdvancedVariants: false` flag
- Provides automatic type inference for GLib.Variant operations
- Template system ensures backward compatibility with explicit type parameters
- Examples should work with both automatic inference and explicit types

## Key Commands
- `yarn start` - Run CLI directly (no build needed)
- `yarn build:types` - Generate all type packages
- `yarn build:examples` - Build all examples for GJS execution
- `yarn copy:girs` - Copy system GIR files
- `yarn test` - Run full test suite
- `yarn test:locally` - Quick local testing
- `yarn check` - Type checking across all packages