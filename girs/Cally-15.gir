<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Clutter" version="15"/>
  <include name="Cogl" version="15"/>
  <include name="CoglPango" version="15"/>
  <include name="Mtk" version="15"/>
  <package name="mutter-clutter-15"/>
  <c:include name="cally/cally.h"/>
  <namespace name="Cally"
             version="15"
             shared-library="libmutter-clutter-15.so.0"
             c:identifier-prefixes="Cally"
             c:symbol-prefixes="cally">
    <function-macro name="ACCESSIBLE_FACTORY"
                    c:identifier="CALLY_ACCESSIBLE_FACTORY"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="clutter/clutter/cally/cally-factory.h"
           line="29">Defines a new #AtkObjectFactory factory to create accessible
objects of a specific GType. It defines the factory GType and also
overrides the proper #AtkObjectFactory methods.

It assumes that the accessibility object provides a
@opt_create_accessible method in order to create the accessibility
object. It returns a @type GType object.</doc>
      <source-position filename="clutter/clutter/cally/cally-factory.h"
                       line="43"/>
      <parameters>
        <parameter name="type">
          <doc xml:space="preserve"
               filename="clutter/clutter/cally/cally-factory.h"
               line="31">GType of the accessible which is created by the factory</doc>
        </parameter>
        <parameter name="type_as_function">
          <doc xml:space="preserve"
               filename="clutter/clutter/cally/cally-factory.h"
               line="32">prefix of the accessible object methods</doc>
        </parameter>
        <parameter name="opt_create_accessible">
          <doc xml:space="preserve"
               filename="clutter/clutter/cally/cally-factory.h"
               line="33">method to instantiate the accessibility object</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ACTOR_SET_FACTORY"
                    c:identifier="CALLY_ACTOR_SET_FACTORY"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="clutter/clutter/cally/cally-factory.h"
           line="97">Sets the #AtkObjectFactory to be used in order to instantiate
accessibility objects for the actor which GType is @widget_type.</doc>
      <source-position filename="clutter/clutter/cally/cally-factory.h"
                       line="105"/>
      <parameters>
        <parameter name="widget_type">
          <doc xml:space="preserve"
               filename="clutter/clutter/cally/cally-factory.h"
               line="99">GType of the clutter actor</doc>
        </parameter>
        <parameter name="type_as_function">
          <doc xml:space="preserve"
               filename="clutter/clutter/cally/cally-factory.h"
               line="100">prefix of the accessible object methods</doc>
        </parameter>
      </parameters>
    </function-macro>
    <class name="Actor"
           c:symbol-prefix="actor"
           c:type="CallyActor"
           parent="Atk.GObjectAccessible"
           glib:type-name="CallyActor"
           glib:get-type="cally_actor_get_type"
           glib:type-struct="ActorClass">
      <doc xml:space="preserve"
           filename="clutter/clutter/cally/cally-actor.c"
           line="25">Implementation of the ATK interfaces for [class@Clutter.Actor]

#CallyActor implements the required ATK interfaces of [class@Clutter.Actor]
exposing the common elements on each actor (position, extents, etc).</doc>
      <source-position filename="clutter/clutter/cally/cally-actor.h"
                       line="63"/>
      <implements name="Atk.Component"/>
      <constructor name="new" c:identifier="cally_actor_new">
        <doc xml:space="preserve"
             filename="clutter/clutter/cally/cally-actor.c"
             line="131">Creates a new #CallyActor for the given @actor</doc>
        <source-position filename="clutter/clutter/cally/cally-actor.h"
                         line="66"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="clutter/clutter/cally/cally-actor.c"
               line="137">the newly created #AtkObject</doc>
          <type name="Atk.Object" c:type="AtkObject*"/>
        </return-value>
        <parameters>
          <parameter name="actor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter/clutter/cally/cally-actor.c"
                 line="133">a #ClutterActor</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance">
        <type name="Atk.GObjectAccessible" c:type="AtkGObjectAccessible"/>
      </field>
    </class>
    <record name="ActorClass"
            c:type="CallyActorClass"
            glib:is-gtype-struct-for="Actor">
      <source-position filename="clutter/clutter/cally/cally-actor.h"
                       line="63"/>
      <field name="parent_class" readable="0" private="1">
        <type name="Atk.GObjectAccessibleClass"
              c:type="AtkGObjectAccessibleClass"/>
      </field>
      <field name="notify_clutter">
        <doc xml:space="preserve"
             filename="clutter/clutter/cally/cally-actor.h"
             line="53">Signal handler for notify signal on Clutter actor</doc>
        <callback name="notify_clutter">
          <source-position filename="clutter/clutter/cally/cally-actor.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="GObject.Object" c:type="GObject*"/>
            </parameter>
            <parameter name="pspec" transfer-ownership="none">
              <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="ActorPrivate"
            c:type="CallyActorPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="clutter/clutter/cally/cally-actor.h"
                       line="48"/>
    </record>
    <class name="Clone"
           c:symbol-prefix="clone"
           c:type="CallyClone"
           parent="Actor"
           glib:type-name="CallyClone"
           glib:get-type="cally_clone_get_type"
           glib:type-struct="CloneClass">
      <doc xml:space="preserve"
           filename="clutter/clutter/cally/cally-clone.c"
           line="21">Implementation of the ATK interfaces for a #ClutterClone

#CallyClone implements the required ATK interfaces of [class@Clutter.Clone]

In particular it sets a proper role for the clone, as just a image,
as it is the sanest and simplest approach.</doc>
      <source-position filename="clutter/clutter/cally/cally-clone.h"
                       line="48"/>
      <implements name="Atk.Component"/>
      <constructor name="new" c:identifier="cally_clone_new">
        <doc xml:space="preserve"
             filename="clutter/clutter/cally/cally-clone.c"
             line="95">Creates a new #CallyClone for the given @actor. @actor must be a
[class@Clutter.Clone].</doc>
        <source-position filename="clutter/clutter/cally/cally-clone.h"
                         line="51"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="clutter/clutter/cally/cally-clone.c"
               line="102">the newly created #AtkObject</doc>
          <type name="Atk.Object" c:type="AtkObject*"/>
        </return-value>
        <parameters>
          <parameter name="actor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter/clutter/cally/cally-clone.c"
                 line="97">a #ClutterActor</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance">
        <type name="Actor" c:type="CallyActor"/>
      </field>
    </class>
    <record name="CloneClass"
            c:type="CallyCloneClass"
            glib:is-gtype-struct-for="Clone">
      <source-position filename="clutter/clutter/cally/cally-clone.h"
                       line="48"/>
      <field name="parent_class" readable="0" private="1">
        <type name="ActorClass" c:type="CallyActorClass"/>
      </field>
    </record>
    <class name="Root"
           c:symbol-prefix="root"
           c:type="CallyRoot"
           parent="Atk.GObjectAccessible"
           glib:type-name="CallyRoot"
           glib:get-type="cally_root_get_type"
           glib:type-struct="RootClass">
      <doc xml:space="preserve"
           filename="clutter/clutter/cally/cally-root.c"
           line="21">Root object for the Cally toolkit

#CallyRoot is the root object of the accessibility tree-like
hierarchy, exposing the application level.

Somewhat equivalent to #GailTopLevel. We consider that this class
expose the a11y information of the [class@Clutter.StageManager], as the
children of this object are the different [class@Clutter.Stage] managed (so
the [class@GObject.Object] used in the [method@Atk.Object.initialize] is the
[class@Clutter.StageManager]).</doc>
      <source-position filename="clutter/clutter/cally/cally-root.h"
                       line="49"/>
      <constructor name="new" c:identifier="cally_root_new">
        <doc xml:space="preserve"
             filename="clutter/clutter/cally/cally-root.c"
             line="108">Creates a new #CallyRoot object.</doc>
        <source-position filename="clutter/clutter/cally/cally-root.h"
                         line="52"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="clutter/clutter/cally/cally-root.c"
               line="113">the newly created #AtkObject</doc>
          <type name="Atk.Object" c:type="AtkObject*"/>
        </return-value>
      </constructor>
      <field name="parent_instance">
        <type name="Atk.GObjectAccessible" c:type="AtkGObjectAccessible"/>
      </field>
    </class>
    <record name="RootClass"
            c:type="CallyRootClass"
            glib:is-gtype-struct-for="Root">
      <source-position filename="clutter/clutter/cally/cally-root.h"
                       line="49"/>
      <field name="parent_class" readable="0" private="1">
        <type name="Atk.GObjectAccessibleClass"
              c:type="AtkGObjectAccessibleClass"/>
      </field>
    </record>
    <class name="Stage"
           c:symbol-prefix="stage"
           c:type="CallyStage"
           parent="Actor"
           glib:type-name="CallyStage"
           glib:get-type="cally_stage_get_type"
           glib:type-struct="StageClass">
      <doc xml:space="preserve"
           filename="clutter/clutter/cally/cally-stage.c"
           line="21">Implementation of the ATK interfaces for a #ClutterStage

#CallyStage implements the required ATK interfaces for [class@Clutter.Stage]

Some implementation details: at this moment #CallyStage is used as
the most similar Window object in this toolkit (ie: emitting window
related signals), although the real purpose of [class@Clutter.Stage] is
being a canvas. Anyway, this is required for applications using
just clutter, or directly [class@Clutter.Stage]</doc>
      <source-position filename="clutter/clutter/cally/cally-stage.h"
                       line="48"/>
      <implements name="Atk.Component"/>
      <implements name="Atk.Window"/>
      <constructor name="new" c:identifier="cally_stage_new">
        <doc xml:space="preserve"
             filename="clutter/clutter/cally/cally-stage.c"
             line="86">Creates a new #CallyStage for the given @actor. @actor should be a
[class@Clutter.Stage].</doc>
        <source-position filename="clutter/clutter/cally/cally-stage.h"
                         line="51"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="clutter/clutter/cally/cally-stage.c"
               line="93">the newly created #AtkObject</doc>
          <type name="Atk.Object" c:type="AtkObject*"/>
        </return-value>
        <parameters>
          <parameter name="actor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter/clutter/cally/cally-stage.c"
                 line="88">a #ClutterActor</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance">
        <type name="Actor" c:type="CallyActor"/>
      </field>
    </class>
    <record name="StageClass"
            c:type="CallyStageClass"
            glib:is-gtype-struct-for="Stage">
      <source-position filename="clutter/clutter/cally/cally-stage.h"
                       line="48"/>
      <field name="parent_class" readable="0" private="1">
        <type name="ActorClass" c:type="CallyActorClass"/>
      </field>
    </record>
    <class name="Text"
           c:symbol-prefix="text"
           c:type="CallyText"
           parent="Actor"
           glib:type-name="CallyText"
           glib:get-type="cally_text_get_type"
           glib:type-struct="TextClass">
      <doc xml:space="preserve"
           filename="clutter/clutter/cally/cally-text.c"
           line="29">Implementation of the ATK interfaces for a [class@Clutter.Text]

#CallyText implements the required ATK interfaces of
[class@Clutter.Text], #AtkText and #AtkEditableText</doc>
      <source-position filename="clutter/clutter/cally/cally-text.h"
                       line="48"/>
      <implements name="Atk.Action"/>
      <implements name="Atk.Component"/>
      <implements name="Atk.EditableText"/>
      <implements name="Atk.Text"/>
      <constructor name="new" c:identifier="cally_text_new">
        <doc xml:space="preserve"
             filename="clutter/clutter/cally/cally-text.c"
             line="288">Creates a new #CallyText for the given @actor. @actor must be a
[class@Clutter.Text].</doc>
        <source-position filename="clutter/clutter/cally/cally-text.h"
                         line="51"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="clutter/clutter/cally/cally-text.c"
               line="295">the newly created #AtkObject</doc>
          <type name="Atk.Object" c:type="AtkObject*"/>
        </return-value>
        <parameters>
          <parameter name="actor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter/clutter/cally/cally-text.c"
                 line="290">a #ClutterActor</doc>
            <type name="Clutter.Actor" c:type="ClutterActor*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent_instance">
        <type name="Actor" c:type="CallyActor"/>
      </field>
    </class>
    <record name="TextClass"
            c:type="CallyTextClass"
            glib:is-gtype-struct-for="Text">
      <source-position filename="clutter/clutter/cally/cally-text.h"
                       line="48"/>
      <field name="parent_class" readable="0" private="1">
        <type name="ActorClass" c:type="CallyActorClass"/>
      </field>
    </record>
    <class name="Util"
           c:symbol-prefix="util"
           c:type="CallyUtil"
           parent="Atk.Util"
           glib:type-name="CallyUtil"
           glib:get-type="cally_util_get_type"
           glib:type-struct="UtilClass">
      <doc xml:space="preserve"
           filename="clutter/clutter/cally/cally-util.c"
           line="24">#AtkUtil implementation

#CallyUtil implements #AtkUtil abstract methods. Although it
includes the name "Util" it is in fact one of the most important
interfaces to be implemented in any ATK toolkit implementation.

For instance, it defines [func@Atk.get_root], the method that returns
the root object in the hierarchy. Without it, you don't have
available any accessible object.</doc>
      <source-position filename="clutter/clutter/cally/cally-util.h"
                       line="48"/>
      <field name="parent_instance">
        <type name="Atk.Util" c:type="AtkUtil"/>
      </field>
    </class>
    <record name="UtilClass"
            c:type="CallyUtilClass"
            glib:is-gtype-struct-for="Util">
      <source-position filename="clutter/clutter/cally/cally-util.h"
                       line="48"/>
      <field name="parent_class" readable="0" private="1">
        <type name="Atk.UtilClass" c:type="AtkUtilClass"/>
      </field>
    </record>
    <function name="accessibility_init"
              c:identifier="cally_accessibility_init">
      <doc xml:space="preserve"
           filename="clutter/clutter/cally/cally.c"
           line="43">Initializes the accessibility support.</doc>
      <source-position filename="clutter/clutter/cally/cally-main.h"
                       line="39"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="clutter/clutter/cally/cally.c"
             line="48">%TRUE if accessibility support has been correctly
initialized.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="get_cally_initialized"
              c:identifier="cally_get_cally_initialized">
      <doc xml:space="preserve"
           filename="clutter/clutter/cally/cally.c"
           line="68">Returns if the accessibility support using cally is enabled.</doc>
      <source-position filename="clutter/clutter/cally/cally-main.h"
                       line="37"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="clutter/clutter/cally/cally.c"
             line="73">%TRUE if accessibility support has been correctly
initialized.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="snoop_key_event" c:identifier="cally_snoop_key_event">
      <source-position filename="clutter/clutter/cally/cally-util.h"
                       line="52"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="stage" transfer-ownership="none">
          <type name="Clutter.Stage" c:type="ClutterStage*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <type name="Clutter.KeyEvent" c:type="ClutterKeyEvent*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
