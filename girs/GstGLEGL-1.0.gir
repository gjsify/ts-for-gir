<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Gst" version="1.0"/>
  <include name="GstBase" version="1.0"/>
  <include name="GstGL" version="1.0"/>
  <include name="GstVideo" version="1.0"/>
  <package name="gstreamer-gl-egl-1.0"/>
  <c:include name="gst/gl/egl/egl.h"/>
  <namespace name="GstGLEGL"
             version="1.0"
             shared-library="libgstgl-1.0.so.0"
             c:identifier-prefixes="Gst"
             c:symbol-prefixes="gst">
    <record name="EGLImage"
            c:type="GstEGLImage"
            glib:type-name="GstEGLImage"
            glib:get-type="gst_egl_image_get_type"
            c:symbol-prefix="egl_image">
      <doc xml:space="preserve"
           filename="gst-libs/gst/gl/egl/gsteglimage.c"
           line="24">#GstEGLImage represents and holds an `EGLImage` handle.

A #GstEGLImage can be created from a dmabuf with gst_egl_image_from_dmabuf(),
or gst_egl_image_from_dmabuf_direct(), or #GstGLMemoryEGL provides a
#GstAllocator to allocate `EGLImage`'s bound to and OpenGL texture.</doc>
      <source-position filename="gst-libs/gst/gl/egl/gsteglimage.h" line="69"/>
      <field name="parent" readable="0" private="1">
        <type name="Gst.MiniObject" c:type="GstMiniObject"/>
      </field>
      <field name="context" readable="0" private="1">
        <type name="GstGL.GLContext" c:type="GstGLContext*"/>
      </field>
      <field name="image" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="format" readable="0" private="1">
        <type name="GstGL.GLFormat" c:type="GstGLFormat"/>
      </field>
      <field name="destroy_data" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="destroy_notify" readable="0" private="1">
        <type name="EGLImageDestroyNotify" c:type="GstEGLImageDestroyNotify"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <constructor name="new_wrapped" c:identifier="gst_egl_image_new_wrapped">
        <source-position filename="gst-libs/gst/gl/egl/gsteglimage.h"
                         line="72"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gst-libs/gst/gl/egl/gsteglimage.c"
               line="277">a new #GstEGLImage wrapping @image</doc>
          <type name="EGLImage" c:type="GstEGLImage*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gst-libs/gst/gl/egl/gsteglimage.c"
                 line="271">a #GstGLContext (must be an EGL context)</doc>
            <type name="GstGL.GLContext" c:type="GstGLContext*"/>
          </parameter>
          <parameter name="image"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gst-libs/gst/gl/egl/gsteglimage.c"
                 line="272">the image to wrap</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gst-libs/gst/gl/egl/gsteglimage.c"
                 line="273">the #GstGLFormat</doc>
            <type name="GstGL.GLFormat" c:type="GstGLFormat"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified">
            <doc xml:space="preserve"
                 filename="gst-libs/gst/gl/egl/gsteglimage.c"
                 line="274">user data</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="user_data_destroy"
                     transfer-ownership="none"
                     scope="notified"
                     destroy="3">
            <doc xml:space="preserve"
                 filename="gst-libs/gst/gl/egl/gsteglimage.c"
                 line="275">called when @user_data is no longer needed</doc>
            <type name="EGLImageDestroyNotify"
                  c:type="GstEGLImageDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_image" c:identifier="gst_egl_image_get_image">
        <source-position filename="gst-libs/gst/gl/egl/gsteglimage.h"
                         line="78"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gst-libs/gst/gl/egl/gsteglimage.c"
               line="232">the `EGLImage` of @image</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="image" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gst-libs/gst/gl/egl/gsteglimage.c"
                 line="230">a #GstEGLImage</doc>
            <type name="EGLImage" c:type="GstEGLImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="from_texture" c:identifier="gst_egl_image_from_texture">
        <source-position filename="gst-libs/gst/gl/egl/gsteglimage.h"
                         line="81"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="gst-libs/gst/gl/egl/gsteglimage.c"
               line="455">a #GstEGLImage wrapping @gl_mem or %NULL on failure</doc>
          <type name="EGLImage" c:type="GstEGLImage*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gst-libs/gst/gl/egl/gsteglimage.c"
                 line="451">a #GstGLContext (must be an EGL context)</doc>
            <type name="GstGL.GLContext" c:type="GstGLContext*"/>
          </parameter>
          <parameter name="gl_mem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gst-libs/gst/gl/egl/gsteglimage.c"
                 line="452">a #GstGLMemory</doc>
            <type name="GstGL.GLMemory" c:type="GstGLMemory*"/>
          </parameter>
          <parameter name="attribs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gst-libs/gst/gl/egl/gsteglimage.c"
                 line="453">additional attributes to add to the `eglCreateImage`() call.</doc>
            <type name="guintptr" c:type="guintptr*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <callback name="EGLImageDestroyNotify" c:type="GstEGLImageDestroyNotify">
      <doc xml:space="preserve"
           filename="gst-libs/gst/gl/egl/gsteglimage.h"
           line="40">Function to be called when the GstEGLImage is destroyed. It should free
the associated `EGLImage` if necessary</doc>
      <source-position filename="gst-libs/gst/gl/egl/gsteglimage.h" line="48"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="image" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gst-libs/gst/gl/egl/gsteglimage.h"
               line="42">a #GstEGLImage</doc>
          <type name="EGLImage" c:type="GstEGLImage*"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gst-libs/gst/gl/egl/gsteglimage.h"
               line="43">user data passed to gst_egl_image_new_wrapped()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <function-macro name="EGL_IMAGE"
                    c:identifier="GST_EGL_IMAGE"
                    introspectable="0">
      <source-position filename="gst-libs/gst/gl/egl/gsteglimage.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="EGL_IMAGE_CAST"
                    c:identifier="GST_EGL_IMAGE_CAST"
                    introspectable="0">
      <source-position filename="gst-libs/gst/gl/egl/gsteglimage.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="GLDisplayEGL"
           c:symbol-prefix="gl_display_egl"
           c:type="GstGLDisplayEGL"
           parent="GstGL.GLDisplay"
           glib:type-name="GstGLDisplayEGL"
           glib:get-type="gst_gl_display_egl_get_type"
           glib:type-struct="GLDisplayEGLClass">
      <doc xml:space="preserve"
           filename="gst-libs/gst/gl/egl/gstgldisplay_egl.h"
           line="41">the contents of a #GstGLDisplayEGL are private and should only be accessed
through the provided API</doc>
      <source-position filename="gst-libs/gst/gl/egl/gstgldisplay_egl.h"
                       line="64"/>
      <constructor name="new" c:identifier="gst_gl_display_egl_new">
        <doc xml:space="preserve"
             filename="gst-libs/gst/gl/egl/gstgldisplay_egl.c"
             line="246">Create a new #GstGLDisplayEGL using the default EGL_DEFAULT_DISPLAY.</doc>
        <source-position filename="gst-libs/gst/gl/egl/gstgldisplay_egl.h"
                         line="67"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="gst-libs/gst/gl/egl/gstgldisplay_egl.c"
               line="251">a new #GstGLDisplayEGL or %NULL</doc>
          <type name="GLDisplayEGL" c:type="GstGLDisplayEGL*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_egl_display"
                   c:identifier="gst_gl_display_egl_new_with_egl_display">
        <source-position filename="gst-libs/gst/gl/egl/gstgldisplay_egl.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="GLDisplayEGL" c:type="GstGLDisplayEGL*"/>
        </return-value>
        <parameters>
          <parameter name="display"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="from_gl_display"
                c:identifier="gst_gl_display_egl_from_gl_display"
                version="1.12">
        <doc xml:space="preserve"
             filename="gst-libs/gst/gl/egl/gstgldisplay_egl.c"
             line="311">Creates a EGL display connection from a native Display.

This function will return the same value for multiple calls with the same
@display.</doc>
        <source-position filename="gst-libs/gst/gl/egl/gstgldisplay_egl.h"
                         line="73"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="gst-libs/gst/gl/egl/gstgldisplay_egl.c"
               line="320">a new #GstGLDisplayEGL</doc>
          <type name="GLDisplayEGL" c:type="GstGLDisplayEGL*"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gst-libs/gst/gl/egl/gstgldisplay_egl.c"
                 line="313">an existing #GstGLDisplay</doc>
            <type name="GstGL.GLDisplay" c:type="GstGLDisplay*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_from_native"
                c:identifier="gst_gl_display_egl_get_from_native"
                version="1.12">
        <doc xml:space="preserve"
             filename="gst-libs/gst/gl/egl/gstgldisplay_egl.c"
             line="119">Attempts to create a new `EGLDisplay` from @display.  If @type is
%GST_GL_DISPLAY_TYPE_ANY, then @display must be 0. @type must not be
%GST_GL_DISPLAY_TYPE_NONE.</doc>
        <source-position filename="gst-libs/gst/gl/egl/gstgldisplay_egl.h"
                         line="76"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gst-libs/gst/gl/egl/gstgldisplay_egl.c"
               line="128">A `EGLDisplay` or `EGL_NO_DISPLAY`</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gst-libs/gst/gl/egl/gstgldisplay_egl.c"
                 line="121">a #GstGLDisplayType</doc>
            <type name="GstGL.GLDisplayType" c:type="GstGLDisplayType"/>
          </parameter>
          <parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gst-libs/gst/gl/egl/gstgldisplay_egl.c"
                 line="122">pointer to a display (or 0)</doc>
            <type name="guintptr" c:type="guintptr"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent">
        <type name="GstGL.GLDisplay" c:type="GstGLDisplay"/>
      </field>
      <field name="display" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="foreign_display" readable="0" private="1">
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="GLDisplayEGLClass"
            c:type="GstGLDisplayEGLClass"
            glib:is-gtype-struct-for="GLDisplayEGL">
      <source-position filename="gst-libs/gst/gl/egl/gstgldisplay_egl.h"
                       line="64"/>
      <field name="object_class">
        <type name="GstGL.GLDisplayClass" c:type="GstGLDisplayClass"/>
      </field>
      <field name="_padding">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="GLDisplayEGLDevice"
           c:symbol-prefix="gl_display_egl_device"
           c:type="GstGLDisplayEGLDevice"
           version="1.18"
           parent="GstGL.GLDisplay"
           glib:type-name="GstGLDisplayEGLDevice"
           glib:get-type="gst_gl_display_egl_device_get_type"
           glib:type-struct="GLDisplayEGLDeviceClass">
      <doc xml:space="preserve"
           filename="gst-libs/gst/gl/egl/gstgldisplay_egl_device.h"
           line="42">the contents of a #GstGLDisplayEGLDevice are private and should only be accessed
through the provided API</doc>
      <source-position filename="gst-libs/gst/gl/egl/gstgldisplay_egl_device.h"
                       line="71"/>
      <constructor name="new"
                   c:identifier="gst_gl_display_egl_device_new"
                   version="1.18">
        <doc xml:space="preserve"
             filename="gst-libs/gst/gl/egl/gstgldisplay_egl_device.c"
             line="87">Create a new #GstGLDisplayEGLDevice with an EGLDevice supported device</doc>
        <source-position filename="gst-libs/gst/gl/egl/gstgldisplay_egl_device.h"
                         line="74"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="gst-libs/gst/gl/egl/gstgldisplay_egl_device.c"
               line="93">a new #GstGLDisplayEGLDevice or %NULL</doc>
          <type name="GLDisplayEGLDevice" c:type="GstGLDisplayEGLDevice*"/>
        </return-value>
        <parameters>
          <parameter name="device_index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gst-libs/gst/gl/egl/gstgldisplay_egl_device.c"
                 line="89">the index of device to use</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_egl_device"
                   c:identifier="gst_gl_display_egl_device_new_with_egl_device"
                   version="1.18">
        <doc xml:space="preserve"
             filename="gst-libs/gst/gl/egl/gstgldisplay_egl_device.c"
             line="140">Creates a new #GstGLDisplayEGLDevice with EGLDeviceEXT .
The @device must be created using EGLDevice enumeration.</doc>
        <source-position filename="gst-libs/gst/gl/egl/gstgldisplay_egl_device.h"
                         line="77"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gst-libs/gst/gl/egl/gstgldisplay_egl_device.c"
               line="147">a new #GstGLDisplayEGLDevice</doc>
          <type name="GLDisplayEGLDevice" c:type="GstGLDisplayEGLDevice*"/>
        </return-value>
        <parameters>
          <parameter name="device"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gst-libs/gst/gl/egl/gstgldisplay_egl_device.c"
                 line="142">an existing EGLDeviceEXT</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent">
        <type name="GstGL.GLDisplay" c:type="GstGLDisplay"/>
      </field>
      <field name="device">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_padding">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="GLDisplayEGLDeviceClass"
            c:type="GstGLDisplayEGLDeviceClass"
            glib:is-gtype-struct-for="GLDisplayEGLDevice"
            version="1.18">
      <doc xml:space="preserve"
           filename="gst-libs/gst/gl/egl/gstgldisplay_egl_device.h"
           line="59">Opaque #GstGLDisplayEGLDeviceClass struct</doc>
      <source-position filename="gst-libs/gst/gl/egl/gstgldisplay_egl_device.h"
                       line="71"/>
      <field name="object_class">
        <type name="GstGL.GLDisplayClass" c:type="GstGLDisplayClass"/>
      </field>
      <field name="_padding">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="GLMemoryEGL"
            c:type="GstGLMemoryEGL"
            glib:type-name="GstGLMemoryEGL"
            glib:get-type="gst_gl_memory_egl_get_type"
            c:symbol-prefix="gl_memory_egl">
      <doc xml:space="preserve"
           filename="gst-libs/gst/gl/egl/gstglmemoryegl.c"
           line="25">#GstGLMemoryEGL is created or wrapped through gst_gl_base_memory_alloc()
with #GstGLVideoAllocationParams.</doc>
      <source-position filename="gst-libs/gst/gl/egl/gstglmemoryegl.h"
                       line="59"/>
      <field name="mem" readable="0" private="1">
        <type name="GstGL.GLMemory" c:type="GstGLMemory"/>
      </field>
      <field name="image" readable="0" private="1">
        <type name="EGLImage" c:type="GstEGLImage*"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <method name="get_display"
              c:identifier="gst_gl_memory_egl_get_display"
              version="1.10">
        <source-position filename="gst-libs/gst/gl/egl/gstglmemoryegl.h"
                         line="88"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gst-libs/gst/gl/egl/gstglmemoryegl.c"
               line="105">The EGLDisplay @mem is associated with</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="mem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gst-libs/gst/gl/egl/gstglmemoryegl.c"
                 line="103">a #GstGLMemoryEGL</doc>
            <type name="GLMemoryEGL" c:type="GstGLMemoryEGL*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_image"
              c:identifier="gst_gl_memory_egl_get_image"
              version="1.10">
        <source-position filename="gst-libs/gst/gl/egl/gstglmemoryegl.h"
                         line="85"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="gst-libs/gst/gl/egl/gstglmemoryegl.c"
               line="89">The EGLImage held by @mem</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="mem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gst-libs/gst/gl/egl/gstglmemoryegl.c"
                 line="87">a #GstGLMemoryEGL</doc>
            <type name="GLMemoryEGL" c:type="GstGLMemoryEGL*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="init_once"
                c:identifier="gst_gl_memory_egl_init_once"
                version="1.10">
        <doc xml:space="preserve"
             filename="gst-libs/gst/gl/egl/gstglmemoryegl.c"
             line="260">Initializes the GL Memory allocator. It is safe to call this function
multiple times.  This must be called before any other GstGLMemoryEGL operation.</doc>
        <source-position filename="gst-libs/gst/gl/egl/gstglmemoryegl.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
    </record>
    <class name="GLMemoryEGLAllocator"
           c:symbol-prefix="gl_memory_egl_allocator"
           c:type="GstGLMemoryEGLAllocator"
           parent="GstGL.GLMemoryAllocator"
           glib:type-name="GstGLMemoryEGLAllocator"
           glib:get-type="gst_gl_memory_egl_allocator_get_type"
           glib:type-struct="GLMemoryEGLAllocatorClass">
      <doc xml:space="preserve"
           filename="gst-libs/gst/gl/egl/gstglmemoryegl.h"
           line="90">Opaque #GstGLMemoryEGLAllocator struct</doc>
      <source-position filename="gst-libs/gst/gl/egl/gstglmemoryegl.h"
                       line="115"/>
      <field name="parent" readable="0" private="1">
        <type name="GstGL.GLMemoryAllocator" c:type="GstGLMemoryAllocator"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="GLMemoryEGLAllocatorClass"
            c:type="GstGLMemoryEGLAllocatorClass"
            glib:is-gtype-struct-for="GLMemoryEGLAllocator">
      <doc xml:space="preserve"
           filename="gst-libs/gst/gl/egl/gstglmemoryegl.h"
           line="104">The #GstGLMemoryEGLAllocatorClass only contains private data</doc>
      <source-position filename="gst-libs/gst/gl/egl/gstglmemoryegl.h"
                       line="115"/>
      <field name="parent_class" readable="0" private="1">
        <type name="GstGL.GLMemoryAllocatorClass"
              c:type="GstGLMemoryAllocatorClass"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <function-macro name="GL_DISPLAY_EGL"
                    c:identifier="GST_GL_DISPLAY_EGL"
                    introspectable="0">
      <source-position filename="gst-libs/gst/gl/egl/gstgldisplay_egl.h"
                       line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GL_DISPLAY_EGL_CAST"
                    c:identifier="GST_GL_DISPLAY_EGL_CAST"
                    introspectable="0">
      <source-position filename="gst-libs/gst/gl/egl/gstgldisplay_egl.h"
                       line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GL_DISPLAY_EGL_CLASS"
                    c:identifier="GST_GL_DISPLAY_EGL_CLASS"
                    introspectable="0">
      <source-position filename="gst-libs/gst/gl/egl/gstgldisplay_egl.h"
                       line="33"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GL_DISPLAY_EGL_DEVICE"
                    c:identifier="GST_GL_DISPLAY_EGL_DEVICE"
                    introspectable="0">
      <source-position filename="gst-libs/gst/gl/egl/gstgldisplay_egl_device.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GL_DISPLAY_EGL_DEVICE_CAST"
                    c:identifier="GST_GL_DISPLAY_EGL_DEVICE_CAST"
                    introspectable="0">
      <source-position filename="gst-libs/gst/gl/egl/gstgldisplay_egl_device.h"
                       line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GL_DISPLAY_EGL_DEVICE_CLASS"
                    c:identifier="GST_GL_DISPLAY_EGL_DEVICE_CLASS"
                    introspectable="0">
      <source-position filename="gst-libs/gst/gl/egl/gstgldisplay_egl_device.h"
                       line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="GL_DISPLAY_EGL_NAME"
              value="gst.gl.display.egl"
              c:type="GST_GL_DISPLAY_EGL_NAME">
      <source-position filename="gst-libs/gst/gl/egl/gstgldisplay_egl.h"
                       line="78"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="GL_MEMORY_EGL_ALLOCATOR"
                    c:identifier="GST_GL_MEMORY_EGL_ALLOCATOR"
                    introspectable="0">
      <source-position filename="gst-libs/gst/gl/egl/gstglmemoryegl.h"
                       line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GL_MEMORY_EGL_ALLOCATOR_CAST"
                    c:identifier="GST_GL_MEMORY_EGL_ALLOCATOR_CAST"
                    introspectable="0">
      <source-position filename="gst-libs/gst/gl/egl/gstglmemoryegl.h"
                       line="40"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GL_MEMORY_EGL_ALLOCATOR_CLASS"
                    c:identifier="GST_GL_MEMORY_EGL_ALLOCATOR_CLASS"
                    introspectable="0">
      <source-position filename="gst-libs/gst/gl/egl/gstglmemoryegl.h"
                       line="39"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GL_MEMORY_EGL_ALLOCATOR_GET_CLASS"
                    c:identifier="GST_GL_MEMORY_EGL_ALLOCATOR_GET_CLASS"
                    introspectable="0">
      <source-position filename="gst-libs/gst/gl/egl/gstglmemoryegl.h"
                       line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="GL_MEMORY_EGL_ALLOCATOR_NAME"
              value="GLMemoryEGL"
              c:type="GST_GL_MEMORY_EGL_ALLOCATOR_NAME">
      <doc xml:space="preserve"
           filename="gst-libs/gst/gl/egl/gstglmemoryegl.h"
           line="61">The name of the GL Memory EGL allocator</doc>
      <source-position filename="gst-libs/gst/gl/egl/gstglmemoryegl.h"
                       line="66"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="IS_EGL_IMAGE"
                    c:identifier="GST_IS_EGL_IMAGE"
                    introspectable="0">
      <source-position filename="gst-libs/gst/gl/egl/gsteglimage.h" line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GL_DISPLAY_EGL"
                    c:identifier="GST_IS_GL_DISPLAY_EGL"
                    introspectable="0">
      <source-position filename="gst-libs/gst/gl/egl/gstgldisplay_egl.h"
                       line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GL_DISPLAY_EGL_CLASS"
                    c:identifier="GST_IS_GL_DISPLAY_EGL_CLASS"
                    introspectable="0">
      <source-position filename="gst-libs/gst/gl/egl/gstgldisplay_egl.h"
                       line="35"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GL_DISPLAY_EGL_DEVICE"
                    c:identifier="GST_IS_GL_DISPLAY_EGL_DEVICE"
                    introspectable="0">
      <source-position filename="gst-libs/gst/gl/egl/gstgldisplay_egl_device.h"
                       line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GL_DISPLAY_EGL_DEVICE_CLASS"
                    c:identifier="GST_IS_GL_DISPLAY_EGL_DEVICE_CLASS"
                    introspectable="0">
      <source-position filename="gst-libs/gst/gl/egl/gstgldisplay_egl_device.h"
                       line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GL_MEMORY_EGL_ALLOCATOR"
                    c:identifier="GST_IS_GL_MEMORY_EGL_ALLOCATOR"
                    introspectable="0">
      <source-position filename="gst-libs/gst/gl/egl/gstglmemoryegl.h"
                       line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GL_MEMORY_EGL_ALLOCATOR_CLASS"
                    c:identifier="GST_IS_GL_MEMORY_EGL_ALLOCATOR_CLASS"
                    introspectable="0">
      <source-position filename="gst-libs/gst/gl/egl/gstglmemoryegl.h"
                       line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function name="egl_get_error_string"
              c:identifier="gst_egl_get_error_string">
      <source-position filename="gst-libs/gst/gl/egl/gstegl.h" line="62"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gst-libs/gst/gl/egl/gstegl.c"
             line="38">the short string representation of @err</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="err" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gst-libs/gst/gl/egl/gstegl.c"
               line="36">an EGL error code</doc>
          <type name="gint32" c:type="EGLint"/>
        </parameter>
      </parameters>
    </function>
    <function name="egl_image_from_texture"
              c:identifier="gst_egl_image_from_texture"
              moved-to="EGLImage.from_texture">
      <source-position filename="gst-libs/gst/gl/egl/gsteglimage.h" line="81"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="gst-libs/gst/gl/egl/gsteglimage.c"
             line="455">a #GstEGLImage wrapping @gl_mem or %NULL on failure</doc>
        <type name="EGLImage" c:type="GstEGLImage*"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gst-libs/gst/gl/egl/gsteglimage.c"
               line="451">a #GstGLContext (must be an EGL context)</doc>
          <type name="GstGL.GLContext" c:type="GstGLContext*"/>
        </parameter>
        <parameter name="gl_mem" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gst-libs/gst/gl/egl/gsteglimage.c"
               line="452">a #GstGLMemory</doc>
          <type name="GstGL.GLMemory" c:type="GstGLMemory*"/>
        </parameter>
        <parameter name="attribs" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gst-libs/gst/gl/egl/gsteglimage.c"
               line="453">additional attributes to add to the `eglCreateImage`() call.</doc>
          <type name="guintptr" c:type="guintptr*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gl_memory_egl_init_once"
              c:identifier="gst_gl_memory_egl_init_once"
              moved-to="GLMemoryEGL.init_once"
              version="1.10">
      <doc xml:space="preserve"
           filename="gst-libs/gst/gl/egl/gstglmemoryegl.c"
           line="260">Initializes the GL Memory allocator. It is safe to call this function
multiple times.  This must be called before any other GstGLMemoryEGL operation.</doc>
      <source-position filename="gst-libs/gst/gl/egl/gstglmemoryegl.h"
                       line="79"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <docsection name="gstgldisplay_egl">
      <doc xml:space="preserve"
           filename="gst-libs/gst/gl/egl/gstgldisplay_egl.c"
           line="21">#GstGLDisplayEGL represents a connection to an EGL `EGLDisplay` handle created
internally (gst_gl_display_egl_new()) or wrapped by the application
(gst_gl_display_egl_new_with_egl_display())</doc>
    </docsection>
    <docsection name="gstgldisplay_egl_device">
      <doc xml:space="preserve"
           filename="gst-libs/gst/gl/egl/gstgldisplay_egl_device.c"
           line="22">#GstGLDisplayEGLDevice represents a `EGLDeviceEXT` handle created internally
(gst_gl_display_egl_device_new()) or wrapped by the application
(gst_gl_display_egl_device_new_with_egl_device())</doc>
    </docsection>
    <function name="is_gl_memory_egl"
              c:identifier="gst_is_gl_memory_egl"
              version="1.10">
      <source-position filename="gst-libs/gst/gl/egl/gstglmemoryegl.h"
                       line="82"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gst-libs/gst/gl/egl/gstglmemoryegl.c"
             line="66">whether @mem is a #GstGLMemoryEGL</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="mem" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gst-libs/gst/gl/egl/gstglmemoryegl.c"
               line="64">a #GstMemory to test</doc>
          <type name="Gst.Memory" c:type="GstMemory*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
