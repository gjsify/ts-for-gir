<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Clutter" version="1.0"/>
  <include name="xlib" version="2.0"/>
  <package name="clutter-x11-1.0"/>
  <c:include name="clutter/x11/clutter-x11.h"/>
  <namespace name="ClutterX11"
             version="1.0"
             shared-library="libclutter-1.0.so.0"
             c:identifier-prefixes="ClutterX11"
             c:symbol-prefixes="clutter_x11">
    <callback name="FilterFunc" c:type="ClutterX11FilterFunc" version="0.6">
      <doc xml:space="preserve"
           filename="clutter-x11.h"
           line="75">Filter function for X11 native events.</doc>
      <source-position filename="clutter-x11.h" line="87"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="clutter-x11.h"
             line="83">the result of the filtering</doc>
        <type name="FilterReturn" c:type="ClutterX11FilterReturn"/>
      </return-value>
      <parameters>
        <parameter name="xev" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="clutter-x11.h"
               line="77">Native X11 event structure</doc>
          <type name="xlib.XEvent" c:type="XEvent*"/>
        </parameter>
        <parameter name="cev" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="clutter-x11.h"
               line="78">Clutter event structure</doc>
          <type name="Clutter.Event" c:type="ClutterEvent*"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="clutter-x11.h"
               line="79">user data passed to the filter function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="FilterReturn"
                 version="0.6"
                 glib:type-name="ClutterX11FilterReturn"
                 glib:get-type="clutter_x11_filter_return_get_type"
                 c:type="ClutterX11FilterReturn">
      <doc xml:space="preserve"
           filename="clutter-x11.h"
           line="49">Return values for the #ClutterX11FilterFunc function.</doc>
      <member name="continue"
              value="0"
              c:identifier="CLUTTER_X11_FILTER_CONTINUE"
              glib:nick="continue"
              glib:name="CLUTTER_X11_FILTER_CONTINUE">
        <doc xml:space="preserve"
             filename="clutter-x11.h"
             line="51">The event was not handled, continues the
  processing</doc>
      </member>
      <member name="translate"
              value="1"
              c:identifier="CLUTTER_X11_FILTER_TRANSLATE"
              glib:nick="translate"
              glib:name="CLUTTER_X11_FILTER_TRANSLATE">
        <doc xml:space="preserve"
             filename="clutter-x11.h"
             line="53">Native event translated into a Clutter
  event, stops the processing</doc>
      </member>
      <member name="remove"
              value="2"
              c:identifier="CLUTTER_X11_FILTER_REMOVE"
              glib:nick="remove"
              glib:name="CLUTTER_X11_FILTER_REMOVE">
        <doc xml:space="preserve"
             filename="clutter-x11.h"
             line="55">Remove the event, stops the processing</doc>
      </member>
    </enumeration>
    <function-macro name="IS_TEXTURE_PIXMAP"
                    c:identifier="CLUTTER_X11_IS_TEXTURE_PIXMAP"
                    introspectable="0">
      <source-position filename="clutter-x11-texture-pixmap.h" line="40"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TEXTURE_PIXMAP_CLASS"
                    c:identifier="CLUTTER_X11_IS_TEXTURE_PIXMAP_CLASS"
                    introspectable="0">
      <source-position filename="clutter-x11-texture-pixmap.h" line="41"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TEXTURE_PIXMAP"
                    c:identifier="CLUTTER_X11_TEXTURE_PIXMAP"
                    introspectable="0">
      <source-position filename="clutter-x11-texture-pixmap.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TEXTURE_PIXMAP_CLASS"
                    c:identifier="CLUTTER_X11_TEXTURE_PIXMAP_CLASS"
                    introspectable="0">
      <source-position filename="clutter-x11-texture-pixmap.h" line="39"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TEXTURE_PIXMAP_GET_CLASS"
                    c:identifier="CLUTTER_X11_TEXTURE_PIXMAP_GET_CLASS"
                    introspectable="0">
      <source-position filename="clutter-x11-texture-pixmap.h" line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="TexturePixmap"
           c:symbol-prefix="texture_pixmap"
           c:type="ClutterX11TexturePixmap"
           version="0.8"
           parent="Clutter.Texture"
           glib:type-name="ClutterX11TexturePixmap"
           glib:get-type="clutter_x11_texture_pixmap_get_type"
           glib:type-struct="TexturePixmapClass">
      <doc xml:space="preserve"
           filename="clutter-x11-texture-pixmap.h"
           line="48">The #ClutterX11TexturePixmap structure contains only private data</doc>
      <source-position filename="clutter-x11-texture-pixmap.h" line="82"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Clutter.Animatable"/>
      <implements name="Clutter.Container"/>
      <implements name="Clutter.Scriptable"/>
      <constructor name="new"
                   c:identifier="clutter_x11_texture_pixmap_new"
                   version="0.8">
        <doc xml:space="preserve"
             filename="clutter-x11-texture-pixmap.c"
             line="727">Creates a new #ClutterX11TexturePixmap which can be used to display the
contents of an X11 Pixmap inside a Clutter scene graph</doc>
        <source-position filename="clutter-x11-texture-pixmap.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="clutter-x11-texture-pixmap.c"
               line="733">A new #ClutterX11TexturePixmap</doc>
          <type name="Clutter.Actor" c:type="ClutterActor*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_pixmap"
                   c:identifier="clutter_x11_texture_pixmap_new_with_pixmap"
                   version="0.8">
        <doc xml:space="preserve"
             filename="clutter-x11-texture-pixmap.c"
             line="747">Creates a new #ClutterX11TexturePixmap for @pixmap</doc>
        <source-position filename="clutter-x11-texture-pixmap.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="clutter-x11-texture-pixmap.c"
               line="753">A new #ClutterX11TexturePixmap bound to the given X Pixmap</doc>
          <type name="Clutter.Actor" c:type="ClutterActor*"/>
        </return-value>
        <parameters>
          <parameter name="pixmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="749">the X Pixmap to which this texture should be bound</doc>
            <type name="xlib.Pixmap" c:type="Pixmap"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_window"
                   c:identifier="clutter_x11_texture_pixmap_new_with_window"
                   version="0.8">
        <doc xml:space="preserve"
             filename="clutter-x11-texture-pixmap.c"
             line="769">Creates a new #ClutterX11TexturePixmap for @window</doc>
        <source-position filename="clutter-x11-texture-pixmap.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="clutter-x11-texture-pixmap.c"
               line="775">A new #ClutterX11TexturePixmap bound to the given X window.</doc>
          <type name="Clutter.Actor" c:type="ClutterActor*"/>
        </return-value>
        <parameters>
          <parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="771">the X window to which this texture should be bound</doc>
            <type name="xlib.Window" c:type="Window"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="update_area" invoker="update_area" version="0.8">
        <doc xml:space="preserve"
             filename="clutter-x11-texture-pixmap.c"
             line="1208">Performs the actual binding of texture to the current content of
the pixmap. Can be called to update the texture if the pixmap
content has changed.</doc>
        <source-position filename="clutter-x11-texture-pixmap.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="texture" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="1210">The texture whose content shall be updated.</doc>
            <type name="TexturePixmap" c:type="ClutterX11TexturePixmap*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="1211">the X coordinate of the area to update</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="1212">the Y coordinate of the area to update</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="1213">the width of the area to update</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="1214">the height of the area to update</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="set_automatic"
              c:identifier="clutter_x11_texture_pixmap_set_automatic"
              version="0.8">
        <doc xml:space="preserve"
             filename="clutter-x11-texture-pixmap.c"
             line="1240">Enables or disables the automatic updates ot @texture in case the backing
pixmap or window is damaged</doc>
        <source-position filename="clutter-x11-texture-pixmap.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="texture" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="1242">a #ClutterX11TexturePixmap</doc>
            <type name="TexturePixmap" c:type="ClutterX11TexturePixmap*"/>
          </instance-parameter>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="1243">%TRUE to enable automatic updates</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pixmap"
              c:identifier="clutter_x11_texture_pixmap_set_pixmap"
              glib:set-property="pixmap"
              version="0.8">
        <doc xml:space="preserve"
             filename="clutter-x11-texture-pixmap.c"
             line="791">Sets the X Pixmap to which the texture should be bound.</doc>
        <source-position filename="clutter-x11-texture-pixmap.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="texture" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="793">the texture to bind</doc>
            <type name="TexturePixmap" c:type="ClutterX11TexturePixmap*"/>
          </instance-parameter>
          <parameter name="pixmap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="794">the X Pixmap to which the texture should be bound</doc>
            <type name="xlib.Pixmap" c:type="Pixmap"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_window"
              c:identifier="clutter_x11_texture_pixmap_set_window"
              glib:set-property="window"
              version="0.8">
        <doc xml:space="preserve"
             filename="clutter-x11-texture-pixmap.c"
             line="930">Sets up a suitable pixmap for the window, using the composite and damage
extensions if possible, and then calls
clutter_x11_texture_pixmap_set_pixmap().

If you want to display a window in a #ClutterTexture, you probably want
this function, or its older sister, clutter_glx_texture_pixmap_set_window().

This function has no effect unless the XComposite extension is available.</doc>
        <source-position filename="clutter-x11-texture-pixmap.h" line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="texture" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="932">the texture to bind</doc>
            <type name="TexturePixmap" c:type="ClutterX11TexturePixmap*"/>
          </instance-parameter>
          <parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="933">the X window to which the texture should be bound</doc>
            <type name="xlib.Window" c:type="Window"/>
          </parameter>
          <parameter name="automatic" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="934">%TRUE for automatic window updates, %FALSE for manual.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="sync_window"
              c:identifier="clutter_x11_texture_pixmap_sync_window"
              version="0.8">
        <doc xml:space="preserve"
             filename="clutter-x11-texture-pixmap.c"
             line="1131">Resets the texture's pixmap from its window, perhaps in response to the
pixmap's invalidation as the window changed size.</doc>
        <source-position filename="clutter-x11-texture-pixmap.h" line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="texture" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="1133">the texture to bind</doc>
            <type name="TexturePixmap" c:type="ClutterX11TexturePixmap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="update_area"
              c:identifier="clutter_x11_texture_pixmap_update_area"
              version="0.8">
        <doc xml:space="preserve"
             filename="clutter-x11-texture-pixmap.c"
             line="1208">Performs the actual binding of texture to the current content of
the pixmap. Can be called to update the texture if the pixmap
content has changed.</doc>
        <source-position filename="clutter-x11-texture-pixmap.h" line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="texture" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="1210">The texture whose content shall be updated.</doc>
            <type name="TexturePixmap" c:type="ClutterX11TexturePixmap*"/>
          </instance-parameter>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="1211">the X coordinate of the area to update</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="1212">the Y coordinate of the area to update</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="1213">the width of the area to update</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="1214">the height of the area to update</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="automatic-updates"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="destroyed"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="pixmap"
                writable="1"
                transfer-ownership="none"
                setter="set_pixmap"
                default-value="0">
        <type name="gulong" c:type="gulong"/>
      </property>
      <property name="pixmap-depth"
                transfer-ownership="none"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="pixmap-height"
                transfer-ownership="none"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="pixmap-width"
                transfer-ownership="none"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="window"
                writable="1"
                transfer-ownership="none"
                setter="set_window"
                default-value="0">
        <type name="gulong" c:type="gulong"/>
      </property>
      <property name="window-mapped"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="window-override-redirect"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="window-redirect-automatic"
                writable="1"
                transfer-ownership="none"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="window-x" transfer-ownership="none" default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="window-y" transfer-ownership="none" default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="Clutter.Texture" c:type="ClutterTexture"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="TexturePixmapPrivate"
              c:type="ClutterX11TexturePixmapPrivate*"/>
      </field>
      <glib:signal name="queue-damage-redraw" when="first" version="1.2">
        <doc xml:space="preserve"
             filename="clutter-x11-texture-pixmap.c"
             line="671">::queue-damage-redraw is emitted to notify that some sub-region
of the texture has been changed (either by an automatic damage
update or by an explicit call to
clutter_x11_texture_pixmap_update_area). This usually means a
redraw needs to be queued for the actor.

The default handler will queue a clipped redraw in response to
the damage, using the assumption that the pixmap is being painted
to a rectangle covering the transformed allocation of the actor.
If you sub-class and change the paint method so this isn't true
then you must also provide your own damage signal handler to
queue a redraw that blocks this default behaviour.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="674">The top left x position of the damage region</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="675">The top left y position of the damage region</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="676">The width of the damage region</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="677">The height of the damage region</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="update-area" when="first" version="0.8">
        <doc xml:space="preserve"
             filename="clutter-x11-texture-pixmap.c"
             line="644">The ::update-area signal is emitted to ask the texture to update its
content from its source pixmap.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="647">X coordinate of the area to update</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="648">Y coordinate of the area to update</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="649">width of the area to update</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="clutter-x11-texture-pixmap.c"
                 line="650">height of the area to update</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="TexturePixmapClass"
            c:type="ClutterX11TexturePixmapClass"
            glib:is-gtype-struct-for="TexturePixmap"
            version="0.8">
      <doc xml:space="preserve"
           filename="clutter-x11-texture-pixmap.h"
           line="63">The #ClutterX11TexturePixmapClass structure contains only private data</doc>
      <source-position filename="clutter-x11-texture-pixmap.h" line="82"/>
      <field name="parent_class" readable="0" private="1">
        <type name="Clutter.TextureClass" c:type="ClutterTextureClass"/>
      </field>
      <field name="update_area">
        <callback name="update_area">
          <source-position filename="clutter-x11-texture-pixmap.h" line="77"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="texture" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="clutter-x11-texture-pixmap.c"
                   line="1210">The texture whose content shall be updated.</doc>
              <type name="TexturePixmap" c:type="ClutterX11TexturePixmap*"/>
            </parameter>
            <parameter name="x" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="clutter-x11-texture-pixmap.c"
                   line="1211">the X coordinate of the area to update</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="y" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="clutter-x11-texture-pixmap.c"
                   line="1212">the Y coordinate of the area to update</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="clutter-x11-texture-pixmap.c"
                   line="1213">the width of the area to update</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="clutter-x11-texture-pixmap.c"
                   line="1214">the height of the area to update</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="TexturePixmapPrivate"
            c:type="ClutterX11TexturePixmapPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="clutter-x11-texture-pixmap.h" line="46"/>
    </record>
    <record name="XInputDevice"
            c:type="ClutterX11XInputDevice"
            disguised="1"
            opaque="1">
      <source-position filename="clutter-x11.h" line="73"/>
    </record>
    <function name="add_filter"
              c:identifier="clutter_x11_add_filter"
              version="0.6"
              introspectable="0">
      <doc xml:space="preserve"
           filename="clutter-backend-x11.c"
           line="1090">Adds an event filter function.</doc>
      <source-position filename="clutter-x11.h" line="117"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="func" transfer-ownership="none" closure="1">
          <doc xml:space="preserve"
               filename="clutter-backend-x11.c"
               line="1092">a filter function</doc>
          <type name="FilterFunc" c:type="ClutterX11FilterFunc"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="clutter-backend-x11.c"
               line="1093">user data to be passed to the filter function, or %NULL</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="clutter-x11">
      <doc xml:space="preserve"
           filename="clutter-x11.h"
           line="26">The X11 backend for Clutter provides some specific API, allowing
integration with the Xlibs API for embedding and manipulating the
stage window, or for trapping X errors.

The ClutterX11 API is available since Clutter 0.6</doc>
    </docsection>
    <docsection name="clutter-x11-texture-pixmap">
      <doc xml:space="preserve"
           filename="clutter-x11-texture-pixmap.c"
           line="27">#ClutterX11TexturePixmap is a class for displaying the content of an
X Pixmap as a ClutterActor. Used together with the X Composite extension,
it allows to display the content of X Windows inside Clutter.

The class uses the GLX_EXT_texture_from_pixmap OpenGL extension
(http://people.freedesktop.org/~davidr/GLX_EXT_texture_from_pixmap.txt)
if available</doc>
    </docsection>
    <function name="disable_event_retrieval"
              c:identifier="clutter_x11_disable_event_retrieval"
              version="0.8">
      <doc xml:space="preserve"
           filename="clutter-backend-x11.c"
           line="980">Disables the internal polling of X11 events in the main loop.

Libraries or applications calling this function will be responsible of
polling all X11 events.

You also must call clutter_x11_handle_event() to let Clutter process
events and maintain its internal state.

This function can only be called before calling clutter_init().

Even with event handling disabled, Clutter will still select
all the events required to maintain its internal state on the stage
Window; compositors using Clutter and input regions to pass events
through to application windows should not rely on an empty input
region, and should instead clear it themselves explicitly using the
XFixes extension.

This function should not be normally used by applications.</doc>
      <source-position filename="clutter-x11.h" line="127"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="enable_xinput"
              c:identifier="clutter_x11_enable_xinput"
              version="0.8"
              deprecated="1"
              deprecated-version="1.14">
      <doc xml:space="preserve"
           filename="clutter-backend-x11.c"
           line="956">Enables the use of the XInput extension if present on connected
XServer and support built into Clutter. XInput allows for multiple
pointing devices to be used.

This function must be called before clutter_init().

Since XInput might not be supported by the X server, you might
want to use clutter_x11_has_xinput() to see if support was enabled.</doc>
      <doc-deprecated xml:space="preserve">This function does not do anything; XInput support
  is enabled by default in Clutter. Use the CLUTTER_DISABLE_XINPUT
  environment variable to disable XInput support and use Xlib core
  events instead.</doc-deprecated>
      <source-position filename="clutter-x11.h" line="138"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="event_get_key_group"
              c:identifier="clutter_x11_event_get_key_group"
              version="1.4">
      <doc xml:space="preserve"
           filename="clutter-event-x11.c"
           line="352">Retrieves the group for the modifiers set in @event</doc>
      <source-position filename="clutter-x11.h" line="159"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="clutter-event-x11.c"
             line="358">the group id</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="event" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="clutter-event-x11.c"
               line="354">a #ClutterEvent of type %CLUTTER_KEY_PRESS or %CLUTTER_KEY_RELEASE</doc>
          <type name="Clutter.Event" c:type="const ClutterEvent*"/>
        </parameter>
      </parameters>
    </function>
    <function name="event_sequence_get_touch_detail"
              c:identifier="clutter_x11_event_sequence_get_touch_detail"
              version="1.12">
      <doc xml:space="preserve"
           filename="clutter-event-x11.c"
           line="378">Retrieves the touch detail froma #ClutterEventSequence.</doc>
      <source-position filename="clutter-x11.h" line="162"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="clutter-event-x11.c"
             line="384">the touch detail</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="sequence" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="clutter-event-x11.c"
               line="380">a #ClutterEventSequence</doc>
          <type name="Clutter.EventSequence"
                c:type="const ClutterEventSequence*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_current_event_time"
              c:identifier="clutter_x11_get_current_event_time"
              version="1.0"
              introspectable="0">
      <doc xml:space="preserve"
           filename="clutter-event-x11.c"
           line="332">Retrieves the timestamp of the last X11 event processed by
Clutter. This might be different from the timestamp returned
by clutter_get_current_event_time(), as Clutter may synthesize
or throttle events.</doc>
      <source-position filename="clutter-x11.h" line="156"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="clutter-event-x11.c"
             line="340">a timestamp, in milliseconds</doc>
        <type name="xlib.Time" c:type="Time"/>
      </return-value>
    </function>
    <function name="get_default_display"
              c:identifier="clutter_x11_get_default_display"
              version="0.6">
      <doc xml:space="preserve"
           filename="clutter-backend-x11.c"
           line="899">Retrieves the pointer to the default display.</doc>
      <source-position filename="clutter-x11.h" line="97"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="clutter-backend-x11.c"
             line="904">the default display</doc>
        <type name="xlib.Display" c:type="Display*"/>
      </return-value>
    </function>
    <function name="get_default_screen"
              c:identifier="clutter_x11_get_default_screen"
              version="0.6">
      <doc xml:space="preserve"
           filename="clutter-backend-x11.c"
           line="1032">Gets the number of the default X Screen object.</doc>
      <source-position filename="clutter-x11.h" line="99"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="clutter-backend-x11.c"
             line="1037">the number of the default screen</doc>
        <type name="gint" c:type="int"/>
      </return-value>
    </function>
    <function name="get_input_devices"
              c:identifier="clutter_x11_get_input_devices"
              version="0.8"
              deprecated="1"
              deprecated-version="1.2">
      <doc xml:space="preserve"
           filename="clutter-backend-x11.c"
           line="1188">Retrieves a pointer to the list of input devices</doc>
      <doc-deprecated xml:space="preserve">Use clutter_device_manager_peek_devices() instead</doc-deprecated>
      <source-position filename="clutter-x11.h" line="135"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="clutter-backend-x11.c"
             line="1197">a
  pointer to the internal list of input devices; the returned list is
  owned by Clutter and should not be modified or freed</doc>
        <type name="GLib.SList" c:type="const GSList*">
          <type name="Clutter.InputDevice"/>
        </type>
      </return-value>
    </function>
    <function name="get_root_window"
              c:identifier="clutter_x11_get_root_window"
              version="0.6"
              introspectable="0">
      <doc xml:space="preserve"
           filename="clutter-backend-x11.c"
           line="1061">Retrieves the root window.</doc>
      <source-position filename="clutter-x11.h" line="101"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="clutter-backend-x11.c"
             line="1066">the id of the root window</doc>
        <type name="xlib.Window" c:type="Window"/>
      </return-value>
    </function>
    <function name="get_stage_from_window"
              c:identifier="clutter_x11_get_stage_from_window"
              version="0.8">
      <doc xml:space="preserve"
           filename="clutter-stage-x11.c"
           line="1305">Gets the stage for a particular X window.</doc>
      <source-position filename="clutter-x11.h" line="132"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="clutter-stage-x11.c"
             line="1311">A #ClutterStage, or% NULL if a stage
  does not exist for the window</doc>
        <type name="Clutter.Stage" c:type="ClutterStage*"/>
      </return-value>
      <parameters>
        <parameter name="win" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="clutter-stage-x11.c"
               line="1307">an X Window ID</doc>
          <type name="xlib.Window" c:type="Window"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_stage_visual"
              c:identifier="clutter_x11_get_stage_visual"
              version="0.4"
              introspectable="0"
              deprecated="1"
              deprecated-version="1.2">
      <doc xml:space="preserve"
           filename="clutter-stage-x11.c"
           line="1329">Returns an XVisualInfo suitable for creating a foreign window for the given
stage. NOTE: It doesn't do as the name may suggest, which is return the
XVisualInfo that was used to create an existing window for the given stage.

XXX: It might be best to deprecate this function and replace with something
along the lines of clutter_backend_x11_get_foreign_visual () or perhaps
clutter_stage_x11_get_foreign_visual ()</doc>
      <doc-deprecated xml:space="preserve">Use clutter_x11_get_visual_info() instead</doc-deprecated>
      <source-position filename="clutter-x11.h" line="108"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="clutter-stage-x11.c"
             line="1341">An XVisualInfo suitable for creating a
  foreign stage. Use XFree() to free the returned value instead</doc>
        <type name="xlib.XVisualInfo" c:type="XVisualInfo*"/>
      </return-value>
      <parameters>
        <parameter name="stage" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="clutter-stage-x11.c"
               line="1331">a #ClutterStage</doc>
          <type name="Clutter.Stage" c:type="ClutterStage*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_stage_window"
              c:identifier="clutter_x11_get_stage_window"
              version="0.4"
              introspectable="0">
      <doc xml:space="preserve"
           filename="clutter-stage-x11.c"
           line="1272">Gets the stages X Window.</doc>
      <source-position filename="clutter-x11.h" line="111"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="clutter-stage-x11.c"
             line="1278">An XID for the stage window.</doc>
        <type name="xlib.Window" c:type="Window"/>
      </return-value>
      <parameters>
        <parameter name="stage" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="clutter-stage-x11.c"
               line="1274">a #ClutterStage</doc>
          <type name="Clutter.Stage" c:type="ClutterStage*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_use_argb_visual"
              c:identifier="clutter_x11_get_use_argb_visual"
              version="1.2">
      <doc xml:space="preserve"
           filename="clutter-backend-x11.c"
           line="1329">Retrieves whether the Clutter X11 backend is using ARGB visuals by default</doc>
      <source-position filename="clutter-x11.h" line="148"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="clutter-backend-x11.c"
             line="1334">%TRUE if ARGB visuals are queried by default</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="get_use_stereo_stage"
              c:identifier="clutter_x11_get_use_stereo_stage"
              version="1.22">
      <doc xml:space="preserve"
           filename="clutter-backend-x11.c"
           line="1382">Retrieves whether the Clutter X11 backend will create stereo
stages if possible.</doc>
      <source-position filename="clutter-x11.h" line="153"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="clutter-backend-x11.c"
             line="1388">%TRUE if stereo stages are used if possible</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="get_visual_info"
              c:identifier="clutter_x11_get_visual_info"
              version="1.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="clutter-backend-x11.c"
           line="1404">Retrieves the `XVisualInfo` used by the Clutter X11 backend.</doc>
      <source-position filename="clutter-x11.h" line="103"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="clutter-backend-x11.c"
             line="1409">a `XVisualInfo`, or `None`.
  The returned value should be freed using `XFree()` when done</doc>
        <type name="xlib.XVisualInfo" c:type="XVisualInfo*"/>
      </return-value>
    </function>
    <function name="handle_event"
              c:identifier="clutter_x11_handle_event"
              version="0.8">
      <doc xml:space="preserve"
           filename="clutter-event-x11.c"
           line="142">This function processes a single X event; it can be used to hook
into external X11 event processing (for example, a GDK filter
function).

If clutter_x11_disable_event_retrieval() has been called, you must
let this function process events to update Clutter's internal state.</doc>
      <source-position filename="clutter-x11.h" line="124"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="clutter-event-x11.c"
             line="153">#ClutterX11FilterReturn. %CLUTTER_X11_FILTER_REMOVE
 indicates that Clutter has internally handled the event and the
 caller should do no further processing. %CLUTTER_X11_FILTER_CONTINUE
 indicates that Clutter is either not interested in the event,
 or has used the event to update internal state without taking
 any exclusive action. %CLUTTER_X11_FILTER_TRANSLATE will not
 occur.</doc>
        <type name="FilterReturn" c:type="ClutterX11FilterReturn"/>
      </return-value>
      <parameters>
        <parameter name="xevent" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="clutter-event-x11.c"
               line="144">pointer to XEvent structure</doc>
          <type name="xlib.XEvent" c:type="XEvent*"/>
        </parameter>
      </parameters>
    </function>
    <function name="has_composite_extension"
              c:identifier="clutter_x11_has_composite_extension">
      <doc xml:space="preserve"
           filename="clutter-backend-x11.c"
           line="1247">Retrieves whether Clutter is running on an X11 server with the
XComposite extension</doc>
      <source-position filename="clutter-x11.h" line="143"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="clutter-backend-x11.c"
             line="1253">%TRUE if the XComposite extension is available</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="has_event_retrieval"
              c:identifier="clutter_x11_has_event_retrieval"
              version="0.8">
      <doc xml:space="preserve"
           filename="clutter-backend-x11.c"
           line="1017">Queries the X11 backend to check if event collection has been disabled.</doc>
      <source-position filename="clutter-x11.h" line="129"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="clutter-backend-x11.c"
             line="1022">TRUE if event retrival has been disabled. FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="has_xinput"
              c:identifier="clutter_x11_has_xinput"
              version="0.8">
      <doc xml:space="preserve"
           filename="clutter-backend-x11.c"
           line="1213">Gets whether Clutter has XInput support.</doc>
      <source-position filename="clutter-x11.h" line="140"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="clutter-backend-x11.c"
             line="1218">%TRUE if Clutter was compiled with XInput support
  and XInput support is available at run time.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="remove_filter"
              c:identifier="clutter_x11_remove_filter"
              version="0.6"
              introspectable="0">
      <doc xml:space="preserve"
           filename="clutter-backend-x11.c"
           line="1133">Removes the given filter function.</doc>
      <source-position filename="clutter-x11.h" line="120"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="func" transfer-ownership="none" closure="1">
          <doc xml:space="preserve"
               filename="clutter-backend-x11.c"
               line="1135">a filter function</doc>
          <type name="FilterFunc" c:type="ClutterX11FilterFunc"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="clutter-backend-x11.c"
               line="1136">user data to be passed to the filter function, or %NULL</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_display"
              c:identifier="clutter_x11_set_display"
              version="0.8">
      <doc xml:space="preserve"
           filename="clutter-backend-x11.c"
           line="928">Sets the display connection Clutter should use; must be called
before clutter_init(), clutter_init_with_args() or other functions
pertaining Clutter's initialization process.

If you are parsing the command line arguments by retrieving Clutter's
#GOptionGroup with clutter_get_option_group() and calling
g_option_context_parse() yourself, you should also call
clutter_x11_set_display() before g_option_context_parse().</doc>
      <source-position filename="clutter-x11.h" line="105"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="xdpy" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="clutter-backend-x11.c"
               line="930">pointer to a X display connection.</doc>
          <type name="xlib.Display" c:type="Display*"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_stage_foreign"
              c:identifier="clutter_x11_set_stage_foreign"
              version="0.4">
      <doc xml:space="preserve"
           filename="clutter-stage-x11.c"
           line="1407">Target the #ClutterStage to use an existing external X Window</doc>
      <source-position filename="clutter-x11.h" line="113"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="clutter-stage-x11.c"
             line="1414">%TRUE if foreign window is valid</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="stage" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="clutter-stage-x11.c"
               line="1409">a #ClutterStage</doc>
          <type name="Clutter.Stage" c:type="ClutterStage*"/>
        </parameter>
        <parameter name="xwindow" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="clutter-stage-x11.c"
               line="1410">an existing X Window id</doc>
          <type name="xlib.Window" c:type="Window"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_use_argb_visual"
              c:identifier="clutter_x11_set_use_argb_visual"
              version="1.2">
      <doc xml:space="preserve"
           filename="clutter-backend-x11.c"
           line="1294">Sets whether the Clutter X11 backend should request ARGB visuals by default
or not.

By default, Clutter requests RGB visuals.

If no ARGB visuals are found, the X11 backend will fall back to
requesting a RGB visual instead.

ARGB visuals are required for the #ClutterStage:use-alpha property to work.

This function can only be called once, and before clutter_init() is
called.</doc>
      <source-position filename="clutter-x11.h" line="146"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="use_argb" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="clutter-backend-x11.c"
               line="1296">%TRUE if ARGB visuals should be requested by default</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_use_stereo_stage"
              c:identifier="clutter_x11_set_use_stereo_stage"
              version="1.22">
      <doc xml:space="preserve"
           filename="clutter-backend-x11.c"
           line="1344">Sets whether the backend object for Clutter stages, will,
if possible, be created with the ability to support stereo drawing
(drawing separate images for the left and right eyes).

This function must be called before clutter_init() is called.
During paint callbacks, cogl_framebuffer_is_stereo() can be called
on the framebuffer retrieved by cogl_get_draw_framebuffer() to
determine if stereo support was successfully enabled, and
cogl_framebuffer_set_stereo_mode() to determine which buffers
will be drawn to.

Note that this function *does not* cause the stage to be drawn
multiple times with different perspective transformations and thus
appear in 3D, it simply enables individual ClutterActors to paint
different images for the left and and right eye.</doc>
      <source-position filename="clutter-x11.h" line="151"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="use_stereo" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="clutter-backend-x11.c"
               line="1346">%TRUE if the stereo stages should be used if possible.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="trap_x_errors"
              c:identifier="clutter_x11_trap_x_errors"
              version="0.6">
      <doc xml:space="preserve"
           filename="clutter-backend-x11.c"
           line="868">Traps every X error until clutter_x11_untrap_x_errors() is called.</doc>
      <source-position filename="clutter-x11.h" line="92"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="untrap_x_errors"
              c:identifier="clutter_x11_untrap_x_errors"
              version="0.4">
      <doc xml:space="preserve"
           filename="clutter-backend-x11.c"
           line="882">Removes the X error trap and returns the current status.</doc>
      <source-position filename="clutter-x11.h" line="94"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="clutter-backend-x11.c"
             line="887">the trapped error code, or 0 for success</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
    </function>
  </namespace>
</repository>
