<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="GdkPixbuf" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="cairo" version="1.0"/>
  <package name="librsvg-2.0"/>
  <c:include name="librsvg/rsvg.h"/>
  <namespace name="Rsvg"
             version="2.0"
             shared-library="librsvg-2.so.2"
             c:identifier-prefixes="Rsvg"
             c:symbol-prefixes="rsvg,librsvg">
    <function-macro name="CHECK_VERSION"
                    c:identifier="LIBRSVG_CHECK_VERSION"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="rsvg-features.h"
           line="103">This C macro returns `TRUE` if the the version of librsvg being
compiled against is the same or newer than the specified version.

Note that this a compile-time check for C programs.  If you want a
run-time check for the version of librsvg being used, or if you are
using another programming language, see the variables
`rsvg_major_version`, `rsvg_minor_version`, `rsvg_micro_version`
instead.</doc>
      <source-position filename="rsvg-features.h" line="118"/>
      <parameters>
        <parameter name="major">
          <doc xml:space="preserve"
               filename="rsvg-features.h"
               line="105">component for the major version to check</doc>
        </parameter>
        <parameter name="minor">
          <doc xml:space="preserve"
               filename="rsvg-features.h"
               line="106">component for the minor version to check</doc>
        </parameter>
        <parameter name="micro">
          <doc xml:space="preserve"
               filename="rsvg-features.h"
               line="107">component for the micro version to check</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_FOR"
                    c:identifier="RSVG_DEPRECATED_FOR"
                    introspectable="0">
      <source-position filename="rsvg.h" line="47"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <record name="DimensionData"
            c:type="RsvgDimensionData"
            deprecated="1"
            deprecated-version="2.46.">
      <doc xml:space="preserve"
           filename="rsvg.h"
           line="388">Dimensions of an SVG image from [method@Rsvg.Handle.get_dimensions], or an
individual element from [method@Rsvg.Handle.get_dimensions_sub].  Please see
the deprecation documentation for those functions.</doc>
      <doc-deprecated xml:space="preserve">Use [method@Rsvg.Handle.get_intrinsic_size_in_pixels] or
[method@Rsvg.Handle.get_geometry_for_layer] instead.</doc-deprecated>
      <source-position filename="rsvg.h" line="407"/>
      <field name="width" writable="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="390">SVG's width, in pixels</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="height" writable="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="391">SVG's height, in pixels</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="em" writable="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="392">SVG's original width, unmodified by `RsvgSizeFunc`</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
      <field name="ex" writable="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="393">SVG's original height, unmodified by `RsvgSizeFunc`</doc>
        <type name="gdouble" c:type="gdouble"/>
      </field>
    </record>
    <enumeration name="Error"
                 glib:type-name="RsvgError"
                 glib:get-type="rsvg_error_get_type"
                 c:type="RsvgError"
                 glib:error-domain="rsvg-error-quark">
      <doc xml:space="preserve"
           filename="rsvg.h"
           line="55">An enumeration representing possible errors</doc>
      <member name="failed"
              value="0"
              c:identifier="RSVG_ERROR_FAILED"
              glib:nick="failed"
              glib:name="RSVG_ERROR_FAILED">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="57">the request failed</doc>
      </member>
      <function name="quark" c:identifier="rsvg_error_quark">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="67">The error domain for RSVG</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="72">The error domain</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <function-macro name="HANDLE"
                    c:identifier="RSVG_HANDLE"
                    introspectable="0">
      <source-position filename="rsvg.h" line="352"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="HANDLE_CLASS"
                    c:identifier="RSVG_HANDLE_CLASS"
                    introspectable="0">
      <source-position filename="rsvg.h" line="353"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="HANDLE_GET_CLASS"
                    c:identifier="RSVG_HANDLE_GET_CLASS"
                    introspectable="0">
      <source-position filename="rsvg.h" line="356"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Handle"
           c:symbol-prefix="handle"
           c:type="RsvgHandle"
           parent="GObject.Object"
           glib:type-name="RsvgHandle"
           glib:get-type="rsvg_handle_get_type"
           glib:type-struct="HandleClass">
      <doc xml:space="preserve"
           filename="rsvg.h"
           line="81">[class@Rsvg.Handle] loads an SVG document into memory.

This is the main entry point into the librsvg library.  An [class@Rsvg.Handle] is an
object that represents SVG data in memory.  Your program creates an
[class@Rsvg.Handle] from an SVG file, or from a memory buffer that contains SVG data,
or in the most general form, from a `GInputStream` that will provide SVG data.

Librsvg can load SVG images and render them to Cairo surfaces,
using a mixture of SVG's [static mode] and [secure static mode].
Librsvg does not do animation nor scripting, and can load
references to external data only in some situations; see below.

Librsvg supports reading [SVG 1.1](https://www.w3.org/TR/SVG11/) data, and is gradually
adding support for features in [SVG 2](https://www.w3.org/TR/SVG2/).  Librsvg also
supports SVGZ files, which are just an SVG stream compressed with the GZIP algorithm.

[static mode]: https://www.w3.org/TR/SVG2/conform.html#static-mode
[secure static mode]: https://www.w3.org/TR/SVG2/conform.html#secure-static-mode

# The "base file" and resolving references to external files

When you load an SVG, librsvg needs to know the location of the "base file"
for it.  This is so that librsvg can determine the location of referenced
entities.  For example, say you have an SVG in `/foo/bar/foo.svg`
and that it has an image element like this:

```
&lt;image href="resources/foo.png" .../&gt;
```

In this case, librsvg needs to know the location of the toplevel
`/foo/bar/foo.svg` so that it can generate the appropriate
reference to `/foo/bar/resources/foo.png`.

## Security and locations of referenced files

When processing an SVG, librsvg will only load referenced files if they are
in the same directory as the base file, or in a subdirectory of it.  That is,
if the base file is `/foo/bar/baz.svg`, then librsvg will
only try to load referenced files (from SVG's
`&lt;image&gt;` element, for example, or from content
included through XML entities) if those files are in `/foo/bar/&lt;anything&gt;` or in `/foo/bar/&lt;anything&gt;\/.../&lt;anything&gt;`.
This is so that malicious SVG files cannot include files that are in a directory above.

The full set of rules for deciding which URLs may be loaded is as follows;
they are applied in order.  A referenced URL will not be loaded as soon as
one of these rules fails:

1. All `data:` URLs may be loaded.  These are sometimes used
   to include raster image data, encoded as base-64, directly in an SVG file.

2. URLs with queries ("?") or fragment identifiers ("#") are not allowed.

3. All URL schemes other than data: in references require a base URL.  For
   example, this means that if you load an SVG with
   [ctor@Rsvg.Handle.new_from_data] without calling [method@Rsvg.Handle.set_base_uri],
   then any referenced files will not be allowed (e.g. raster images to be
   loaded from other files will not work).

4. If referenced URLs are absolute, rather than relative, then they must
   have the same scheme as the base URL.  For example, if the base URL has a
   `file` scheme, then all URL references inside the SVG must
   also have the `file` scheme, or be relative references which
   will be resolved against the base URL.

5. If referenced URLs have a `resource` scheme, that is,
   if they are included into your binary program with GLib's resource
   mechanism, they are allowed to be loaded (provided that the base URL is
   also a `resource`, per the previous rule).

6. Otherwise, non-`file` schemes are not allowed.  For
   example, librsvg will not load `http` resources, to keep
   malicious SVG data from "phoning home".

7. A relative URL must resolve to the same directory as the base URL, or to
   one of its subdirectories.  Librsvg will canonicalize filenames, by
   removing ".." path components and resolving symbolic links, to decide whether
   files meet these conditions.

# Loading an SVG with GIO

This is the easiest and most resource-efficient way of loading SVG data into
an [class@Rsvg.Handle].

If you have a `GFile` that stands for an SVG file, you can simply call
[ctor@Rsvg.Handle.new_from_gfile_sync] to load an [class@Rsvg.Handle] from it.

Alternatively, if you have a `GInputStream`, you can use
[ctor@Rsvg.Handle.new_from_stream_sync].

Both of those methods allow specifying a `GCancellable`, so the loading
process can be cancelled from another thread.

## Loading an SVG from memory

If you already have SVG data in a byte buffer in memory, you can create a
memory input stream with [ctor@Gio.MemoryInputStream.new_from_data] and feed that
to [ctor@Rsvg.Handle.new_from_stream_sync].

Note that in this case, it is important that you specify the base_file for
the in-memory SVG data.  Librsvg uses the base_file to resolve links to
external content, like raster images.

# Loading an SVG without GIO

You can load an [class@Rsvg.Handle] from a simple filename or URI with
[ctor@Rsvg.Handle.new_from_file].  Note that this is a blocking operation; there
is no way to cancel it if loading a remote URI takes a long time.  Also, note that
this method does not let you specify [flags@Rsvg.HandleFlags].

Otherwise, loading an SVG without GIO is not recommended, since librsvg will
need to buffer your entire data internally before actually being able to
parse it.  The deprecated way of doing this is by creating a handle with
[ctor@Rsvg.Handle.new] or [ctor@Rsvg.Handle.new_with_flags], and then using
[method@Rsvg.Handle.write] and [method@Rsvg.Handle.close] to feed the handle with SVG data.
Still, please try to use the GIO stream functions instead.

# Resolution of the rendered image (dots per inch, or DPI)

SVG images can contain dimensions like "`5cm`" or
"`2pt`" that must be converted from physical units into
device units.  To do this, librsvg needs to know the actual dots per inch
(DPI) of your target device.  You can call [method@Rsvg.Handle.set_dpi] or
[method@Rsvg.Handle.set_dpi_x_y] on an [class@Rsvg.Handle] to set the DPI before rendering
it.

# Rendering

The preferred way to render a whole SVG document is to use
[method@Rsvg.Handle.render_document].  Please see its documentation for
details.

# API ordering

Due to the way the librsvg API evolved over time, an [class@Rsvg.Handle] object is available
for use as soon as it is constructed.  However, not all of its methods can be
called at any time.  For example, an [class@Rsvg.Handle] just constructed with [ctor@Rsvg.Handle.new]
is not loaded yet, and it does not make sense to call [method@Rsvg.Handle.render_document] on it
just at that point.

The documentation for the available methods in [class@Rsvg.Handle] may mention that a particular
method is only callable on a "fully loaded handle".  This means either:

* The handle was loaded with [method@Rsvg.Handle.write] and [method@Rsvg.Handle.close], and
  those functions returned no errors.

* The handle was loaded with [method@Rsvg.Handle.read_stream_sync] and that function
  returned no errors.

Before librsvg 2.46, the library did not fully verify that a handle was in a
fully loaded state for the methods that require it.  To preserve
compatibility with old code which inadvertently called the API without
checking for errors, or which called some methods outside of the expected
order, librsvg will just emit a `g_critical()` message in those cases.

New methods introduced in librsvg 2.46 and later will check for the correct
ordering, and panic if they are called out of order.  This will abort
the program as if it had a failed assertion.</doc>
      <source-position filename="rsvg.h" line="378"/>
      <constructor name="new" c:identifier="rsvg_handle_new">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="523">Returns a new rsvg handle.  Must be freed with [method@GObject.Object.unref].  This
handle can be used to load an image.

The preferred way of loading SVG data into the returned [class@Rsvg.Handle] is with
[method@Rsvg.Handle.read_stream_sync].

The deprecated way of loading SVG data is with [method@Rsvg.Handle.write] and
[method@Rsvg.Handle.close]; note that these require buffering the entire file
internally, and for this reason it is better to use the stream functions:
[ctor@Rsvg.Handle.new_from_stream_sync], [method@Rsvg.Handle.read_stream_sync], or
[ctor@Rsvg.Handle.new_from_gfile_sync].

After loading the [class@Rsvg.Handle] with data, you can render it using Cairo or get
a GdkPixbuf from it. When finished, free the handle with [method@GObject.Object.unref]. No
more than one image can be loaded with one handle.

Note that this function creates an [class@Rsvg.Handle] with no flags set.  If you
require any of [flags@Rsvg.HandleFlags] to be set, use any of
[ctor@Rsvg.Handle.new_with_flags], [ctor@Rsvg.Handle.new_from_stream_sync], or
[ctor@Rsvg.Handle.new_from_gfile_sync].</doc>
        <source-position filename="rsvg.h" line="550"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="547">A new [class@Rsvg.Handle] with no flags set.</doc>
          <type name="Handle" c:type="RsvgHandle*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_data"
                   c:identifier="rsvg_handle_new_from_data"
                   version="2.14"
                   throws="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="1127">Loads the SVG specified by @data.  Note that this function creates an
[class@Rsvg.Handle] without a base URL, and without any [flags@Rsvg.HandleFlags].  If you
need these, use [ctor@Rsvg.Handle.new_from_stream_sync] instead by creating
a [class@Gio.MemoryInputStream] from your data.</doc>
        <source-position filename="rsvg.h" line="1142"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1138">A [class@Rsvg.Handle] or `NULL` if an error occurs.</doc>
          <type name="Handle" c:type="RsvgHandle*"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1129">The SVG data</doc>
            <array length="1" zero-terminated="0" c:type="const guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="data_len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1130">The length of @data, in bytes</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_file"
                   c:identifier="rsvg_handle_new_from_file"
                   version="2.14"
                   throws="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="1144">Loads the SVG specified by @file_name.  Note that this function, like
[ctor@Rsvg.Handle.new], does not specify any loading flags for the resulting
handle.  If you require the use of [flags@Rsvg.HandleFlags], use
[ctor@Rsvg.Handle.new_from_gfile_sync].</doc>
        <source-position filename="rsvg.h" line="1158"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1154">A [class@Rsvg.Handle] or `NULL` if an error occurs.</doc>
          <type name="Handle" c:type="RsvgHandle*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1146">The file name to load, or a URI.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_gfile_sync"
                   c:identifier="rsvg_handle_new_from_gfile_sync"
                   version="2.32"
                   throws="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="1069">Creates a new [class@Rsvg.Handle] for @file.

This function sets the "base file" of the handle to be @file itself, so SVG
elements like `&lt;image&gt;` which reference external
resources will be resolved relative to the location of @file.

If @cancellable is not `NULL`, then the operation can be cancelled by
triggering the cancellable object from another thread. If the
operation was cancelled, the error `G_IO_ERROR_CANCELLED` will be
returned in @error.</doc>
        <source-position filename="rsvg.h" line="1092"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1087">a new [class@Rsvg.Handle] on success, or `NULL` with @error filled in</doc>
          <type name="Handle" c:type="RsvgHandle*"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1071">a `GFile`</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1072">flags from [flags@Rsvg.HandleFlags]</doc>
            <type name="HandleFlags" c:type="RsvgHandleFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1073">a `GCancellable`, or `NULL`</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_stream_sync"
                   c:identifier="rsvg_handle_new_from_stream_sync"
                   version="2.32"
                   throws="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="1097">Creates a new [class@Rsvg.Handle] for @stream.

This function sets the "base file" of the handle to be @base_file if
provided.  SVG elements like `&lt;image&gt;` which reference
external resources will be resolved relative to the location of @base_file.

If @cancellable is not `NULL`, then the operation can be cancelled by
triggering the cancellable object from another thread. If the
operation was cancelled, the error `G_IO_ERROR_CANCELLED` will be
returned in @error.</doc>
        <source-position filename="rsvg.h" line="1121"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1116">a new [class@Rsvg.Handle] on success, or `NULL` with @error filled in</doc>
          <type name="Handle" c:type="RsvgHandle*"/>
        </return-value>
        <parameters>
          <parameter name="input_stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1099">a `GInputStream`</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="base_file"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1100">a `GFile`, or `NULL`</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1101">flags from [flags@Rsvg.HandleFlags]</doc>
            <type name="HandleFlags" c:type="RsvgHandleFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1102">a `GCancellable`, or `NULL`</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_flags"
                   c:identifier="rsvg_handle_new_with_flags"
                   version="2.36">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="1007">Creates a new [class@Rsvg.Handle] with flags @flags.  After calling this function,
you can feed the resulting handle with SVG data by using
[method@Rsvg.Handle.read_stream_sync].</doc>
        <source-position filename="rsvg.h" line="1020"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1015">a new [class@Rsvg.Handle]</doc>
          <type name="Handle" c:type="RsvgHandle*"/>
        </return-value>
        <parameters>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1009">flags from [flags@Rsvg.HandleFlags]</doc>
            <type name="HandleFlags" c:type="RsvgHandleFlags"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="close"
              c:identifier="rsvg_handle_close"
              deprecated="1"
              deprecated-version="2.46."
              throws="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="584">This is used after calling [method@Rsvg.Handle.write] to indicate that there is no more data
to consume, and to start the actual parsing of the SVG document.  The only reason to
call this function is if you use use [method@Rsvg.Handle.write] to feed data into the @handle;
if you use the other methods like [ctor@Rsvg.Handle.new_from_file] or
[method@Rsvg.Handle.read_stream_sync], then you do not need to call this function.

This will return `TRUE` if the loader closed successfully and the
SVG data was parsed correctly.  Note that @handle isn't freed until
[method@GObject.Object.unref] is called.</doc>
        <doc-deprecated xml:space="preserve">Use [method@Rsvg.Handle.read_stream_sync] or the constructor
functions [ctor@Rsvg.Handle.new_from_gfile_sync] or
[ctor@Rsvg.Handle.new_from_stream_sync].  See the deprecation notes for
[method@Rsvg.Handle.write] for more information.</doc-deprecated>
        <source-position filename="rsvg.h" line="607"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="599">`TRUE` on success, or `FALSE` on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="586">a [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="rsvg_handle_free" deprecated="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="1226">Frees @handle.</doc>
        <doc-deprecated xml:space="preserve">Use [method@GObject.Object.unref] instead.</doc-deprecated>
        <source-position filename="rsvg.h" line="1234"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1228">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_base_uri"
              c:identifier="rsvg_handle_get_base_uri"
              glib:get-property="base-uri"
              version="2.8">
        <attribute name="org.gtk.Method.get_property" value="base-uri"/>
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="663">Gets the base uri for this [class@Rsvg.Handle].</doc>
        <source-position filename="rsvg.h" line="673"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="669">the base uri, possibly null</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="665">A [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_desc"
              c:identifier="rsvg_handle_get_desc"
              glib:get-property="desc"
              version="2.4"
              deprecated="1"
              deprecated-version="2.36.">
        <doc-deprecated xml:space="preserve">Librsvg does not read the metadata/desc/title elements;
this function always returns `NULL`.</doc-deprecated>
        <source-position filename="rsvg.h" line="1430"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1422">This function always returns `NULL`.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1420">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dimensions"
              c:identifier="rsvg_handle_get_dimensions"
              version="2.14"
              deprecated="1"
              deprecated-version="2.52.">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="690">Get the SVG's size. Do not call from within the size_func callback, because
an infinite loop will occur.

This function depends on the [class@Rsvg.Handle]'s DPI to compute dimensions in
pixels, so you should call [method@Rsvg.Handle.set_dpi] beforehand.</doc>
        <doc-deprecated xml:space="preserve">Use [method@Rsvg.Handle.get_intrinsic_size_in_pixels] instead.  This
function is deprecated because it is not able to return exact fractional dimensions,
only integer pixels.</doc-deprecated>
        <source-position filename="rsvg.h" line="708"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="692">A [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="dimension_data"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="693">A place to store the SVG's size</doc>
            <type name="DimensionData" c:type="RsvgDimensionData*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_dimensions_sub"
              c:identifier="rsvg_handle_get_dimensions_sub"
              version="2.22"
              deprecated="1"
              deprecated-version="2.46.">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="710">Get the size of a subelement of the SVG file. Do not call from within the
size_func callback, because an infinite loop will occur.

This function depends on the [class@Rsvg.Handle]'s DPI to compute dimensions in
pixels, so you should call [method@Rsvg.Handle.set_dpi] beforehand.

Element IDs should look like an URL fragment identifier; for example, pass
`#foo` (hash `foo`) to get the geometry of the element that
has an `id="foo"` attribute.</doc>
        <doc-deprecated xml:space="preserve">Use [method@Rsvg.Handle.get_geometry_for_layer] instead.</doc-deprecated>
        <source-position filename="rsvg.h" line="735"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="728">`TRUE` if the dimensions could be obtained, `FALSE` if there was an error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="712">A [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="dimension_data"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="713">A place to store the SVG's size</doc>
            <type name="DimensionData" c:type="RsvgDimensionData*"/>
          </parameter>
          <parameter name="id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="714">An element's id within the SVG, starting with "#" (a single
hash character), for example, `#layer1`.  This notation corresponds to a
URL's fragment ID.  Alternatively, pass `NULL` to use the whole SVG.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_geometry_for_element"
              c:identifier="rsvg_handle_get_geometry_for_element"
              version="2.46"
              throws="1">
        <doc xml:space="preserve"
             filename="rsvg-cairo.h"
             line="287">Computes the ink rectangle and logical rectangle of a single SVG element.

While `rsvg_handle_get_geometry_for_layer` computes the geometry of an SVG element subtree with
its transformation matrix, this other function will compute the element's geometry
as if it were being rendered under an identity transformation by itself.  That is,
the resulting geometry is as if the element got extracted by itself from the SVG.

This function is the counterpart to `rsvg_handle_render_element`.

Element IDs should look like an URL fragment identifier; for example, pass
`#foo` (hash `foo`) to get the geometry of the element that
has an `id="foo"` attribute.

The "ink rectangle" is the bounding box that would be painted
for fully- stroked and filled elements.

The "logical rectangle" just takes into account the unstroked
paths and text outlines.

Note that these bounds are not minimum bounds; for example,
clipping paths are not taken into account.

You can pass `NULL` for the @id if you want to measure all
the elements in the SVG, i.e. to measure everything from the
root element.

This operation is not constant-time, as it involves going through all
the child elements.</doc>
        <source-position filename="rsvg-cairo.h" line="338"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg-cairo.h"
               line="327">`TRUE` if the geometry could be obtained, or `FALSE` on error.  Errors
are returned in the @error argument.

API ordering: This function must be called on a fully-loaded @handle.  See
the section "[API ordering](class.Handle.html#api-ordering)" for details.

Panics: this function will panic if the @handle is not fully-loaded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="289">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="290">An element's id within the SVG, starting with "#" (a single
hash character), for example, `#layer1`.  This notation corresponds to a
URL's fragment ID.  Alternatively, pass `NULL` to compute the geometry for the
whole SVG.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="out_ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="294">Place to store the ink rectangle of the element.</doc>
            <type name="Rectangle" c:type="RsvgRectangle*"/>
          </parameter>
          <parameter name="out_logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="295">Place to store the logical rectangle of the element.</doc>
            <type name="Rectangle" c:type="RsvgRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_geometry_for_layer"
              c:identifier="rsvg_handle_get_geometry_for_layer"
              version="2.46"
              throws="1">
        <doc xml:space="preserve"
             filename="rsvg-cairo.h"
             line="186">Computes the ink rectangle and logical rectangle of an SVG element, or the
whole SVG, as if the whole SVG were rendered to a specific viewport.

Element IDs should look like an URL fragment identifier; for example, pass
`#foo` (hash `foo`) to get the geometry of the element that
has an `id="foo"` attribute.

The "ink rectangle" is the bounding box that would be painted
for fully-stroked and filled elements.

The "logical rectangle" just takes into account the unstroked
paths and text outlines.

Note that these bounds are not minimum bounds; for example,
clipping paths are not taken into account.

You can pass `NULL` for the @id if you want to measure all
the elements in the SVG, i.e. to measure everything from the
root element.

This operation is not constant-time, as it involves going through all
the child elements.</doc>
        <source-position filename="rsvg-cairo.h" line="232"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg-cairo.h"
               line="221">`TRUE` if the geometry could be obtained, or `FALSE` on error.  Errors
are returned in the @error argument.

API ordering: This function must be called on a fully-loaded @handle.  See
the section "[API ordering](class.Handle.html#api-ordering)" for details.

Panics: this function will panic if the @handle is not fully-loaded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="188">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="189">An element's id within the SVG, starting with "#" (a single
hash character), for example, `#layer1`.  This notation corresponds to a
URL's fragment ID.  Alternatively, pass `NULL` to compute the geometry for the
whole SVG.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="viewport" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="193">Viewport size at which the whole SVG would be fitted.</doc>
            <type name="Rectangle" c:type="const RsvgRectangle*"/>
          </parameter>
          <parameter name="out_ink_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="194">Place to store the ink rectangle of the element.</doc>
            <type name="Rectangle" c:type="RsvgRectangle*"/>
          </parameter>
          <parameter name="out_logical_rect"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="195">Place to store the logical rectangle of the element.</doc>
            <type name="Rectangle" c:type="RsvgRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_intrinsic_dimensions"
              c:identifier="rsvg_handle_get_intrinsic_dimensions"
              version="2.46">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="839">In simple terms, queries the `width`, `height`, and `viewBox` attributes in an SVG document.

If you are calling this function to compute a scaling factor to render the SVG,
consider simply using [method@Rsvg.Handle.render_document] instead; it will do the
scaling computations automatically.

Before librsvg 2.54.0, the `out_has_width` and `out_has_height` arguments would be set to true or false
depending on whether the SVG document actually had `width` and `height` attributes, respectively.

However, since librsvg 2.54.0, `width` and `height` are now [geometry
properties](https://www.w3.org/TR/SVG2/geometry.html) per the SVG2 specification; they
are not plain attributes.  SVG2 made it so that the initial value of those properties
is `auto`, which is equivalent to specifing a value of `100%`.  In this sense, even SVG
documents which lack `width` or `height` attributes semantically have to make them
default to `100%`.  This is why since librsvg 2.54.0, `out_has_width` and
`out_has_heigth` are always returned as `TRUE`, since with SVG2 all documents *have* a
default width and height of `100%`.

As an example, the following SVG element has a `width` of 100 pixels and a `height` of 400 pixels, but no `viewBox`.  This
function will return those sizes in `out_width` and `out_height`, and set `out_has_viewbox` to `FALSE`.

```
&lt;svg xmlns="http://www.w3.org/2000/svg" width="100" height="400"&gt;
```

Conversely, the following element has a `viewBox`, but no `width` or `height`.  This function will
set `out_has_viewbox` to `TRUE`, and it will also set `out_has_width` and `out_has_height` to `TRUE` but
return both length values as `100%`.

```
&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 400"&gt;
```

Note that the `RsvgLength` return values have `RsvgUnits` in them; you should
not assume that they are always in pixels.  For example, the following SVG element
will return width and height values whose `units` fields are `RSVG_UNIT_MM`.

```
&lt;svg xmlns="http://www.w3.org/2000/svg" width="210mm" height="297mm"&gt;
```

API ordering: This function must be called on a fully-loaded @handle.  See
the section "[API ordering](class.Handle.html#api-ordering)" for details.

Panics: this function will panic if the @handle is not fully-loaded.</doc>
        <source-position filename="rsvg.h" line="898"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="841">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="out_has_width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="842">Will be set to `TRUE`; see below.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="out_width"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="843">Will be set to the computed value of the `width` property in the toplevel SVG.</doc>
            <type name="Length" c:type="RsvgLength*"/>
          </parameter>
          <parameter name="out_has_height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="844">Will be set to `TRUE`; see below.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="out_height"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="845">Will be set to the computed value of the `height` property in the toplevel SVG.</doc>
            <type name="Length" c:type="RsvgLength*"/>
          </parameter>
          <parameter name="out_has_viewbox"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="846">Will be set to `TRUE` if the toplevel SVG has a `viewBox` attribute</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="out_viewbox"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="847">Will be set to the value of the `viewBox` attribute in the toplevel SVG</doc>
            <type name="Rectangle" c:type="RsvgRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_intrinsic_size_in_pixels"
              c:identifier="rsvg_handle_get_intrinsic_size_in_pixels"
              version="2.52">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="906">Converts an SVG document's intrinsic dimensions to pixels, and returns the result.

This function is able to extract the size in pixels from an SVG document if the
document has both `width` and `height` attributes
with physical units (px, in, cm, mm, pt, pc) or font-based units (em, ex).  For
physical units, the dimensions are normalized to pixels using the dots-per-inch (DPI)
value set previously with [method@Rsvg.Handle.set_dpi].  For font-based units, this function
uses the computed value of the `font-size` property for the toplevel
`&lt;svg&gt;` element.  In those cases, this function returns `TRUE`.

This function is not able to extract the size in pixels directly from the intrinsic
dimensions of the SVG document if the `width` or
`height` are in percentage units (or if they do not exist, in which
case the SVG spec mandates that they default to 100%), as these require a
&lt;firstterm&gt;viewport&lt;/firstterm&gt; to be resolved to a final size.  In this case, the
function returns `FALSE`.

For example, the following document fragment has intrinsic dimensions that will resolve
to 20x30 pixels.

```
&lt;svg xmlns="http://www.w3.org/2000/svg" width="20" height="30"/&gt;
```

Similarly, if the DPI is set to 96, this document will resolve to 192×288 pixels (i.e. 96×2 × 96×3).

```
&lt;svg xmlns="http://www.w3.org/2000/svg" width="2in" height="3in"/&gt;
```

The dimensions of the following documents cannot be resolved to pixels directly, and
this function would return `FALSE` for them:

```
&lt;!-- Needs a viewport against which to compute the percentages. --&gt;
&lt;svg xmlns="http://www.w3.org/2000/svg" width="100%" height="100%"/&gt;

&lt;!-- Does not have intrinsic width/height, just a 1:2 aspect ratio which
     needs to be fitted within a viewport. --&gt;
&lt;svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 200"/&gt;
```

Instead of querying an SVG document's size, applications are encouraged to render SVG
documents to a size chosen by the application, by passing a suitably-sized viewport to
[method@Rsvg.Handle.render_document].</doc>
        <source-position filename="rsvg.h" line="969"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="958">`TRUE` if the dimensions could be converted directly to pixels; in this case
@out_width and @out_height will be set accordingly.  Note that the dimensions are
floating-point numbers, so your application can know the exact size of an SVG document.
To get integer dimensions, you should use `ceil()` to round up to the nearest integer
(just using `round()`, may may chop off pixels with fractional coverage).  If the
dimensions cannot be converted to pixels, returns `FALSE` and puts 0.0 in both
@out_width and @out_height.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="908">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="out_width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="909">Will be set to the computed width; you should round this up to get integer pixels.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
          <parameter name="out_height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="910">Will be set to the computed height; you should round this up to get integer pixels.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_metadata"
              c:identifier="rsvg_handle_get_metadata"
              glib:get-property="metadata"
              version="2.9"
              deprecated="1"
              deprecated-version="2.36.">
        <doc-deprecated xml:space="preserve">Librsvg does not read the metadata/desc/title elements;
this function always returns `NULL`.</doc-deprecated>
        <source-position filename="rsvg.h" line="1444"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1436">This function always returns `NULL`.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1434">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pixbuf" c:identifier="rsvg_handle_get_pixbuf">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="609">Returns the pixbuf loaded by @handle.  The pixbuf returned will be reffed, so
the caller of this function must assume that ref.

API ordering: This function must be called on a fully-loaded @handle.  See
the section "[API ordering](class.Handle.html#api-ordering)" for details.

This function depends on the [class@Rsvg.Handle]'s dots-per-inch value (DPI) to compute the
"natural size" of the document in pixels, so you should call [method@Rsvg.Handle.set_dpi]
beforehand.</doc>
        <source-position filename="rsvg.h" line="627"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="623">A pixbuf, or %NULL on error.
during rendering.</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="611">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pixbuf_sub"
              c:identifier="rsvg_handle_get_pixbuf_sub"
              version="2.14">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="629">Creates a `GdkPixbuf` the same size as the entire SVG loaded into @handle, but
only renders the sub-element that has the specified @id (and all its
sub-sub-elements recursively).  If @id is `NULL`, this function renders the
whole SVG.

This function depends on the [class@Rsvg.Handle]'s dots-per-inch value (DPI) to compute the
"natural size" of the document in pixels, so you should call [method@Rsvg.Handle.set_dpi]
beforehand.

If you need to render an image which is only big enough to fit a particular
sub-element of the SVG, consider using [method@Rsvg.Handle.render_element].

Element IDs should look like an URL fragment identifier; for example, pass
`#foo` (hash `foo`) to get the geometry of the element that
has an `id="foo"` attribute.

API ordering: This function must be called on a fully-loaded @handle.  See
the section "[API ordering](class.Handle.html#api-ordering)" for details.</doc>
        <source-position filename="rsvg.h" line="661"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="655">a pixbuf, or `NULL` if an error occurs
during rendering.</doc>
          <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="631">An #RsvgHandle</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="632">An element's id within the SVG, starting with "#" (a single
hash character), for example, `#layer1`.  This notation corresponds to a
URL's fragment ID.  Alternatively, pass `NULL` to use the whole SVG.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_position_sub"
              c:identifier="rsvg_handle_get_position_sub"
              version="2.22"
              deprecated="1"
              deprecated-version="2.46.">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="739">Get the position of a subelement of the SVG file. Do not call from within
the size_func callback, because an infinite loop will occur.

This function depends on the [class@Rsvg.Handle]'s DPI to compute dimensions in
pixels, so you should call [method@Rsvg.Handle.set_dpi] beforehand.

Element IDs should look like an URL fragment identifier; for example, pass
`#foo` (hash `foo`) to get the geometry of the element that
has an `id="foo"` attribute.</doc>
        <doc-deprecated xml:space="preserve">Use [method@Rsvg.Handle.get_geometry_for_layer] instead.  This function is
deprecated since it is not able to return exact floating-point positions, only integer
pixels.</doc-deprecated>
        <source-position filename="rsvg.h" line="766"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="757">`TRUE` if the position could be obtained, `FALSE` if there was an error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="741">A [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="position_data"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="742">A place to store the SVG fragment's position.</doc>
            <type name="PositionData" c:type="RsvgPositionData*"/>
          </parameter>
          <parameter name="id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="743">An element's id within the SVG, starting with "#" (a single
hash character), for example, `#layer1`.  This notation corresponds to a
URL's fragment ID.  Alternatively, pass %NULL to use the whole SVG.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="rsvg_handle_get_title"
              glib:get-property="title"
              version="2.4"
              deprecated="1"
              deprecated-version="2.36.">
        <doc-deprecated xml:space="preserve">Librsvg does not read the metadata/desc/title elements;
this function always returns `NULL`.</doc-deprecated>
        <source-position filename="rsvg.h" line="1416"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1408">This function always returns `NULL`.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1406">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_sub" c:identifier="rsvg_handle_has_sub" version="2.22">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="770">Checks whether the element @id exists in the SVG document.

Element IDs should look like an URL fragment identifier; for example, pass
`#foo` (hash `foo`) to get the geometry of the element that
has an `id="foo"` attribute.</doc>
        <source-position filename="rsvg.h" line="788"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="783">`TRUE` if @id exists in the SVG document, `FALSE` otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="772">a [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="773">An element's id within the SVG, starting with "#" (a single hash
character), for example, `#layer1`.  This notation corresponds to a URL's
fragment ID.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="internal_set_testing"
              c:identifier="rsvg_handle_internal_set_testing">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="1190">Do not call this function.  This is intended for librsvg's internal
test suite only.</doc>
        <source-position filename="rsvg.h" line="1199"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1192">a [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="testing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1193">Whether to enable testing mode</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_stream_sync"
              c:identifier="rsvg_handle_read_stream_sync"
              version="2.32"
              throws="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="1038">Reads @stream and writes the data from it to @handle.

Before calling this function, you may need to call [method@Rsvg.Handle.set_base_uri]
or [method@Rsvg.Handle.set_base_gfile] to set the "base file" for resolving
references to external resources.  SVG elements like
`&lt;image&gt;` which reference external resources will be
resolved relative to the location you specify with those functions.

If @cancellable is not `NULL`, then the operation can be cancelled by
triggering the cancellable object from another thread. If the
operation was cancelled, the error `G_IO_ERROR_CANCELLED` will be
returned.</doc>
        <source-position filename="rsvg.h" line="1064"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1058">`TRUE` if reading @stream succeeded, or `FALSE` otherwise
  with @error filled in</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1040">a [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1041">a `GInputStream`</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1042">a `GCancellable`, or `NULL`</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="render_cairo"
              c:identifier="rsvg_handle_render_cairo"
              version="2.14"
              deprecated="1"
              deprecated-version="2.52.">
        <doc xml:space="preserve"
             filename="rsvg-cairo.h"
             line="36">Draws a loaded SVG handle to a Cairo context.  Please try to use
[method@Rsvg.Handle.render_document] instead, which allows you to pick the size
at which the document will be rendered.

Historically this function has picked a size by itself, based on the following rules:

* If the SVG document has both `width` and `height`
  attributes with physical units (px, in, cm, mm, pt, pc) or font-based units (em,
  ex), the function computes the size directly based on the dots-per-inch (DPI) you
  have configured with [method@Rsvg.Handle.set_dpi].  This is the same approach as
  [method@Rsvg.Handle.get_intrinsic_size_in_pixels].

* Otherwise, if there is a `viewBox` attribute and both
  `width` and `height` are set to
  `100%` (or if they don't exist at all and thus default to 100%),
  the function uses the width and height of the `viewBox` as a pixel size.  This
  produces a rendered document with the correct aspect ratio.

* Otherwise, this function computes the extents of every graphical object in the SVG
  document to find the total extents.  This is moderately expensive, but no more expensive
  than rendering the whole document, for example.

* This function cannot deal with percentage-based units for `width`
  and `height` because there is no viewport against which they could
  be resolved; that is why it will compute the extents of objects in that case.  This
  is why we recommend that you use [method@Rsvg.Handle.render_document] instead, which takes
  in a viewport and follows the sizing policy from the web platform.

Drawing will occur with respect to the @cr's current transformation: for example, if
the @cr has a rotated current transformation matrix, the whole SVG will be rotated in
the rendered version.

This function depends on the [class@Rsvg.Handle]'s DPI to compute dimensions in
pixels, so you should call [method@Rsvg.Handle.set_dpi] beforehand.

Note that @cr must be a Cairo context that is not in an error state, that is,
`cairo_status()` must return `CAIRO_STATUS_SUCCESS` for it.  Cairo can set a
context to be in an error state in various situations, for example, if it was
passed an invalid matrix or if it was created for an invalid surface.</doc>
        <doc-deprecated xml:space="preserve">Please use [method@Rsvg.Handle.render_document] instead; that function lets
you pass a viewport and obtain a good error message.</doc-deprecated>
        <source-position filename="rsvg-cairo.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg-cairo.h"
               line="81">`TRUE` if drawing succeeded; `FALSE` otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="38">A [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="39">A Cairo context</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
        </parameters>
      </method>
      <method name="render_cairo_sub"
              c:identifier="rsvg_handle_render_cairo_sub"
              version="2.14"
              deprecated="1"
              deprecated-version="2.52.">
        <doc xml:space="preserve"
             filename="rsvg-cairo.h"
             line="90">Renders a single SVG element in the same place as for a whole SVG document (a "subset"
of the document).  Please try to use [method@Rsvg.Handle.render_layer] instead, which allows
you to pick the size at which the document with the layer will be rendered.

This is equivalent to [method@Rsvg.Handle.render_cairo], but it renders only a single
element and its children, as if they composed an individual layer in the SVG.

Historically this function has picked a size for the whole document by itself, based
on the following rules:

* If the SVG document has both `width` and `height`
  attributes with physical units (px, in, cm, mm, pt, pc) or font-based units (em,
  ex), the function computes the size directly based on the dots-per-inch (DPI) you
  have configured with [method@Rsvg.Handle.set_dpi].  This is the same approach as
  [method@Rsvg.Handle.get_intrinsic_size_in_pixels].

* Otherwise, if there is a `viewBox` attribute and both
  `width` and `height` are set to
  `100%` (or if they don't exist at all and thus default to 100%),
  the function uses the width and height of the `viewBox` as a pixel size.  This
  produces a rendered document with the correct aspect ratio.

* Otherwise, this function computes the extents of every graphical object in the SVG
  document to find the total extents.  This is moderately expensive, but no more expensive
  than rendering the whole document, for example.

* This function cannot deal with percentage-based units for `width`
  and `height` because there is no viewport against which they could
  be resolved; that is why it will compute the extents of objects in that case.  This
  is why we recommend that you use [method@Rsvg.Handle.render_layer] instead, which takes
  in a viewport and follows the sizing policy from the web platform.

Drawing will occur with respect to the @cr's current transformation: for example, if
the @cr has a rotated current transformation matrix, the whole SVG will be rotated in
the rendered version.

This function depends on the [class@Rsvg.Handle]'s DPI to compute dimensions in
pixels, so you should call [method@Rsvg.Handle.set_dpi] beforehand.

Note that @cr must be a Cairo context that is not in an error state, that is,
`cairo_status()` must return `CAIRO_STATUS_SUCCESS` for it.  Cairo can set a
context to be in an error state in various situations, for example, if it was
passed an invalid matrix or if it was created for an invalid surface.

Element IDs should look like an URL fragment identifier; for example, pass
`#foo` (hash `foo`) to get the geometry of the element that
has an `id="foo"` attribute.</doc>
        <doc-deprecated xml:space="preserve">Please use [method@Rsvg.Handle.render_layer] instead; that function lets
you pass a viewport and obtain a good error message.</doc-deprecated>
        <source-position filename="rsvg-cairo.h" line="153"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg-cairo.h"
               line="146">`TRUE` if drawing succeeded; `FALSE` otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="92">A [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="93">A Cairo context</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="94">An element's id within the SVG, starting with "#" (a single
hash character), for example, `#layer1`.  This notation corresponds to a
URL's fragment ID.  Alternatively, pass `NULL` to render the whole SVG.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="render_document"
              c:identifier="rsvg_handle_render_document"
              version="2.46"
              throws="1">
        <doc xml:space="preserve"
             filename="rsvg-cairo.h"
             line="155">Renders the whole SVG document fitted to a viewport.

The @viewport gives the position and size at which the whole SVG document will be
rendered.  The document is scaled proportionally to fit into this viewport.

The @cr must be in a `CAIRO_STATUS_SUCCESS` state, or this function will not
render anything, and instead will return an error.</doc>
        <source-position filename="rsvg-cairo.h" line="181"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg-cairo.h"
               line="170">`TRUE` on success, `FALSE` on error.  Errors are returned
in the @error argument.

API ordering: This function must be called on a fully-loaded @handle.  See
the section "[API ordering](class.Handle.html#api-ordering)" for details.

Panics: this function will panic if the @handle is not fully-loaded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="157">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="158">A Cairo context</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="viewport" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="159">Viewport size at which the whole SVG would be fitted.</doc>
            <type name="Rectangle" c:type="const RsvgRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="render_element"
              c:identifier="rsvg_handle_render_element"
              version="2.46"
              throws="1">
        <doc xml:space="preserve"
             filename="rsvg-cairo.h"
             line="344">Renders a single SVG element to a given viewport.

This function can be used to extract individual element subtrees and render them,
scaled to a given @element_viewport.  This is useful for applications which have
reusable objects in an SVG and want to render them individually; for example, an
SVG full of icons that are meant to be be rendered independently of each other.

Element IDs should look like an URL fragment identifier; for example, pass
`#foo` (hash `foo`) to get the geometry of the element that
has an `id="foo"` attribute.

You can pass `NULL` for the @id if you want to render all
the elements in the SVG, i.e. to render everything from the
root element.

The `element_viewport` gives the position and size at which the named element will
be rendered.  FIXME: mention proportional scaling.</doc>
        <source-position filename="rsvg-cairo.h" line="383"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg-cairo.h"
               line="372">`TRUE` on success, `FALSE` on error.  Errors are returned
in the @error argument.

API ordering: This function must be called on a fully-loaded @handle.  See
the section "[API ordering](class.Handle.html#api-ordering)" for details.

Panics: this function will panic if the @handle is not fully-loaded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="346">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="347">A Cairo context</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="348">An element's id within the SVG, starting with "#" (a single
hash character), for example, `#layer1`.  This notation corresponds to a
URL's fragment ID.  Alternatively, pass `NULL` to render the whole SVG document tree.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="element_viewport" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="351">Viewport size in which to fit the element</doc>
            <type name="Rectangle" c:type="const RsvgRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="render_layer"
              c:identifier="rsvg_handle_render_layer"
              version="2.46"
              throws="1">
        <doc xml:space="preserve"
             filename="rsvg-cairo.h"
             line="239">Renders a single SVG element in the same place as for a whole SVG document.

The @viewport gives the position and size at which the whole SVG document would be
rendered.  The document is scaled proportionally to fit into this viewport; hence the
individual layer may be smaller than this.

This is equivalent to [method@Rsvg.Handle.render_document], but it renders only a
single element and its children, as if they composed an individual layer in
the SVG.  The element is rendered with the same transformation matrix as it
has within the whole SVG document.  Applications can use this to re-render a
single element and repaint it on top of a previously-rendered document, for
example.

Element IDs should look like an URL fragment identifier; for example, pass
`#foo` (hash `foo`) to get the geometry of the element that
has an `id="foo"` attribute.

You can pass `NULL` for the @id if you want to render all
the elements in the SVG, i.e. to render everything from the
root element.</doc>
        <source-position filename="rsvg-cairo.h" line="281"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg-cairo.h"
               line="270">`TRUE` on success, `FALSE` on error.  Errors are returned
in the @error argument.

API ordering: This function must be called on a fully-loaded @handle.  See
the section "[API ordering](class.Handle.html#api-ordering)" for details.

Panics: this function will panic if the @handle is not fully-loaded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="241">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="cr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="242">A Cairo context</doc>
            <type name="cairo.Context" c:type="cairo_t*"/>
          </parameter>
          <parameter name="id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="243">An element's id within the SVG, starting with "#" (a single
hash character), for example, `#layer1`.  This notation corresponds to a
URL's fragment ID.  Alternatively, pass `NULL` to render the whole SVG document tree.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="viewport" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg-cairo.h"
                 line="246">Viewport size at which the whole SVG would be fitted.</doc>
            <type name="Rectangle" c:type="const RsvgRectangle*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_base_gfile"
              c:identifier="rsvg_handle_set_base_gfile"
              version="2.32">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="1022">Set the base URI for @handle from @file.

Note: This function may only be called before [method@Rsvg.Handle.write] or
[method@Rsvg.Handle.read_stream_sync] have been called.</doc>
        <source-position filename="rsvg.h" line="1035"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1024">a [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="base_file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1025">a `GFile`</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_base_uri"
              c:identifier="rsvg_handle_set_base_uri"
              glib:set-property="base-uri"
              version="2.9">
        <attribute name="org.gtk.Method.set_property" value="base-uri"/>
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="675">Set the base URI for this SVG.

Note: This function may only be called before [method@Rsvg.Handle.write] or
[method@Rsvg.Handle.read_stream_sync] have been called.</doc>
        <source-position filename="rsvg.h" line="688"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="677">A [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="base_uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="678">The base uri</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_dpi" c:identifier="rsvg_handle_set_dpi" version="2.8">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="488">Sets the DPI at which the @handle will be rendered. Common values are
75, 90, and 300 DPI.

Passing a number &lt;= 0 to @dpi will reset the DPI to whatever the default
value happens to be, but since [id@rsvg_set_default_dpi] is deprecated, please
do not pass values &lt;= 0 to this function.</doc>
        <source-position filename="rsvg.h" line="503"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="490">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="dpi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="491">Dots Per Inch (i.e. as Pixels Per Inch)</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_dpi_x_y"
              c:identifier="rsvg_handle_set_dpi_x_y"
              version="2.8">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="505">Sets the DPI at which the @handle will be rendered. Common values are
75, 90, and 300 DPI.

Passing a number &lt;= 0 to @dpi will reset the DPI to whatever the default
value happens to be, but since [id@rsvg_set_default_dpi_x_y] is deprecated,
please do not pass values &lt;= 0 to this function.</doc>
        <source-position filename="rsvg.h" line="521"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="507">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="dpi_x" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="508">Dots Per Inch (i.e. Pixels Per Inch)</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="dpi_y" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="509">Dots Per Inch (i.e. Pixels Per Inch)</doc>
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size_callback"
              c:identifier="rsvg_handle_set_size_callback"
              deprecated="1"
              deprecated-version="2.14.">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="1252">Sets the sizing function for the @handle, which can be used to override the
size that librsvg computes for SVG images.  The @size_func is called from the
following functions:

* [method@Rsvg.Handle.get_dimensions]
* [method@Rsvg.Handle.get_dimensions_sub]
* [method@Rsvg.Handle.get_position_sub]
* [method@Rsvg.Handle.render_cairo]
* [method@Rsvg.Handle.render_cairo_sub]

Librsvg computes the size of the SVG being rendered, and passes it to the
@size_func, which may then modify these values to set the final size of the
generated image.</doc>
        <doc-deprecated xml:space="preserve">Use [method@Rsvg.Handle.render_document] instead.
This function was deprecated because when the @size_func is used, it makes it
unclear when the librsvg functions which call the @size_func will use the
size computed originally, or the callback-specified size, or whether it
refers to the whole SVG or to just a sub-element of it.  It is easier, and
unambiguous, to use code similar to the example above.</doc-deprecated>
        <source-position filename="rsvg.h" line="1282"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1254">An [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="size_func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1255">A sizing function, or `NULL`</doc>
            <type name="SizeFunc" c:type="RsvgSizeFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1256">User data to pass to @size_func, or `NULL`</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="user_data_destroy"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1257">Function to be called to destroy the data passed in @user_data,
  or `NULL`.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stylesheet"
              c:identifier="rsvg_handle_set_stylesheet"
              version="2.48"
              throws="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="1160">Sets a CSS stylesheet to use for an SVG document.

The @css_len argument is mandatory; this function will not compute the length
of the @css string.  This is because a provided stylesheet, which the calling
program could read from a file, can have nul characters in it.

During the CSS cascade, the specified stylesheet will be used with a "User"
[origin](https://drafts.csswg.org/css-cascade-3/#cascading-origins).

Note that `@import` rules will not be resolved, except for `data:` URLs.</doc>
        <source-position filename="rsvg.h" line="1184"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1178">`TRUE` on success, `FALSE` on error.  Errors are returned
in the @error argument.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1162">A [class@Rsvg.Handle].</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="css" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1163">String with CSS data; must be valid UTF-8.</doc>
            <array length="1" zero-terminated="0" c:type="const guint8*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="css_len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="1164">Length of the @css data in bytes.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="write"
              c:identifier="rsvg_handle_write"
              deprecated="1"
              deprecated-version="2.46."
              throws="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="552">Loads the next @count bytes of the image.  You can call this function multiple
times until the whole document is consumed; then you must call [method@Rsvg.Handle.close]
to actually parse the document.

Before calling this function for the first time, you may need to call
[method@Rsvg.Handle.set_base_uri] or [method@Rsvg.Handle.set_base_gfile] to set the "base
file" for resolving references to external resources.  SVG elements like
`&lt;image&gt;` which reference external resources will be
resolved relative to the location you specify with those functions.</doc>
        <doc-deprecated xml:space="preserve">Use [method@Rsvg.Handle.read_stream_sync] or the constructor
functions [ctor@Rsvg.Handle.new_from_gfile_sync] or
[ctor@Rsvg.Handle.new_from_stream_sync].  This function is deprecated because it
will accumulate data from the @buf in memory until [method@Rsvg.Handle.close] gets
called.  To avoid a big temporary buffer, use the suggested functions, which
take a `GFile` or a `GInputStream` and do not require a temporary buffer.</doc-deprecated>
        <source-position filename="rsvg.h" line="579"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="569">`TRUE` on success, or `FALSE` on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="554">an [class@Rsvg.Handle]</doc>
            <type name="Handle" c:type="RsvgHandle*"/>
          </instance-parameter>
          <parameter name="buf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="555">pointer to svg data</doc>
            <array length="1" zero-terminated="0" c:type="const guchar*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="rsvg.h"
                 line="556">length of the @buf buffer in bytes</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <property name="base-uri"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_base_uri"
                getter="get_base_uri"
                default-value="NULL">
        <attribute name="org.gtk.Property.get"
                   value="rsvg_handle_get_base_uri"/>
        <attribute name="org.gtk.Property.set"
                   value="rsvg_handle_set_base_uri"/>
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="266">Base URI, to be used to resolve relative references for resources.  See the section
"Security and locations of referenced files" for details.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="desc"
                deprecated="1"
                deprecated-version="2.36."
                transfer-ownership="none"
                getter="get_desc"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="333">SVG's description.</doc>
        <doc-deprecated xml:space="preserve">Reading this property always returns `NULL`.</doc-deprecated>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="dpi-x"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="254">Horizontal resolution in dots per inch.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="dpi-y"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="260">Horizontal resolution in dots per inch.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="em"
                deprecated="1"
                deprecated-version="2.46."
                transfer-ownership="none"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="301">Exact width, in pixels, of the rendered SVG before calling the size callback
as specified by [method@Rsvg.Handle.set_size_callback].</doc>
        <doc-deprecated xml:space="preserve">Reading each of the size properties causes the size of the
SVG to be recomputed, so reading both the `em` and
`ex` properties will cause two such computations.  Please
use [method@Rsvg.Handle.get_intrinsic_dimensions] instead.</doc-deprecated>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="ex"
                deprecated="1"
                deprecated-version="2.46."
                transfer-ownership="none"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="313">Exact height, in pixels, of the rendered SVG before calling the size callback
as specified by [method@Rsvg.Handle.set_size_callback].</doc>
        <doc-deprecated xml:space="preserve">Reading each of the size properties causes the size of the
SVG to be recomputed, so reading both the `em` and
`ex` properties will cause two such computations.  Please
use [method@Rsvg.Handle.get_intrinsic_dimensions] instead.</doc-deprecated>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="flags"
                version="2.36"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="RSVG_HANDLE_FLAGS_NONE">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="246">Flags from [flags@Rsvg.HandleFlags].</doc>
        <type name="HandleFlags"/>
      </property>
      <property name="height"
                deprecated="1"
                deprecated-version="2.46."
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="287">Height, in pixels, of the rendered SVG after calling the size callback
as specified by [method@Rsvg.Handle.set_size_callback].</doc>
        <doc-deprecated xml:space="preserve">For historical reasons, this property is of integer type,
which cannot give the exact size of SVG images that are not pixel-aligned.
Moreover, reading each of the size properties causes the size of the SVG to
be recomputed, so reading both the `width` and
`height` properties will cause two such computations.
Please use [method@Rsvg.Handle.get_intrinsic_dimensions] instead.</doc-deprecated>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="metadata"
                deprecated="1"
                deprecated-version="2.36."
                transfer-ownership="none"
                getter="get_metadata"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="341">SVG's metadata</doc>
        <doc-deprecated xml:space="preserve">Reading this property always returns `NULL`.</doc-deprecated>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                deprecated="1"
                deprecated-version="2.36."
                transfer-ownership="none"
                getter="get_title"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="325">SVG's title.</doc>
        <doc-deprecated xml:space="preserve">Reading this property always returns `NULL`.</doc-deprecated>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="width"
                deprecated="1"
                deprecated-version="2.46."
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="273">Width, in pixels, of the rendered SVG after calling the size callback
as specified by [method@Rsvg.Handle.set_size_callback].</doc>
        <doc-deprecated xml:space="preserve">For historical reasons, this property is of integer type,
which cannot give the exact size of SVG images that are not pixel-aligned.
Moreover, reading each of the size properties causes the size of the SVG to
be recomputed, so reading both the `width` and
`height` properties will cause two such computations.
Please use [method@Rsvg.Handle.get_intrinsic_dimensions] instead.</doc-deprecated>
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="_abi_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </class>
    <record name="HandleClass"
            c:type="RsvgHandleClass"
            glib:is-gtype-struct-for="Handle">
      <doc xml:space="preserve"
           filename="rsvg.h"
           line="367">Class structure for [class@Rsvg.Handle].</doc>
      <source-position filename="rsvg.h" line="378"/>
      <field name="parent">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="369">parent class</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_abi_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="15">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <bitfield name="HandleFlags"
              version="2.40.3"
              glib:type-name="RsvgHandleFlags"
              glib:get-type="rsvg_handle_flags_get_type"
              c:type="RsvgHandleFlags">
      <doc xml:space="preserve"
           filename="rsvg.h"
           line="975">Configuration flags for an [class@Rsvg.Handle].  Note that not all of [class@Rsvg.Handle]'s
constructors let you specify flags.  For this reason, [ctor@Rsvg.Handle.new_from_gfile_sync]
and [ctor@Rsvg.Handle.new_from_stream_sync] are the preferred ways to create a handle.</doc>
      <member name="flags_none"
              value="0"
              c:identifier="RSVG_HANDLE_FLAGS_NONE"
              glib:nick="flags-none"
              glib:name="RSVG_HANDLE_FLAGS_NONE">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="977">No flags are set.</doc>
      </member>
      <member name="flag_unlimited"
              value="1"
              c:identifier="RSVG_HANDLE_FLAG_UNLIMITED"
              glib:nick="flag-unlimited"
              glib:name="RSVG_HANDLE_FLAG_UNLIMITED">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="978">Disable safety limits in the XML parser.  Libxml2 has
[several limits](https://gitlab.gnome.org/GNOME/libxml2/blob/master/include/libxml/parserInternals.h)
designed to keep malicious XML content from consuming too much memory while parsing.
For security reasons, this should only be used for trusted input!  Since: 2.40.3</doc>
      </member>
      <member name="flag_keep_image_data"
              value="2"
              c:identifier="RSVG_HANDLE_FLAG_KEEP_IMAGE_DATA"
              glib:nick="flag-keep-image-data"
              glib:name="RSVG_HANDLE_FLAG_KEEP_IMAGE_DATA">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="982">Use this if the Cairo surface to which you are
rendering is a PDF, PostScript, SVG, or Win32 Printing surface.  This will make librsvg
and Cairo use the original, compressed data for images in the final output, instead of
passing uncompressed images.  For example, this will make the a resulting PDF file
smaller and faster.  Please see [the Cairo
documentation](https://www.cairographics.org/manual/cairo-cairo-surface-t.html#cairo-surface-set-mime-data)
for details.</doc>
      </member>
    </bitfield>
    <function-macro name="IS_HANDLE"
                    c:identifier="RSVG_IS_HANDLE"
                    introspectable="0">
      <source-position filename="rsvg.h" line="354"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_HANDLE_CLASS"
                    c:identifier="RSVG_IS_HANDLE_CLASS"
                    introspectable="0">
      <source-position filename="rsvg.h" line="355"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <record name="Length" c:type="RsvgLength">
      <doc xml:space="preserve"
           filename="rsvg.h"
           line="817">`RsvgLength` values are used in [method@Rsvg.Handle.get_intrinsic_dimensions], for
example, to return the CSS length values of the `width` and
`height` attributes of an `&lt;svg&gt;` element.

This is equivalent to [CSS lengths](https://www.w3.org/TR/CSS21/syndata.html#length-units).

It is up to the calling application to convert lengths in non-pixel units
(i.e. those where the @unit field is not `RSVG_UNIT_PX`) into something
meaningful to the application.  For example, if your application knows the
dots-per-inch (DPI) it is using, it can convert lengths with @unit in
`RSVG_UNIT_IN` or other physical units.</doc>
      <source-position filename="rsvg.h" line="837"/>
      <field name="length" writable="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="819">numeric part of the length</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="unit" writable="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="820">unit part of the length</doc>
        <type name="Unit" c:type="RsvgUnit"/>
      </field>
    </record>
    <constant name="MAJOR_VERSION" value="2" c:type="LIBRSVG_MAJOR_VERSION">
      <doc xml:space="preserve"
           filename="rsvg-features.h"
           line="26">This is a C macro that expands to a number with the major version
of librsvg against which your program is compiled.

For example, for librsvg-2.3.4, the major version is 2.

C programs can use this as a compile-time check for the required
version, but note that generally it is a better idea to do
compile-time checks by calling [pkg-config](https://www.freedesktop.org/wiki/Software/pkg-config/)
in your build scripts.

Note: for a run-time check on the version of librsvg that your
program is running with (e.g. the version which the linker used for
your program), or for programs not written in C, use
`rsvg_major_version` instead.</doc>
      <source-position filename="rsvg-version.h" line="8"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MICRO_VERSION" value="92" c:type="LIBRSVG_MICRO_VERSION">
      <doc xml:space="preserve"
           filename="rsvg-features.h"
           line="64">This is a C macro that expands to a number with the micro version
of librsvg against which your program is compiled.

For example, for librsvg-2.3.4, the micro version is 4.

C programs can use this as a compile-time check for the required
version, but note that generally it is a better idea to do
compile-time checks by calling [pkg-config](https://www.freedesktop.org/wiki/Software/pkg-config/)
in your build scripts.

Note: for a run-time check on the version of librsvg that your
program is running with (e.g. the version which the linker used for
your program), or for programs not written in C, use
`rsvg_micro_version` instead.</doc>
      <source-position filename="rsvg-version.h" line="10"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MINOR_VERSION" value="56" c:type="LIBRSVG_MINOR_VERSION">
      <doc xml:space="preserve"
           filename="rsvg-features.h"
           line="45">This is a C macro that expands to a number with the minor version
of librsvg against which your program is compiled.

For example, for librsvg-2.3.4, the minor version is 3.

C programs can use this as a compile-time check for the required
version, but note that generally it is a better idea to do
compile-time checks by calling [pkg-config](https://www.freedesktop.org/wiki/Software/pkg-config/)
in your build scripts.

Note: for a run-time check on the version of librsvg that your
program is running with (e.g. the version which the linker used for
your program), or for programs not written in C, use
`rsvg_minor_version` instead.</doc>
      <source-position filename="rsvg-version.h" line="9"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <record name="PositionData"
            c:type="RsvgPositionData"
            deprecated="1"
            deprecated-version="2.46.">
      <doc xml:space="preserve"
           filename="rsvg.h"
           line="409">Position of an SVG fragment from [method@Rsvg.Handle.get_position_sub].  Please
the deprecation documentation for that function.</doc>
      <doc-deprecated xml:space="preserve">Use [method@Rsvg.Handle.get_geometry_for_layer] instead.</doc-deprecated>
      <source-position filename="rsvg.h" line="422"/>
      <field name="x" writable="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="411">position on the x axis</doc>
        <type name="gint" c:type="int"/>
      </field>
      <field name="y" writable="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="412">position on the y axis</doc>
        <type name="gint" c:type="int"/>
      </field>
    </record>
    <record name="Rectangle" c:type="RsvgRectangle" version="2.46">
      <doc xml:space="preserve"
           filename="rsvg.h"
           line="424">A data structure for holding a rectangle.</doc>
      <source-position filename="rsvg.h" line="440"/>
      <field name="x" writable="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="426">X coordinate of the left side of the rectangle</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="y" writable="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="427">Y coordinate of the the top side of the rectangle</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="width" writable="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="428">width of the rectangle</doc>
        <type name="gdouble" c:type="double"/>
      </field>
      <field name="height" writable="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="429">height of the rectangle</doc>
        <type name="gdouble" c:type="double"/>
      </field>
    </record>
    <callback name="SizeFunc"
              c:type="RsvgSizeFunc"
              deprecated="1"
              deprecated-version="2.14.">
      <doc xml:space="preserve"
           filename="rsvg.h"
           line="1236">Function to let a user of the library specify the SVG's dimensions

See the documentation for [method@Rsvg.Handle.set_size_callback] for an example, and
for the reasons for deprecation.</doc>
      <doc-deprecated xml:space="preserve">Use [method@Rsvg.Handle.render_document] instead, which lets you specify
a viewport size in which to render the SVG document.</doc-deprecated>
      <source-position filename="rsvg.h" line="1250"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="width"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1238">the width of the SVG</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="height"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1239">the height of the SVG</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1240">user data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="Unit" c:type="RsvgUnit">
      <doc xml:space="preserve"
           filename="rsvg.h"
           line="790">Units for the `RsvgLength` struct.  These have the same meaning as [CSS length
units](https://www.w3.org/TR/CSS21/syndata.html#length-units).</doc>
      <source-position filename="rsvg.h" line="815"/>
      <member name="percent" value="0" c:identifier="RSVG_UNIT_PERCENT">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="792">percentage values; where &lt;literal&gt;1.0&lt;/literal&gt; means 100%.</doc>
      </member>
      <member name="px" value="1" c:identifier="RSVG_UNIT_PX">
        <doc xml:space="preserve" filename="rsvg.h" line="793">pixels</doc>
      </member>
      <member name="em" value="2" c:identifier="RSVG_UNIT_EM">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="794">em, or the current font size</doc>
      </member>
      <member name="ex" value="3" c:identifier="RSVG_UNIT_EX">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="795">x-height of the current font</doc>
      </member>
      <member name="in" value="4" c:identifier="RSVG_UNIT_IN">
        <doc xml:space="preserve" filename="rsvg.h" line="796">inches</doc>
      </member>
      <member name="cm" value="5" c:identifier="RSVG_UNIT_CM">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="797">centimeters</doc>
      </member>
      <member name="mm" value="6" c:identifier="RSVG_UNIT_MM">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="798">millimeters</doc>
      </member>
      <member name="pt" value="7" c:identifier="RSVG_UNIT_PT">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="799">points, or 1/72 inch</doc>
      </member>
      <member name="pc" value="8" c:identifier="RSVG_UNIT_PC">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="800">picas, or 1/6 inch (12 points)</doc>
      </member>
    </enumeration>
    <constant name="VERSION" value="2.56.92" c:type="LIBRSVG_VERSION">
      <doc xml:space="preserve"
           filename="rsvg-features.h"
           line="83">This is a C macro that expands to a string with the version of
librsvg against which your program is compiled.

For example, for librsvg-2.3.4, this macro expands to
`"2.3.4"`.

C programs can use this as a compile-time check for the required
version, but note that generally it is a better idea to do
compile-time checks by calling [pkg-config](https://www.freedesktop.org/wiki/Software/pkg-config/)
in your build scripts.

Note: for a run-time check on the version of librsvg that your
program is running with (e.g. the version which the linker used for
your program), or for programs not written in C, use
`rsvg_version` instead.</doc>
      <source-position filename="rsvg-version.h" line="11"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function name="cleanup"
              c:identifier="rsvg_cleanup"
              version="2.36"
              deprecated="1"
              deprecated-version="2.46">
      <doc xml:space="preserve"
           filename="rsvg.h"
           line="442">This function does nothing.</doc>
      <doc-deprecated xml:space="preserve">No-op. This function should not be called from normal programs.</doc-deprecated>
      <source-position filename="rsvg.h" line="451"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="error_quark"
              c:identifier="rsvg_error_quark"
              moved-to="Error.quark">
      <doc xml:space="preserve"
           filename="rsvg.h"
           line="67">The error domain for RSVG</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="72">The error domain</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="init"
              c:identifier="rsvg_init"
              version="2.9"
              deprecated="1"
              deprecated-version="2.36">
      <doc xml:space="preserve"
           filename="rsvg.h"
           line="1204">This function does nothing.</doc>
      <doc-deprecated xml:space="preserve">There is no need to initialize librsvg.</doc-deprecated>
      <source-position filename="rsvg.h" line="1213"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="pixbuf_from_file"
              c:identifier="rsvg_pixbuf_from_file"
              deprecated="1"
              throws="1">
      <doc xml:space="preserve"
           filename="rsvg.h"
           line="1299">Loads a new `GdkPixbuf` from @filename and returns it.  The caller must
assume the reference to the reurned pixbuf. If an error occurred, @error is
set and `NULL` is returned.</doc>
      <doc-deprecated xml:space="preserve">Use [ctor@Rsvg.Handle.new_from_file] and [method@Rsvg.Handle.render_document] instead.</doc-deprecated>
      <source-position filename="rsvg.h" line="1312"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="1308">A pixbuf, or %NULL on error.</doc>
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1301">A file name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pixbuf_from_file_at_max_size"
              c:identifier="rsvg_pixbuf_from_file_at_max_size"
              deprecated="1"
              throws="1">
      <doc xml:space="preserve"
           filename="rsvg.h"
           line="1358">Loads a new `GdkPixbuf` from @filename and returns it.  This pixbuf is uniformly
scaled so that the it fits into a rectangle of size `max_width * max_height`. The
caller must assume the reference to the returned pixbuf. If an error occurred,
@error is set and `NULL` is returned.</doc>
      <doc-deprecated xml:space="preserve">Use [ctor@Rsvg.Handle.new_from_file] and [method@Rsvg.Handle.render_document] instead.</doc-deprecated>
      <source-position filename="rsvg.h" line="1374"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="1370">A pixbuf, or %NULL on error.</doc>
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1360">A file name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="max_width" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1361">The requested max width</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="max_height" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1362">The requested max height</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="pixbuf_from_file_at_size"
              c:identifier="rsvg_pixbuf_from_file_at_size"
              deprecated="1"
              throws="1">
      <doc xml:space="preserve"
           filename="rsvg.h"
           line="1336">Loads a new `GdkPixbuf` from @filename and returns it.  This pixbuf is scaled
from the size indicated to the new size indicated by @width and @height.  If
both of these are -1, then the default size of the image being loaded is
used.  The caller must assume the reference to the returned pixbuf. If an
error occurred, @error is set and `NULL` is returned.</doc>
      <doc-deprecated xml:space="preserve">Use [ctor@Rsvg.Handle.new_from_file] and [method@Rsvg.Handle.render_document] instead.</doc-deprecated>
      <source-position filename="rsvg.h" line="1353"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="1349">A pixbuf, or %NULL on error.</doc>
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1338">A file name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="width" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1339">The new width, or -1</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="height" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1340">The new height, or -1</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="pixbuf_from_file_at_zoom"
              c:identifier="rsvg_pixbuf_from_file_at_zoom"
              deprecated="1"
              throws="1">
      <doc xml:space="preserve"
           filename="rsvg.h"
           line="1315">Loads a new `GdkPixbuf` from @filename and returns it.  This pixbuf is scaled
from the size indicated by the file by a factor of @x_zoom and @y_zoom.  The
caller must assume the reference to the returned pixbuf. If an error
occurred, @error is set and `NULL` is returned.</doc>
      <doc-deprecated xml:space="preserve">Use [ctor@Rsvg.Handle.new_from_file] and [method@Rsvg.Handle.render_document] instead.</doc-deprecated>
      <source-position filename="rsvg.h" line="1331"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="1327">A pixbuf, or %NULL on error.</doc>
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1317">A file name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="x_zoom" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1318">The horizontal zoom factor</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="y_zoom" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1319">The vertical zoom factor</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="pixbuf_from_file_at_zoom_with_max"
              c:identifier="rsvg_pixbuf_from_file_at_zoom_with_max"
              deprecated="1"
              throws="1">
      <doc xml:space="preserve"
           filename="rsvg.h"
           line="1378">Loads a new `GdkPixbuf` from @filename and returns it.  This pixbuf is scaled
from the size indicated by the file by a factor of @x_zoom and @y_zoom. If the
resulting pixbuf would be larger than max_width/max_heigh it is uniformly scaled
down to fit in that rectangle. The caller must assume the reference to the
returned pixbuf. If an error occurred, @error is set and `NULL` is returned.</doc>
      <doc-deprecated xml:space="preserve">Use [ctor@Rsvg.Handle.new_from_file] and [method@Rsvg.Handle.render_document] instead.</doc-deprecated>
      <source-position filename="rsvg.h" line="1397"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="rsvg.h"
             line="1393">A pixbuf, or %NULL on error.</doc>
        <type name="GdkPixbuf.Pixbuf" c:type="GdkPixbuf*"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1380">A file name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="x_zoom" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1381">The horizontal zoom factor</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="y_zoom" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1382">The vertical zoom factor</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="max_width" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1383">The requested max width</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="max_height" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="1384">The requested max height</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_default_dpi"
              c:identifier="rsvg_set_default_dpi"
              version="2.8"
              deprecated="1"
              deprecated-version="2.42.3">
      <doc xml:space="preserve"
           filename="rsvg.h"
           line="453">Do not use this function.  Create an [class@Rsvg.Handle] and call
[method@Rsvg.Handle.set_dpi] on it instead.</doc>
      <doc-deprecated xml:space="preserve">This function used to set a global default DPI.  However,
it only worked if it was called before any [class@Rsvg.Handle] objects had been
created; it would not work after that.  To avoid global mutable state, please
use [method@Rsvg.Handle.set_dpi] instead.</doc-deprecated>
      <source-position filename="rsvg.h" line="468"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dpi" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="455">Dots Per Inch (aka Pixels Per Inch)</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_default_dpi_x_y"
              c:identifier="rsvg_set_default_dpi_x_y"
              version="2.8"
              deprecated="1"
              deprecated-version="2.42.3">
      <doc xml:space="preserve"
           filename="rsvg.h"
           line="470">Do not use this function.  Create an [class@Rsvg.Handle] and call
[method@Rsvg.Handle.set_dpi_x_y] on it instead.</doc>
      <doc-deprecated xml:space="preserve">This function used to set a global default DPI.  However,
it only worked if it was called before any [class@Rsvg.Handle] objects had been
created; it would not work after that.  To avoid global mutable state, please
use [method@Rsvg.Handle.set_dpi] instead.</doc-deprecated>
      <source-position filename="rsvg.h" line="486"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dpi_x" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="472">Dots Per Inch (aka Pixels Per Inch)</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
        <parameter name="dpi_y" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="rsvg.h"
               line="473">Dots Per Inch (aka Pixels Per Inch)</doc>
          <type name="gdouble" c:type="double"/>
        </parameter>
      </parameters>
    </function>
    <function name="term"
              c:identifier="rsvg_term"
              version="2.9"
              deprecated="1"
              deprecated-version="2.36">
      <doc xml:space="preserve"
           filename="rsvg.h"
           line="1215">This function does nothing.</doc>
      <doc-deprecated xml:space="preserve">There is no need to de-initialize librsvg.</doc-deprecated>
      <source-position filename="rsvg.h" line="1224"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
  </namespace>
</repository>
