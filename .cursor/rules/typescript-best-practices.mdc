---
description: TypeScript best practices for the project
globs: **/*.ts
alwaysApply: false
---
Follow [clean-code](mdc:.cursor/rules/clean-code.mdc) principles as foundation.

You are an expert in TypeScript, Node.js, GJS and GNOME.

## Type Safety & Modern TypeScript
- Use strict TypeScript configuration with `strict: true`
- Avoid using `any` type - use `unknown` with proper type guards instead
- Create type guards with `is` syntax for runtime type checking
- Use generics for better type inference and proper generic constraints
- Use discriminated unions with explicit type properties for complex state management
- Ensure proper nullability handling with optional chaining and nullish coalescing
- Use utility types (`Partial`, `Pick`, `Omit`, `Record`) instead of manual type construction
- Implement proper error types with branded types or Result patterns

## Type Definitions
- Use interfaces for object shapes
- Use types for unions, intersections, and mapped types
- Extend interfaces for inheritance
- Use consistent naming patterns
- Document interfaces and types with JSDoc comments
- Place types and interfaces in `src/types/`, each package has such a folder
- Use union types for controlled state variations
- Implement branded types for domain-specific values
- Create utility types for common transformations
- Use const assertions for immutable data structures

## Naming Conventions
- Use descriptive, intention-revealing names for variables, functions, and types
- Prefix event handlers with `handle` (e.g. `handleClick`, `handleSubmit`)
- Use `PascalCase` for types, interfaces, classes, and enums
- Use `camelCase` for variables, functions, and methods
- Use `SCREAMING_SNAKE_CASE` for constants
- Boolean variables should be prefixed with `is`, `has`, `can`, or `should`

## Code Organization
- **Functional Style**: Prefer pure functions and immutable data patterns
- **Proper Abstractions**: Extract common patterns into reusable utilities
- **Index.ts Files as Barrel Exports**: All `index.ts` files must only contain re-exports, never implementation code

## Enums and Constants
- Prefer enum values over string literals in code
- Create constant objects for related values

## Error Handling
- Use Result types or custom error classes instead of throwing generic errors
- Use proper error types for different failure scenarios
- Provide meaningful error messages with context
- Include appropriate type checking before operations
- Handle edge cases explicitly
- Use try/catch blocks for error-prone operations
- Use type guards for runtime type checking
