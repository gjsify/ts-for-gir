<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Gdk" version="3.0"/>
  <include name="GdkPixbuf" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Pango" version="1.0"/>
  <include name="cairo" version="1.0"/>
  <include name="xlib" version="2.0"/>
  <package name="gdk-x11-3.0"/>
  <c:include name="gdk/gdkx.h"/>
  <namespace name="GdkX11"
             version="3.0"
             shared-library="libgdk-3.so.0"
             c:identifier-prefixes="Gdk"
             c:symbol-prefixes="gdk">
    <function-macro name="CURSOR_XCURSOR"
                    c:identifier="GDK_CURSOR_XCURSOR"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkx11cursor.h"
           line="71">Returns the X cursor belonging to a #GdkCursor.</doc>
      <source-position filename="gdk/x11/gdkx11cursor.h" line="79"/>
      <parameters>
        <parameter name="cursor">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkx11cursor.h"
               line="73">a #GdkCursor.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CURSOR_XDISPLAY"
                    c:identifier="GDK_CURSOR_XDISPLAY"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkx11cursor.h"
           line="61">Returns the display of a #GdkCursor.</doc>
      <source-position filename="gdk/x11/gdkx11cursor.h" line="69"/>
      <parameters>
        <parameter name="cursor">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkx11cursor.h"
               line="63">a #GdkCursor.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DISPLAY_XDISPLAY"
                    c:identifier="GDK_DISPLAY_XDISPLAY"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11display.h" line="59"/>
      <parameters>
        <parameter name="display">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_X11_APP_LAUNCH_CONTEXT"
                    c:identifier="GDK_IS_X11_APP_LAUNCH_CONTEXT"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11applaunchcontext.h" line="32"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_X11_APP_LAUNCH_CONTEXT_CLASS"
                    c:identifier="GDK_IS_X11_APP_LAUNCH_CONTEXT_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11applaunchcontext.h" line="33"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_X11_CURSOR"
                    c:identifier="GDK_IS_X11_CURSOR"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11cursor.h" line="42"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_X11_CURSOR_CLASS"
                    c:identifier="GDK_IS_X11_CURSOR_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11cursor.h" line="43"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_X11_DEVICE_CORE"
                    c:identifier="GDK_IS_X11_DEVICE_CORE"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11device-core.h" line="28"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_X11_DEVICE_CORE_CLASS"
                    c:identifier="GDK_IS_X11_DEVICE_CORE_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11device-core.h" line="29"/>
      <parameters>
        <parameter name="c">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_X11_DEVICE_MANAGER_CORE"
                    c:identifier="GDK_IS_X11_DEVICE_MANAGER_CORE"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11devicemanager-core.h"
                       line="28"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_X11_DEVICE_MANAGER_CORE_CLASS"
                    c:identifier="GDK_IS_X11_DEVICE_MANAGER_CORE_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11devicemanager-core.h"
                       line="29"/>
      <parameters>
        <parameter name="c">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_X11_DEVICE_MANAGER_XI2"
                    c:identifier="GDK_IS_X11_DEVICE_MANAGER_XI2"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11devicemanager-xi2.h" line="28"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_X11_DEVICE_MANAGER_XI2_CLASS"
                    c:identifier="GDK_IS_X11_DEVICE_MANAGER_XI2_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11devicemanager-xi2.h" line="29"/>
      <parameters>
        <parameter name="c">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_X11_DEVICE_XI2"
                    c:identifier="GDK_IS_X11_DEVICE_XI2"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11device-xi2.h" line="28"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_X11_DEVICE_XI2_CLASS"
                    c:identifier="GDK_IS_X11_DEVICE_XI2_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11device-xi2.h" line="29"/>
      <parameters>
        <parameter name="c">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_X11_DISPLAY"
                    c:identifier="GDK_IS_X11_DISPLAY"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11display.h" line="49"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_X11_DISPLAY_CLASS"
                    c:identifier="GDK_IS_X11_DISPLAY_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11display.h" line="50"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_X11_DISPLAY_MANAGER"
                    c:identifier="GDK_IS_X11_DISPLAY_MANAGER"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11displaymanager.h" line="39"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_X11_DISPLAY_MANAGER_CLASS"
                    c:identifier="GDK_IS_X11_DISPLAY_MANAGER_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11displaymanager.h" line="40"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_X11_DRAG_CONTEXT"
                    c:identifier="GDK_IS_X11_DRAG_CONTEXT"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11dnd.h" line="32"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_X11_DRAG_CONTEXT_CLASS"
                    c:identifier="GDK_IS_X11_DRAG_CONTEXT_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11dnd.h" line="33"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_X11_KEYMAP"
                    c:identifier="GDK_IS_X11_KEYMAP"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11keys.h" line="39"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_X11_KEYMAP_CLASS"
                    c:identifier="GDK_IS_X11_KEYMAP_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11keys.h" line="40"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_X11_MONITOR"
                    c:identifier="GDK_IS_X11_MONITOR"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11monitor.h" line="35"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_X11_SCREEN"
                    c:identifier="GDK_IS_X11_SCREEN"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11screen.h" line="42"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_X11_SCREEN_CLASS"
                    c:identifier="GDK_IS_X11_SCREEN_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11screen.h" line="43"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_X11_VISUAL"
                    c:identifier="GDK_IS_X11_VISUAL"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11visual.h" line="42"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_X11_VISUAL_CLASS"
                    c:identifier="GDK_IS_X11_VISUAL_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11visual.h" line="43"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_X11_WINDOW"
                    c:identifier="GDK_IS_X11_WINDOW"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11window.h" line="42"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_X11_WINDOW_CLASS"
                    c:identifier="GDK_IS_X11_WINDOW_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11window.h" line="43"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="POINTER_TO_XID"
                    c:identifier="GDK_POINTER_TO_XID"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkx11utils.h"
           line="61">Converts a @gpointer back to an XID that was previously converted
using GDK_XID_TO_POINTER().</doc>
      <source-position filename="gdk/x11/gdkx11utils.h" line="68"/>
      <parameters>
        <parameter name="pointer">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkx11utils.h"
               line="63">pointer to extract an XID from</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ROOT_WINDOW"
                    c:identifier="GDK_ROOT_WINDOW"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkx11utils.h"
           line="44">Obtains the Xlib window id of the root window of the current screen.</doc>
      <source-position filename="gdk/x11/gdkx11utils.h" line="49"/>
    </function-macro>
    <function-macro name="SCREEN_XDISPLAY"
                    c:identifier="GDK_SCREEN_XDISPLAY"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkx11screen.h"
           line="67">Returns the display of a X11 #GdkScreen.</doc>
      <source-position filename="gdk/x11/gdkx11screen.h" line="75"/>
      <parameters>
        <parameter name="screen">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkx11screen.h"
               line="69">a #GdkScreen</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SCREEN_XNUMBER"
                    c:identifier="GDK_SCREEN_XNUMBER"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkx11screen.h"
           line="87">Returns the index of a X11 #GdkScreen.</doc>
      <source-position filename="gdk/x11/gdkx11screen.h" line="95"/>
      <parameters>
        <parameter name="screen">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkx11screen.h"
               line="89">a #GdkScreen</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SCREEN_XSCREEN"
                    c:identifier="GDK_SCREEN_XSCREEN"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkx11screen.h"
           line="77">Returns the screen of a X11 #GdkScreen.</doc>
      <source-position filename="gdk/x11/gdkx11screen.h" line="85"/>
      <parameters>
        <parameter name="screen">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkx11screen.h"
               line="79">a #GdkScreen</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="VISUAL_XVISUAL"
                    c:identifier="GDK_VISUAL_XVISUAL"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11visual.h" line="59"/>
      <parameters>
        <parameter name="visual">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WINDOW_XDISPLAY"
                    c:identifier="GDK_WINDOW_XDISPLAY"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkx11window.h"
           line="90">Returns the display of a #GdkWindow.</doc>
      <source-position filename="gdk/x11/gdkx11window.h" line="98"/>
      <parameters>
        <parameter name="win">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkx11window.h"
               line="92">a #GdkWindow.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WINDOW_XID"
                    c:identifier="GDK_WINDOW_XID"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkx11window.h"
           line="100">Returns the X window belonging to a #GdkWindow.</doc>
      <source-position filename="gdk/x11/gdkx11window.h" line="108"/>
      <parameters>
        <parameter name="win">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkx11window.h"
               line="102">a #GdkWindow.</doc>
        </parameter>
      </parameters>
    </function-macro>
    <class name="X11AppLaunchContext"
           c:symbol-prefix="x11_app_launch_context"
           c:type="GdkX11AppLaunchContext"
           parent="Gdk.AppLaunchContext"
           glib:type-name="GdkX11AppLaunchContext"
           glib:get-type="gdk_x11_app_launch_context_get_type"
           glib:type-struct="X11AppLaunchContextClass">
      <source-position filename="gdk/x11/gdkx11applaunchcontext.h" line="41"/>
    </class>
    <record name="X11AppLaunchContextClass"
            c:type="GdkX11AppLaunchContextClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="X11AppLaunchContext">
      <source-position filename="gdk/x11/gdkx11applaunchcontext.h" line="41"/>
    </record>
    <class name="X11Cursor"
           c:symbol-prefix="x11_cursor"
           c:type="GdkX11Cursor"
           parent="Gdk.Cursor"
           glib:type-name="GdkX11Cursor"
           glib:get-type="gdk_x11_cursor_get_type"
           glib:type-struct="X11CursorClass">
      <source-position filename="gdk/x11/gdkx11cursor.h" line="51"/>
      <method name="get_xcursor" c:identifier="gdk_x11_cursor_get_xcursor">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkcursor-x11.c"
             line="304">Returns the X cursor belonging to a #GdkCursor.</doc>
        <source-position filename="gdk/x11/gdkx11cursor.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkcursor-x11.c"
               line="310">an Xlib Cursor.</doc>
          <type name="xlib.Cursor" c:type="Cursor"/>
        </return-value>
        <parameters>
          <instance-parameter name="cursor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkcursor-x11.c"
                 line="306">a #GdkCursor.</doc>
            <type name="X11Cursor" c:type="GdkCursor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_xdisplay" c:identifier="gdk_x11_cursor_get_xdisplay">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkcursor-x11.c"
             line="288">Returns the display of a #GdkCursor.</doc>
        <source-position filename="gdk/x11/gdkx11cursor.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkcursor-x11.c"
               line="294">an Xlib Display*.</doc>
          <type name="xlib.Display" c:type="Display*"/>
        </return-value>
        <parameters>
          <instance-parameter name="cursor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkcursor-x11.c"
                 line="290">a #GdkCursor.</doc>
            <type name="X11Cursor" c:type="GdkCursor*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="X11CursorClass"
            c:type="GdkX11CursorClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="X11Cursor">
      <source-position filename="gdk/x11/gdkx11cursor.h" line="51"/>
    </record>
    <class name="X11DeviceCore"
           c:symbol-prefix="x11_device_core"
           c:type="GdkX11DeviceCore"
           parent="Gdk.Device"
           glib:type-name="GdkX11DeviceCore"
           glib:get-type="gdk_x11_device_core_get_type"
           glib:type-struct="X11DeviceCoreClass">
      <source-position filename="gdk/x11/gdkx11device-core.h" line="33"/>
    </class>
    <record name="X11DeviceCoreClass"
            c:type="GdkX11DeviceCoreClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="X11DeviceCore">
      <source-position filename="gdk/x11/gdkx11device-core.h" line="33"/>
    </record>
    <class name="X11DeviceManagerCore"
           c:symbol-prefix="x11_device_manager_core"
           c:type="GdkX11DeviceManagerCore"
           parent="Gdk.DeviceManager"
           glib:type-name="GdkX11DeviceManagerCore"
           glib:get-type="gdk_x11_device_manager_core_get_type"
           glib:type-struct="X11DeviceManagerCoreClass">
      <source-position filename="gdk/x11/gdkx11devicemanager-core.h"
                       line="33"/>
    </class>
    <record name="X11DeviceManagerCoreClass"
            c:type="GdkX11DeviceManagerCoreClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="X11DeviceManagerCore">
      <source-position filename="gdk/x11/gdkx11devicemanager-core.h"
                       line="33"/>
    </record>
    <class name="X11DeviceManagerXI2"
           c:symbol-prefix="x11_device_manager_xi2"
           c:type="GdkX11DeviceManagerXI2"
           parent="X11DeviceManagerCore"
           glib:type-name="GdkX11DeviceManagerXI2"
           glib:get-type="gdk_x11_device_manager_xi2_get_type"
           glib:type-struct="X11DeviceManagerXI2Class">
      <source-position filename="gdk/x11/gdkx11devicemanager-xi2.h" line="33"/>
      <property name="major"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="minor"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="opcode"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <record name="X11DeviceManagerXI2Class"
            c:type="GdkX11DeviceManagerXI2Class"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="X11DeviceManagerXI2">
      <source-position filename="gdk/x11/gdkx11devicemanager-xi2.h" line="33"/>
    </record>
    <class name="X11DeviceXI2"
           c:symbol-prefix="x11_device_xi2"
           c:type="GdkX11DeviceXI2"
           parent="Gdk.Device"
           glib:type-name="GdkX11DeviceXI2"
           glib:get-type="gdk_x11_device_xi2_get_type"
           glib:type-struct="X11DeviceXI2Class">
      <source-position filename="gdk/x11/gdkx11device-xi2.h" line="33"/>
      <property name="device-id"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <record name="X11DeviceXI2Class"
            c:type="GdkX11DeviceXI2Class"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="X11DeviceXI2">
      <source-position filename="gdk/x11/gdkx11device-xi2.h" line="33"/>
    </record>
    <class name="X11Display"
           c:symbol-prefix="x11_display"
           c:type="GdkX11Display"
           parent="Gdk.Display"
           glib:type-name="GdkX11Display"
           glib:get-type="gdk_x11_display_get_type"
           glib:type-struct="X11DisplayClass">
      <source-position filename="gdk/x11/gdkx11display.h" line="44"/>
      <function name="get_glx_version"
                c:identifier="gdk_x11_display_get_glx_version"
                version="3.16">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkglcontext-x11.c"
             line="1362">Retrieves the version of the GLX implementation.</doc>
        <source-position filename="gdk/x11/gdkx11glcontext.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkglcontext-x11.c"
               line="1370">%TRUE if GLX is available</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkglcontext-x11.c"
                 line="1364">a #GdkDisplay</doc>
            <type name="Gdk.Display" c:type="GdkDisplay*"/>
          </parameter>
          <parameter name="major"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkglcontext-x11.c"
                 line="1365">return location for the GLX major version</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="minor"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkglcontext-x11.c"
                 line="1366">return location for the GLX minor version</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </function>
      <method name="broadcast_startup_message"
              c:identifier="gdk_x11_display_broadcast_startup_message"
              version="2.12"
              introspectable="0">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkdisplay-x11.c"
             line="2335">Sends a startup notification message of type @message_type to
@display.

This is a convenience function for use by code that implements the
freedesktop startup notification specification. Applications should
not normally need to call it directly. See the
[Startup Notification Protocol specification](http://standards.freedesktop.org/startup-notification-spec/startup-notification-latest.txt)
for definitions of the message types and keys that can be used.</doc>
        <source-position filename="gdk/x11/gdkx11display.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkdisplay-x11.c"
                 line="2337">a #GdkDisplay</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="message_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkdisplay-x11.c"
                 line="2338">startup notification message type ("new", "change",
or "remove")</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkdisplay-x11.c"
                 line="2340">a list of key/value pairs (as strings), terminated by a
%NULL key. (A %NULL value for a key will cause that key to be
skipped in the output.)</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="error_trap_pop"
              c:identifier="gdk_x11_display_error_trap_pop"
              version="3.0">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkdisplay-x11.c"
             line="2955">Pops the error trap pushed by gdk_x11_display_error_trap_push().
Will XSync() if necessary and will always block until
the error is known to have occurred or not occurred,
so the error code can be returned.

If you don’t need to use the return value,
gdk_x11_display_error_trap_pop_ignored() would be more efficient.

See gdk_error_trap_pop() for the all-displays-at-once
equivalent.</doc>
        <source-position filename="gdk/x11/gdkx11display.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkdisplay-x11.c"
               line="2972">X error code or 0 on success</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkdisplay-x11.c"
                 line="2957">the display</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="error_trap_pop_ignored"
              c:identifier="gdk_x11_display_error_trap_pop_ignored"
              version="3.0">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkdisplay-x11.c"
             line="2982">Pops the error trap pushed by gdk_x11_display_error_trap_push().
Does not block to see if an error occurred; merely records the
range of requests to ignore errors for, and ignores those errors
if they arrive asynchronously.

See gdk_error_trap_pop_ignored() for the all-displays-at-once
equivalent.</doc>
        <source-position filename="gdk/x11/gdkx11display.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkdisplay-x11.c"
                 line="2984">the display</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="error_trap_push"
              c:identifier="gdk_x11_display_error_trap_push"
              version="3.0">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkdisplay-x11.c"
             line="2805">Begins a range of X requests on @display for which X error events
will be ignored. Unignored errors (when no trap is pushed) will abort
the application. Use gdk_x11_display_error_trap_pop() or
gdk_x11_display_error_trap_pop_ignored()to lift a trap pushed
with this function.

See also gdk_error_trap_push() to push a trap on all displays.</doc>
        <source-position filename="gdk/x11/gdkx11display.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkdisplay-x11.c"
                 line="2807">a #GdkDisplay</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_startup_notification_id"
              c:identifier="gdk_x11_display_get_startup_notification_id"
              version="2.12">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkdisplay-x11.c"
             line="2547">Gets the startup notification ID for a display.</doc>
        <source-position filename="gdk/x11/gdkx11display.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkdisplay-x11.c"
               line="2553">the startup notification ID for @display</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkdisplay-x11.c"
                 line="2549">a #GdkDisplay</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user_time"
              c:identifier="gdk_x11_display_get_user_time"
              version="2.8">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkdisplay-x11.c"
             line="2515">Returns the timestamp of the last user interaction on
@display. The timestamp is taken from events caused
by user interaction such as key presses or pointer
movements. See gdk_x11_window_set_user_time().</doc>
        <source-position filename="gdk/x11/gdkx11display.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkdisplay-x11.c"
               line="2524">the timestamp of the last user interaction</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkdisplay-x11.c"
                 line="2517">a #GdkDisplay</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_xdisplay"
              c:identifier="gdk_x11_display_get_xdisplay"
              version="2.2">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkdisplay-x11.c"
             line="2213">Returns the X display of a #GdkDisplay.</doc>
        <source-position filename="gdk/x11/gdkx11display.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkdisplay-x11.c"
               line="2219">an X display</doc>
          <type name="xlib.Display" c:type="Display*"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkdisplay-x11.c"
                 line="2215">a #GdkDisplay</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="grab" c:identifier="gdk_x11_display_grab" version="2.2">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkdisplay-x11.c"
             line="2004">Call XGrabServer() on @display.
To ungrab the display again, use gdk_x11_display_ungrab().

gdk_x11_display_grab()/gdk_x11_display_ungrab() calls can be nested.</doc>
        <source-position filename="gdk/x11/gdkx11display.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkdisplay-x11.c"
                 line="2006">a #GdkDisplay</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_cursor_theme"
              c:identifier="gdk_x11_display_set_cursor_theme"
              version="2.8">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkcursor-x11.c"
             line="441">Sets the cursor theme from which the images for cursor
should be taken.

If the windowing system supports it, existing cursors created
with gdk_cursor_new(), gdk_cursor_new_for_display() and
gdk_cursor_new_from_name() are updated to reflect the theme
change. Custom cursors constructed with
gdk_cursor_new_from_pixbuf() will have to be handled
by the application (GTK+ applications can learn about
cursor theme changes by listening for change notification
for the corresponding #GtkSetting).</doc>
        <source-position filename="gdk/x11/gdkx11display.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkcursor-x11.c"
                 line="443">a #GdkDisplay</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="theme"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkcursor-x11.c"
                 line="444">the name of the cursor theme to use, or %NULL to unset
        a previously set value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkcursor-x11.c"
                 line="446">the cursor size to use, or 0 to keep the previous size</doc>
            <type name="gint" c:type="const gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_startup_notification_id"
              c:identifier="gdk_x11_display_set_startup_notification_id"
              version="3.0">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkdisplay-x11.c"
             line="2563">Sets the startup notification ID for a display.

This is usually taken from the value of the DESKTOP_STARTUP_ID
environment variable, but in some cases (such as the application not
being launched using exec()) it can come from other sources.

If the ID contains the string "_TIME" then the portion following that
string is taken to be the X11 timestamp of the event that triggered
the application to be launched and the GDK current event time is set
accordingly.

The startup ID is also what is used to signal that the startup is
complete (for example, when opening a window or when calling
gdk_notify_startup_complete()).</doc>
        <source-position filename="gdk/x11/gdkx11display.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkdisplay-x11.c"
                 line="2565">a #GdkDisplay</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="startup_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkdisplay-x11.c"
                 line="2566">the startup notification ID (must be valid utf8)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_window_scale"
              c:identifier="gdk_x11_display_set_window_scale"
              version="3.10">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkdisplay-x11.c"
             line="2910">Forces a specific window scale for all windows on this display,
instead of using the default or user configured scale. This
is can be used to disable scaling support by setting @scale to
1, or to programmatically set the window scale.

Once the scale is set by this call it will not change in response
to later user configuration changes.</doc>
        <source-position filename="gdk/x11/gdkx11display.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkdisplay-x11.c"
                 line="2912">the display</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="scale" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkdisplay-x11.c"
                 line="2913">The new scale value</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="string_to_compound_text"
              c:identifier="gdk_x11_display_string_to_compound_text"
              version="2.24">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkselection-x11.c"
             line="573">Convert a string from the encoding of the current
locale into a form suitable for storing in a window property.</doc>
        <source-position filename="gdk/x11/gdkx11selection.h" line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkselection-x11.c"
               line="587">0 upon success, non-zero upon failure</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkselection-x11.c"
                 line="575">the #GdkDisplay where the encoding is defined</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkselection-x11.c"
                 line="576">a nul-terminated string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="encoding"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkselection-x11.c"
                 line="577">location to store the encoding atom
    (to be used as the type for the property)</doc>
            <type name="Gdk.Atom" c:type="GdkAtom*"/>
          </parameter>
          <parameter name="format"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkselection-x11.c"
                 line="579">location to store the format of the property</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="ctext"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkselection-x11.c"
                 line="580">location to store newly
    allocated data for the property</doc>
            <array length="4" zero-terminated="0" c:type="guchar**">
              <type name="guint8" c:type="guchar*"/>
            </array>
          </parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkselection-x11.c"
                 line="582">the length of @ctext, in bytes</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="text_property_to_text_list"
              c:identifier="gdk_x11_display_text_property_to_text_list"
              version="2.24">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkselection-x11.c"
             line="332">Convert a text string from the encoding as it is stored
in a property into an array of strings in the encoding of
the current locale. (The elements of the array represent the
nul-separated elements of the original text string.)</doc>
        <source-position filename="gdk/x11/gdkx11selection.h" line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkselection-x11.c"
               line="350">the number of strings stored in list, or 0,
    if the conversion failed</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkselection-x11.c"
                 line="334">The #GdkDisplay where the encoding is defined</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="encoding" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkselection-x11.c"
                 line="335">an atom representing the encoding. The most
   common values for this are STRING, or COMPOUND_TEXT.
   This is value used as the type for the property</doc>
            <type name="Gdk.Atom" c:type="GdkAtom"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkselection-x11.c"
                 line="338">the format of the property</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkselection-x11.c"
                 line="339">The text data</doc>
            <type name="guint8" c:type="const guchar*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkselection-x11.c"
                 line="340">The number of items to transform</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkselection-x11.c"
                 line="341">location to store an  array of strings in
   the encoding of the current locale. This array should be
   freed using gdk_free_text_list().</doc>
            <type name="utf8" c:type="gchar***"/>
          </parameter>
        </parameters>
      </method>
      <method name="ungrab"
              c:identifier="gdk_x11_display_ungrab"
              version="2.2">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkdisplay-x11.c"
             line="2029">Ungrab @display after it has been grabbed with
gdk_x11_display_grab().</doc>
        <source-position filename="gdk/x11/gdkx11display.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkdisplay-x11.c"
                 line="2031">a #GdkDisplay</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="utf8_to_compound_text"
              c:identifier="gdk_x11_display_utf8_to_compound_text"
              version="2.24">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkselection-x11.c"
             line="694">Converts from UTF-8 to compound text.</doc>
        <source-position filename="gdk/x11/gdkx11selection.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkselection-x11.c"
               line="706">%TRUE if the conversion succeeded,
    otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkselection-x11.c"
                 line="696">a #GdkDisplay</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </instance-parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkselection-x11.c"
                 line="697">a UTF-8 string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="encoding"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkselection-x11.c"
                 line="698">location to store resulting encoding</doc>
            <type name="Gdk.Atom" c:type="GdkAtom*"/>
          </parameter>
          <parameter name="format"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkselection-x11.c"
                 line="699">location to store format of the result</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="ctext"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkselection-x11.c"
                 line="700">location to store the data of the result</doc>
            <array length="4" zero-terminated="0" c:type="guchar**">
              <type name="guint8" c:type="guchar*"/>
            </array>
          </parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkselection-x11.c"
                 line="701">location to store the length of the data
    stored in @ctext</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="X11DisplayClass"
            c:type="GdkX11DisplayClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="X11Display">
      <source-position filename="gdk/x11/gdkx11display.h" line="44"/>
    </record>
    <class name="X11DisplayManager"
           c:symbol-prefix="x11_display_manager"
           c:type="GdkX11DisplayManager"
           parent="Gdk.DisplayManager"
           glib:type-name="GdkX11DisplayManager"
           glib:get-type="gdk_x11_display_manager_get_type"
           glib:type-struct="X11DisplayManagerClass">
      <source-position filename="gdk/x11/gdkx11displaymanager.h" line="34"/>
    </class>
    <record name="X11DisplayManagerClass"
            c:type="GdkX11DisplayManagerClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="X11DisplayManager">
      <source-position filename="gdk/x11/gdkx11displaymanager.h" line="34"/>
    </record>
    <class name="X11DragContext"
           c:symbol-prefix="x11_drag_context"
           c:type="GdkX11DragContext"
           parent="Gdk.DragContext"
           glib:type-name="GdkX11DragContext"
           glib:get-type="gdk_x11_drag_context_get_type"
           glib:type-struct="X11DragContextClass">
      <source-position filename="gdk/x11/gdkx11dnd.h" line="41"/>
    </class>
    <record name="X11DragContextClass"
            c:type="GdkX11DragContextClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="X11DragContext">
      <source-position filename="gdk/x11/gdkx11dnd.h" line="41"/>
    </record>
    <class name="X11GLContext"
           c:symbol-prefix="x11_gl_context"
           c:type="GdkX11GLContext"
           parent="Gdk.GLContext"
           glib:type-name="GdkX11GLContext"
           glib:get-type="gdk_x11_gl_context_get_type"
           glib:type-struct="X11GLContextClass">
      <source-position filename="gdk/x11/gdkx11glcontext.h" line="37"/>
    </class>
    <record name="X11GLContextClass"
            c:type="GdkX11GLContextClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="X11GLContext">
      <source-position filename="gdk/x11/gdkx11glcontext.h" line="37"/>
    </record>
    <class name="X11Keymap"
           c:symbol-prefix="x11_keymap"
           c:type="GdkX11Keymap"
           parent="Gdk.Keymap"
           glib:type-name="GdkX11Keymap"
           glib:get-type="gdk_x11_keymap_get_type"
           glib:type-struct="X11KeymapClass">
      <source-position filename="gdk/x11/gdkx11keys.h" line="34"/>
      <method name="get_group_for_state"
              c:identifier="gdk_x11_keymap_get_group_for_state"
              version="3.6">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkkeys-x11.c"
             line="1381">Extracts the group from the state field sent in an X Key event.
This is only needed for code processing raw X events, since #GdkEventKey
directly includes an is_modifier field.</doc>
        <source-position filename="gdk/x11/gdkx11keys.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkkeys-x11.c"
               line="1390">the index of the active keyboard group for the event</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="keymap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkkeys-x11.c"
                 line="1383">a #GdkX11Keymap</doc>
            <type name="X11Keymap" c:type="GdkKeymap*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkkeys-x11.c"
                 line="1384">raw state returned from X</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="key_is_modifier"
              c:identifier="gdk_x11_keymap_key_is_modifier"
              version="3.6">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkkeys-x11.c"
             line="1469">Determines whether a particular key code represents a key that
is a modifier. That is, it’s a key that normally just affects
the keyboard state and the behavior of other keys rather than
producing a direct effect itself. This is only needed for code
processing raw X events, since #GdkEventKey directly includes
an is_modifier field.</doc>
        <source-position filename="gdk/x11/gdkx11keys.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkkeys-x11.c"
               line="1481">%TRUE if the hardware keycode is a modifier key</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="keymap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkkeys-x11.c"
                 line="1471">a #GdkX11Keymap</doc>
            <type name="X11Keymap" c:type="GdkKeymap*"/>
          </instance-parameter>
          <parameter name="keycode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkkeys-x11.c"
                 line="1472">the hardware keycode from a key event</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="X11KeymapClass"
            c:type="GdkX11KeymapClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="X11Keymap">
      <source-position filename="gdk/x11/gdkx11keys.h" line="34"/>
    </record>
    <class name="X11Monitor"
           c:symbol-prefix="x11_monitor"
           c:type="GdkX11Monitor"
           parent="Gdk.Monitor"
           glib:type-name="GdkX11Monitor"
           glib:get-type="gdk_x11_monitor_get_type"
           glib:type-struct="X11MonitorClass">
      <source-position filename="gdk/x11/gdkx11monitor.h" line="38"/>
      <function name="get_output" c:identifier="gdk_x11_monitor_get_output">
        <source-position filename="gdk/x11/gdkx11monitor.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="xlib.XID" c:type="XID"/>
        </return-value>
        <parameters>
          <parameter name="monitor" transfer-ownership="none">
            <type name="Gdk.Monitor" c:type="GdkMonitor*"/>
          </parameter>
        </parameters>
      </function>
    </class>
    <record name="X11MonitorClass"
            c:type="GdkX11MonitorClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="X11Monitor">
      <source-position filename="gdk/x11/gdkx11monitor.h" line="38"/>
    </record>
    <class name="X11Screen"
           c:symbol-prefix="x11_screen"
           c:type="GdkX11Screen"
           parent="Gdk.Screen"
           glib:type-name="GdkX11Screen"
           glib:get-type="gdk_x11_screen_get_type"
           glib:type-struct="X11ScreenClass">
      <source-position filename="gdk/x11/gdkx11screen.h" line="51"/>
      <method name="get_current_desktop"
              c:identifier="gdk_x11_screen_get_current_desktop"
              version="3.10">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkscreen-x11.c"
             line="1827">Returns the current workspace for @screen when running under a
window manager that supports multiple workspaces, as described
in the
[Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec) specification.</doc>
        <source-position filename="gdk/x11/gdkx11screen.h" line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkscreen-x11.c"
               line="1836">the current workspace, or 0 if workspaces are not supported</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkscreen-x11.c"
                 line="1829">a #GdkScreen</doc>
            <type name="X11Screen" c:type="GdkScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_monitor_output"
              c:identifier="gdk_x11_screen_get_monitor_output"
              version="2.14">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkscreen-x11.c"
             line="171">Gets the XID of the specified output/monitor.
If the X server does not support version 1.2 of the RANDR
extension, 0 is returned.</doc>
        <source-position filename="gdk/x11/gdkx11screen.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkscreen-x11.c"
               line="180">the XID of the monitor</doc>
          <type name="xlib.XID" c:type="XID"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkscreen-x11.c"
                 line="173">a #GdkScreen</doc>
            <type name="X11Screen" c:type="GdkScreen*"/>
          </instance-parameter>
          <parameter name="monitor_num" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkscreen-x11.c"
                 line="174">number of the monitor, between 0 and gdk_screen_get_n_monitors (screen)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_number_of_desktops"
              c:identifier="gdk_x11_screen_get_number_of_desktops"
              version="3.10">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkscreen-x11.c"
             line="1808">Returns the number of workspaces for @screen when running under a
window manager that supports multiple workspaces, as described
in the
[Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec) specification.</doc>
        <source-position filename="gdk/x11/gdkx11screen.h" line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkscreen-x11.c"
               line="1817">the number of workspaces, or 0 if workspaces are not supported</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkscreen-x11.c"
                 line="1810">a #GdkScreen</doc>
            <type name="X11Screen" c:type="GdkScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_screen_number"
              c:identifier="gdk_x11_screen_get_screen_number"
              version="2.2">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkscreen-x11.c"
             line="437">Returns the index of a #GdkScreen.</doc>
        <source-position filename="gdk/x11/gdkx11screen.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkscreen-x11.c"
               line="443">the position of @screen among the screens
    of its display</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkscreen-x11.c"
                 line="439">a #GdkScreen</doc>
            <type name="X11Screen" c:type="GdkScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_window_manager_name"
              c:identifier="gdk_x11_screen_get_window_manager_name"
              version="2.2">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkscreen-x11.c"
             line="1660">Returns the name of the window manager for @screen.</doc>
        <source-position filename="gdk/x11/gdkx11screen.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkscreen-x11.c"
               line="1666">the name of the window manager screen @screen, or
"unknown" if the window manager is unknown. The string is owned by GDK
and should not be freed.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkscreen-x11.c"
                 line="1662">a #GdkScreen</doc>
            <type name="X11Screen" c:type="GdkScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_xscreen"
              c:identifier="gdk_x11_screen_get_xscreen"
              version="2.2">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkscreen-x11.c"
             line="421">Returns the screen of a #GdkScreen.</doc>
        <source-position filename="gdk/x11/gdkx11screen.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkscreen-x11.c"
               line="427">an Xlib Screen*</doc>
          <type name="xlib.Screen" c:type="Screen*"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkscreen-x11.c"
                 line="423">a #GdkScreen</doc>
            <type name="X11Screen" c:type="GdkScreen*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lookup_visual"
              c:identifier="gdk_x11_screen_lookup_visual"
              version="2.2">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkvisual-x11.c"
             line="439">Looks up the #GdkVisual for a particular screen and X Visual ID.</doc>
        <source-position filename="gdk/x11/gdkx11visual.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkvisual-x11.c"
               line="446">the #GdkVisual (owned by the screen
  object), or %NULL if the visual ID wasn’t found.</doc>
          <type name="X11Visual" c:type="GdkVisual*"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkvisual-x11.c"
                 line="441">a #GdkScreen.</doc>
            <type name="X11Screen" c:type="GdkScreen*"/>
          </instance-parameter>
          <parameter name="xvisualid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkvisual-x11.c"
                 line="442">an X Visual ID.</doc>
            <type name="xlib.VisualID" c:type="VisualID"/>
          </parameter>
        </parameters>
      </method>
      <method name="supports_net_wm_hint"
              c:identifier="gdk_x11_screen_supports_net_wm_hint"
              version="2.2">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkscreen-x11.c"
             line="1567">This function is specific to the X11 backend of GDK, and indicates
whether the window manager supports a certain hint from the
[Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec) specification.

When using this function, keep in mind that the window manager
can change over time; so you shouldn’t use this function in
a way that impacts persistent application state. A common bug
is that your application can start up before the window manager
does when the user logs in, and before the window manager starts
gdk_x11_screen_supports_net_wm_hint() will return %FALSE for every property.
You can monitor the window_manager_changed signal on #GdkScreen to detect
a window manager change.</doc>
        <source-position filename="gdk/x11/gdkx11screen.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkscreen-x11.c"
               line="1585">%TRUE if the window manager supports @property</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="screen" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkscreen-x11.c"
                 line="1569">the relevant #GdkScreen.</doc>
            <type name="X11Screen" c:type="GdkScreen*"/>
          </instance-parameter>
          <parameter name="property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkscreen-x11.c"
                 line="1570">a property atom.</doc>
            <type name="Gdk.Atom" c:type="GdkAtom"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="window-manager-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="X11ScreenClass"
            c:type="GdkX11ScreenClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="X11Screen">
      <source-position filename="gdk/x11/gdkx11screen.h" line="51"/>
    </record>
    <class name="X11Visual"
           c:symbol-prefix="x11_visual"
           c:type="GdkX11Visual"
           parent="Gdk.Visual"
           glib:type-name="GdkX11Visual"
           glib:get-type="gdk_x11_visual_get_type"
           glib:type-struct="X11VisualClass">
      <source-position filename="gdk/x11/gdkx11visual.h" line="51"/>
      <method name="get_xvisual" c:identifier="gdk_x11_visual_get_xvisual">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkvisual-x11.c"
             line="520">Returns the X visual belonging to a #GdkVisual.</doc>
        <source-position filename="gdk/x11/gdkx11visual.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkvisual-x11.c"
               line="526">an Xlib Visual*.</doc>
          <type name="xlib.Visual" c:type="Visual*"/>
        </return-value>
        <parameters>
          <instance-parameter name="visual" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkvisual-x11.c"
                 line="522">a #GdkVisual.</doc>
            <type name="X11Visual" c:type="GdkVisual*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="X11VisualClass"
            c:type="GdkX11VisualClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="X11Visual">
      <source-position filename="gdk/x11/gdkx11visual.h" line="51"/>
    </record>
    <class name="X11Window"
           c:symbol-prefix="x11_window"
           c:type="GdkX11Window"
           parent="Gdk.Window"
           glib:type-name="GdkX11Window"
           glib:get-type="gdk_x11_window_get_type"
           glib:type-struct="X11WindowClass">
      <source-position filename="gdk/x11/gdkx11window.h" line="51"/>
      <constructor name="foreign_new_for_display"
                   c:identifier="gdk_x11_window_foreign_new_for_display"
                   version="2.24">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkwindow-x11.c"
             line="1207">Wraps a native window in a #GdkWindow. The function will try to
look up the window using gdk_x11_window_lookup_for_display() first.
If it does not find it there, it will create a new window.

This may fail if the window has been destroyed. If the window
was already known to GDK, a new reference to the existing
#GdkWindow is returned.</doc>
        <source-position filename="gdk/x11/gdkx11window.h" line="114"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkwindow-x11.c"
               line="1220">a #GdkWindow wrapper for the native
  window, or %NULL if the window has been destroyed. The wrapper
  will be newly created, if one doesn’t exist already.</doc>
          <type name="Gdk.Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkwindow-x11.c"
                 line="1209">the #GdkDisplay where the window handle comes from.</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </parameter>
          <parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkwindow-x11.c"
                 line="1210">an Xlib Window</doc>
            <type name="xlib.Window" c:type="Window"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="lookup_for_display"
                c:identifier="gdk_x11_window_lookup_for_display"
                version="2.24">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkxid.c"
             line="80">Looks up the #GdkWindow that wraps the given native window handle.</doc>
        <source-position filename="gdk/x11/gdkx11window.h" line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkxid.c"
               line="88">the #GdkWindow wrapper for the native
   window, or %NULL if there is none.</doc>
          <type name="X11Window" c:type="GdkWindow*"/>
        </return-value>
        <parameters>
          <parameter name="display" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkxid.c"
                 line="82">the #GdkDisplay corresponding to the
          window handle</doc>
            <type name="X11Display" c:type="GdkDisplay*"/>
          </parameter>
          <parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkxid.c"
                 line="84">an Xlib Window</doc>
            <type name="xlib.Window" c:type="Window"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_desktop"
              c:identifier="gdk_x11_window_get_desktop"
              version="3.10">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkwindow-x11.c"
             line="2220">Gets the number of the workspace @window is on.</doc>
        <source-position filename="gdk/x11/gdkx11window.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkwindow-x11.c"
               line="2226">the current workspace of @window</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkwindow-x11.c"
                 line="2222">a #GdkWindow</doc>
            <type name="X11Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_xid" c:identifier="gdk_x11_window_get_xid">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkwindow-x11.c"
             line="5651">Returns the X resource (window) belonging to a #GdkWindow.</doc>
        <source-position filename="gdk/x11/gdkx11window.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkwindow-x11.c"
               line="5657">the ID of @drawable’s X resource.</doc>
          <type name="xlib.Window" c:type="Window"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkwindow-x11.c"
                 line="5653">a native #GdkWindow.</doc>
            <type name="X11Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="move_to_current_desktop"
              c:identifier="gdk_x11_window_move_to_current_desktop"
              version="2.8">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkwindow-x11.c"
             line="2150">Moves the window to the correct workspace when running under a
window manager that supports multiple workspaces, as described
in the [Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec) specification.
Will not do anything if the window is already on all workspaces.</doc>
        <source-position filename="gdk/x11/gdkx11window.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkwindow-x11.c"
                 line="2152">a #GdkWindow</doc>
            <type name="X11Window" c:type="GdkWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="move_to_desktop"
              c:identifier="gdk_x11_window_move_to_desktop"
              version="3.10">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkwindow-x11.c"
             line="2238">Moves the window to the given workspace when running unde a
window manager that supports multiple workspaces, as described
in the [Extended Window Manager Hints](http://www.freedesktop.org/Standards/wm-spec) specification.</doc>
        <source-position filename="gdk/x11/gdkx11window.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkwindow-x11.c"
                 line="2240">a #GdkWindow</doc>
            <type name="X11Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="desktop" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkwindow-x11.c"
                 line="2241">the number of the workspace to move the window to</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_frame_extents"
              c:identifier="gdk_x11_window_set_frame_extents"
              version="3.10"
              deprecated="1"
              deprecated-version="3.12">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkwindow-x11.c"
             line="3784">This is the same as gdk_window_set_shadow_width() but it only works
on GdkX11Window.</doc>
        <doc-deprecated xml:space="preserve">Use gdk_window_set_shadow_width() instead.</doc-deprecated>
        <source-position filename="gdk/x11/gdkx11window.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkwindow-x11.c"
                 line="3786">a #GdkWindow</doc>
            <type name="X11Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="left" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkwindow-x11.c"
                 line="3787">The left extent</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="right" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkwindow-x11.c"
                 line="3788">The right extent</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="top" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkwindow-x11.c"
                 line="3789">The top extent</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="bottom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkwindow-x11.c"
                 line="3790">The bottom extent</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_frame_sync_enabled"
              c:identifier="gdk_x11_window_set_frame_sync_enabled"
              version="3.8">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkwindow-x11.c"
             line="5696">This function can be used to disable frame synchronization for a window.
Normally frame synchronziation will be enabled or disabled based on whether
the system has a compositor that supports frame synchronization, but if
the window is not directly managed by the window manager, then frame
synchronziation may need to be disabled. This is the case for a window
embedded via the XEMBED protocol.</doc>
        <source-position filename="gdk/x11/gdkx11window.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkwindow-x11.c"
                 line="5698">a native #GdkWindow</doc>
            <type name="X11Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="frame_sync_enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkwindow-x11.c"
                 line="5699">whether frame-synchronization should be enabled</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hide_titlebar_when_maximized"
              c:identifier="gdk_x11_window_set_hide_titlebar_when_maximized"
              version="3.4">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkwindow-x11.c"
             line="3716">Set a hint for the window manager, requesting that the titlebar
should be hidden when the window is maximized.

Note that this property is automatically updated by GTK+, so this
function should only be used by applications which do not use GTK+
to create toplevel windows.</doc>
        <source-position filename="gdk/x11/gdkx11window.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkwindow-x11.c"
                 line="3718">a #GdkWindow</doc>
            <type name="X11Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="hide_titlebar_when_maximized"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkwindow-x11.c"
                 line="3719">whether to hide the titlebar when
                               maximized</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_theme_variant"
              c:identifier="gdk_x11_window_set_theme_variant"
              version="3.2">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkwindow-x11.c"
             line="3809">GTK+ applications can request a dark theme variant. In order to
make other applications - namely window managers using GTK+ for
themeing - aware of this choice, GTK+ uses this function to
export the requested theme variant as _GTK_THEME_VARIANT property
on toplevel windows.

Note that this property is automatically updated by GTK+, so this
function should only be used by applications which do not use GTK+
to create toplevel windows.</doc>
        <source-position filename="gdk/x11/gdkx11window.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkwindow-x11.c"
                 line="3811">a #GdkWindow</doc>
            <type name="X11Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="variant" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkwindow-x11.c"
                 line="3812">the theme variant to export</doc>
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_user_time"
              c:identifier="gdk_x11_window_set_user_time"
              version="2.6">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkwindow-x11.c"
             line="3611">The application can use this call to update the _NET_WM_USER_TIME
property on a toplevel window.  This property stores an Xserver
time which represents the time of the last user input event
received for this window.  This property may be used by the window
manager to alter the focus, stacking, and/or placement behavior of
windows when they are mapped depending on whether the new window
was created by a user action or is a "pop-up" window activated by a
timer or some other event.

Note that this property is automatically updated by GDK, so this
function should only be used by applications which handle input
events bypassing GDK.</doc>
        <source-position filename="gdk/x11/gdkx11window.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkwindow-x11.c"
                 line="3613">A toplevel #GdkWindow</doc>
            <type name="X11Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkwindow-x11.c"
                 line="3614">An XServer timestamp to which the property should be set</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_utf8_property"
              c:identifier="gdk_x11_window_set_utf8_property"
              version="3.4">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkwindow-x11.c"
             line="3676">This function modifies or removes an arbitrary X11 window
property of type UTF8_STRING.  If the given @window is
not a toplevel window, it is ignored.</doc>
        <source-position filename="gdk/x11/gdkx11window.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="window" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkwindow-x11.c"
                 line="3678">a #GdkWindow</doc>
            <type name="X11Window" c:type="GdkWindow*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkwindow-x11.c"
                 line="3679">Property name, will be interned as an X atom</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="gdk/x11/gdkwindow-x11.c"
                 line="3680">Property value, or %NULL to delete</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="X11WindowClass"
            c:type="GdkX11WindowClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="X11Window">
      <source-position filename="gdk/x11/gdkx11window.h" line="51"/>
    </record>
    <function-macro name="X11_APP_LAUNCH_CONTEXT"
                    c:identifier="GDK_X11_APP_LAUNCH_CONTEXT"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11applaunchcontext.h" line="30"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_APP_LAUNCH_CONTEXT_CLASS"
                    c:identifier="GDK_X11_APP_LAUNCH_CONTEXT_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11applaunchcontext.h" line="31"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_APP_LAUNCH_CONTEXT_GET_CLASS"
                    c:identifier="GDK_X11_APP_LAUNCH_CONTEXT_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11applaunchcontext.h" line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_CURSOR"
                    c:identifier="GDK_X11_CURSOR"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11cursor.h" line="40"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_CURSOR_CLASS"
                    c:identifier="GDK_X11_CURSOR_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11cursor.h" line="41"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_CURSOR_GET_CLASS"
                    c:identifier="GDK_X11_CURSOR_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11cursor.h" line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_DEVICE_CORE"
                    c:identifier="GDK_X11_DEVICE_CORE"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11device-core.h" line="26"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_DEVICE_CORE_CLASS"
                    c:identifier="GDK_X11_DEVICE_CORE_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11device-core.h" line="27"/>
      <parameters>
        <parameter name="c">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_DEVICE_CORE_GET_CLASS"
                    c:identifier="GDK_X11_DEVICE_CORE_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11device-core.h" line="30"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_DEVICE_MANAGER_CORE"
                    c:identifier="GDK_X11_DEVICE_MANAGER_CORE"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11devicemanager-core.h"
                       line="26"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_DEVICE_MANAGER_CORE_CLASS"
                    c:identifier="GDK_X11_DEVICE_MANAGER_CORE_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11devicemanager-core.h"
                       line="27"/>
      <parameters>
        <parameter name="c">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_DEVICE_MANAGER_CORE_GET_CLASS"
                    c:identifier="GDK_X11_DEVICE_MANAGER_CORE_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11devicemanager-core.h"
                       line="30"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_DEVICE_MANAGER_XI2"
                    c:identifier="GDK_X11_DEVICE_MANAGER_XI2"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11devicemanager-xi2.h" line="26"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_DEVICE_MANAGER_XI2_CLASS"
                    c:identifier="GDK_X11_DEVICE_MANAGER_XI2_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11devicemanager-xi2.h" line="27"/>
      <parameters>
        <parameter name="c">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_DEVICE_MANAGER_XI2_GET_CLASS"
                    c:identifier="GDK_X11_DEVICE_MANAGER_XI2_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11devicemanager-xi2.h" line="30"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_DEVICE_XI2"
                    c:identifier="GDK_X11_DEVICE_XI2"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11device-xi2.h" line="26"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_DEVICE_XI2_CLASS"
                    c:identifier="GDK_X11_DEVICE_XI2_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11device-xi2.h" line="27"/>
      <parameters>
        <parameter name="c">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_DEVICE_XI2_GET_CLASS"
                    c:identifier="GDK_X11_DEVICE_XI2_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11device-xi2.h" line="30"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_DISPLAY"
                    c:identifier="GDK_X11_DISPLAY"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11display.h" line="47"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_DISPLAY_CLASS"
                    c:identifier="GDK_X11_DISPLAY_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11display.h" line="48"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_DISPLAY_GET_CLASS"
                    c:identifier="GDK_X11_DISPLAY_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11display.h" line="51"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_DISPLAY_MANAGER"
                    c:identifier="GDK_X11_DISPLAY_MANAGER"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11displaymanager.h" line="37"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_DISPLAY_MANAGER_CLASS"
                    c:identifier="GDK_X11_DISPLAY_MANAGER_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11displaymanager.h" line="38"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_DISPLAY_MANAGER_GET_CLASS"
                    c:identifier="GDK_X11_DISPLAY_MANAGER_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11displaymanager.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_DRAG_CONTEXT"
                    c:identifier="GDK_X11_DRAG_CONTEXT"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11dnd.h" line="30"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_DRAG_CONTEXT_CLASS"
                    c:identifier="GDK_X11_DRAG_CONTEXT_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11dnd.h" line="31"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_DRAG_CONTEXT_GET_CLASS"
                    c:identifier="GDK_X11_DRAG_CONTEXT_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11dnd.h" line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_GL_CONTEXT"
                    c:identifier="GDK_X11_GL_CONTEXT"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11glcontext.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_IS_GL_CONTEXT"
                    c:identifier="GDK_X11_IS_GL_CONTEXT"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11glcontext.h" line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_KEYMAP"
                    c:identifier="GDK_X11_KEYMAP"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11keys.h" line="37"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_KEYMAP_CLASS"
                    c:identifier="GDK_X11_KEYMAP_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11keys.h" line="38"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_KEYMAP_GET_CLASS"
                    c:identifier="GDK_X11_KEYMAP_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11keys.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_MONITOR"
                    c:identifier="GDK_X11_MONITOR"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11monitor.h" line="34"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_SCREEN"
                    c:identifier="GDK_X11_SCREEN"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11screen.h" line="40"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_SCREEN_CLASS"
                    c:identifier="GDK_X11_SCREEN_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11screen.h" line="41"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_SCREEN_GET_CLASS"
                    c:identifier="GDK_X11_SCREEN_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11screen.h" line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_VISUAL"
                    c:identifier="GDK_X11_VISUAL"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11visual.h" line="40"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_VISUAL_CLASS"
                    c:identifier="GDK_X11_VISUAL_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11visual.h" line="41"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_VISUAL_GET_CLASS"
                    c:identifier="GDK_X11_VISUAL_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11visual.h" line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_WINDOW"
                    c:identifier="GDK_X11_WINDOW"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11window.h" line="40"/>
      <parameters>
        <parameter name="object">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_WINDOW_CLASS"
                    c:identifier="GDK_X11_WINDOW_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11window.h" line="41"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="X11_WINDOW_GET_CLASS"
                    c:identifier="GDK_X11_WINDOW_GET_CLASS"
                    introspectable="0">
      <source-position filename="gdk/x11/gdkx11window.h" line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="XID_TO_POINTER"
                    c:identifier="GDK_XID_TO_POINTER"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkx11utils.h"
           line="51">Converts an XID into a @gpointer. This is useful with data structures
that use pointer arguments such as #GHashTable. Use GDK_POINTER_TO_XID()
to convert the argument back to an XID.</doc>
      <source-position filename="gdk/x11/gdkx11utils.h" line="59"/>
      <parameters>
        <parameter name="xid">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkx11utils.h"
               line="53">XID to stuff into the pointer</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function name="x11_atom_to_xatom" c:identifier="gdk_x11_atom_to_xatom">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkproperty-x11.c"
           line="163">Converts from a #GdkAtom to the X atom for the default GDK display
with the same string value.</doc>
      <source-position filename="gdk/x11/gdkx11property.h" line="53"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkproperty-x11.c"
             line="170">the X atom corresponding to @atom.</doc>
        <type name="xlib.Atom" c:type="Atom"/>
      </return-value>
      <parameters>
        <parameter name="atom" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkproperty-x11.c"
               line="165">A #GdkAtom</doc>
          <type name="Gdk.Atom" c:type="GdkAtom"/>
        </parameter>
      </parameters>
    </function>
    <function name="x11_atom_to_xatom_for_display"
              c:identifier="gdk_x11_atom_to_xatom_for_display"
              version="2.2">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkproperty-x11.c"
           line="82">Converts from a #GdkAtom to the X atom for a #GdkDisplay
with the same string value. The special value %GDK_NONE
is converted to %None.</doc>
      <source-position filename="gdk/x11/gdkx11property.h" line="41"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkproperty-x11.c"
             line="91">the X atom corresponding to @atom, or %None</doc>
        <type name="xlib.Atom" c:type="Atom"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkproperty-x11.c"
               line="84">A #GdkDisplay</doc>
          <type name="X11Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="atom" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkproperty-x11.c"
               line="85">A #GdkAtom, or %GDK_NONE</doc>
          <type name="Gdk.Atom" c:type="GdkAtom"/>
        </parameter>
      </parameters>
    </function>
    <function name="x11_device_get_id"
              c:identifier="gdk_x11_device_get_id"
              version="3.2">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkdevicemanager-x11.c"
           line="122">Returns the device ID as seen by XInput2.

&gt; If gdk_disable_multidevice() has been called, this function
&gt; will respectively return 2/3 for the core pointer and keyboard,
&gt; (matching the IDs for the Virtual Core Pointer and Keyboard in
&gt; XInput 2), but calling this function on any slave devices (i.e.
&gt; those managed via XInput 1.x), will return 0.</doc>
      <source-position filename="gdk/x11/gdkx11device.h" line="30"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkdevicemanager-x11.c"
             line="134">the XInput2 device ID.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkdevicemanager-x11.c"
               line="124">a #GdkDevice</doc>
          <type name="X11DeviceCore" c:type="GdkDevice*"/>
        </parameter>
      </parameters>
    </function>
    <function name="x11_device_manager_lookup"
              c:identifier="gdk_x11_device_manager_lookup"
              version="3.2">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkdevicemanager-x11.c"
           line="81">Returns the #GdkDevice that wraps the given device ID.</doc>
      <source-position filename="gdk/x11/gdkx11devicemanager.h" line="33"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkdevicemanager-x11.c"
             line="88">The #GdkDevice wrapping the device ID,
         or %NULL if the given ID doesn’t currently represent a device.</doc>
        <type name="X11DeviceCore" c:type="GdkDevice*"/>
      </return-value>
      <parameters>
        <parameter name="device_manager" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkdevicemanager-x11.c"
               line="83">a #GdkDeviceManager</doc>
          <type name="X11DeviceManagerCore" c:type="GdkDeviceManager*"/>
        </parameter>
        <parameter name="device_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkdevicemanager-x11.c"
               line="84">a device ID, as understood by the XInput2 protocol</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="x11_free_compound_text"
              c:identifier="gdk_x11_free_compound_text"
              version="2.24">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkselection-x11.c"
           line="773">Frees the data returned from gdk_x11_display_string_to_compound_text().</doc>
      <source-position filename="gdk/x11/gdkx11selection.h" line="63"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ctext" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkselection-x11.c"
               line="775">The pointer stored in @ctext from a call to
  gdk_x11_display_string_to_compound_text().</doc>
          <type name="guint8" c:type="guchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="x11_free_text_list"
              c:identifier="gdk_x11_free_text_list"
              version="2.24">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkselection-x11.c"
           line="394">Frees the array of strings created by
gdk_x11_display_text_property_to_text_list().</doc>
      <source-position filename="gdk/x11/gdkx11selection.h" line="47"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="list" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkselection-x11.c"
               line="396">the value stored in the @list parameter by
  a call to gdk_x11_display_text_property_to_text_list().</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="x11_get_default_root_xwindow"
              c:identifier="gdk_x11_get_default_root_xwindow">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkmain-x11.c"
           line="429">Gets the root window of the default screen
(see gdk_x11_get_default_screen()).</doc>
      <source-position filename="gdk/x11/gdkx11utils.h" line="40"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkmain-x11.c"
             line="435">an Xlib Window.</doc>
        <type name="xlib.Window" c:type="Window"/>
      </return-value>
    </function>
    <function name="x11_get_default_screen"
              c:identifier="gdk_x11_get_default_screen">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkmain-x11.c"
           line="414">Gets the default GTK+ screen number.</doc>
      <source-position filename="gdk/x11/gdkx11screen.h" line="65"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkmain-x11.c"
             line="419">returns the screen number specified by
  the --display command line option or the DISPLAY environment
  variable when gdk_init() calls XOpenDisplay().</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
    </function>
    <function name="x11_get_default_xdisplay"
              c:identifier="gdk_x11_get_default_xdisplay">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkmain-x11.c"
           line="443">Gets the default GTK+ display.</doc>
      <source-position filename="gdk/x11/gdkx11utils.h" line="42"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkmain-x11.c"
             line="448">the Xlib Display* for
the display specified in the `--display` command
line option or the `DISPLAY` environment variable.</doc>
        <type name="xlib.Display" c:type="Display*"/>
      </return-value>
    </function>
    <function name="x11_get_parent_relative_pattern"
              c:identifier="gdk_x11_get_parent_relative_pattern"
              version="3.24.2"
              deprecated="1"
              deprecated-version="3.24">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkmain-x11.c"
           line="458">Used with gdk_window_set_background_pattern() to inherit background from
parent window. Useful for imitating transparency when compositing is not
available. Otherwise behaves like a transparent pattern.</doc>
      <doc-deprecated xml:space="preserve">Don't use this function</doc-deprecated>
      <source-position filename="gdk/x11/gdkx11utils.h" line="76"/>
      <return-value transfer-ownership="full">
        <type name="cairo.Pattern" c:type="cairo_pattern_t*"/>
      </return-value>
    </function>
    <function name="x11_get_server_time"
              c:identifier="gdk_x11_get_server_time">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkwindow-x11.c"
           line="5612">Routine to get the current X server time stamp.</doc>
      <source-position filename="gdk/x11/gdkx11window.h" line="111"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkwindow-x11.c"
             line="5621">the time stamp.</doc>
        <type name="guint32" c:type="guint32"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkwindow-x11.c"
               line="5614">a #GdkWindow, used for communication
         with the server.  The window must have
         GDK_PROPERTY_CHANGE_MASK in its events mask or a hang will
         result.</doc>
          <type name="X11Window" c:type="GdkWindow*"/>
        </parameter>
      </parameters>
    </function>
    <function name="x11_get_xatom_by_name"
              c:identifier="gdk_x11_get_xatom_by_name">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkproperty-x11.c"
           line="295">Returns the X atom for GDK’s default display corresponding to @atom_name.
This function caches the result, so if called repeatedly it is much
faster than XInternAtom(), which is a round trip to the server each time.</doc>
      <source-position filename="gdk/x11/gdkx11property.h" line="57"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkproperty-x11.c"
             line="303">a X atom for GDK’s default display.</doc>
        <type name="xlib.Atom" c:type="Atom"/>
      </return-value>
      <parameters>
        <parameter name="atom_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkproperty-x11.c"
               line="297">a string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="x11_get_xatom_by_name_for_display"
              c:identifier="gdk_x11_get_xatom_by_name_for_display"
              version="2.2">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkproperty-x11.c"
           line="253">Returns the X atom for a #GdkDisplay corresponding to @atom_name.
This function caches the result, so if called repeatedly it is much
faster than XInternAtom(), which is a round trip to the server each time.</doc>
      <source-position filename="gdk/x11/gdkx11property.h" line="47"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkproperty-x11.c"
             line="262">a X atom for a #GdkDisplay</doc>
        <type name="xlib.Atom" c:type="Atom"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkproperty-x11.c"
               line="255">a #GdkDisplay</doc>
          <type name="X11Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="atom_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkproperty-x11.c"
               line="256">a string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="x11_get_xatom_name" c:identifier="gdk_x11_get_xatom_name">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkproperty-x11.c"
           line="336">Returns the name of an X atom for GDK’s default display. This
function is meant mainly for debugging, so for convenience, unlike
XAtomName() and gdk_atom_name(), the result
doesn’t need to be freed. Also, this function will never return %NULL,
even if @xatom is invalid.</doc>
      <source-position filename="gdk/x11/gdkx11property.h" line="59"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkproperty-x11.c"
             line="346">name of the X atom; this string is owned by GTK+,
  so it shouldn’t be modifed or freed.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="xatom" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkproperty-x11.c"
               line="338">an X atom for GDK’s default display</doc>
          <type name="xlib.Atom" c:type="Atom"/>
        </parameter>
      </parameters>
    </function>
    <function name="x11_get_xatom_name_for_display"
              c:identifier="gdk_x11_get_xatom_name_for_display"
              version="2.2">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkproperty-x11.c"
           line="312">Returns the name of an X atom for its display. This
function is meant mainly for debugging, so for convenience, unlike
XAtomName() and gdk_atom_name(), the result doesn’t need to
be freed.</doc>
      <source-position filename="gdk/x11/gdkx11property.h" line="50"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkproperty-x11.c"
             line="322">name of the X atom; this string is owned by GDK,
  so it shouldn’t be modifed or freed.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkproperty-x11.c"
               line="314">the #GdkDisplay where @xatom is defined</doc>
          <type name="X11Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="xatom" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkproperty-x11.c"
               line="315">an X atom</doc>
          <type name="xlib.Atom" c:type="Atom"/>
        </parameter>
      </parameters>
    </function>
    <function name="x11_grab_server" c:identifier="gdk_x11_grab_server">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkmain-x11.c"
           line="388">Call gdk_x11_display_grab() on the default display.
To ungrab the server again, use gdk_x11_ungrab_server().

gdk_x11_grab_server()/gdk_x11_ungrab_server() calls can be nested.</doc>
      <source-position filename="gdk/x11/gdkx11utils.h" line="71"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="x11_lookup_xdisplay"
              c:identifier="gdk_x11_lookup_xdisplay"
              version="2.2">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkdisplay-x11.c"
           line="2131">Find the #GdkDisplay corresponding to @xdisplay, if any exists.</doc>
      <source-position filename="gdk/x11/gdkx11display.h" line="81"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkdisplay-x11.c"
             line="2137">the #GdkDisplay, if found, otherwise %NULL.</doc>
        <type name="X11Display" c:type="GdkDisplay*"/>
      </return-value>
      <parameters>
        <parameter name="xdisplay" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkdisplay-x11.c"
               line="2133">a pointer to an X Display</doc>
          <type name="xlib.Display" c:type="Display*"/>
        </parameter>
      </parameters>
    </function>
    <function name="x11_register_standard_event_type"
              c:identifier="gdk_x11_register_standard_event_type"
              version="2.4">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkdisplay-x11.c"
           line="2647">Registers interest in receiving extension events with type codes
between @event_base and `event_base + n_events - 1`.
The registered events must have the window field in the same place
as core X events (this is not the case for e.g. XKB extension events).

If an event type is registered, events of this type will go through
global and window-specific filters (see gdk_window_add_filter()).
Unregistered events will only go through global filters.
GDK may register the events of some X extensions on its own.

This function should only be needed in unusual circumstances, e.g.
when filtering XInput extension events on the root window.</doc>
      <source-position filename="gdk/x11/gdkx11display.h" line="101"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkdisplay-x11.c"
               line="2649">a #GdkDisplay</doc>
          <type name="X11Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="event_base" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkdisplay-x11.c"
               line="2650">first event type code to register</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="n_events" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkdisplay-x11.c"
               line="2651">number of event type codes to register</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="x11_set_sm_client_id"
              c:identifier="gdk_x11_set_sm_client_id"
              version="2.24">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkdisplay-x11.c"
           line="3004">Sets the `SM_CLIENT_ID` property on the application’s leader window so that
the window manager can save the application’s state using the X11R6 ICCCM
session management protocol.

See the X Session Management Library documentation for more information on
session management and the Inter-Client Communication Conventions Manual</doc>
      <source-position filename="gdk/x11/gdkx11display.h" line="106"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="sm_client_id"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkdisplay-x11.c"
               line="3006">the client id assigned by the session manager
   when the connection was opened, or %NULL to remove the property.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="x11_ungrab_server" c:identifier="gdk_x11_ungrab_server">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkmain-x11.c"
           line="402">Ungrab the default display after it has been grabbed with
gdk_x11_grab_server().</doc>
      <source-position filename="gdk/x11/gdkx11utils.h" line="73"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="x11_xatom_to_atom" c:identifier="gdk_x11_xatom_to_atom">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkproperty-x11.c"
           line="238">Convert from an X atom for the default display to the corresponding
#GdkAtom.</doc>
      <source-position filename="gdk/x11/gdkx11property.h" line="55"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkproperty-x11.c"
             line="245">the corresponding G#dkAtom.</doc>
        <type name="Gdk.Atom" c:type="GdkAtom"/>
      </return-value>
      <parameters>
        <parameter name="xatom" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkproperty-x11.c"
               line="240">an X atom for the default GDK display</doc>
          <type name="xlib.Atom" c:type="Atom"/>
        </parameter>
      </parameters>
    </function>
    <function name="x11_xatom_to_atom_for_display"
              c:identifier="gdk_x11_xatom_to_atom_for_display"
              version="2.2">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkproperty-x11.c"
           line="178">Convert from an X atom for a #GdkDisplay to the corresponding
#GdkAtom.</doc>
      <source-position filename="gdk/x11/gdkx11property.h" line="44"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="gdk/x11/gdkproperty-x11.c"
             line="186">the corresponding #GdkAtom.</doc>
        <type name="Gdk.Atom" c:type="GdkAtom"/>
      </return-value>
      <parameters>
        <parameter name="display" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkproperty-x11.c"
               line="180">A #GdkDisplay</doc>
          <type name="X11Display" c:type="GdkDisplay*"/>
        </parameter>
        <parameter name="xatom" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="gdk/x11/gdkproperty-x11.c"
               line="181">an X atom</doc>
          <type name="xlib.Atom" c:type="Atom"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="x_interaction">
      <doc xml:space="preserve"
           filename="gdk/x11/gdkmain-x11.c"
           line="49">The functions in this section are specific to the GDK X11 backend.
To use them, you need to include the `&lt;gdk/gdkx.h&gt;` header and use
the X11-specific pkg-config files to build your application (either
`gdk-x11-3.0` or `gtk+-x11-3.0`).

To make your code compile with other GDK backends, guard backend-specific
calls by an ifdef as follows. Since GDK may be built with multiple
backends, you should also check for the backend that is in use (e.g. by
using the GDK_IS_X11_DISPLAY() macro).
|[
#ifdef GDK_WINDOWING_X11
  if (GDK_IS_X11_DISPLAY (display))
    {
      // make X11-specific calls here
    }
  else
#endif
#ifdef GDK_WINDOWING_QUARTZ
  if (GDK_IS_QUARTZ_DISPLAY (display))
    {
      // make Quartz-specific calls here
    }
  else
#endif
  g_error ("Unsupported GDK backend");
]|</doc>
    </docsection>
  </namespace>
</repository>
