<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:doc="http://www.gtk.org/introspection/doc/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Gio" version="2.0"/>
  <package name="libdeviced"/>
  <c:include name="libdeviced.h"/>
  <doc:format name="unknown"/>
  <namespace name="Deviced"
             version="1.0"
             shared-library="libdeviced.so"
             c:identifier-prefixes="Devd"
             c:symbol-prefixes="devd">
    <class name="AppInfo"
           c:symbol-prefix="app_info"
           c:type="DevdAppInfo"
           parent="GObject.Object"
           glib:type-name="DevdAppInfo"
           glib:get-type="devd_app_info_get_type"
           glib:type-struct="AppInfoClass">
      <source-position filename="src/lib/devd-app-info.h" line="44"/>
      <property name="commit-id"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="installed-size"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="name"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="provider"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="AppInfoClass"
            c:type="DevdAppInfoClass"
            glib:is-gtype-struct-for="AppInfo">
      <source-position filename="src/lib/devd-app-info.h" line="44"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="Browser"
           c:symbol-prefix="browser"
           c:type="DevdBrowser"
           parent="GObject.Object"
           glib:type-name="DevdBrowser"
           glib:get-type="devd_browser_get_type"
           glib:type-struct="BrowserClass">
      <source-position filename="src/lib/devd-browser.h" line="50"/>
      <constructor name="new" c:identifier="devd_browser_new" version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-browser.c"
             line="756">Creates a new #DevdBrowser</doc>
        <source-position filename="src/lib/devd-browser.h" line="53"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/devd-browser.c"
               line="761">a #DevdBrowser</doc>
          <type name="Browser" c:type="DevdBrowser*"/>
        </return-value>
      </constructor>
      <virtual-method name="device_added">
        <source-position filename="src/lib/devd-browser.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Browser" c:type="DevdBrowser*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="Device" c:type="DevdDevice*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="device_removed">
        <source-position filename="src/lib/devd-browser.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Browser" c:type="DevdBrowser*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="Device" c:type="DevdDevice*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_certificate"
              c:identifier="devd_browser_get_certificate"
              glib:get-property="certificate"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-browser.c"
             line="771">Gets the #DevdBrowser:certificate property. This is used as the
client TLS certificate when connecting to peers.

If unset, a certificate will be reloaded or generated when
devd_browser_load_async() is called.</doc>
        <source-position filename="src/lib/devd-browser.h" line="65"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/devd-browser.c"
               line="781">a #GTlsCertificate or %NULL</doc>
          <type name="Gio.TlsCertificate" c:type="GTlsCertificate*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-browser.c"
                 line="773">a #DevdBrowser</doc>
            <type name="Browser" c:type="DevdBrowser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_certificate_hash"
              c:identifier="devd_browser_get_certificate_hash"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-browser.c"
             line="795">Gets a SHA256 hash for the #DevdBrowser:certificate property.</doc>
        <source-position filename="src/lib/devd-browser.h" line="67"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/devd-browser.c"
               line="801">the hash or %NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-browser.c"
                 line="797">a #DevdBrowser</doc>
            <type name="Browser" c:type="DevdBrowser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_devices"
              c:identifier="devd_browser_get_devices"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-browser.c"
             line="844">Gets a #GPtrArray of #DevdDevice that have been discovered.</doc>
        <source-position filename="src/lib/devd-browser.h" line="81"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="src/lib/devd-browser.c"
               line="850">a #GPtrArray
  of #DevdDevice.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Device"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-browser.c"
                 line="846">a #DevdBrowser</doc>
            <type name="Browser" c:type="DevdBrowser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enable_ipv4"
              c:identifier="devd_browser_get_enable_ipv4"
              glib:get-property="enable-ipv4">
        <source-position filename="src/lib/devd-browser.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Browser" c:type="DevdBrowser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enable_ipv6"
              c:identifier="devd_browser_get_enable_ipv6"
              glib:get-property="enable-ipv6">
        <source-position filename="src/lib/devd-browser.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Browser" c:type="DevdBrowser*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_async"
              c:identifier="devd_browser_load_async"
              version="3.28"
              glib:finish-func="load_finish">
        <doc xml:space="preserve"
             filename="src/lib/devd-browser.c"
             line="677">Asynchronously loads data needed by the browser and then scans the
local network segments for Deviced nodes. The #DevdBrowser::device-added
and #DevdBrowser::device-removed signals will be emitted in reaction to
network changes.

Call devd_browser_load_finish() to get the result of this operation.

If you want to control the #GTlsCertificate to use, then call
devd_browser_set_certificate() before calling this function.</doc>
        <source-position filename="src/lib/devd-browser.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-browser.c"
                 line="679">a #DevdBrowser</doc>
            <type name="Browser" c:type="DevdBrowser*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-browser.c"
                 line="680">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/lib/devd-browser.c"
                 line="681">a #GAsyncReadyCallback to execute upon completion
  of the asynchronous task.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-browser.c"
                 line="683">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_finish"
              c:identifier="devd_browser_load_finish"
              version="3.28"
              throws="1">
        <doc xml:space="preserve"
             filename="src/lib/devd-browser.c"
             line="725">Completes an asynchronous load of the browser. This includes loading the
TLS certificate (or generating one) and then scanning the local network
segments for mDNS (Avahi) peers advertising Deviced nodes.</doc>
        <source-position filename="src/lib/devd-browser.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/devd-browser.c"
               line="735">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-browser.c"
                 line="727">a #DevdBrowser</doc>
            <type name="Browser" c:type="DevdBrowser*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-browser.c"
                 line="728">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_certificate"
              c:identifier="devd_browser_set_certificate"
              glib:set-property="certificate"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-browser.c"
             line="819">Sets the #GTlsCertificate to use for client communication.

To ensure this is being used on all new connnections, you should set this
property before calling devd_browser_load_async().</doc>
        <source-position filename="src/lib/devd-browser.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-browser.c"
                 line="821">a #DevdBrowser</doc>
            <type name="Browser" c:type="DevdBrowser*"/>
          </instance-parameter>
          <parameter name="certificate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-browser.c"
                 line="822">a #GTlsCertificate</doc>
            <type name="Gio.TlsCertificate" c:type="GTlsCertificate*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enable_ipv4"
              c:identifier="devd_browser_set_enable_ipv4"
              glib:set-property="enable-ipv4">
        <source-position filename="src/lib/devd-browser.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Browser" c:type="DevdBrowser*"/>
          </instance-parameter>
          <parameter name="enable_ipv4" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enable_ipv6"
              c:identifier="devd_browser_set_enable_ipv6"
              glib:set-property="enable-ipv6">
        <source-position filename="src/lib/devd-browser.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Browser" c:type="DevdBrowser*"/>
          </instance-parameter>
          <parameter name="enable_ipv6" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="certificate"
                version="3.28"
                writable="1"
                transfer-ownership="none"
                setter="set_certificate"
                getter="get_certificate">
        <doc xml:space="preserve"
             filename="src/lib/devd-browser.c"
             line="226">The tls certificate to use when communicating with peers.</doc>
        <type name="Gio.TlsCertificate"/>
      </property>
      <property name="enable-ipv4"
                writable="1"
                transfer-ownership="none"
                setter="set_enable_ipv4"
                getter="get_enable_ipv4"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="enable-ipv6"
                writable="1"
                transfer-ownership="none"
                setter="set_enable_ipv6"
                getter="get_enable_ipv6"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="device-added" when="last" version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-browser.c"
             line="256">The "device-added" signal is emitted when a device has been discovered.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-browser.c"
                 line="259">a #DevdDevice</doc>
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="device-removed" when="last" version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-browser.c"
             line="277">The "device-removed" signal is emitted when a device is no longer
known to be available.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-browser.c"
                 line="280">a #DevdDevice</doc>
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="BrowserClass"
            c:type="DevdBrowserClass"
            glib:is-gtype-struct-for="Browser">
      <source-position filename="src/lib/devd-browser.h" line="50"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="device_added">
        <callback name="device_added">
          <source-position filename="src/lib/devd-browser.h" line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Browser" c:type="DevdBrowser*"/>
            </parameter>
            <parameter name="device" transfer-ownership="none">
              <type name="Device" c:type="DevdDevice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="device_removed">
        <callback name="device_removed">
          <source-position filename="src/lib/devd-browser.h" line="45"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Browser" c:type="DevdBrowser*"/>
            </parameter>
            <parameter name="device" transfer-ownership="none">
              <type name="Device" c:type="DevdDevice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <function-macro name="CHECK_VERSION"
                    c:identifier="DEVD_CHECK_VERSION"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/lib/devd-version.h"
           line="82">Compile-time version checking. Evaluates to %TRUE if the version
of libdeviced is greater than the required one.</doc>
      <source-position filename="src/lib/devd-version.h" line="90"/>
      <parameters>
        <parameter name="major">
          <doc xml:space="preserve"
               filename="src/lib/devd-version.h"
               line="84">required major version</doc>
        </parameter>
        <parameter name="minor">
          <doc xml:space="preserve"
               filename="src/lib/devd-version.h"
               line="85">required minor version</doc>
        </parameter>
        <parameter name="micro">
          <doc xml:space="preserve"
               filename="src/lib/devd-version.h"
               line="86">required micro version</doc>
        </parameter>
      </parameters>
    </function-macro>
    <class name="Client"
           c:symbol-prefix="client"
           c:type="DevdClient"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="DevdClient"
           glib:get-type="devd_client_get_type"
           glib:type-struct="ClientClass">
      <source-position filename="src/lib/devd-client.h" line="122"/>
      <virtual-method name="call_async"
                      invoker="call_async"
                      version="3.28"
                      glib:finish-func="call_finish">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="1001">Asynchronously calls an RPC on the device, if available.

Not all #DevdClient implementations are guaranteed to support this
interface, and therefore may fail.</doc>
        <source-position filename="src/lib/devd-client.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="1003">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="1004">the RPC method name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="params"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="1005">the parameters for the method</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="1006">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="1007">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="1008">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="call_finish" invoker="call_finish" throws="1">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="1036">Gets the result of the RPC call.</doc>
        <source-position filename="src/lib/devd-client.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/devd-client.c"
               line="1045">%TRUE if successful; otherwise %FALSE and @error is set.
  @reply is set to the reply from the peer, of provided.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="1038">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="1039">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="reply"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="1040">a location for a #GVariant</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="connect_async"
                      invoker="connect_async"
                      version="3.28"
                      glib:finish-func="connect_finish">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="466">Asynchronously connects to the device for which the client was created.

@callback should complete the operation by calling devd_client_connect_finish().</doc>
        <source-position filename="src/lib/devd-client.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="468">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="469">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="470">a #GAsyncReadyCallback, or %NULL</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="471">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="connect_finish"
                      invoker="connect_finish"
                      version="3.28"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="495">Completes an asynchronous connection to the device, initiated with
devd_client_connect_async().</doc>
        <source-position filename="src/lib/devd-client.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/devd-client.c"
               line="504">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="497">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="498">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="disconnect_async"
                      invoker="disconnect_async"
                      glib:finish-func="disconnect_finish">
        <source-position filename="src/lib/devd-client.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="disconnect_finish"
                      invoker="disconnect_finish"
                      throws="1">
        <source-position filename="src/lib/devd-client.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_arch"
                      invoker="get_arch"
                      version="3.28"
                      deprecated="1"
                      deprecated-version="3.30">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="584">Gets the architecture of the device, such as "x86_64". Generally,
this is the machine value from uname().</doc>
        <doc-deprecated xml:space="preserve">Use devd_client_get_triplet() instead.</doc-deprecated>
        <source-position filename="src/lib/devd-client.h" line="63"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/devd-client.c"
               line="591">a string representing the architecture.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="586">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_kernel"
                      invoker="get_kernel"
                      version="3.28"
                      deprecated="1"
                      deprecated-version="3.30">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="610">Gets the kernel of the device, such as "linux". This is the kernel
component of the familiar "target triplet".</doc>
        <doc-deprecated xml:space="preserve">Use devd_client_get_triplet() instead.</doc-deprecated>
        <source-position filename="src/lib/devd-client.h" line="64"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/devd-client.c"
               line="617">a string representing the kernel.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="612">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_name" invoker="get_name" version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="558">Gets the name of the peer that this client is connected to.

This value is discovered when initializing a connection with the peer.</doc>
        <source-position filename="src/lib/devd-client.h" line="62"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/devd-client.c"
               line="566">a newly allocated string or %NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="560">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_system"
                      invoker="get_system"
                      version="3.28"
                      deprecated="1"
                      deprecated-version="3.30">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="636">Gets the system of the device, such as "gnu". This is the system
component of the familiar "target triplet".</doc>
        <doc-deprecated xml:space="preserve">Use devd_client_get_triplet() instead.</doc-deprecated>
        <source-position filename="src/lib/devd-client.h" line="65"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/devd-client.c"
               line="643">a string representing the system.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="638">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_triplet" invoker="get_triplet" version="3.30">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="662">Gets the #DevdTriplet object holding information about the architecture triplet</doc>
        <source-position filename="src/lib/devd-client.h" line="66"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/devd-client.c"
               line="668">a #DevdTriplet representing the architecture triplet.</doc>
          <type name="Triplet" c:type="DevdTriplet*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="664">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_apps_async"
                      invoker="list_apps_async"
                      version="3.28"
                      glib:finish-func="list_apps_finish">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="686">Asynchronously requests a list of applications that are available to
the peer that the #DevdClient is connected to.

To complete the asynchronous request, @callback must call
devd_client_list_apps_finish() to obtain the result.</doc>
        <source-position filename="src/lib/devd-client.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="688">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="689">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="690">a #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="691">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_apps_finish"
                      invoker="list_apps_finish"
                      version="3.28"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="717">Completes an asynchronous request to devd_client_list_apps_async().</doc>
        <source-position filename="src/lib/devd-client.h" line="88"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="src/lib/devd-client.c"
               line="725">An array
  of #DevdClientAppInfo if successful; otherwise %NULL and @error is set.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="AppInfo"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="719">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="720">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_files_async"
                      invoker="list_files_async"
                      version="3.28"
                      glib:finish-func="list_files_finish">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="808">Lists the files in a given path on the device.

Use @attributes to specify the file attributes to retrieve. These
follow the same convention as g_file_enumerate_children().</doc>
        <source-position filename="src/lib/devd-client.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="810">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="811">the path on the device</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="812">file attributes</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="813">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="814">a callback to execute up on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="815">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_files_finish"
                      invoker="list_files_finish"
                      version="3.28"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="842">Completes an asynchronous request to list files on the device.</doc>
        <source-position filename="src/lib/devd-client.h" line="97"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="src/lib/devd-client.c"
               line="850">a #GPtrArray of
  #GFileInfo retrieved from the device.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Gio.FileInfo"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="844">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="845">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_runtimes_async"
                      invoker="list_runtimes_async"
                      version="3.28"
                      glib:finish-func="list_runtimes_finish">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="747">Asynchronously requests a list of runtimes that are available to
the peer that the #DevdClient is connected to.

To complete the asynchronous request, @callback must call
devd_client_list_runtimes_finish() to obtain the result.</doc>
        <source-position filename="src/lib/devd-client.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="749">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="750">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="751">a #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="752">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_runtimes_finish"
                      invoker="list_runtimes_finish"
                      version="3.28"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="778">Completes an asynchronous request to devd_client_list_runtimes_async().</doc>
        <source-position filename="src/lib/devd-client.h" line="81"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="src/lib/devd-client.c"
               line="786">An array
  of #DevdClientAppInfo if successful; otherwise %NULL and @error is set.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="AppInfo"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="780">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="781">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="notification">
        <source-position filename="src/lib/devd-client.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="params" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="run_app_async"
                      invoker="run_app_async"
                      version="3.28"
                      glib:finish-func="run_app_finish">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="872">Asynchronously runs an application on the connected #DevdClient.

To complete the asynchronous request, @callback must call
devd_client_run_app_finish() to obtain the result.</doc>
        <source-position filename="src/lib/devd-client.h" line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="874">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="875">the app provider</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="app_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="876">the ID of the app to run</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="pty"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="877">a pty ID</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="878">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="879">a #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="5">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="880">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="run_app_finish"
                      invoker="run_app_finish"
                      version="3.28"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="910">Completes an asynchronous request to devd_client_run_app_async().</doc>
        <source-position filename="src/lib/devd-client.h" line="107"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/devd-client.c"
               line="918">the identifier for the process, or %NULL and @error is set.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="912">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="913">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="service_added">
        <source-position filename="src/lib/devd-client.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="service" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="syncfs_async"
                      invoker="syncfs_async"
                      version="3.28"
                      glib:finish-func="syncfs_finish">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="939">Requests that the device sync changes to the file-system to the underlying
storage devices specified, or all devices if @devices is %NULL.

Note, currently, only syncing all file-systems is supported.</doc>
        <source-position filename="src/lib/devd-client.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="941">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="devices"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="942">a comma-separated list of devices, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="943">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="944">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="945">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="syncfs_finish"
                      invoker="syncfs_finish"
                      version="3.28"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="971">Completes an asynchronous request to sync file-system changes to
their underlying storage devices.</doc>
        <source-position filename="src/lib/devd-client.h" line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/devd-client.c"
               line="980">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="973">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="974">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_async"
              c:identifier="devd_client_call_async"
              version="3.28"
              glib:finish-func="call_finish">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="1001">Asynchronously calls an RPC on the device, if available.

Not all #DevdClient implementations are guaranteed to support this
interface, and therefore may fail.</doc>
        <source-position filename="src/lib/devd-client.h" line="170"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="1003">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="1004">the RPC method name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="params"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="1005">the parameters for the method</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="1006">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="1007">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="1008">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_finish"
              c:identifier="devd_client_call_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="1036">Gets the result of the RPC call.</doc>
        <source-position filename="src/lib/devd-client.h" line="177"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/devd-client.c"
               line="1045">%TRUE if successful; otherwise %FALSE and @error is set.
  @reply is set to the reply from the peer, of provided.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="1038">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="1039">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="reply"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="1040">a location for a #GVariant</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_async"
              c:identifier="devd_client_connect_async"
              version="3.28"
              glib:finish-func="connect_finish">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="466">Asynchronously connects to the device for which the client was created.

@callback should complete the operation by calling devd_client_connect_finish().</doc>
        <source-position filename="src/lib/devd-client.h" line="152"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="468">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="469">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="470">a #GAsyncReadyCallback, or %NULL</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="471">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="connect_finish"
              c:identifier="devd_client_connect_finish"
              version="3.28"
              throws="1">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="495">Completes an asynchronous connection to the device, initiated with
devd_client_connect_async().</doc>
        <source-position filename="src/lib/devd-client.h" line="157"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/devd-client.c"
               line="504">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="497">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="498">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect_async"
              c:identifier="devd_client_disconnect_async"
              glib:finish-func="disconnect_finish">
        <source-position filename="src/lib/devd-client.h" line="161"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect_finish"
              c:identifier="devd_client_disconnect_finish"
              throws="1">
        <source-position filename="src/lib/devd-client.h" line="166"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_notification"
              c:identifier="devd_client_emit_notification">
        <source-position filename="src/lib/devd-client.h" line="125"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="params" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_service_added"
              c:identifier="devd_client_emit_service_added">
        <source-position filename="src/lib/devd-client.h" line="129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="service" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_arch"
              c:identifier="devd_client_get_arch"
              glib:get-property="arch"
              version="3.28"
              deprecated="1"
              deprecated-version="3.30">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="584">Gets the architecture of the device, such as "x86_64". Generally,
this is the machine value from uname().</doc>
        <doc-deprecated xml:space="preserve">Use devd_client_get_triplet() instead.</doc-deprecated>
        <source-position filename="src/lib/devd-client.h" line="144"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/devd-client.c"
               line="591">a string representing the architecture.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="586">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kernel"
              c:identifier="devd_client_get_kernel"
              glib:get-property="kernel"
              version="3.28"
              deprecated="1"
              deprecated-version="3.30">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="610">Gets the kernel of the device, such as "linux". This is the kernel
component of the familiar "target triplet".</doc>
        <doc-deprecated xml:space="preserve">Use devd_client_get_triplet() instead.</doc-deprecated>
        <source-position filename="src/lib/devd-client.h" line="146"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/devd-client.c"
               line="617">a string representing the kernel.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="612">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="devd_client_get_name"
              glib:get-property="name"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="558">Gets the name of the peer that this client is connected to.

This value is discovered when initializing a connection with the peer.</doc>
        <source-position filename="src/lib/devd-client.h" line="142"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/devd-client.c"
               line="566">a newly allocated string or %NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="560">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_services"
              c:identifier="devd_client_get_services"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="412">Gets the names of services currently supported by the client.</doc>
        <source-position filename="src/lib/devd-client.h" line="132"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/devd-client.c"
               line="418">a #GStrv of service names</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="414">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_system"
              c:identifier="devd_client_get_system"
              glib:get-property="system"
              version="3.28"
              deprecated="1"
              deprecated-version="3.30">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="636">Gets the system of the device, such as "gnu". This is the system
component of the familiar "target triplet".</doc>
        <doc-deprecated xml:space="preserve">Use devd_client_get_triplet() instead.</doc-deprecated>
        <source-position filename="src/lib/devd-client.h" line="148"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/devd-client.c"
               line="643">a string representing the system.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="638">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_timeout"
              c:identifier="devd_client_get_timeout"
              glib:get-property="timeout">
        <source-position filename="src/lib/devd-client.h" line="137"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_triplet"
              c:identifier="devd_client_get_triplet"
              glib:get-property="triplet"
              version="3.30">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="662">Gets the #DevdTriplet object holding information about the architecture triplet</doc>
        <source-position filename="src/lib/devd-client.h" line="150"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/devd-client.c"
               line="668">a #DevdTriplet representing the architecture triplet.</doc>
          <type name="Triplet" c:type="DevdTriplet*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="664">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_service" c:identifier="devd_client_has_service">
        <source-position filename="src/lib/devd-client.h" line="134"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_apps_async"
              c:identifier="devd_client_list_apps_async"
              version="3.28"
              glib:finish-func="list_apps_finish">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="686">Asynchronously requests a list of applications that are available to
the peer that the #DevdClient is connected to.

To complete the asynchronous request, @callback must call
devd_client_list_apps_finish() to obtain the result.</doc>
        <source-position filename="src/lib/devd-client.h" line="182"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="688">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="689">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="690">a #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="691">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_apps_finish"
              c:identifier="devd_client_list_apps_finish"
              version="3.28"
              throws="1">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="717">Completes an asynchronous request to devd_client_list_apps_async().</doc>
        <source-position filename="src/lib/devd-client.h" line="187"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="src/lib/devd-client.c"
               line="725">An array
  of #DevdClientAppInfo if successful; otherwise %NULL and @error is set.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="AppInfo"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="719">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="720">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_files_async"
              c:identifier="devd_client_list_files_async"
              version="3.28"
              glib:finish-func="list_files_finish">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="808">Lists the files in a given path on the device.

Use @attributes to specify the file attributes to retrieve. These
follow the same convention as g_file_enumerate_children().</doc>
        <source-position filename="src/lib/devd-client.h" line="200"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="810">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="811">the path on the device</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="812">file attributes</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="813">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="814">a callback to execute up on completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="815">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_files_finish"
              c:identifier="devd_client_list_files_finish"
              version="3.28"
              throws="1">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="842">Completes an asynchronous request to list files on the device.</doc>
        <source-position filename="src/lib/devd-client.h" line="207"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="src/lib/devd-client.c"
               line="850">a #GPtrArray of
  #GFileInfo retrieved from the device.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Gio.FileInfo"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="844">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="845">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_runtimes_async"
              c:identifier="devd_client_list_runtimes_async"
              version="3.28"
              glib:finish-func="list_runtimes_finish">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="747">Asynchronously requests a list of runtimes that are available to
the peer that the #DevdClient is connected to.

To complete the asynchronous request, @callback must call
devd_client_list_runtimes_finish() to obtain the result.</doc>
        <source-position filename="src/lib/devd-client.h" line="191"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="749">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="750">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="751">a #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="752">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_runtimes_finish"
              c:identifier="devd_client_list_runtimes_finish"
              version="3.28"
              throws="1">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="778">Completes an asynchronous request to devd_client_list_runtimes_async().</doc>
        <source-position filename="src/lib/devd-client.h" line="196"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="src/lib/devd-client.c"
               line="786">An array
  of #DevdClientAppInfo if successful; otherwise %NULL and @error is set.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="AppInfo"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="780">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="781">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_app_async"
              c:identifier="devd_client_run_app_async"
              version="3.28"
              glib:finish-func="run_app_finish">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="872">Asynchronously runs an application on the connected #DevdClient.

To complete the asynchronous request, @callback must call
devd_client_run_app_finish() to obtain the result.</doc>
        <source-position filename="src/lib/devd-client.h" line="211"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="874">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="875">the app provider</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="app_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="876">the ID of the app to run</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="pty"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="877">a pty ID</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="878">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="879">a #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="880">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_app_finish"
              c:identifier="devd_client_run_app_finish"
              version="3.28"
              throws="1">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="910">Completes an asynchronous request to devd_client_run_app_async().</doc>
        <source-position filename="src/lib/devd-client.h" line="219"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/devd-client.c"
               line="918">the identifier for the process, or %NULL and @error is set.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="912">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="913">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_timeout"
              c:identifier="devd_client_set_timeout"
              glib:set-property="timeout">
        <source-position filename="src/lib/devd-client.h" line="139"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="timeout" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="syncfs_async"
              c:identifier="devd_client_syncfs_async"
              version="3.28"
              glib:finish-func="syncfs_finish">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="939">Requests that the device sync changes to the file-system to the underlying
storage devices specified, or all devices if @devices is %NULL.

Note, currently, only syncing all file-systems is supported.</doc>
        <source-position filename="src/lib/devd-client.h" line="223"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="941">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="devices"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="942">a comma-separated list of devices, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="943">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="944">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="945">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="syncfs_finish"
              c:identifier="devd_client_syncfs_finish"
              version="3.28"
              throws="1">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="971">Completes an asynchronous request to sync file-system changes to
their underlying storage devices.</doc>
        <source-position filename="src/lib/devd-client.h" line="229"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/devd-client.c"
               line="980">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="973">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="974">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="arch"
                transfer-ownership="none"
                getter="get_arch"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="kernel"
                transfer-ownership="none"
                getter="get_kernel"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                transfer-ownership="none"
                getter="get_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="system"
                transfer-ownership="none"
                getter="get_system"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="timeout"
                writable="1"
                transfer-ownership="none"
                setter="set_timeout"
                getter="get_timeout"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="triplet"
                transfer-ownership="none"
                getter="get_triplet"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="notification" when="last" detailed="1" version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="319">The "notification" signal is emitted when a client has received a
notification from the peer.

Not all clients will support this, so it's specific for communicating
with some clients and services.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="322">the method name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="params" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="323">the parameters for the notification</doc>
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="service-added" when="last" version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-client.c"
             line="341">The "service-added" signal is emitted when a new service is advertised by
the client. This can happen when the device has enabled a new feature
while you're connected.

If integrating with third-party libraries, this can be used to advertise
that additional services are enabled on the connection.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="344">the name of the service</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ClientClass"
            c:type="DevdClientClass"
            glib:is-gtype-struct-for="Client">
      <source-position filename="src/lib/devd-client.h" line="122"/>
      <field name="parent_instance">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="notification">
        <callback name="notification">
          <source-position filename="src/lib/devd-client.h" line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Client" c:type="DevdClient*"/>
            </parameter>
            <parameter name="method" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="params" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="service_added">
        <callback name="service_added">
          <source-position filename="src/lib/devd-client.h" line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Client" c:type="DevdClient*"/>
            </parameter>
            <parameter name="service" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="connect_async">
        <callback name="connect_async">
          <source-position filename="src/lib/devd-client.h" line="48"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="468">a #DevdClient</doc>
              <type name="Client" c:type="DevdClient*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="469">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="470">a #GAsyncReadyCallback, or %NULL</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="471">closure data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="connect_finish">
        <callback name="connect_finish" throws="1">
          <source-position filename="src/lib/devd-client.h" line="52"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="504">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="497">a #DevdClient</doc>
              <type name="Client" c:type="DevdClient*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="498">a #GAsyncResult provided to callback</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="disconnect_async">
        <callback name="disconnect_async">
          <source-position filename="src/lib/devd-client.h" line="55"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Client" c:type="DevdClient*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="disconnect_finish">
        <callback name="disconnect_finish" throws="1">
          <source-position filename="src/lib/devd-client.h" line="59"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Client" c:type="DevdClient*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_name">
        <callback name="get_name">
          <source-position filename="src/lib/devd-client.h" line="62"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="566">a newly allocated string or %NULL</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="560">a #DevdClient</doc>
              <type name="Client" c:type="DevdClient*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_arch">
        <callback name="get_arch">
          <source-position filename="src/lib/devd-client.h" line="63"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="591">a string representing the architecture.</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="586">a #DevdClient</doc>
              <type name="Client" c:type="DevdClient*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_kernel">
        <callback name="get_kernel">
          <source-position filename="src/lib/devd-client.h" line="64"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="617">a string representing the kernel.</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="612">a #DevdClient</doc>
              <type name="Client" c:type="DevdClient*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_system">
        <callback name="get_system">
          <source-position filename="src/lib/devd-client.h" line="65"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="643">a string representing the system.</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="638">a #DevdClient</doc>
              <type name="Client" c:type="DevdClient*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_triplet">
        <callback name="get_triplet">
          <source-position filename="src/lib/devd-client.h" line="66"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="668">a #DevdTriplet representing the architecture triplet.</doc>
            <type name="Triplet" c:type="DevdTriplet*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="664">a #DevdClient</doc>
              <type name="Client" c:type="DevdClient*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="call_async">
        <callback name="call_async">
          <source-position filename="src/lib/devd-client.h" line="67"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="1003">a #DevdClient</doc>
              <type name="Client" c:type="DevdClient*"/>
            </parameter>
            <parameter name="method" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="1004">the RPC method name</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="params"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="1005">the parameters for the method</doc>
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="1006">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="5">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="1007">a callback to execute upon completion</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="5">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="1008">closure data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="call_finish">
        <callback name="call_finish" throws="1">
          <source-position filename="src/lib/devd-client.h" line="73"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="1045">%TRUE if successful; otherwise %FALSE and @error is set.
  @reply is set to the reply from the peer, of provided.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="1038">a #DevdClient</doc>
              <type name="Client" c:type="DevdClient*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="1039">a #GAsyncResult provided to callback</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
            <parameter name="reply"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       optional="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="1040">a location for a #GVariant</doc>
              <type name="GLib.Variant" c:type="GVariant**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_apps_async">
        <callback name="list_apps_async">
          <source-position filename="src/lib/devd-client.h" line="77"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="688">a #DevdClient</doc>
              <type name="Client" c:type="DevdClient*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="689">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="690">a #GAsyncReadyCallback</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="691">closure data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_runtimes_finish">
        <callback name="list_runtimes_finish" throws="1">
          <source-position filename="src/lib/devd-client.h" line="81"/>
          <return-value transfer-ownership="container">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="786">An array
  of #DevdClientAppInfo if successful; otherwise %NULL and @error is set.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="AppInfo"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="780">a #DevdClient</doc>
              <type name="Client" c:type="DevdClient*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="781">a #GAsyncResult provided to callback</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_runtimes_async">
        <callback name="list_runtimes_async">
          <source-position filename="src/lib/devd-client.h" line="84"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="749">a #DevdClient</doc>
              <type name="Client" c:type="DevdClient*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="750">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="751">a #GAsyncReadyCallback</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="752">closure data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_apps_finish">
        <callback name="list_apps_finish" throws="1">
          <source-position filename="src/lib/devd-client.h" line="88"/>
          <return-value transfer-ownership="container">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="725">An array
  of #DevdClientAppInfo if successful; otherwise %NULL and @error is set.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="AppInfo"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="719">a #DevdClient</doc>
              <type name="Client" c:type="DevdClient*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="720">a #GAsyncResult provided to callback</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_files_async">
        <callback name="list_files_async">
          <source-position filename="src/lib/devd-client.h" line="91"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="810">a #DevdClient</doc>
              <type name="Client" c:type="DevdClient*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="811">the path on the device</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="attributes" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="812">file attributes</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="813">a #GCancellable, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="5">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="814">a callback to execute up on completion</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="5">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="815">closure data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_files_finish">
        <callback name="list_files_finish" throws="1">
          <source-position filename="src/lib/devd-client.h" line="97"/>
          <return-value transfer-ownership="container">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="850">a #GPtrArray of
  #GFileInfo retrieved from the device.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="Gio.FileInfo"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="844">a #DevdClient</doc>
              <type name="Client" c:type="DevdClient*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="845">a #GAsyncResult provided to callback</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="run_app_async">
        <callback name="run_app_async">
          <source-position filename="src/lib/devd-client.h" line="100"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="874">a #DevdClient</doc>
              <type name="Client" c:type="DevdClient*"/>
            </parameter>
            <parameter name="provider" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="875">the app provider</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="app_id" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="876">the ID of the app to run</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="pty"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="877">a pty ID</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="878">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="6">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="879">a #GAsyncReadyCallback</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="6">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="880">closure data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="run_app_finish">
        <callback name="run_app_finish" throws="1">
          <source-position filename="src/lib/devd-client.h" line="107"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="918">the identifier for the process, or %NULL and @error is set.</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="912">a #DevdClient</doc>
              <type name="Client" c:type="DevdClient*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="913">a #GAsyncResult provided to callback</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="syncfs_async">
        <callback name="syncfs_async">
          <source-position filename="src/lib/devd-client.h" line="110"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="941">a #DevdClient</doc>
              <type name="Client" c:type="DevdClient*"/>
            </parameter>
            <parameter name="devices"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="942">a comma-separated list of devices, or %NULL</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="943">a #GCancellable, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="944">a callback to execute upon completion</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="945">closure data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="syncfs_finish">
        <callback name="syncfs_finish" throws="1">
          <source-position filename="src/lib/devd-client.h" line="115"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-client.c"
                 line="980">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="973">a #DevdClient</doc>
              <type name="Client" c:type="DevdClient*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-client.c"
                   line="974">a #GAsyncResult provided to callback</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="32">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <function-macro name="DEPRECATED_FOR"
                    c:identifier="DEVD_DEPRECATED_FOR"
                    introspectable="0">
      <source-position filename="src/lib/devd-version-macros.h" line="36"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_3_28_FOR"
                    c:identifier="DEVD_DEPRECATED_IN_3_28_FOR"
                    introspectable="0">
      <source-position filename="src/lib/devd-version-macros.h" line="120"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_3_30_FOR"
                    c:identifier="DEVD_DEPRECATED_IN_3_30_FOR"
                    introspectable="0">
      <source-position filename="src/lib/devd-version-macros.h" line="134"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Device"
           c:symbol-prefix="device"
           c:type="DevdDevice"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="DevdDevice"
           glib:get-type="devd_device_get_type"
           glib:type-struct="DeviceClass">
      <source-position filename="src/lib/devd-device.h" line="55"/>
      <virtual-method name="create_client"
                      invoker="create_client"
                      version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-device.c"
             line="367">Creates a new #DevdClient that can be used to connect to the device
in question.

Not all devices are guaranteed to support multiple connections. For
example, a USB device connection over serial may require exclusive
access to the serial port and therefore, fail to connect if you try
to use multiple client simultaneously.

See devd_client_connect_async() to establish a connection.</doc>
        <source-position filename="src/lib/devd-device.h" line="51"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/devd-device.c"
               line="381">a newly created #DevdClient</doc>
          <type name="Client" c:type="DevdClient*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-device.c"
                 line="369">a #DevdDevice</doc>
            <type name="Device" c:type="DevdDevice*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="create_client"
              c:identifier="devd_device_create_client"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-device.c"
             line="367">Creates a new #DevdClient that can be used to connect to the device
in question.

Not all devices are guaranteed to support multiple connections. For
example, a USB device connection over serial may require exclusive
access to the serial port and therefore, fail to connect if you try
to use multiple client simultaneously.

See devd_client_connect_async() to establish a connection.</doc>
        <source-position filename="src/lib/devd-device.h" line="60"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/devd-device.c"
               line="381">a newly created #DevdClient</doc>
          <type name="Client" c:type="DevdClient*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-device.c"
                 line="369">a #DevdDevice</doc>
            <type name="Device" c:type="DevdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="devd_device_get_icon_name"
              glib:get-property="icon-name"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-device.c"
             line="247">Gets the #DevdDevice:icon-name property.</doc>
        <source-position filename="src/lib/devd-device.h" line="62"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/devd-device.c"
               line="253">the icon-name, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-device.c"
                 line="249">a #DevdDevice</doc>
            <type name="Device" c:type="DevdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="devd_device_get_id"
              glib:get-property="id"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-device.c"
             line="399">Gets the identifier for the device.</doc>
        <source-position filename="src/lib/devd-device.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/devd-device.c"
               line="405">a string identifying the device</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-device.c"
                 line="401">a #DevdDevice</doc>
            <type name="Device" c:type="DevdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kind"
              c:identifier="devd_device_get_kind"
              glib:get-property="kind">
        <source-position filename="src/lib/devd-device.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="DeviceKind" c:type="DevdDeviceKind"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Device" c:type="DevdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_machine_id"
              c:identifier="devd_device_get_machine_id"
              glib:get-property="machine-id"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-device.c"
             line="202">Gets the machine-id property, if specified</doc>
        <source-position filename="src/lib/devd-device.h" line="72"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/devd-device.c"
               line="208">a machine-id, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-device.c"
                 line="204">a #DevdDevice</doc>
            <type name="Device" c:type="DevdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="devd_device_get_name"
              glib:get-property="name"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-device.c"
             line="318">Gets the "name" property of the device, if there is one.</doc>
        <source-position filename="src/lib/devd-device.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/devd-device.c"
               line="324">the device name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-device.c"
                 line="320">a #DevdDevice</doc>
            <type name="Device" c:type="DevdDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="devd_device_set_icon_name"
              glib:set-property="icon-name"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-device.c"
             line="291">This set the icon-name for the local #DevdDevice instance. It does not
change the icon on the remove device. To interact with the remove device
use devd_device_create_client().</doc>
        <source-position filename="src/lib/devd-device.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-device.c"
                 line="293">a #DevdDevice</doc>
            <type name="Device" c:type="DevdDevice*"/>
          </instance-parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-device.c"
                 line="294">the icon name for the device</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_kind"
              c:identifier="devd_device_set_kind"
              glib:set-property="kind">
        <source-position filename="src/lib/devd-device.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Device" c:type="DevdDevice*"/>
          </instance-parameter>
          <parameter name="kind" transfer-ownership="none">
            <type name="DeviceKind" c:type="DevdDeviceKind"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_machine_id"
              c:identifier="devd_device_set_machine_id"
              glib:set-property="machine-id"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-device.c"
             line="222">Sets the #DevdDevice:machine-id for the local object instance.</doc>
        <source-position filename="src/lib/devd-device.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-device.c"
                 line="224">a #DevdDevice</doc>
            <type name="Device" c:type="DevdDevice*"/>
          </instance-parameter>
          <parameter name="machine_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-device.c"
                 line="225">the identifier of the machine, if known</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="devd_device_set_name"
              glib:set-property="name"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-device.c"
             line="338">Sets the name of the device.

This only changes the local representation of the device name. It does
not change the name on the remove device. To interact with the remote
device, use devd_device_create_client() to create a #DevdClient.</doc>
        <source-position filename="src/lib/devd-device.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-device.c"
                 line="340">a #DevdDevice</doc>
            <type name="Device" c:type="DevdDevice*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-device.c"
                 line="341">the name for the device</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="icon-name"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                getter="get_icon_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="kind"
                writable="1"
                transfer-ownership="none"
                setter="set_kind"
                getter="get_kind"
                default-value="DEVD_DEVICE_KIND_COMPUTER">
        <type name="DeviceKind"/>
      </property>
      <property name="machine-id"
                writable="1"
                transfer-ownership="none"
                setter="set_machine_id"
                getter="get_machine_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="DeviceClass"
            c:type="DevdDeviceClass"
            glib:is-gtype-struct-for="Device">
      <source-position filename="src/lib/devd-device.h" line="55"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="create_client">
        <callback name="create_client">
          <source-position filename="src/lib/devd-device.h" line="51"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/lib/devd-device.c"
                 line="381">a newly created #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/devd-device.c"
                   line="369">a #DevdDevice</doc>
              <type name="Device" c:type="DevdDevice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="DeviceKind"
                 glib:type-name="DevdDeviceKind"
                 glib:get-type="devd_device_kind_get_type"
                 c:type="DevdDeviceKind">
      <member name="computer"
              value="0"
              c:identifier="DEVD_DEVICE_KIND_COMPUTER"
              glib:nick="computer"
              glib:name="DEVD_DEVICE_KIND_COMPUTER">
      </member>
      <member name="tablet"
              value="1"
              c:identifier="DEVD_DEVICE_KIND_TABLET"
              glib:nick="tablet"
              glib:name="DEVD_DEVICE_KIND_TABLET">
      </member>
      <member name="phone"
              value="2"
              c:identifier="DEVD_DEVICE_KIND_PHONE"
              glib:nick="phone"
              glib:name="DEVD_DEVICE_KIND_PHONE">
      </member>
      <member name="micro_controller"
              value="3"
              c:identifier="DEVD_DEVICE_KIND_MICRO_CONTROLLER"
              glib:nick="micro-controller"
              glib:name="DEVD_DEVICE_KIND_MICRO_CONTROLLER">
      </member>
    </enumeration>
    <function-macro name="ENCODE_VERSION"
                    c:identifier="DEVD_ENCODE_VERSION"
                    introspectable="0">
      <source-position filename="src/lib/devd-version.h" line="70"/>
      <parameters>
        <parameter name="major">
        </parameter>
        <parameter name="minor">
        </parameter>
        <parameter name="micro">
        </parameter>
      </parameters>
    </function-macro>
    <class name="FlatpakService"
           c:symbol-prefix="flatpak_service"
           c:type="DevdFlatpakService"
           parent="Service"
           glib:type-name="DevdFlatpakService"
           glib:get-type="devd_flatpak_service_get_type"
           glib:type-struct="FlatpakServiceClass">
      <source-position filename="src/lib/devd-flatpak-service.h" line="36"/>
      <constructor name="new"
                   c:identifier="devd_flatpak_service_new"
                   throws="1">
        <source-position filename="src/lib/devd-flatpak-service.h" line="39"/>
        <return-value transfer-ownership="full">
          <type name="FlatpakService" c:type="DevdFlatpakService*"/>
        </return-value>
        <parameters>
          <parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="DevdClient*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="install_bundle_async"
              c:identifier="devd_flatpak_service_install_bundle_async"
              glib:finish-func="install_bundle_finish">
        <source-position filename="src/lib/devd-flatpak-service.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FlatpakService" c:type="DevdFlatpakService*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_bundle_finish"
              c:identifier="devd_flatpak_service_install_bundle_finish"
              throws="1">
        <source-position filename="src/lib/devd-flatpak-service.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FlatpakService" c:type="DevdFlatpakService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="FlatpakServiceClass"
            c:type="DevdFlatpakServiceClass"
            glib:is-gtype-struct-for="FlatpakService">
      <source-position filename="src/lib/devd-flatpak-service.h" line="36"/>
      <field name="parent_class">
        <type name="ServiceClass" c:type="DevdServiceClass"/>
      </field>
    </record>
    <constant name="MAJOR_VERSION" value="3" c:type="DEVD_MAJOR_VERSION">
      <doc xml:space="preserve"
           filename="src/lib/devd-version.h"
           line="34">libdeviced major version component (e.g. 1 if %DEVD_VERSION is 1.2.3)</doc>
      <source-position filename="src/lib/devd-version.h" line="39"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MICRO_VERSION" value="4" c:type="DEVD_MICRO_VERSION">
      <doc xml:space="preserve"
           filename="src/lib/devd-version.h"
           line="48">libdeviced micro version component (e.g. 3 if %DEVD_VERSION is 1.2.3)</doc>
      <source-position filename="src/lib/devd-version.h" line="53"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MINOR_VERSION" value="27" c:type="DEVD_MINOR_VERSION">
      <doc xml:space="preserve"
           filename="src/lib/devd-version.h"
           line="41">libdeviced minor version component (e.g. 2 if %DEVD_VERSION is 1.2.3)</doc>
      <source-position filename="src/lib/devd-version.h" line="46"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="NetworkClient"
           c:symbol-prefix="network_client"
           c:type="DevdNetworkClient"
           parent="Client"
           glib:type-name="DevdNetworkClient"
           glib:get-type="devd_network_client_get_type"
           glib:type-struct="NetworkClientClass">
      <source-position filename="src/lib/devd-network-client.h" line="35"/>
      <constructor name="new"
                   c:identifier="devd_network_client_new"
                   version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-network-client.c"
             line="1150">Creates a new #DevdNetworkClient.

You can use this instead of devd_device_create_client() if you know
who you want to communicate with already and the certificate to use.

Generally, you should wait for devices to show up using #DevdBrowser
and then call devd_device_create_client() to create a client for that
device.</doc>
        <source-position filename="src/lib/devd-network-client.h" line="38"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/devd-network-client.c"
               line="1164">a #DevdNetworkClient</doc>
          <type name="NetworkClient" c:type="DevdNetworkClient*"/>
        </return-value>
        <parameters>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-network-client.c"
                 line="1152">a #GInetSocketAddress</doc>
            <type name="Gio.InetSocketAddress" c:type="GInetSocketAddress*"/>
          </parameter>
          <parameter name="certificate"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-network-client.c"
                 line="1153">a #GTlsCertificate or %NULL</doc>
            <type name="Gio.TlsCertificate" c:type="GTlsCertificate*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_address"
              c:identifier="devd_network_client_get_address"
              glib:get-property="address"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-network-client.c"
             line="1181">Gets the address that is to be used to connect to the device.</doc>
        <source-position filename="src/lib/devd-network-client.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/devd-network-client.c"
               line="1187">a #GInetSocketAddress</doc>
          <type name="Gio.InetSocketAddress" c:type="GInetSocketAddress*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-network-client.c"
                 line="1183">a #DevdNetworkClient</doc>
            <type name="NetworkClient" c:type="DevdNetworkClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_certificate"
              c:identifier="devd_network_client_get_certificate"
              glib:get-property="certificate"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-network-client.c"
             line="1199">Gets the certificate for the network client.</doc>
        <source-position filename="src/lib/devd-network-client.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/devd-network-client.c"
               line="1205">a #GTlsCertificate</doc>
          <type name="Gio.TlsCertificate" c:type="GTlsCertificate*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-network-client.c"
                 line="1201">a #DevdNetworkClient</doc>
            <type name="NetworkClient" c:type="DevdNetworkClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="address"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_address">
        <doc xml:space="preserve"
             filename="src/lib/devd-network-client.c"
             line="1122">The "address" is the destination that we will attept to connect to
using this client, when devd_client_connect_async() is called.</doc>
        <type name="Gio.InetSocketAddress"/>
      </property>
      <property name="certificate"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_certificate">
        <type name="Gio.TlsCertificate"/>
      </property>
    </class>
    <record name="NetworkClientClass"
            c:type="DevdNetworkClientClass"
            glib:is-gtype-struct-for="NetworkClient">
      <source-position filename="src/lib/devd-network-client.h" line="35"/>
      <field name="parent_class">
        <type name="ClientClass" c:type="DevdClientClass"/>
      </field>
    </record>
    <class name="NetworkDevice"
           c:symbol-prefix="network_device"
           c:type="DevdNetworkDevice"
           parent="Device"
           glib:type-name="DevdNetworkDevice"
           glib:get-type="devd_network_device_get_type"
           glib:type-struct="NetworkDeviceClass">
      <source-position filename="src/lib/devd-network-device.h" line="35"/>
      <method name="get_address"
              c:identifier="devd_network_device_get_address"
              glib:get-property="address"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-network-device.c"
             line="180">Gets the #GInetSocketAddress that can be used to connect to the
device daemon.</doc>
        <source-position filename="src/lib/devd-network-device.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/devd-network-device.c"
               line="187">a #GInetSocketAddress or %NULL</doc>
          <type name="Gio.InetSocketAddress" c:type="GInetSocketAddress*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-network-device.c"
                 line="182">a #DevdNetworkDevice</doc>
            <type name="NetworkDevice" c:type="DevdNetworkDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_certificate"
              c:identifier="devd_network_device_get_certificate"
              glib:get-property="certificate"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-network-device.c"
             line="199">Gets the #GTlsCertificate that will be used as the client-side certificate
when communicating with this network device.</doc>
        <source-position filename="src/lib/devd-network-device.h" line="40"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/devd-network-device.c"
               line="206">a #GTlsCertificate or %NULL</doc>
          <type name="Gio.TlsCertificate" c:type="GTlsCertificate*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-network-device.c"
                 line="201">a #DevdNetworkDevice</doc>
            <type name="NetworkDevice" c:type="DevdNetworkDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="address"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_address">
        <type name="Gio.InetSocketAddress"/>
      </property>
      <property name="certificate"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_certificate">
        <type name="Gio.TlsCertificate"/>
      </property>
    </class>
    <record name="NetworkDeviceClass"
            c:type="DevdNetworkDeviceClass"
            glib:is-gtype-struct-for="NetworkDevice">
      <source-position filename="src/lib/devd-network-device.h" line="35"/>
      <field name="parent_class">
        <type name="DeviceClass" c:type="DevdDeviceClass"/>
      </field>
    </record>
    <constant name="PROCESS_SERVICE_NAME"
              value="org.gnome.deviced.process"
              c:type="DEVD_PROCESS_SERVICE_NAME">
      <source-position filename="src/lib/devd-process-service.h" line="28"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="ProcessService"
           c:symbol-prefix="process_service"
           c:type="DevdProcessService"
           parent="Service"
           glib:type-name="DevdProcessService"
           glib:get-type="devd_process_service_get_type"
           glib:type-struct="ProcessServiceClass">
      <source-position filename="src/lib/devd-process-service.h" line="32"/>
      <constructor name="new"
                   c:identifier="devd_process_service_new"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/lib/devd-process-service.c"
             line="410">Creates a new #DevdProcessService.

If @client does not support the process service, %NULL is returned
and @error is set.</doc>
        <source-position filename="src/lib/devd-process-service.h" line="35"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/devd-process-service.c"
               line="420">a #DevdProcessService or %NULL</doc>
          <type name="ProcessService" c:type="DevdProcessService*"/>
        </return-value>
        <parameters>
          <parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-process-service.c"
                 line="412">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="create_pty_async"
              c:identifier="devd_process_service_create_pty_async"
              version="3.28"
              glib:finish-func="create_pty_finish">
        <doc xml:space="preserve"
             filename="src/lib/devd-process-service.c"
             line="563">Creates a new PTY on the device and proxies PTY data to @local_pty_fd.

You may want to use the result of this asynchronous operation to pass the
PTY token to other client operations. That will result in the PTY data being
delivered to @local_pty_fd.</doc>
        <source-position filename="src/lib/devd-process-service.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-process-service.c"
                 line="565">a #DevdProcessService</doc>
            <type name="ProcessService" c:type="DevdProcessService*"/>
          </instance-parameter>
          <parameter name="local_pty_fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-process-service.c"
                 line="566">a PTY slave fd to proxy PTY data to</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-process-service.c"
                 line="567">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/lib/devd-process-service.c"
                 line="568">a calllback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-process-service.c"
                 line="569">closure data for @calllback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_pty_finish"
              c:identifier="devd_process_service_create_pty_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/lib/devd-process-service.c"
             line="622">Completes a request to create a new PTY on the remote device.

The resulting PTY identifier is a unique string representing the PTY.
Data will be proxied to the @local_pty_fd provided in
devd_process_service_create_pty_async(), however you may need this PTY token
to pass to other operations to reference the specific PTY instance.</doc>
        <source-position filename="src/lib/devd-process-service.h" line="86"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/devd-process-service.c"
               line="635">the pty identifier or %NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-process-service.c"
                 line="624">a #DevdProcessService</doc>
            <type name="ProcessService" c:type="DevdProcessService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-process-service.c"
                 line="625">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="destroy_pty_async"
              c:identifier="devd_process_service_destroy_pty_async"
              version="3.28"
              glib:finish-func="destroy_pty_finish">
        <doc xml:space="preserve"
             filename="src/lib/devd-process-service.c"
             line="692">Requests that the device close a PTY device that was opened. This will
stop PTY data being proxied to the FD that was provided when creating the
PTY device.</doc>
        <source-position filename="src/lib/devd-process-service.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-process-service.c"
                 line="694">a #DevdProcessService</doc>
            <type name="ProcessService" c:type="DevdProcessService*"/>
          </instance-parameter>
          <parameter name="pty_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-process-service.c"
                 line="695">the identifier of a previously created PTY</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-process-service.c"
                 line="696">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/lib/devd-process-service.c"
                 line="697">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-process-service.c"
                 line="698">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="destroy_pty_finish"
              c:identifier="devd_process_service_destroy_pty_finish"
              version="3.28"
              throws="1">
        <doc xml:space="preserve"
             filename="src/lib/devd-process-service.c"
             line="738">Completes an asynchronous request to destroy a PTY device.</doc>
        <source-position filename="src/lib/devd-process-service.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/devd-process-service.c"
               line="746">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-process-service.c"
                 line="740">a #DevdProcessService</doc>
            <type name="ProcessService" c:type="DevdProcessService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-process-service.c"
                 line="741">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="force_exit"
              c:identifier="devd_process_service_force_exit"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-process-service.c"
             line="865">Requests that the device terminate process identified by @identifier.

@identifier should be a process that the client was previously notified of.

As these requests are inherently racey, as signals are involved, no async
pair is provided for this. Calling this function only ensures an attempt
to force exit the program.</doc>
        <source-position filename="src/lib/devd-process-service.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-process-service.c"
                 line="867">a #DevdProcessService</doc>
            <type name="ProcessService" c:type="DevdProcessService*"/>
          </instance-parameter>
          <parameter name="identifier" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-process-service.c"
                 line="868">the process identifier</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_signal"
              c:identifier="devd_process_service_send_signal"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-process-service.c"
             line="901">Requests that the device send signal @signum to the process known
by @identifier.

@identifier should be a process that the client was previously notified of.

As these requests are inherently racey, as signals are involved, no async
pair is provided for this. Calling this function only ensures an attempt
to send the signal to the program.</doc>
        <source-position filename="src/lib/devd-process-service.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-process-service.c"
                 line="903">a #DevdProcessService</doc>
            <type name="ProcessService" c:type="DevdProcessService*"/>
          </instance-parameter>
          <parameter name="identifier" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-process-service.c"
                 line="904">the process identifier</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="signum" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-process-service.c"
                 line="905">the signal number</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="spawn_async"
              c:identifier="devd_process_service_spawn_async"
              glib:finish-func="spawn_finish">
        <source-position filename="src/lib/devd-process-service.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProcessService" c:type="DevdProcessService*"/>
          </instance-parameter>
          <parameter name="pty_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="argv" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="env" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="spawn_finish"
              c:identifier="devd_process_service_spawn_finish"
              throws="1">
        <source-position filename="src/lib/devd-process-service.h" line="66"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProcessService" c:type="DevdProcessService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="wait_for_process_async"
              c:identifier="devd_process_service_wait_for_process_async"
              glib:finish-func="wait_for_process_finish">
        <source-position filename="src/lib/devd-process-service.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProcessService" c:type="DevdProcessService*"/>
          </instance-parameter>
          <parameter name="identifier" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="wait_for_process_finish"
              c:identifier="devd_process_service_wait_for_process_finish"
              throws="1">
        <source-position filename="src/lib/devd-process-service.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProcessService" c:type="DevdProcessService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="exited" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="exit_code" transfer-ownership="none">
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="term_sig" transfer-ownership="none">
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="process-exited" when="last" version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-process-service.c"
             line="338">This signal is emitted when the peer has notified us that a process which
was spawned by a client to the device has exited.

You may be notified of processes not spawned by your client, as all clients
are notified.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="identifier" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-process-service.c"
                 line="341">the process identifier</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="exit_code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-process-service.c"
                 line="342">the exit code for the process</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="process-signaled" when="last" version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-process-service.c"
             line="360">This signal is emitted when the peer has notified us that a process which
was spawned by a client to the device has terminated by signal.

You may be notified of processes not spawned by your client, as all clients
are notified.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="identifier" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-process-service.c"
                 line="363">the process identifier</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="term_sig" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-process-service.c"
                 line="364">the signal that terminated the process</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ProcessServiceClass"
            c:type="DevdProcessServiceClass"
            glib:is-gtype-struct-for="ProcessService">
      <source-position filename="src/lib/devd-process-service.h" line="32"/>
      <field name="parent_class">
        <type name="ServiceClass" c:type="DevdServiceClass"/>
      </field>
    </record>
    <class name="Service"
           c:symbol-prefix="service"
           c:type="DevdService"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="DevdService"
           glib:get-type="devd_service_get_type"
           glib:type-struct="ServiceClass">
      <source-position filename="src/lib/devd-service.h" line="47"/>
      <constructor name="new" c:identifier="devd_service_new" throws="1">
        <doc xml:space="preserve"
             filename="src/lib/devd-service.c"
             line="298">Creates a new #DevdService. @client will be checked to ensure it supports
@service_name, or @error will be set.</doc>
        <source-position filename="src/lib/devd-service.h" line="50"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/devd-service.c"
               line="308">a newly created service if
  supported by the client, otherwise %NULL and @error is set.</doc>
          <type name="Service" c:type="gpointer"/>
        </return-value>
        <parameters>
          <parameter name="service_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-service.c"
                 line="300">a #GType of a DevdService</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-service.c"
                 line="301">the name of the service such as "org.gnome.foo"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-service.c"
                 line="302">the #DevdClient to use for communicating</doc>
            <type name="Client" c:type="DevdClient*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="notification">
        <source-position filename="src/lib/devd-service.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Service" c:type="DevdService*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="params" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_async"
              c:identifier="devd_service_call_async"
              version="3.28"
              glib:finish-func="call_finish">
        <doc xml:space="preserve"
             filename="src/lib/devd-service.c"
             line="214">This is a wrapper around getting the client and calling
devd_client_call_async(). It's purpose is to allow service implementations
to have a bit less code by just calling this.

Call devd_service_call_finish() to get the result.</doc>
        <source-position filename="src/lib/devd-service.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-service.c"
                 line="216">a #DevdService</doc>
            <type name="Service" c:type="DevdService*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-service.c"
                 line="217">the RPC method name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="params"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-service.c"
                 line="218">the parameters for the method</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-service.c"
                 line="219">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/lib/devd-service.c"
                 line="220">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-service.c"
                 line="221">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_finish"
              c:identifier="devd_service_call_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/lib/devd-service.c"
             line="263">Gets the result of the RPC call.</doc>
        <source-position filename="src/lib/devd-service.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/devd-service.c"
               line="272">%TRUE if successful; otherwise %FALSE and @error is set.
  @reply is set to the reply from the peer, of provided.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-service.c"
                 line="265">a #DevdService</doc>
            <type name="Service" c:type="DevdService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-service.c"
                 line="266">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="reply"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-service.c"
                 line="267">a location for a #GVariant</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_client"
              c:identifier="devd_service_get_client"
              glib:get-property="client"
              version="3.28">
        <doc xml:space="preserve"
             filename="src/lib/devd-service.c"
             line="172">Gets the client that the service was initialized with.</doc>
        <source-position filename="src/lib/devd-service.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/devd-service.c"
               line="178">a #DevdClient</doc>
          <type name="Client" c:type="DevdClient*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-service.c"
                 line="174">a #DevdService</doc>
            <type name="Service" c:type="DevdService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="client"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_client">
        <type name="Client"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="notification" when="last" detailed="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ServiceClass"
            c:type="DevdServiceClass"
            glib:is-gtype-struct-for="Service">
      <source-position filename="src/lib/devd-service.h" line="47"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="notification">
        <callback name="notification">
          <source-position filename="src/lib/devd-service.h" line="41"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Service" c:type="DevdService*"/>
            </parameter>
            <parameter name="method" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="params" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <constant name="TRANSFER_SERVICE_NAME"
              value="org.gnome.deviced.transfers"
              c:type="DEVD_TRANSFER_SERVICE_NAME">
      <source-position filename="src/lib/devd-transfer-service.h" line="28"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="TransferService"
           c:symbol-prefix="transfer_service"
           c:type="DevdTransferService"
           parent="Service"
           glib:type-name="DevdTransferService"
           glib:get-type="devd_transfer_service_get_type"
           glib:type-struct="TransferServiceClass">
      <source-position filename="src/lib/devd-transfer-service.h" line="32"/>
      <constructor name="new"
                   c:identifier="devd_transfer_service_new"
                   version="3.28"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/lib/devd-transfer-service.c"
             line="110">Creates a new #DevdTransferService that communicates to deviced
using @client. If the service is not supported on the peer, then
%NULL is returned and @error is set.</doc>
        <source-position filename="src/lib/devd-transfer-service.h" line="35"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/devd-transfer-service.c"
               line="119">a new #DevdTransferService or %NULL and @error is set.</doc>
          <type name="TransferService" c:type="DevdTransferService*"/>
        </return-value>
        <parameters>
          <parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-transfer-service.c"
                 line="112">a #DevdClient</doc>
            <type name="Client" c:type="DevdClient*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_file_async"
              c:identifier="devd_transfer_service_get_file_async"
              version="3.28"
              glib:finish-func="get_file_finish">
        <doc xml:space="preserve"
             filename="src/lib/devd-transfer-service.c"
             line="828">Asynchronously copies the contents of @path on the remote device to @file.

@progress is called periodically with updates to the progress of the copy.</doc>
        <source-position filename="src/lib/devd-transfer-service.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-transfer-service.c"
                 line="830">a #DevdTransferService</doc>
            <type name="TransferService" c:type="DevdTransferService*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-transfer-service.c"
                 line="831">the path on the remote device</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-transfer-service.c"
                 line="832">a #GFile to write to</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="progress"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="3"
                     destroy="4">
            <doc xml:space="preserve"
                 filename="src/lib/devd-transfer-service.c"
                 line="833">
  A progress callback or %NULL to execute when transfer progress is updated.</doc>
            <type name="Gio.FileProgressCallback"
                  c:type="GFileProgressCallback"/>
          </parameter>
          <parameter name="progress_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="progress_data_destroy"
                     transfer-ownership="none"
                     scope="async">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-transfer-service.c"
                 line="835">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="src/lib/devd-transfer-service.c"
                 line="836">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-transfer-service.c"
                 line="837">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_file_finish"
              c:identifier="devd_transfer_service_get_file_finish"
              version="3.28"
              throws="1">
        <doc xml:space="preserve"
             filename="src/lib/devd-transfer-service.c"
             line="892">Completes an asynchronous request to download a file from the device.</doc>
        <source-position filename="src/lib/devd-transfer-service.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/devd-transfer-service.c"
               line="900">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-transfer-service.c"
                 line="894">a #DevdTransferService</doc>
            <type name="TransferService" c:type="DevdTransferService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-transfer-service.c"
                 line="895">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="put_file_async"
              c:identifier="devd_transfer_service_put_file_async"
              version="3.28"
              glib:finish-func="put_file_finish">
        <doc xml:space="preserve"
             filename="src/lib/devd-transfer-service.c"
             line="404">Asynchronously copies the contents of @file to the remote device at @path.

@progress is called periodically with updates to the progress of the copy.</doc>
        <source-position filename="src/lib/devd-transfer-service.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-transfer-service.c"
                 line="406">a #DevdTransferService</doc>
            <type name="TransferService" c:type="DevdTransferService*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-transfer-service.c"
                 line="407">a #GFile to copy</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-transfer-service.c"
                 line="408">the path on the remote device</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="3"
                     destroy="4">
            <doc xml:space="preserve"
                 filename="src/lib/devd-transfer-service.c"
                 line="409">
  A progress callback or %NULL to execute when transfer progress is updated.</doc>
            <type name="Gio.FileProgressCallback"
                  c:type="GFileProgressCallback"/>
          </parameter>
          <parameter name="progress_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="progress_data_destroy"
                     transfer-ownership="none"
                     scope="async">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-transfer-service.c"
                 line="411">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="src/lib/devd-transfer-service.c"
                 line="412">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-transfer-service.c"
                 line="413">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="put_file_finish"
              c:identifier="devd_transfer_service_put_file_finish"
              version="3.28"
              throws="1">
        <doc xml:space="preserve"
             filename="src/lib/devd-transfer-service.c"
             line="485">Completes an asynchronous request to upload a file to the device.

Clients are required to use rename() properly to ensure that the file is
either replaced or created if successful so you get either the previous
version or new version of the file.</doc>
        <source-position filename="src/lib/devd-transfer-service.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/devd-transfer-service.c"
               line="497">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-transfer-service.c"
                 line="487">a #DevdTransferService</doc>
            <type name="TransferService" c:type="DevdTransferService*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-transfer-service.c"
                 line="488">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="TransferServiceClass"
            c:type="DevdTransferServiceClass"
            glib:is-gtype-struct-for="TransferService">
      <source-position filename="src/lib/devd-transfer-service.h" line="32"/>
      <field name="parent_class">
        <type name="ServiceClass" c:type="DevdServiceClass"/>
      </field>
    </record>
    <record name="Triplet"
            c:type="DevdTriplet"
            opaque="1"
            glib:type-name="DevdTriplet"
            glib:get-type="devd_triplet_get_type"
            c:symbol-prefix="triplet">
      <source-position filename="src/lib/devd-triplet.h" line="31"/>
      <constructor name="new" c:identifier="devd_triplet_new" version="3.30">
        <doc xml:space="preserve"
             filename="src/lib/devd-triplet.c"
             line="56">Creates a new #DevdTriplet from a given identifier. This identifier
can be a simple architecture name, a duet of "arch-kernel" (like "m68k-coff"), a triplet
of "arch-kernel-os" (like "x86_64-linux-gnu") or a quadriplet of "arch-vendor-kernel-os"
(like "i686-pc-linux-gnu")</doc>
        <source-position filename="src/lib/devd-triplet.h" line="36"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/devd-triplet.c"
               line="65">An #DevdTriplet.</doc>
          <type name="Triplet" c:type="DevdTriplet*"/>
        </return-value>
        <parameters>
          <parameter name="full_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-triplet.c"
                 line="58">The complete identifier of the machine</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_quadruplet"
                   c:identifier="devd_triplet_new_with_quadruplet"
                   version="3.30">
        <doc xml:space="preserve"
             filename="src/lib/devd-triplet.c"
             line="155">Creates a new #DevdTriplet from a given quadruplet of
"arch-vendor-kernel-os" (like "i686-pc-linux-gnu")</doc>
        <source-position filename="src/lib/devd-triplet.h" line="42"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/devd-triplet.c"
               line="165">An #DevdTriplet.</doc>
          <type name="Triplet" c:type="DevdTriplet*"/>
        </return-value>
        <parameters>
          <parameter name="arch" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-triplet.c"
                 line="157">The name of the architecture of the machine (like "x86_64")</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="vendor"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-triplet.c"
                 line="158">The name of the vendor of the machine (like "pc")</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="kernel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-triplet.c"
                 line="159">The name of the kernel of the machine (like "linux")</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="operating_system"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-triplet.c"
                 line="160">The name of the os of the machine (like "gnuabi64")</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_triplet"
                   c:identifier="devd_triplet_new_with_triplet"
                   version="3.30">
        <doc xml:space="preserve"
             filename="src/lib/devd-triplet.c"
             line="108">Creates a new #DevdTriplet from a given triplet of "arch-kernel-os"
(like "x86_64-linux-gnu")</doc>
        <source-position filename="src/lib/devd-triplet.h" line="38"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/devd-triplet.c"
               line="118">An #DevdTriplet.</doc>
          <type name="Triplet" c:type="DevdTriplet*"/>
        </return-value>
        <parameters>
          <parameter name="arch" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-triplet.c"
                 line="110">The name of the architecture of the machine (like "x86_64")</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="kernel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-triplet.c"
                 line="111">The name of the kernel of the machine (like "linux")</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="operating_system"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/devd-triplet.c"
                 line="112">The name of the os of the machine
(like "gnuabi64")</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_arch" c:identifier="devd_triplet_get_arch">
        <doc xml:space="preserve"
             filename="src/lib/devd-triplet.c"
             line="277">Gets the architecture name of the machine</doc>
        <source-position filename="src/lib/devd-triplet.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/devd-triplet.c"
               line="283">The architecture name of the machine</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-triplet.c"
                 line="279">An #DevdTriplet</doc>
            <type name="Triplet" c:type="DevdTriplet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_full_name"
              c:identifier="devd_triplet_get_full_name"
              version="3.30">
        <doc xml:space="preserve"
             filename="src/lib/devd-triplet.c"
             line="258">Gets the full name of the machine configuration name (can be an architecture name,
a duet, a triplet or a quadruplet).</doc>
        <source-position filename="src/lib/devd-triplet.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/devd-triplet.c"
               line="265">The full name of the machine configuration name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-triplet.c"
                 line="260">An #DevdTriplet</doc>
            <type name="Triplet" c:type="DevdTriplet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kernel"
              c:identifier="devd_triplet_get_kernel"
              version="3.30">
        <doc xml:space="preserve"
             filename="src/lib/devd-triplet.c"
             line="311">Gets name of the kernel of the machine</doc>
        <source-position filename="src/lib/devd-triplet.h" line="57"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/devd-triplet.c"
               line="317">The name of the kernel of the machine</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-triplet.c"
                 line="313">An #DevdTriplet</doc>
            <type name="Triplet" c:type="DevdTriplet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_operating_system"
              c:identifier="devd_triplet_get_operating_system"
              version="3.30">
        <doc xml:space="preserve"
             filename="src/lib/devd-triplet.c"
             line="329">Gets name of the operating system of the machine</doc>
        <source-position filename="src/lib/devd-triplet.h" line="59"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/devd-triplet.c"
               line="335">The name of the operating system of the machine</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-triplet.c"
                 line="331">An #DevdTriplet</doc>
            <type name="Triplet" c:type="DevdTriplet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vendor"
              c:identifier="devd_triplet_get_vendor"
              version="3.30">
        <doc xml:space="preserve"
             filename="src/lib/devd-triplet.c"
             line="293">Gets the vendor name of the machine</doc>
        <source-position filename="src/lib/devd-triplet.h" line="55"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/devd-triplet.c"
               line="299">The vendor name of the machine</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-triplet.c"
                 line="295">An #DevdTriplet</doc>
            <type name="Triplet" c:type="DevdTriplet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="devd_triplet_ref" version="3.30">
        <doc xml:space="preserve"
             filename="src/lib/devd-triplet.c"
             line="218">Increases the reference count of @self</doc>
        <source-position filename="src/lib/devd-triplet.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/devd-triplet.c"
               line="224">An #DevdTriplet.</doc>
          <type name="Triplet" c:type="DevdTriplet*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-triplet.c"
                 line="220">An #DevdTriplet</doc>
            <type name="Triplet" c:type="DevdTriplet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="devd_triplet_unref" version="3.30">
        <doc xml:space="preserve"
             filename="src/lib/devd-triplet.c"
             line="239">Decreases the reference count of @self
Once the reference count reaches 0, the object is freed.</doc>
        <source-position filename="src/lib/devd-triplet.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/devd-triplet.c"
                 line="241">An #DevdTriplet</doc>
            <type name="Triplet" c:type="DevdTriplet*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <function-macro name="UNAVAILABLE"
                    c:identifier="DEVD_UNAVAILABLE"
                    introspectable="0">
      <source-position filename="src/lib/devd-version-macros.h" line="37"/>
      <parameters>
        <parameter name="maj">
        </parameter>
        <parameter name="min">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="VERSION_S" value="3.27.4" c:type="DEVD_VERSION_S">
      <doc xml:space="preserve"
           filename="src/lib/devd-version.h"
           line="62">libdeviced version, encoded as a string, useful for printing and
concatenation.</doc>
      <source-position filename="src/lib/devd-version.h" line="68"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <docsection name="devd-browser">
      <doc xml:space="preserve"
           filename="src/lib/devd-browser.c"
           line="38">The #DevdBrowser is the toplevel object used by consumers of the
libdeviced library. It scan scan the local network segments for
nodes implementing the deviced protocol.

After creating a #DevdBrowser, use devd_browser_load_async() to
discover available nodes. #DevdBrowser::device-added and
#DevdBrowser::device-removed will be emitted in reaction to network
and device changes.</doc>
    </docsection>
    <docsection name="devd-client">
      <doc xml:space="preserve"
           filename="src/lib/devd-client.c"
           line="28">The #DevdClient is a base-class that is used to communicate with
devices. Network based devices (or USB) subclass this to provide
a common API, despite different transport mediums.</doc>
    </docsection>
    <docsection name="devd-device">
      <doc xml:space="preserve"
           filename="src/lib/devd-device.c"
           line="29">The #DevdDevice represents a Deviced device that has been discovered.</doc>
    </docsection>
    <docsection name="devd-network-client">
      <doc xml:space="preserve"
           filename="src/lib/devd-network-client.c"
           line="34">This is a #DevdClient implementation that communicates with a network peer.</doc>
    </docsection>
    <docsection name="devd-network-device">
      <doc xml:space="preserve"
           filename="src/lib/devd-network-device.c"
           line="29">#DevdNetworkDevice is a #DevdDevice implementation that represents a
discovered device on a local network segment.

Use devd_device_create_client() to create a client to communicate with
the network device.</doc>
    </docsection>
    <docsection name="devd-version">
      <doc xml:space="preserve"
           filename="src/lib/devd-version.h"
           line="25">This module provides various macros that may be used to build code based
on the version of Builder at build time.</doc>
    </docsection>
  </namespace>
</repository>
