<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="DBusGLib" version="1.0"/>
  <include name="Gio" version="2.0"/>
  <include name="NetworkManager" version="1.0"/>
  <package name="libnm-glib"/>
  <package name="libnm-glib-vpn"/>
  <namespace name="NMClient"
             version="1.0"
             shared-library="libnm-glib.so.4,libnm-util.so.2"
             c:identifier-prefixes="NM"
             c:symbol-prefixes="nm">
    <alias name="RemoteConnectionCommitFunc"
           c:type="NMRemoteConnectionCommitFunc">
      <source-position filename="nm-remote-connection.h" line="95"/>
      <type name="RemoteConnectionResultFunc"
            c:type="NMRemoteConnectionResultFunc"/>
    </alias>
    <alias name="RemoteConnectionDeleteFunc"
           c:type="NMRemoteConnectionDeleteFunc">
      <source-position filename="nm-remote-connection.h" line="96"/>
      <type name="RemoteConnectionResultFunc"
            c:type="NMRemoteConnectionResultFunc"/>
    </alias>
    <constant name="ACCESS_POINT_BSSID"
              value="bssid"
              c:type="NM_ACCESS_POINT_BSSID">
      <source-position filename="nm-access-point.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACCESS_POINT_FLAGS"
              value="flags"
              c:type="NM_ACCESS_POINT_FLAGS">
      <source-position filename="nm-access-point.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACCESS_POINT_FREQUENCY"
              value="frequency"
              c:type="NM_ACCESS_POINT_FREQUENCY">
      <source-position filename="nm-access-point.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACCESS_POINT_HW_ADDRESS"
              value="hw-address"
              c:type="NM_ACCESS_POINT_HW_ADDRESS">
      <source-position filename="nm-access-point.h" line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACCESS_POINT_LAST_SEEN"
              value="last-seen"
              c:type="NM_ACCESS_POINT_LAST_SEEN">
      <source-position filename="nm-access-point.h" line="49"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACCESS_POINT_MAX_BITRATE"
              value="max-bitrate"
              c:type="NM_ACCESS_POINT_MAX_BITRATE">
      <source-position filename="nm-access-point.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACCESS_POINT_MODE"
              value="mode"
              c:type="NM_ACCESS_POINT_MODE">
      <source-position filename="nm-access-point.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACCESS_POINT_RSN_FLAGS"
              value="rsn-flags"
              c:type="NM_ACCESS_POINT_RSN_FLAGS">
      <source-position filename="nm-access-point.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACCESS_POINT_SSID"
              value="ssid"
              c:type="NM_ACCESS_POINT_SSID">
      <source-position filename="nm-access-point.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACCESS_POINT_STRENGTH"
              value="strength"
              c:type="NM_ACCESS_POINT_STRENGTH">
      <source-position filename="nm-access-point.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACCESS_POINT_WPA_FLAGS"
              value="wpa-flags"
              c:type="NM_ACCESS_POINT_WPA_FLAGS">
      <source-position filename="nm-access-point.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_CONNECTION"
              value="connection"
              c:type="NM_ACTIVE_CONNECTION_CONNECTION">
      <source-position filename="nm-active-connection.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_DEFAULT"
              value="default"
              c:type="NM_ACTIVE_CONNECTION_DEFAULT">
      <source-position filename="nm-active-connection.h" line="51"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_DEFAULT6"
              value="default6"
              c:type="NM_ACTIVE_CONNECTION_DEFAULT6">
      <source-position filename="nm-active-connection.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_DEVICES"
              value="devices"
              c:type="NM_ACTIVE_CONNECTION_DEVICES">
      <source-position filename="nm-active-connection.h" line="49"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_DHCP4_CONFIG"
              value="dhcp4-config"
              c:type="NM_ACTIVE_CONNECTION_DHCP4_CONFIG">
      <source-position filename="nm-active-connection.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_DHCP6_CONFIG"
              value="dhcp6-config"
              c:type="NM_ACTIVE_CONNECTION_DHCP6_CONFIG">
      <source-position filename="nm-active-connection.h" line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_ID"
              value="id"
              c:type="NM_ACTIVE_CONNECTION_ID">
      <source-position filename="nm-active-connection.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_IP4_CONFIG"
              value="ip4-config"
              c:type="NM_ACTIVE_CONNECTION_IP4_CONFIG">
      <source-position filename="nm-active-connection.h" line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_IP6_CONFIG"
              value="ip6-config"
              c:type="NM_ACTIVE_CONNECTION_IP6_CONFIG">
      <source-position filename="nm-active-connection.h" line="55"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_MASTER"
              value="master"
              c:type="NM_ACTIVE_CONNECTION_MASTER">
      <source-position filename="nm-active-connection.h" line="58"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_SPECIFIC_OBJECT"
              value="specific-object"
              c:type="NM_ACTIVE_CONNECTION_SPECIFIC_OBJECT">
      <source-position filename="nm-active-connection.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_STATE"
              value="state"
              c:type="NM_ACTIVE_CONNECTION_STATE">
      <source-position filename="nm-active-connection.h" line="50"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_TYPE"
              value="type"
              c:type="NM_ACTIVE_CONNECTION_TYPE">
      <source-position filename="nm-active-connection.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_UUID"
              value="uuid"
              c:type="NM_ACTIVE_CONNECTION_UUID">
      <source-position filename="nm-active-connection.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACTIVE_CONNECTION_VPN"
              value="vpn"
              c:type="NM_ACTIVE_CONNECTION_VPN">
      <source-position filename="nm-active-connection.h" line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="AccessPoint"
           c:symbol-prefix="access_point"
           c:type="NMAccessPoint"
           parent="Object"
           glib:type-name="NMAccessPoint"
           glib:get-type="nm_access_point_get_type"
           glib:type-struct="AccessPointClass">
      <source-position filename="nm-access-point.h" line="68"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="nm_access_point_new">
        <doc xml:space="preserve"
             filename="nm-access-point.c"
             line="74">Creates a new #NMAccessPoint.</doc>
        <source-position filename="nm-access-point.h" line="72"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-access-point.c"
               line="81">a new access point</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-access-point.c"
                 line="76">the #DBusGConnection</doc>
            <type name="DBusGLib.Connection" c:type="DBusGConnection*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-access-point.c"
                 line="77">the DBusobject path of the access point</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="connection_valid"
              c:identifier="nm_access_point_connection_valid">
        <doc xml:space="preserve"
             filename="nm-access-point.c"
             line="289">Validates a given connection against a given Wi-Fi access point to ensure that
the connection may be activated with that AP.  The connection must match the
@ap's SSID, (if given) BSSID, and other attributes like security settings,
channel, band, etc.</doc>
        <source-position filename="nm-access-point.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-access-point.c"
               line="299">%TRUE if the connection may be activated with this Wi-Fi AP,
%FALSE if it cannot be.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-access-point.c"
                 line="291">an #NMAccessPoint to validate @connection against</doc>
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-access-point.c"
                 line="292">an #NMConnection to validate against @ap</doc>
            <type name="NetworkManager.Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="filter_connections"
              c:identifier="nm_access_point_filter_connections">
        <doc xml:space="preserve"
             filename="nm-access-point.c"
             line="402">Filters a given list of connections for a given #NMAccessPoint object and
return connections which may be activated with the access point.  Any
returned connections will match the @ap's SSID and (if given) BSSID and
other attributes like security settings, channel, etc.

To obtain the list of connections that are compatible with this access point,
use nm_remote_settings_list_connections() and then filter the returned list
for a given #NMDevice using nm_device_filter_connections() and finally
filter that list with this function.</doc>
        <source-position filename="nm-access-point.h" line="86"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="nm-access-point.c"
               line="418">a
list of #NMConnection objects that could be activated with the given @ap.
The elements of the list are owned by their creator and should not be freed
by the caller, but the returned list itself is owned by the caller and should
be freed with g_slist_free() when it is no longer required.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="NetworkManager.Connection"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-access-point.c"
                 line="404">an #NMAccessPoint to filter connections for</doc>
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </instance-parameter>
          <parameter name="connections" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-access-point.c"
                 line="405">a list of
#NMConnection objects to filter</doc>
            <type name="GLib.SList" c:type="const GSList*">
              <type name="NetworkManager.Connection"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="get_bssid" c:identifier="nm_access_point_get_bssid">
        <doc xml:space="preserve"
             filename="nm-access-point.c"
             line="182">Gets the Basic Service Set ID (BSSID) of the Wi-Fi access point.</doc>
        <source-position filename="nm-access-point.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-access-point.c"
               line="188">the BSSID of the access point. This is an internal string and must
not be modified or freed.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-access-point.c"
                 line="184">a #NMAccessPoint</doc>
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags" c:identifier="nm_access_point_get_flags">
        <doc xml:space="preserve"
             filename="nm-access-point.c"
             line="95">Gets the flags of the access point.</doc>
        <source-position filename="nm-access-point.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-access-point.c"
               line="101">the flags</doc>
          <type name="NetworkManager.80211ApFlags" c:type="NM80211ApFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-access-point.c"
                 line="97">a #NMAccessPoint</doc>
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_frequency"
              c:identifier="nm_access_point_get_frequency">
        <doc xml:space="preserve"
             filename="nm-access-point.c"
             line="165">Gets the frequency of the access point in MHz.</doc>
        <source-position filename="nm-access-point.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-access-point.c"
               line="171">the frequency in MHz</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-access-point.c"
                 line="167">a #NMAccessPoint</doc>
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hw_address"
              c:identifier="nm_access_point_get_hw_address"
              deprecated="1"
              deprecated-version="0.9">
        <doc xml:space="preserve"
             filename="nm-access-point.c"
             line="200">Gets the hardware (MAC) address of the access point.</doc>
        <doc-deprecated xml:space="preserve">Use nm_access_point_get_bssid() instead.</doc-deprecated>
        <source-position filename="nm-access-point.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-access-point.c"
               line="206">the hardware address of the access point. This is the internal string used by the
access point and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-access-point.c"
                 line="202">a #NMAccessPoint</doc>
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_last_seen"
              c:identifier="nm_access_point_get_last_seen"
              version="1.2">
        <doc xml:space="preserve"
             filename="nm-access-point.c"
             line="268">Returns the timestamp (in CLOCK_BOOTTIME seconds) for the last time the
access point was found in scan results.  A value of -1 means the access
point has not been found in a scan.</doc>
        <source-position filename="nm-access-point.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-access-point.c"
               line="276">the last seen time in seconds</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-access-point.c"
                 line="270">a #NMAccessPoint</doc>
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max_bitrate"
              c:identifier="nm_access_point_get_max_bitrate">
        <doc xml:space="preserve"
             filename="nm-access-point.c"
             line="234">Gets the maximum bit rate of the access point in kbit/s.</doc>
        <source-position filename="nm-access-point.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-access-point.c"
               line="240">the maximum bit rate (kbit/s)</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-access-point.c"
                 line="236">a #NMAccessPoint</doc>
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode" c:identifier="nm_access_point_get_mode">
        <doc xml:space="preserve"
             filename="nm-access-point.c"
             line="217">Gets the mode of the access point.</doc>
        <source-position filename="nm-access-point.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-access-point.c"
               line="223">the mode</doc>
          <type name="NetworkManager.80211Mode" c:type="NM80211Mode"/>
        </return-value>
        <parameters>
          <instance-parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-access-point.c"
                 line="219">a #NMAccessPoint</doc>
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rsn_flags"
              c:identifier="nm_access_point_get_rsn_flags">
        <doc xml:space="preserve"
             filename="nm-access-point.c"
             line="129">Gets the RSN (Robust Secure Network, ie WPA version 2) flags of the access
point.</doc>
        <source-position filename="nm-access-point.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-access-point.c"
               line="136">the RSN flags</doc>
          <type name="NetworkManager.80211ApSecurityFlags"
                c:type="NM80211ApSecurityFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-access-point.c"
                 line="131">a #NMAccessPoint</doc>
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ssid" c:identifier="nm_access_point_get_ssid">
        <doc xml:space="preserve"
             filename="nm-access-point.c"
             line="147">Gets the SSID of the access point.</doc>
        <source-position filename="nm-access-point.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-access-point.c"
               line="153">the #GByteArray containing the SSID. This is the internal copy used by the
access point, and must not be modified.</doc>
          <array name="GLib.ByteArray" c:type="const GByteArray*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-access-point.c"
                 line="149">a #NMAccessPoint</doc>
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_strength" c:identifier="nm_access_point_get_strength">
        <doc xml:space="preserve"
             filename="nm-access-point.c"
             line="251">Gets the current signal strength of the access point as a percentage.</doc>
        <source-position filename="nm-access-point.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-access-point.c"
               line="257">the signal strength (0 to 100)</doc>
          <type name="guint8" c:type="guint8"/>
        </return-value>
        <parameters>
          <instance-parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-access-point.c"
                 line="253">a #NMAccessPoint</doc>
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wpa_flags"
              c:identifier="nm_access_point_get_wpa_flags">
        <doc xml:space="preserve"
             filename="nm-access-point.c"
             line="112">Gets the WPA (version 1) flags of the access point.</doc>
        <source-position filename="nm-access-point.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-access-point.c"
               line="118">the WPA flags</doc>
          <type name="NetworkManager.80211ApSecurityFlags"
                c:type="NM80211ApSecurityFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-access-point.c"
                 line="114">a #NMAccessPoint</doc>
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="bssid" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-access-point.c"
             line="643">The BSSID of the access point.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="flags" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-access-point.c"
             line="581">The flags of the access point.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="frequency" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-access-point.c"
             line="631">The frequency of the access point.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="hw-address" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-access-point.c"
             line="655">The hardware address of the access point.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="last-seen" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-access-point.c"
             line="705">The timestamp (in CLOCK_BOOTTIME seconds) for the last time the
access point was found in scan results.  A value of -1 means the
access point has not been found in a scan.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="max-bitrate" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-access-point.c"
             line="681">The maximum bit rate of the access point in kbit/s.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="mode" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-access-point.c"
             line="667">The mode of the access point; either "infrastructure" (a central
coordinator of the wireless network allowing clients to connect) or
"ad-hoc" (a network with no central controller).</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="rsn-flags" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-access-point.c"
             line="607">The RSN flags of the access point.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="ssid" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-access-point.c"
             line="619">The SSID of the access point.</doc>
        <type name="Ssid"/>
      </property>
      <property name="strength" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-access-point.c"
             line="693">The current signal strength of the access point.</doc>
        <type name="guint8" c:type="guint8"/>
      </property>
      <property name="wpa-flags" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-access-point.c"
             line="595">The WPA flags of the access point.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="Object" c:type="NMObject"/>
      </field>
    </class>
    <record name="AccessPointClass"
            c:type="NMAccessPointClass"
            glib:is-gtype-struct-for="AccessPoint">
      <source-position filename="nm-access-point.h" line="68"/>
      <field name="parent">
        <type name="ObjectClass" c:type="NMObjectClass"/>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <source-position filename="nm-access-point.h" line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <source-position filename="nm-access-point.h" line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <source-position filename="nm-access-point.h" line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved4" introspectable="0">
        <callback name="_reserved4">
          <source-position filename="nm-access-point.h" line="65"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved5" introspectable="0">
        <callback name="_reserved5">
          <source-position filename="nm-access-point.h" line="66"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved6" introspectable="0">
        <callback name="_reserved6">
          <source-position filename="nm-access-point.h" line="67"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="ActiveConnection"
           c:symbol-prefix="active_connection"
           c:type="NMActiveConnection"
           parent="Object"
           glib:type-name="NMActiveConnection"
           glib:get-type="nm_active_connection_get_type"
           glib:type-struct="ActiveConnectionClass">
      <source-position filename="nm-active-connection.h" line="74"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="nm_active_connection_new">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="92">Creates a new #NMActiveConnection.</doc>
        <source-position filename="nm-active-connection.h" line="78"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-active-connection.c"
               line="99">a new active connection</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-active-connection.c"
                 line="94">the #DBusGConnection</doc>
            <type name="DBusGLib.Connection" c:type="DBusGConnection*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-active-connection.c"
                 line="95">the DBus object path of the device</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_connection"
              c:identifier="nm_active_connection_get_connection">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="207">Gets the #NMConnection's DBus object path.  This is often used with
nm_remote_settings_get_connection_by_path() to retrieve the
#NMRemoteConnection object that describes the connection.</doc>
        <source-position filename="nm-active-connection.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-active-connection.c"
               line="215">the object path of the #NMConnection which this #NMActiveConnection
is an active instance of.  This is the internal string used by the
connection, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-active-connection.c"
                 line="209">a #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connection_type"
              c:identifier="nm_active_connection_get_connection_type"
              version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="266">Gets the #NMConnection's type.</doc>
        <source-position filename="nm-active-connection.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-active-connection.c"
               line="272">the type of the #NMConnection that backs the #NMActiveConnection.
This is the internal string used by the connection, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-active-connection.c"
                 line="268">a #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_default"
              c:identifier="nm_active_connection_get_default">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="339">Whether the active connection is the default IPv4 one (that is, is used for
the default IPv4 route and DNS information).</doc>
        <source-position filename="nm-active-connection.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-active-connection.c"
               line="346">%TRUE if the active connection is the default IPv4 connection</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-active-connection.c"
                 line="341">a #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_default6"
              c:identifier="nm_active_connection_get_default6">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="400">Whether the active connection is the default IPv6 one (that is, is used for
the default IPv6 route and DNS information).</doc>
        <source-position filename="nm-active-connection.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-active-connection.c"
               line="407">%TRUE if the active connection is the default IPv6 connection</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-active-connection.c"
                 line="402">a #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_devices"
              c:identifier="nm_active_connection_get_devices">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="304">Gets the #NMDevices used for the active connections.</doc>
        <source-position filename="nm-active-connection.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-active-connection.c"
               line="310">the #GPtrArray containing #NMDevices.
This is the internal copy used by the connection, and must not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="Device"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-active-connection.c"
                 line="306">a #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dhcp4_config"
              c:identifier="nm_active_connection_get_dhcp4_config"
              version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="378">Gets the current #NMDHCP4Config (if any) associated with the
#NMActiveConnection.</doc>
        <source-position filename="nm-active-connection.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-active-connection.c"
               line="385">the #NMDHCP4Config, or %NULL if the
  connection does not use DHCP, or is not in the
  %NM_ACTIVE_CONNECTION_STATE_ACTIVATED state.</doc>
          <type name="DHCP4Config" c:type="NMDHCP4Config*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-active-connection.c"
                 line="380">an #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dhcp6_config"
              c:identifier="nm_active_connection_get_dhcp6_config"
              version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="439">Gets the current #NMDHCP6Config (if any) associated with the
#NMActiveConnection.</doc>
        <source-position filename="nm-active-connection.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-active-connection.c"
               line="446">the #NMDHCP6Config, or %NULL if the
  connection does not use DHCPv6, or is not in the
  %NM_ACTIVE_CONNECTION_STATE_ACTIVATED state.</doc>
          <type name="DHCP6Config" c:type="NMDHCP6Config*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-active-connection.c"
                 line="441">an #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="nm_active_connection_get_id"
              version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="228">Gets the #NMConnection's ID.</doc>
        <source-position filename="nm-active-connection.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-active-connection.c"
               line="234">the ID of the #NMConnection that backs the #NMActiveConnection.
This is the internal string used by the connection, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-active-connection.c"
                 line="230">a #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ip4_config"
              c:identifier="nm_active_connection_get_ip4_config"
              version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="357">Gets the current #NMIP4Config associated with the #NMActiveConnection.</doc>
        <source-position filename="nm-active-connection.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-active-connection.c"
               line="363">the #NMIP4Config, or %NULL if the
  connection is not in the %NM_ACTIVE_CONNECTION_STATE_ACTIVATED
  state.</doc>
          <type name="IP4Config" c:type="NMIP4Config*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-active-connection.c"
                 line="359">an #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ip6_config"
              c:identifier="nm_active_connection_get_ip6_config"
              version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="418">Gets the current #NMIP6Config associated with the #NMActiveConnection.</doc>
        <source-position filename="nm-active-connection.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-active-connection.c"
               line="424">the #NMIP6Config, or %NULL if the
  connection is not in the %NM_ACTIVE_CONNECTION_STATE_ACTIVATED
  state.</doc>
          <type name="IP6Config" c:type="NMIP6Config*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-active-connection.c"
                 line="420">an #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_master" c:identifier="nm_active_connection_get_master">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="480">Gets the path to the master #NMDevice of the connection.</doc>
        <source-position filename="nm-active-connection.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-active-connection.c"
               line="486">the path of the master #NMDevice of the #NMActiveConnection.
This is the internal string used by the connection, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-active-connection.c"
                 line="482">a #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_specific_object"
              c:identifier="nm_active_connection_get_specific_object">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="286">Gets the "specific object" used at the activation.</doc>
        <source-position filename="nm-active-connection.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-active-connection.c"
               line="292">the specific object's DBus path. This is the internal string used by the
connection, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-active-connection.c"
                 line="288">a #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state" c:identifier="nm_active_connection_get_state">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="322">Gets the active connection's state.</doc>
        <source-position filename="nm-active-connection.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-active-connection.c"
               line="328">the state</doc>
          <type name="NetworkManager.ActiveConnectionState"
                c:type="NMActiveConnectionState"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-active-connection.c"
                 line="324">a #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid" c:identifier="nm_active_connection_get_uuid">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="248">Gets the #NMConnection's UUID.</doc>
        <source-position filename="nm-active-connection.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-active-connection.c"
               line="254">the UUID of the #NMConnection that backs the #NMActiveConnection.
This is the internal string used by the connection, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-active-connection.c"
                 line="250">a #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vpn"
              c:identifier="nm_active_connection_get_vpn"
              version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="461">Whether the active connection is a VPN connection.</doc>
        <source-position filename="nm-active-connection.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-active-connection.c"
               line="467">%TRUE if the active connection is a VPN connection</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-active-connection.c"
                 line="463">a #NMActiveConnection</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="connection" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="656">The connection's path of the active connection.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="default" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="746">Whether the active connection is the default IPv4 one.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="default6" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="786">Whether the active connection is the default IPv6 one.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="devices" transfer-ownership="none">
        <type name="ObjectArray"/>
      </property>
      <property name="dhcp4-config" version="0.9.10" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="772">The #NMDHCP4Config of the connection.</doc>
        <type name="DHCP4Config"/>
      </property>
      <property name="dhcp6-config" version="0.9.10" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="812">The #NMDHCP6Config of the connection.</doc>
        <type name="DHCP6Config"/>
      </property>
      <property name="id" version="0.9.10" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="668">The active connection's ID</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ip4-config" version="0.9.10" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="758">The #NMIP4Config of the connection.</doc>
        <type name="IP4Config"/>
      </property>
      <property name="ip6-config" version="0.9.10" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="798">The #NMIP6Config of the connection.</doc>
        <type name="IP6Config"/>
      </property>
      <property name="master" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="840">The path of the master device if one exists.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="specific-object" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="708">The specific object's path of the active connection.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="state" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="732">The state of the active connection.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="type" version="0.9.10" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="694">The active connection's type</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="uuid" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="682">The active connection's UUID</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="vpn" version="0.9.10" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-active-connection.c"
             line="826">Whether the active connection is a VPN connection.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="Object" c:type="NMObject"/>
      </field>
    </class>
    <record name="ActiveConnectionClass"
            c:type="NMActiveConnectionClass"
            glib:is-gtype-struct-for="ActiveConnection">
      <source-position filename="nm-active-connection.h" line="74"/>
      <field name="parent">
        <type name="ObjectClass" c:type="NMObjectClass"/>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <source-position filename="nm-active-connection.h" line="68"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <source-position filename="nm-active-connection.h" line="69"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <source-position filename="nm-active-connection.h" line="70"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved4" introspectable="0">
        <callback name="_reserved4">
          <source-position filename="nm-active-connection.h" line="71"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved5" introspectable="0">
        <callback name="_reserved5">
          <source-position filename="nm-active-connection.h" line="72"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved6" introspectable="0">
        <callback name="_reserved6">
          <source-position filename="nm-active-connection.h" line="73"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <constant name="CLIENT_ACTIVATING_CONNECTION"
              value="activating-connection"
              c:type="NM_CLIENT_ACTIVATING_CONNECTION">
      <source-position filename="nm-client.h" line="58"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_ACTIVE_CONNECTIONS"
              value="active-connections"
              c:type="NM_CLIENT_ACTIVE_CONNECTIONS">
      <source-position filename="nm-client.h" line="55"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_ALL_DEVICES"
              value="all-devices"
              c:type="NM_CLIENT_ALL_DEVICES">
      <source-position filename="nm-client.h" line="60"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_CONNECTIVITY"
              value="connectivity"
              c:type="NM_CLIENT_CONNECTIVITY">
      <source-position filename="nm-client.h" line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_DEVICES" value="devices" c:type="NM_CLIENT_DEVICES">
      <source-position filename="nm-client.h" line="59"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_MANAGER_RUNNING"
              value="manager-running"
              c:type="NM_CLIENT_MANAGER_RUNNING">
      <source-position filename="nm-client.h" line="47"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_NETWORKING_ENABLED"
              value="networking-enabled"
              c:type="NM_CLIENT_NETWORKING_ENABLED">
      <source-position filename="nm-client.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_PRIMARY_CONNECTION"
              value="primary-connection"
              c:type="NM_CLIENT_PRIMARY_CONNECTION">
      <source-position filename="nm-client.h" line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_STARTUP" value="startup" c:type="NM_CLIENT_STARTUP">
      <source-position filename="nm-client.h" line="46"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_STATE" value="state" c:type="NM_CLIENT_STATE">
      <source-position filename="nm-client.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_VERSION" value="version" c:type="NM_CLIENT_VERSION">
      <source-position filename="nm-client.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_WIMAX_ENABLED"
              value="wimax-enabled"
              c:type="NM_CLIENT_WIMAX_ENABLED">
      <source-position filename="nm-client.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_WIMAX_HARDWARE_ENABLED"
              value="wimax-hardware-enabled"
              c:type="NM_CLIENT_WIMAX_HARDWARE_ENABLED">
      <source-position filename="nm-client.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_WIRELESS_ENABLED"
              value="wireless-enabled"
              c:type="NM_CLIENT_WIRELESS_ENABLED">
      <source-position filename="nm-client.h" line="49"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_WIRELESS_HARDWARE_ENABLED"
              value="wireless-hardware-enabled"
              c:type="NM_CLIENT_WIRELESS_HARDWARE_ENABLED">
      <source-position filename="nm-client.h" line="50"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_WWAN_ENABLED"
              value="wwan-enabled"
              c:type="NM_CLIENT_WWAN_ENABLED">
      <source-position filename="nm-client.h" line="51"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_WWAN_HARDWARE_ENABLED"
              value="wwan-hardware-enabled"
              c:type="NM_CLIENT_WWAN_HARDWARE_ENABLED">
      <source-position filename="nm-client.h" line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Client"
           c:symbol-prefix="client"
           c:type="NMClient"
           parent="Object"
           glib:type-name="NMClient"
           glib:get-type="nm_client_get_type"
           glib:type-struct="ClientClass">
      <source-position filename="nm-client.h" line="177"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="nm_client_new">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="1665">Creates a new #NMClient.

Note that this will do blocking D-Bus calls to initialize the
client. You can use nm_client_new_async() if you want to avoid
that.

NOTE: #NMClient provides information about devices and a mechanism to
control them.  To access and modify network configuration data, use the
#NMRemoteSettings object.</doc>
        <source-position filename="nm-client.h" line="181"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-client.c"
               line="1678">a new #NMClient or NULL on an error</doc>
          <type name="Client" c:type="NMClient*"/>
        </return-value>
      </constructor>
      <constructor name="new_finish"
                   c:identifier="nm_client_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="1749">Gets the result of an nm_client_new_async() call.</doc>
        <source-position filename="nm-client.h" line="186"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-client.c"
               line="1756">a new #NMClient, or %NULL on error</doc>
          <type name="Client" c:type="NMClient*"/>
        </return-value>
        <parameters>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1751">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new_async" c:identifier="nm_client_new_async">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="1710">Creates a new #NMClient and begins asynchronously initializing it.
@callback will be called when it is done; use
nm_client_new_finish() to get the result. Note that on an error,
the callback can be invoked with two first parameters as NULL.

NOTE: #NMClient provides information about devices and a mechanism to
control them.  To access and modify network configuration data, use the
#NMRemoteSettings object.</doc>
        <source-position filename="nm-client.h" line="183"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1712">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1713">callback to call when the client is created</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1714">data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="device_added">
        <source-position filename="nm-client.h" line="164"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="Device" c:type="NMDevice*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="device_removed">
        <source-position filename="nm-client.h" line="165"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="Device" c:type="NMDevice*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="permission_changed">
        <source-position filename="nm-client.h" line="166"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="permission" transfer-ownership="none">
            <type name="ClientPermission" c:type="NMClientPermission"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="ClientPermissionResult"
                  c:type="NMClientPermissionResult"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="activate_connection"
              c:identifier="nm_client_activate_connection">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="612">Starts a connection to a particular network using the configuration settings
from @connection and the network device @device.  Certain connection types
also take a "specific object" which is the object path of a connection-
specific object, like an #NMAccessPoint for Wi-Fi connections, or an
#NMWimaxNsp for WiMAX connections, to which you wish to connect.  If the
specific object is not given, NetworkManager can, in some cases, automatically
determine which network to connect to given the settings in @connection.

If @connection is not given for a device-based activation, NetworkManager
picks the best available connection for the device and activates it.

Note that the callback is invoked when NetworkManager has started activating
the new connection, not when it finishes. You can used the returned
#NMActiveConnection object (in particular, #NMActiveConnection:state) to
track the activation to its completion.</doc>
        <source-position filename="nm-client.h" line="200"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="614">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="connection"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="615">an #NMConnection</doc>
            <type name="NetworkManager.Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="device"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="616">the #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </parameter>
          <parameter name="specific_object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="617">the object path of a connection-type-specific
  object this activation should use. This parameter is currently ignored for
  wired and mobile broadband connections, and the value of %NULL should be used
  (ie, no specific object).  For Wi-Fi or WiMAX connections, pass the object
  path of a #NMAccessPoint or #NMWimaxNsp owned by @device, which you can
  get using nm_object_get_path(), and which will be used to complete the
  details of the newly added connection.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="624">the function to call when the call is done</doc>
            <type name="ClientActivateFn" c:type="NMClientActivateFn"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="625">user data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_and_activate_connection"
              c:identifier="nm_client_add_and_activate_connection">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="705">Adds a new connection using the given details (if any) as a template,
automatically filling in missing settings with the capabilities of the
given device and specific object.  The new connection is then activated.
Cannot be used for VPN connections at this time.

Note that the callback is invoked when NetworkManager has started activating
the new connection, not when it finishes. You can used the returned
#NMActiveConnection object (in particular, #NMActiveConnection:state) to
track the activation to its completion.</doc>
        <source-position filename="nm-client.h" line="213"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="707">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="partial"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="708">an #NMConnection to add; the connection may be
  partially filled (or even %NULL) and will be completed by NetworkManager
  using the given @device and @specific_object before being added</doc>
            <type name="NetworkManager.Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="711">the #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </parameter>
          <parameter name="specific_object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="712">the object path of a connection-type-specific
  object this activation should use. This parameter is currently ignored for
  wired and mobile broadband connections, and the value of %NULL should be used
  (ie, no specific object).  For Wi-Fi or WiMAX connections, pass the object
  path of a #NMAccessPoint or #NMWimaxNsp owned by @device, which you can
  get using nm_object_get_path(), and which will be used to complete the
  details of the newly added connection.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="719">the function to call when the call is done</doc>
            <type name="ClientAddActivateFn" c:type="NMClientAddActivateFn"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="720">user data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_connectivity"
              c:identifier="nm_client_check_connectivity"
              version="0.9.8.6"
              throws="1">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="1490">Updates the network connectivity state and returns the (new)
current state. Contrast nm_client_get_connectivity(), which returns
the most recent known state without re-checking.

This is a blocking call; use nm_client_check_connectivity_async()
if you do not want to block.</doc>
        <source-position filename="nm-client.h" line="253"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-client.c"
               line="1503">the (new) current connectivity state</doc>
          <type name="NetworkManager.ConnectivityState"
                c:type="NMConnectivityState"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1492">an #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1493">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_connectivity_async"
              c:identifier="nm_client_check_connectivity_async"
              version="0.9.8.6">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="1583">Asynchronously updates the network connectivity state and invokes
@callback when complete. Contrast nm_client_get_connectivity(),
which (immediately) returns the most recent known state without
re-checking, and nm_client_check_connectivity(), which blocks.</doc>
        <source-position filename="nm-client.h" line="256"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1585">an #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1586">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1587">callback to call with the result</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1588">data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_connectivity_finish"
              c:identifier="nm_client_check_connectivity_finish"
              version="0.9.8.6"
              throws="1">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="1632">Retrieves the result of an nm_client_check_connectivity_async()
call.</doc>
        <source-position filename="nm-client.h" line="260"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-client.c"
               line="1641">the (new) current connectivity state</doc>
          <type name="NetworkManager.ConnectivityState"
                c:type="NMConnectivityState"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1634">an #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1635">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="deactivate_connection"
              c:identifier="nm_client_deactivate_connection">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="786">Deactivates an active #NMActiveConnection.</doc>
        <source-position filename="nm-client.h" line="220"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="788">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="active" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="789">the #NMActiveConnection to deactivate</doc>
            <type name="ActiveConnection" c:type="NMActiveConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_activating_connection"
              c:identifier="nm_client_get_activating_connection"
              version="0.9.8.6">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="1296">Gets the #NMActiveConnection corresponding to a
currently-activating connection that is expected to become the new
#NMClient:primary-connection upon successful activation.</doc>
        <source-position filename="nm-client.h" line="265"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-client.c"
               line="1304">the appropriate #NMActiveConnection, if
any.</doc>
          <type name="ActiveConnection" c:type="NMActiveConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1298">an #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_active_connections"
              c:identifier="nm_client_get_active_connections">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="818">Gets the active connections.</doc>
        <source-position filename="nm-client.h" line="242"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-client.c"
               line="824">a #GPtrArray
 containing all the active #NMActiveConnections.
The returned array is owned by the client and should not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="ActiveConnection"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="820">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_all_devices"
              c:identifier="nm_client_get_all_devices"
              version="1.2">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="380">Gets both real devices and device placeholders (eg, software devices which
do not currently exist, but could be created automatically by NetworkManager
if one of their NMDevice::ActivatableConnections was activated).  Use
nm_device_is_real() to determine whether each device is a real device or
a placeholder.

Use nm_device_get_type() or the NM_IS_DEVICE_XXXX() functions to determine
what kind of device each member of the returned array is, and then you may
use device-specific methods such as nm_device_ethernet_get_hw_address().</doc>
        <source-position filename="nm-client.h" line="191"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-client.c"
               line="394">a #GPtrArray
containing all the #NMDevices.  The returned array is owned by the
#NMClient object and should not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="Device"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="382">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connectivity"
              c:identifier="nm_client_get_connectivity"
              version="0.9.8.6">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="1465">Gets the current network connectivity state. Contrast
nm_client_check_connectivity() and
nm_client_check_connectivity_async(), which re-check the
connectivity state first before returning any information.</doc>
        <source-position filename="nm-client.h" line="251"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-client.c"
               line="1474">the current connectivity state</doc>
          <type name="NetworkManager.ConnectivityState"
                c:type="NMConnectivityState"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1467">an #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_device_by_iface"
              c:identifier="nm_client_get_device_by_iface">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="442">Gets a #NMDevice from a #NMClient.</doc>
        <source-position filename="nm-client.h" line="193"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-client.c"
               line="449">the #NMDevice for the given @iface or %NULL if none is found.</doc>
          <type name="Device" c:type="NMDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="444">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="445">the interface name to search for</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device_by_path"
              c:identifier="nm_client_get_device_by_path">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="408">Gets a #NMDevice from a #NMClient.</doc>
        <source-position filename="nm-client.h" line="192"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-client.c"
               line="415">the #NMDevice for the given @object_path or %NULL if none is found.</doc>
          <type name="Device" c:type="NMDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="410">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="411">the object path to search for</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_devices" c:identifier="nm_client_get_devices">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="357">Gets all the known network devices.  Use nm_device_get_type() or the
&lt;literal&gt;NM_IS_DEVICE_XXXX&lt;/literal&gt; functions to determine what kind of
device member of the returned array is, and then you may use device-specific
methods such as nm_device_ethernet_get_hw_address().</doc>
        <source-position filename="nm-client.h" line="189"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-client.c"
               line="366">a #GPtrArray
containing all the #NMDevices.  The returned array is owned by the
#NMClient object and should not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="Device"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="359">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_logging"
              c:identifier="nm_client_get_logging"
              version="0.9.8"
              throws="1">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="1182">Gets NetworkManager current logging level and domains.</doc>
        <source-position filename="nm-client.h" line="248"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-client.c"
               line="1192">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1184">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="level"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1185">return location for logging level string</doc>
            <type name="utf8" c:type="char**"/>
          </parameter>
          <parameter name="domains"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1186">return location for log domains string. The string is
  a list of domains separated by ","</doc>
            <type name="utf8" c:type="char**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_manager_running"
              c:identifier="nm_client_get_manager_running">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="1144">Determines whether the daemon is running.</doc>
        <source-position filename="nm-client.h" line="241"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-client.c"
               line="1150">%TRUE if the daemon is running</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1146">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_permission_result"
              c:identifier="nm_client_get_permission_result">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="1160">Requests the result of a specific permission, which indicates whether the
client can or cannot perform the action the permission represents</doc>
        <source-position filename="nm-client.h" line="245"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-client.c"
               line="1168">the permission's result, one of #NMClientPermissionResult</doc>
          <type name="ClientPermissionResult"
                c:type="NMClientPermissionResult"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1162">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="permission" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1163">the permission for which to return the result, one of #NMClientPermission</doc>
            <type name="ClientPermission" c:type="NMClientPermission"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_primary_connection"
              c:identifier="nm_client_get_primary_connection"
              version="0.9.8.6">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="1266">Gets the #NMActiveConnection corresponding to the primary active
network device.

In particular, when there is no VPN active, or the VPN does not
have the default route, this returns the active connection that has
the default route. If there is a VPN active with the default route,
then this function returns the active connection that contains the
route to the VPN endpoint.

If there is no default route, or the default route is over a
non-NetworkManager-recognized device, this will return %NULL.</doc>
        <source-position filename="nm-client.h" line="264"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-client.c"
               line="1282">the appropriate #NMActiveConnection, if
any</doc>
          <type name="ActiveConnection" c:type="NMActiveConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1268">an #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_startup"
              c:identifier="nm_client_get_startup"
              version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="1064">Tests whether the daemon is still in the process of activating
connections at startup.</doc>
        <source-position filename="nm-client.h" line="240"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-client.c"
               line="1071">whether the daemon is still starting up</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1066">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state" c:identifier="nm_client_get_state">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="1046">Gets the current daemon state.</doc>
        <source-position filename="nm-client.h" line="238"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-client.c"
               line="1052">the current %NMState</doc>
          <type name="NetworkManager.State" c:type="NMState"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1048">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version" c:identifier="nm_client_get_version">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="1024">Gets NetworkManager version.</doc>
        <source-position filename="nm-client.h" line="237"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-client.c"
               line="1030">string with the version</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1026">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="networking_get_enabled"
              c:identifier="nm_client_networking_get_enabled">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="1085">Whether networking is enabled or disabled.</doc>
        <source-position filename="nm-client.h" line="222"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-client.c"
               line="1091">%TRUE if networking is enabled, %FALSE if networking is disabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1087">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="networking_set_enabled"
              c:identifier="nm_client_networking_set_enabled">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="1102">Enables or disables networking.  When networking is disabled, all controlled
interfaces are disconnected and deactivated.  When networking is enabled,
all controlled interfaces are available for activation.</doc>
        <source-position filename="nm-client.h" line="223"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1104">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1105">%TRUE to set networking enabled, %FALSE to set networking disabled</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_logging"
              c:identifier="nm_client_set_logging"
              version="0.9.8"
              throws="1">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="1225">Sets NetworkManager logging level and/or domains.</doc>
        <source-position filename="nm-client.h" line="249"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-client.c"
               line="1235">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1227">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="level"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1228">logging level to set (%NULL or an empty string for no change)</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="domains"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1229">logging domains to set. The string should be a list of log
  domains separated by ",". (%NULL or an empty string for no change)</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sleep" c:identifier="nm_client_sleep">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="1131">Deprecated; use nm_client_networking_set_enabled() instead.</doc>
        <source-position filename="nm-client.h" line="243"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1133">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="sleep_" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1134">%TRUE to put the daemon to sleep</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="wimax_get_enabled"
              c:identifier="nm_client_wimax_get_enabled">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="964">Determines whether WiMAX is enabled.</doc>
        <source-position filename="nm-client.h" line="233"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-client.c"
               line="970">%TRUE if WiMAX is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="966">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="wimax_hardware_get_enabled"
              c:identifier="nm_client_wimax_hardware_get_enabled">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="1007">Determines whether the WiMAX hardware is enabled.</doc>
        <source-position filename="nm-client.h" line="235"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-client.c"
               line="1013">%TRUE if the WiMAX hardware is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="1009">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="wimax_set_enabled"
              c:identifier="nm_client_wimax_set_enabled">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="981">Enables or disables WiMAX devices.</doc>
        <source-position filename="nm-client.h" line="234"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="983">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="984">%TRUE to enable WiMAX</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="wireless_get_enabled"
              c:identifier="nm_client_wireless_get_enabled">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="844">Determines whether the wireless is enabled.</doc>
        <source-position filename="nm-client.h" line="225"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-client.c"
               line="850">%TRUE if wireless is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="846">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="wireless_hardware_get_enabled"
              c:identifier="nm_client_wireless_hardware_get_enabled">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="887">Determines whether the wireless hardware is enabled.</doc>
        <source-position filename="nm-client.h" line="227"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-client.c"
               line="893">%TRUE if the wireless hardware is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="889">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="wireless_set_enabled"
              c:identifier="nm_client_wireless_set_enabled">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="861">Enables or disables wireless devices.</doc>
        <source-position filename="nm-client.h" line="226"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="863">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="864">%TRUE to enable wireless</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="wwan_get_enabled"
              c:identifier="nm_client_wwan_get_enabled">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="904">Determines whether WWAN is enabled.</doc>
        <source-position filename="nm-client.h" line="229"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-client.c"
               line="910">%TRUE if WWAN is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="906">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="wwan_hardware_get_enabled"
              c:identifier="nm_client_wwan_hardware_get_enabled">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="947">Determines whether the WWAN hardware is enabled.</doc>
        <source-position filename="nm-client.h" line="231"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-client.c"
               line="953">%TRUE if the WWAN hardware is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="949">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="wwan_set_enabled"
              c:identifier="nm_client_wwan_set_enabled">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="921">Enables or disables WWAN devices.</doc>
        <source-position filename="nm-client.h" line="230"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="923">a #NMClient</doc>
            <type name="Client" c:type="NMClient*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="924">%TRUE to enable WWAN</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="activating-connection"
                version="0.9.8.6"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="2372">The #NMActiveConnection of the activating connection that is
likely to become the new #NMClient:primary-connection.</doc>
        <type name="ActiveConnection"/>
      </property>
      <property name="active-connections" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="2331">The active connections.</doc>
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="all-devices" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="2401">List of both real devices and device placeholders.</doc>
        <type name="ObjectArray"/>
      </property>
      <property name="connectivity"
                version="0.9.8.6"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="2343">The network connectivity state.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="devices" version="0.9.10" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="2387">List of real network devices.  Does not include placeholder devices.</doc>
        <type name="ObjectArray"/>
      </property>
      <property name="manager-running" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="2235">Whether the daemon is running.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="networking-enabled"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="2247">Whether networking is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="primary-connection"
                version="0.9.8.6"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="2357">The #NMActiveConnection of the device with the default route;
see nm_client_get_primary_connection() for more details.</doc>
        <type name="ActiveConnection"/>
      </property>
      <property name="startup" version="0.9.10" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="2221">Whether the daemon is still starting up.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="state" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="2209">The current daemon state.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="version" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="2197">The NetworkManager version.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="wimax-enabled" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="2307">Whether WiMAX functionality is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="wimax-hardware-enabled" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="2319">Whether the WiMAX hardware is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="wireless-enabled" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="2259">Whether wireless is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="wireless-hardware-enabled" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="2271">Whether the wireless hardware is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="wwan-enabled" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="2283">Whether WWAN functionality is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="wwan-hardware-enabled" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="2295">Whether the WWAN hardware is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="Object" c:type="NMObject"/>
      </field>
      <glib:signal name="any-device-added" when="first">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="2451">Notifies that a #NMDevice is added.  This signal is emitted for both
regular devices and placeholder devices.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="2454">the new device</doc>
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="any-device-removed" when="first">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="2467">Notifies that a #NMDevice is removed.  This signal is emitted for both
regular devices and placeholder devices.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="2470">the removed device</doc>
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="device-added" when="first">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="2417">Notifies that a #NMDevice is added.  This signal is not emitted for
placeholder devices.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="2420">the new device</doc>
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="device-removed" when="first">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="2434">Notifies that a #NMDevice is removed.  This signal is not emitted for
placeholder devices.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="2437">the removed device</doc>
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="permission-changed" when="first">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="2483">Notifies that a permission has changed</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="permission" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="2486">a permission from #NMClientPermission</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-client.c"
                 line="2487">the permission's result, one of #NMClientPermissionResult</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <callback name="ClientActivateFn" c:type="NMClientActivateFn">
      <source-position filename="nm-client.h" line="195"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="client" transfer-ownership="none">
          <type name="Client" c:type="NMClient*"/>
        </parameter>
        <parameter name="active_connection" transfer-ownership="none">
          <type name="ActiveConnection" c:type="NMActiveConnection*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <type name="GLib.Error" c:type="GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ClientAddActivateFn" c:type="NMClientAddActivateFn">
      <source-position filename="nm-client.h" line="207"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="client" transfer-ownership="none">
          <type name="Client" c:type="NMClient*"/>
        </parameter>
        <parameter name="connection" transfer-ownership="none">
          <type name="ActiveConnection" c:type="NMActiveConnection*"/>
        </parameter>
        <parameter name="new_connection_path" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <type name="GLib.Error" c:type="GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="4">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="ClientClass"
            c:type="NMClientClass"
            glib:is-gtype-struct-for="Client">
      <source-position filename="nm-client.h" line="177"/>
      <field name="parent">
        <type name="ObjectClass" c:type="NMObjectClass"/>
      </field>
      <field name="device_added">
        <callback name="device_added">
          <source-position filename="nm-client.h" line="164"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="NMClient*"/>
            </parameter>
            <parameter name="device" transfer-ownership="none">
              <type name="Device" c:type="NMDevice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="device_removed">
        <callback name="device_removed">
          <source-position filename="nm-client.h" line="165"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="NMClient*"/>
            </parameter>
            <parameter name="device" transfer-ownership="none">
              <type name="Device" c:type="NMDevice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="permission_changed">
        <callback name="permission_changed">
          <source-position filename="nm-client.h" line="166"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="NMClient*"/>
            </parameter>
            <parameter name="permission" transfer-ownership="none">
              <type name="ClientPermission" c:type="NMClientPermission"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="ClientPermissionResult"
                    c:type="NMClientPermissionResult"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <source-position filename="nm-client.h" line="171"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <source-position filename="nm-client.h" line="172"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <source-position filename="nm-client.h" line="173"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved4" introspectable="0">
        <callback name="_reserved4">
          <source-position filename="nm-client.h" line="174"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved5" introspectable="0">
        <callback name="_reserved5">
          <source-position filename="nm-client.h" line="175"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved6" introspectable="0">
        <callback name="_reserved6">
          <source-position filename="nm-client.h" line="176"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="ClientError"
                 glib:type-name="NMClientError"
                 glib:get-type="nm_client_error_get_type"
                 c:type="NMClientError"
                 glib:error-domain="nm-client-error-quark">
      <doc xml:space="preserve"
           filename="nm-client.h"
           line="139">Describes errors that may result from operations involving a #NMClient.</doc>
      <member name="UnknownError"
              value="0"
              c:identifier="NM_CLIENT_ERROR_UNKNOWN"
              glib:nick="UnknownError">
        <doc xml:space="preserve"
             filename="nm-client.h"
             line="141">unknown or unclassified error</doc>
      </member>
      <member name="ManagerNotRunning"
              value="1"
              c:identifier="NM_CLIENT_ERROR_MANAGER_NOT_RUNNING"
              glib:nick="ManagerNotRunning">
        <doc xml:space="preserve"
             filename="nm-client.h"
             line="142">an operation that requires NetworkManager
  failed because NetworkManager is not running</doc>
      </member>
      <function name="quark"
                c:identifier="nm_client_error_quark"
                version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="132">Registers an error quark for #NMClient if necessary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-client.c"
               line="137">the error quark used for #NMClient errors.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <enumeration name="ClientPermission"
                 glib:type-name="NMClientPermission"
                 glib:get-type="nm_client_permission_get_type"
                 c:type="NMClientPermission">
      <doc xml:space="preserve"
           filename="nm-client.h"
           line="62">#NMClientPermission values indicate various permissions that NetworkManager
clients can obtain to perform certain tasks on behalf of the current user.</doc>
      <member name="none"
              value="0"
              c:identifier="NM_CLIENT_PERMISSION_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="nm-client.h"
             line="64">unknown or no permission</doc>
      </member>
      <member name="enable_disable_network"
              value="1"
              c:identifier="NM_CLIENT_PERMISSION_ENABLE_DISABLE_NETWORK"
              glib:nick="enable-disable-network">
        <doc xml:space="preserve"
             filename="nm-client.h"
             line="65">controls whether networking
 can be globally enabled or disabled</doc>
      </member>
      <member name="enable_disable_wifi"
              value="2"
              c:identifier="NM_CLIENT_PERMISSION_ENABLE_DISABLE_WIFI"
              glib:nick="enable-disable-wifi">
        <doc xml:space="preserve"
             filename="nm-client.h"
             line="67">controls whether Wi-Fi can be
 globally enabled or disabled</doc>
      </member>
      <member name="enable_disable_wwan"
              value="3"
              c:identifier="NM_CLIENT_PERMISSION_ENABLE_DISABLE_WWAN"
              glib:nick="enable-disable-wwan">
        <doc xml:space="preserve"
             filename="nm-client.h"
             line="69">controls whether WWAN (3G) can be
 globally enabled or disabled</doc>
      </member>
      <member name="enable_disable_wimax"
              value="4"
              c:identifier="NM_CLIENT_PERMISSION_ENABLE_DISABLE_WIMAX"
              glib:nick="enable-disable-wimax">
        <doc xml:space="preserve"
             filename="nm-client.h"
             line="71">controls whether WiMAX can be
 globally enabled or disabled</doc>
      </member>
      <member name="sleep_wake"
              value="5"
              c:identifier="NM_CLIENT_PERMISSION_SLEEP_WAKE"
              glib:nick="sleep-wake">
        <doc xml:space="preserve"
             filename="nm-client.h"
             line="73">controls whether the client can ask
 NetworkManager to sleep and wake</doc>
      </member>
      <member name="network_control"
              value="6"
              c:identifier="NM_CLIENT_PERMISSION_NETWORK_CONTROL"
              glib:nick="network-control">
        <doc xml:space="preserve"
             filename="nm-client.h"
             line="75">controls whether networking connections
 can be started, stopped, and changed</doc>
      </member>
      <member name="wifi_share_protected"
              value="7"
              c:identifier="NM_CLIENT_PERMISSION_WIFI_SHARE_PROTECTED"
              glib:nick="wifi-share-protected">
        <doc xml:space="preserve"
             filename="nm-client.h"
             line="77">controls whether a password
 protected Wi-Fi hotspot can be created</doc>
      </member>
      <member name="wifi_share_open"
              value="8"
              c:identifier="NM_CLIENT_PERMISSION_WIFI_SHARE_OPEN"
              glib:nick="wifi-share-open">
        <doc xml:space="preserve"
             filename="nm-client.h"
             line="79">controls whether an open Wi-Fi hotspot
 can be created</doc>
      </member>
      <member name="settings_modify_system"
              value="9"
              c:identifier="NM_CLIENT_PERMISSION_SETTINGS_MODIFY_SYSTEM"
              glib:nick="settings-modify-system">
        <doc xml:space="preserve"
             filename="nm-client.h"
             line="81">controls whether connections
 that are available to all users can be modified</doc>
      </member>
      <member name="settings_modify_own"
              value="10"
              c:identifier="NM_CLIENT_PERMISSION_SETTINGS_MODIFY_OWN"
              glib:nick="settings-modify-own">
        <doc xml:space="preserve"
             filename="nm-client.h"
             line="83">controls whether connections
 owned by the current user can be modified</doc>
      </member>
      <member name="settings_modify_hostname"
              value="11"
              c:identifier="NM_CLIENT_PERMISSION_SETTINGS_MODIFY_HOSTNAME"
              glib:nick="settings-modify-hostname">
        <doc xml:space="preserve"
             filename="nm-client.h"
             line="85">controls whether the
 persistent hostname can be changed</doc>
      </member>
      <member name="settings_modify_global_dns"
              value="12"
              c:identifier="NM_CLIENT_PERMISSION_SETTINGS_MODIFY_GLOBAL_DNS"
              glib:nick="settings-modify-global-dns">
        <doc xml:space="preserve"
             filename="nm-client.h"
             line="87">modify persistent global
 DNS configuration</doc>
      </member>
      <member name="reload"
              value="13"
              c:identifier="NM_CLIENT_PERMISSION_RELOAD"
              glib:nick="reload">
        <doc xml:space="preserve"
             filename="nm-client.h"
             line="89">controls access to Reload.
 persistent hostname can be changed</doc>
      </member>
      <member name="checkpoint_rollback"
              value="14"
              c:identifier="NM_CLIENT_PERMISSION_CHECKPOINT_ROLLBACK"
              glib:nick="checkpoint-rollback">
        <doc xml:space="preserve"
             filename="nm-client.h"
             line="91">permission to create checkpoints.</doc>
      </member>
      <member name="enable_disable_statistics"
              value="15"
              c:identifier="NM_CLIENT_PERMISSION_ENABLE_DISABLE_STATISTICS"
              glib:nick="enable-disable-statistics">
        <doc xml:space="preserve"
             filename="nm-client.h"
             line="92">controls whether device
 statistics can be globally enabled or disabled</doc>
      </member>
      <member name="last"
              value="15"
              c:identifier="NM_CLIENT_PERMISSION_LAST"
              glib:nick="last">
        <doc xml:space="preserve"
             filename="nm-client.h"
             line="94">a reserved boundary value</doc>
      </member>
    </enumeration>
    <enumeration name="ClientPermissionResult"
                 glib:type-name="NMClientPermissionResult"
                 glib:get-type="nm_client_permission_result_get_type"
                 c:type="NMClientPermissionResult">
      <doc xml:space="preserve"
           filename="nm-client.h"
           line="120">#NMClientPermissionResult values indicate what authorizations and permissions
the user requires to obtain a given #NMClientPermission</doc>
      <member name="unknown"
              value="0"
              c:identifier="NM_CLIENT_PERMISSION_RESULT_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="nm-client.h"
             line="122">unknown or no authorization</doc>
      </member>
      <member name="yes"
              value="1"
              c:identifier="NM_CLIENT_PERMISSION_RESULT_YES"
              glib:nick="yes">
        <doc xml:space="preserve"
             filename="nm-client.h"
             line="123">the permission is available</doc>
      </member>
      <member name="auth"
              value="2"
              c:identifier="NM_CLIENT_PERMISSION_RESULT_AUTH"
              glib:nick="auth">
        <doc xml:space="preserve"
             filename="nm-client.h"
             line="124">authorization is necessary before the
 permission is available</doc>
      </member>
      <member name="no"
              value="3"
              c:identifier="NM_CLIENT_PERMISSION_RESULT_NO"
              glib:nick="no">
        <doc xml:space="preserve"
             filename="nm-client.h"
             line="126">permission to perform the operation is
 denied by system policy</doc>
      </member>
    </enumeration>
    <constant name="DEVICE_ACTIVE_CONNECTION"
              value="active-connection"
              c:type="NM_DEVICE_ACTIVE_CONNECTION">
      <source-position filename="nm-device.h" line="79"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_ADSL_CARRIER"
              value="carrier"
              c:type="NM_DEVICE_ADSL_CARRIER">
      <source-position filename="nm-device-adsl.h" line="50"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_AUTOCONNECT"
              value="autoconnect"
              c:type="NM_DEVICE_AUTOCONNECT">
      <source-position filename="nm-device.h" line="71"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_AVAILABLE_CONNECTIONS"
              value="available-connections"
              c:type="NM_DEVICE_AVAILABLE_CONNECTIONS">
      <source-position filename="nm-device.h" line="80"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_BOND_CARRIER"
              value="carrier"
              c:type="NM_DEVICE_BOND_CARRIER">
      <source-position filename="nm-device-bond.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_BOND_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_BOND_HW_ADDRESS">
      <source-position filename="nm-device-bond.h" line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_BOND_SLAVES"
              value="slaves"
              c:type="NM_DEVICE_BOND_SLAVES">
      <source-position filename="nm-device-bond.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_BRIDGE_CARRIER"
              value="carrier"
              c:type="NM_DEVICE_BRIDGE_CARRIER">
      <source-position filename="nm-device-bridge.h" line="55"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_BRIDGE_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_BRIDGE_HW_ADDRESS">
      <source-position filename="nm-device-bridge.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_BRIDGE_SLAVES"
              value="slaves"
              c:type="NM_DEVICE_BRIDGE_SLAVES">
      <source-position filename="nm-device-bridge.h" line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_BT_CAPABILITIES"
              value="bt-capabilities"
              c:type="NM_DEVICE_BT_CAPABILITIES">
      <source-position filename="nm-device-bt.h" line="60"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_BT_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_BT_HW_ADDRESS">
      <source-position filename="nm-device-bt.h" line="58"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_BT_NAME" value="name" c:type="NM_DEVICE_BT_NAME">
      <source-position filename="nm-device-bt.h" line="59"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_CAPABILITIES"
              value="capabilities"
              c:type="NM_DEVICE_CAPABILITIES">
      <source-position filename="nm-device.h" line="68"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_DEVICE_TYPE"
              value="device-type"
              c:type="NM_DEVICE_DEVICE_TYPE">
      <source-position filename="nm-device.h" line="61"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_DHCP4_CONFIG"
              value="dhcp4-config"
              c:type="NM_DEVICE_DHCP4_CONFIG">
      <source-position filename="nm-device.h" line="74"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_DHCP6_CONFIG"
              value="dhcp6-config"
              c:type="NM_DEVICE_DHCP6_CONFIG">
      <source-position filename="nm-device.h" line="76"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_DRIVER" value="driver" c:type="NM_DEVICE_DRIVER">
      <source-position filename="nm-device.h" line="65"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_DRIVER_VERSION"
              value="driver-version"
              c:type="NM_DEVICE_DRIVER_VERSION">
      <source-position filename="nm-device.h" line="66"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_ETHERNET_CARRIER"
              value="carrier"
              c:type="NM_DEVICE_ETHERNET_CARRIER">
      <source-position filename="nm-device-ethernet.h" line="58"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_ETHERNET_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_ETHERNET_HW_ADDRESS">
      <source-position filename="nm-device-ethernet.h" line="55"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_ETHERNET_PERMANENT_HW_ADDRESS"
              value="perm-hw-address"
              c:type="NM_DEVICE_ETHERNET_PERMANENT_HW_ADDRESS">
      <source-position filename="nm-device-ethernet.h" line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_ETHERNET_SPEED"
              value="speed"
              c:type="NM_DEVICE_ETHERNET_SPEED">
      <source-position filename="nm-device-ethernet.h" line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_FIRMWARE_MISSING"
              value="firmware-missing"
              c:type="NM_DEVICE_FIRMWARE_MISSING">
      <source-position filename="nm-device.h" line="72"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_FIRMWARE_VERSION"
              value="firmware-version"
              c:type="NM_DEVICE_FIRMWARE_VERSION">
      <source-position filename="nm-device.h" line="67"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_GENERIC_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_GENERIC_HW_ADDRESS">
      <source-position filename="nm-device-generic.h" line="50"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_GENERIC_TYPE_DESCRIPTION"
              value="type-description"
              c:type="NM_DEVICE_GENERIC_TYPE_DESCRIPTION">
      <source-position filename="nm-device-generic.h" line="51"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_INFINIBAND_CARRIER"
              value="carrier"
              c:type="NM_DEVICE_INFINIBAND_CARRIER">
      <source-position filename="nm-device-infiniband.h" line="55"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_INFINIBAND_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_INFINIBAND_HW_ADDRESS">
      <source-position filename="nm-device-infiniband.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_INTERFACE"
              value="interface"
              c:type="NM_DEVICE_INTERFACE">
      <source-position filename="nm-device.h" line="63"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_IP4_CONFIG"
              value="ip4-config"
              c:type="NM_DEVICE_IP4_CONFIG">
      <source-position filename="nm-device.h" line="73"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_IP6_CONFIG"
              value="ip6-config"
              c:type="NM_DEVICE_IP6_CONFIG">
      <source-position filename="nm-device.h" line="75"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_IP_INTERFACE"
              value="ip-interface"
              c:type="NM_DEVICE_IP_INTERFACE">
      <source-position filename="nm-device.h" line="64"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_MANAGED" value="managed" c:type="NM_DEVICE_MANAGED">
      <source-position filename="nm-device.h" line="70"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_MODEM_CURRENT_CAPABILITIES"
              value="current-capabilities"
              c:type="NM_DEVICE_MODEM_CURRENT_CAPABILITIES">
      <source-position filename="nm-device-modem.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_MODEM_MODEM_CAPABILITIES"
              value="modem-capabilities"
              c:type="NM_DEVICE_MODEM_MODEM_CAPABILITIES">
      <source-position filename="nm-device-modem.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_MTU" value="mtu" c:type="NM_DEVICE_MTU">
      <source-position filename="nm-device.h" line="84"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_OLPC_MESH_ACTIVE_CHANNEL"
              value="active-channel"
              c:type="NM_DEVICE_OLPC_MESH_ACTIVE_CHANNEL">
      <source-position filename="nm-device-olpc-mesh.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_OLPC_MESH_COMPANION"
              value="companion"
              c:type="NM_DEVICE_OLPC_MESH_COMPANION">
      <source-position filename="nm-device-olpc-mesh.h" line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_OLPC_MESH_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_OLPC_MESH_HW_ADDRESS">
      <source-position filename="nm-device-olpc-mesh.h" line="51"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PHYSICAL_PORT_ID"
              value="physical-port-id"
              c:type="NM_DEVICE_PHYSICAL_PORT_ID">
      <source-position filename="nm-device.h" line="83"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_PRODUCT" value="product" c:type="NM_DEVICE_PRODUCT">
      <source-position filename="nm-device.h" line="82"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_REAL" value="real" c:type="NM_DEVICE_REAL">
      <source-position filename="nm-device.h" line="69"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_STATE" value="state" c:type="NM_DEVICE_STATE">
      <source-position filename="nm-device.h" line="77"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_STATE_REASON"
              value="state-reason"
              c:type="NM_DEVICE_STATE_REASON">
      <source-position filename="nm-device.h" line="78"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_TEAM_CARRIER"
              value="carrier"
              c:type="NM_DEVICE_TEAM_CARRIER">
      <source-position filename="nm-device-team.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_TEAM_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_TEAM_HW_ADDRESS">
      <source-position filename="nm-device-team.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_TEAM_SLAVES"
              value="slaves"
              c:type="NM_DEVICE_TEAM_SLAVES">
      <source-position filename="nm-device-team.h" line="55"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_UDI" value="udi" c:type="NM_DEVICE_UDI">
      <source-position filename="nm-device.h" line="62"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VENDOR" value="vendor" c:type="NM_DEVICE_VENDOR">
      <source-position filename="nm-device.h" line="81"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VLAN_CARRIER"
              value="carrier"
              c:type="NM_DEVICE_VLAN_CARRIER">
      <source-position filename="nm-device-vlan.h" line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VLAN_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_VLAN_HW_ADDRESS">
      <source-position filename="nm-device-vlan.h" line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VLAN_PARENT"
              value="parent"
              c:type="NM_DEVICE_VLAN_PARENT">
      <source-position filename="nm-device-vlan.h" line="58"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_VLAN_VLAN_ID"
              value="vlan-id"
              c:type="NM_DEVICE_VLAN_VLAN_ID">
      <source-position filename="nm-device-vlan.h" line="59"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIFI_ACCESS_POINTS"
              value="access-points"
              c:type="NM_DEVICE_WIFI_ACCESS_POINTS">
      <source-position filename="nm-device-wifi.h" line="68"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIFI_ACTIVE_ACCESS_POINT"
              value="active-access-point"
              c:type="NM_DEVICE_WIFI_ACTIVE_ACCESS_POINT">
      <source-position filename="nm-device-wifi.h" line="66"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIFI_BITRATE"
              value="bitrate"
              c:type="NM_DEVICE_WIFI_BITRATE">
      <source-position filename="nm-device-wifi.h" line="65"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIFI_CAPABILITIES"
              value="wireless-capabilities"
              c:type="NM_DEVICE_WIFI_CAPABILITIES">
      <source-position filename="nm-device-wifi.h" line="67"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIFI_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_WIFI_HW_ADDRESS">
      <source-position filename="nm-device-wifi.h" line="62"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIFI_MODE"
              value="mode"
              c:type="NM_DEVICE_WIFI_MODE">
      <source-position filename="nm-device-wifi.h" line="64"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIFI_PERMANENT_HW_ADDRESS"
              value="perm-hw-address"
              c:type="NM_DEVICE_WIFI_PERMANENT_HW_ADDRESS">
      <source-position filename="nm-device-wifi.h" line="63"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIMAX_ACTIVE_NSP"
              value="active-nsp"
              c:type="NM_DEVICE_WIMAX_ACTIVE_NSP">
      <source-position filename="nm-device-wimax.h" line="58"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIMAX_BSID"
              value="bsid"
              c:type="NM_DEVICE_WIMAX_BSID">
      <source-position filename="nm-device-wimax.h" line="63"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIMAX_CENTER_FREQUENCY"
              value="center-frequency"
              c:type="NM_DEVICE_WIMAX_CENTER_FREQUENCY">
      <source-position filename="nm-device-wimax.h" line="59"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIMAX_CINR"
              value="cinr"
              c:type="NM_DEVICE_WIMAX_CINR">
      <source-position filename="nm-device-wimax.h" line="61"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIMAX_HW_ADDRESS"
              value="hw-address"
              c:type="NM_DEVICE_WIMAX_HW_ADDRESS">
      <source-position filename="nm-device-wimax.h" line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIMAX_NSPS"
              value="nsps"
              c:type="NM_DEVICE_WIMAX_NSPS">
      <source-position filename="nm-device-wimax.h" line="64"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIMAX_RSSI"
              value="rssi"
              c:type="NM_DEVICE_WIMAX_RSSI">
      <source-position filename="nm-device-wimax.h" line="60"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_WIMAX_TX_POWER"
              value="tx-power"
              c:type="NM_DEVICE_WIMAX_TX_POWER">
      <source-position filename="nm-device-wimax.h" line="62"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="DHCP4Config"
           c:symbol-prefix="dhcp4_config"
           c:type="NMDHCP4Config"
           parent="Object"
           glib:type-name="NMDHCP4Config"
           glib:get-type="nm_dhcp4_config_get_type"
           glib:type-struct="DHCP4ConfigClass">
      <source-position filename="nm-dhcp4-config.h" line="52"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="nm_dhcp4_config_new">
        <doc xml:space="preserve"
             filename="nm-dhcp4-config.c"
             line="163">Creates a new #NMDHCP4Config.</doc>
        <source-position filename="nm-dhcp4-config.h" line="58"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-dhcp4-config.c"
               line="170">a new configuration</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-dhcp4-config.c"
                 line="165">the #DBusGConnection</doc>
            <type name="DBusGLib.Connection" c:type="DBusGConnection*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-dhcp4-config.c"
                 line="166">the DBus object path of the device</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_one_option"
              c:identifier="nm_dhcp4_config_get_one_option">
        <doc xml:space="preserve"
             filename="nm-dhcp4-config.c"
             line="202">Gets one option by option name.</doc>
        <source-position filename="nm-dhcp4-config.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-dhcp4-config.c"
               line="209">the configuration option's value. This is the internal string used by the
configuration, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-dhcp4-config.c"
                 line="204">a #NMDHCP4Config</doc>
            <type name="DHCP4Config" c:type="NMDHCP4Config*"/>
          </instance-parameter>
          <parameter name="option" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-dhcp4-config.c"
                 line="205">the option to retrieve</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_options" c:identifier="nm_dhcp4_config_get_options">
        <doc xml:space="preserve"
             filename="nm-dhcp4-config.c"
             line="184">Gets all the options contained in the configuration.</doc>
        <source-position filename="nm-dhcp4-config.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-dhcp4-config.c"
               line="190">the #GHashTable containing strings for keys and values.
This is the internal copy used by the configuration, and must not be modified.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-dhcp4-config.c"
                 line="186">a #NMDHCP4Config</doc>
            <type name="DHCP4Config" c:type="NMDHCP4Config*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="options" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-dhcp4-config.c"
             line="150">The #GHashTable containing options of the configuration.</doc>
        <type name="GLib.HashTable">
          <type name="utf8"/>
          <type name="GObject.Value"/>
        </type>
      </property>
      <field name="parent">
        <type name="Object" c:type="NMObject"/>
      </field>
    </class>
    <record name="DHCP4ConfigClass"
            c:type="NMDHCP4ConfigClass"
            glib:is-gtype-struct-for="DHCP4Config">
      <source-position filename="nm-dhcp4-config.h" line="52"/>
      <field name="parent">
        <type name="ObjectClass" c:type="NMObjectClass"/>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <source-position filename="nm-dhcp4-config.h" line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <source-position filename="nm-dhcp4-config.h" line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <source-position filename="nm-dhcp4-config.h" line="48"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved4" introspectable="0">
        <callback name="_reserved4">
          <source-position filename="nm-dhcp4-config.h" line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved5" introspectable="0">
        <callback name="_reserved5">
          <source-position filename="nm-dhcp4-config.h" line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved6" introspectable="0">
        <callback name="_reserved6">
          <source-position filename="nm-dhcp4-config.h" line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <constant name="DHCP4_CONFIG_OPTIONS"
              value="options"
              c:type="NM_DHCP4_CONFIG_OPTIONS">
      <source-position filename="nm-dhcp4-config.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="DHCP6Config"
           c:symbol-prefix="dhcp6_config"
           c:type="NMDHCP6Config"
           parent="Object"
           glib:type-name="NMDHCP6Config"
           glib:get-type="nm_dhcp6_config_get_type"
           glib:type-struct="DHCP6ConfigClass">
      <source-position filename="nm-dhcp6-config.h" line="52"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="nm_dhcp6_config_new">
        <doc xml:space="preserve"
             filename="nm-dhcp6-config.c"
             line="163">Creates a new #NMDHCP6Config.</doc>
        <source-position filename="nm-dhcp6-config.h" line="58"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-dhcp6-config.c"
               line="170">a new configuration</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-dhcp6-config.c"
                 line="165">the #DBusGConnection</doc>
            <type name="DBusGLib.Connection" c:type="DBusGConnection*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-dhcp6-config.c"
                 line="166">the DBus object path of the device</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_one_option"
              c:identifier="nm_dhcp6_config_get_one_option">
        <doc xml:space="preserve"
             filename="nm-dhcp6-config.c"
             line="202">Gets one option by option name.</doc>
        <source-position filename="nm-dhcp6-config.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-dhcp6-config.c"
               line="209">the configuration option's value. This is the internal string used by the
configuration, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-dhcp6-config.c"
                 line="204">a #NMDHCP6Config</doc>
            <type name="DHCP6Config" c:type="NMDHCP6Config*"/>
          </instance-parameter>
          <parameter name="option" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-dhcp6-config.c"
                 line="205">the option to retrieve</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_options" c:identifier="nm_dhcp6_config_get_options">
        <doc xml:space="preserve"
             filename="nm-dhcp6-config.c"
             line="184">Gets all the options contained in the configuration.</doc>
        <source-position filename="nm-dhcp6-config.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-dhcp6-config.c"
               line="190">the #GHashTable containing strings for keys and values.
This is the internal copy used by the configuration, and must not be modified.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-dhcp6-config.c"
                 line="186">a #NMDHCP6Config</doc>
            <type name="DHCP6Config" c:type="NMDHCP6Config*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="options" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-dhcp6-config.c"
             line="150">The #GHashTable containing options of the configuration.</doc>
        <type name="GLib.HashTable">
          <type name="utf8"/>
          <type name="GObject.Value"/>
        </type>
      </property>
      <field name="parent">
        <type name="Object" c:type="NMObject"/>
      </field>
    </class>
    <record name="DHCP6ConfigClass"
            c:type="NMDHCP6ConfigClass"
            glib:is-gtype-struct-for="DHCP6Config">
      <source-position filename="nm-dhcp6-config.h" line="52"/>
      <field name="parent">
        <type name="ObjectClass" c:type="NMObjectClass"/>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <source-position filename="nm-dhcp6-config.h" line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <source-position filename="nm-dhcp6-config.h" line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <source-position filename="nm-dhcp6-config.h" line="48"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved4" introspectable="0">
        <callback name="_reserved4">
          <source-position filename="nm-dhcp6-config.h" line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved5" introspectable="0">
        <callback name="_reserved5">
          <source-position filename="nm-dhcp6-config.h" line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved6" introspectable="0">
        <callback name="_reserved6">
          <source-position filename="nm-dhcp6-config.h" line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <constant name="DHCP6_CONFIG_OPTIONS"
              value="options"
              c:type="NM_DHCP6_CONFIG_OPTIONS">
      <source-position filename="nm-dhcp6-config.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Device"
           c:symbol-prefix="device"
           c:type="NMDevice"
           parent="Object"
           glib:type-name="NMDevice"
           glib:get-type="nm_device_get_type"
           glib:type-struct="DeviceClass">
      <source-position filename="nm-device.h" line="112"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="nm_device_new">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="947">Creates a new #NMDevice.</doc>
        <source-position filename="nm-device.h" line="116"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="954">a new device</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="949">the #DBusGConnection</doc>
            <type name="DBusGLib.Connection" c:type="DBusGConnection*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="950">the DBus object path of the device</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="disambiguate_names"
                c:identifier="nm_device_disambiguate_names"
                version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1956">Generates a list of short-ish unique presentation names for the
devices in @devices.</doc>
        <source-position filename="nm-device.h" line="158"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="1964">the device names</doc>
          <array c:type="char**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="devices" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1958">an array of #NMDevice</doc>
            <array length="1" zero-terminated="0" c:type="NMDevice**">
              <type name="Device" c:type="NMDevice*"/>
            </array>
          </parameter>
          <parameter name="num_devices" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1959">length of @devices</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="connection_compatible"
                      invoker="connection_compatible"
                      throws="1">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="2289">Validates a given connection for a given #NMDevice object and returns
whether the connection may be activated with the device. For example if
@device is a Wi-Fi device that supports only WEP encryption, the connection
will only be valid if it is a Wi-Fi connection which describes a WEP or open
network, and will not be valid if it describes a WPA network, or if it is
an Ethernet, Bluetooth, WWAN, etc connection that is incompatible with the
device.

This function does the same as nm_device_connection_valid(), i.e. checking
compatibility of the given device and connection. But, in addition, it sets
GError when FALSE is returned.</doc>
        <source-position filename="nm-device.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="2307">%TRUE if the connection may be activated with this device, %FALSE
if is incompatible with the device's capabilities and characteristics.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="2291">an #NMDevice to validate @connection against</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="2292">an #NMConnection to validate against @device</doc>
            <type name="NetworkManager.Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_hw_address"
                      invoker="get_hw_address"
                      version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1195">Gets the current a hardware address (MAC) for the @device.</doc>
        <source-position filename="nm-device.h" line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="1201">the current MAC of the device, or %NULL.
This is the internal string used by the device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1197">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_setting_type"
                      invoker="get_setting_type"
                      version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="2357">Gets the (primary) #NMSetting subtype associated with connections
that can be used on @device.</doc>
        <source-position filename="nm-device.h" line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="2364">@device's associated #NMSetting type</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="2359">an #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_type_description"
                      invoker="get_type_description"
                      version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1158">Gets a (non-localized) description of the type of device that
@device is.</doc>
        <source-position filename="nm-device.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="1165">the type description of the device. This is the internal
string used by the device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1160">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="state_changed">
        <source-position filename="nm-device.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="new_state" transfer-ownership="none">
            <type name="NetworkManager.DeviceState" c:type="NMDeviceState"/>
          </parameter>
          <parameter name="old_state" transfer-ownership="none">
            <type name="NetworkManager.DeviceState" c:type="NMDeviceState"/>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <type name="NetworkManager.DeviceStateReason"
                  c:type="NMDeviceStateReason"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="connection_compatible"
              c:identifier="nm_device_connection_compatible"
              throws="1">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="2289">Validates a given connection for a given #NMDevice object and returns
whether the connection may be activated with the device. For example if
@device is a Wi-Fi device that supports only WEP encryption, the connection
will only be valid if it is a Wi-Fi connection which describes a WEP or open
network, and will not be valid if it describes a WPA network, or if it is
an Ethernet, Bluetooth, WWAN, etc connection that is incompatible with the
device.

This function does the same as nm_device_connection_valid(), i.e. checking
compatibility of the given device and connection. But, in addition, it sets
GError when FALSE is returned.</doc>
        <source-position filename="nm-device.h" line="178"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="2307">%TRUE if the connection may be activated with this device, %FALSE
if is incompatible with the device's capabilities and characteristics.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="2291">an #NMDevice to validate @connection against</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="2292">an #NMConnection to validate against @device</doc>
            <type name="NetworkManager.Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="connection_valid"
              c:identifier="nm_device_connection_valid">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="2247">Validates a given connection for a given #NMDevice object and returns
whether the connection may be activated with the device. For example if
@device is a Wi-Fi device that supports only WEP encryption, the connection
will only be valid if it is a Wi-Fi connection which describes a WEP or open
network, and will not be valid if it describes a WPA network, or if it is
an Ethernet, Bluetooth, WWAN, etc connection that is incompatible with the
device.</doc>
        <source-position filename="nm-device.h" line="175"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="2260">%TRUE if the connection may be activated with this device, %FALSE
if is incompatible with the device's capabilities and characteristics.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="2249">an #NMDevice to validate @connection against</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="2250">an #NMConnection to validate against @device</doc>
            <type name="NetworkManager.Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete" c:identifier="nm_device_delete" version="1.0">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="2216">Deletes the software device. Hardware devices can't be deleted.</doc>
        <source-position filename="nm-device.h" line="168"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="2218">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="2219">callback to be called when delete
operation completes</doc>
            <type name="DeviceCallbackFn" c:type="NMDeviceCallbackFn"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="2221">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect" c:identifier="nm_device_disconnect">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="2185">Disconnects the device if currently connected, and prevents the device from
automatically connecting to networks until the next manual network connection
request.</doc>
        <source-position filename="nm-device.h" line="163"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="2187">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="2188">callback to be called when disconnect
operation completes</doc>
            <type name="DeviceCallbackFn" c:type="NMDeviceCallbackFn"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="2190">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="filter_connections"
              c:identifier="nm_device_filter_connections">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="2320">Filters a given list of connections for a given #NMDevice object and return
connections which may be activated with the device. For example if @device
is a Wi-Fi device that supports only WEP encryption, the returned list will
contain any Wi-Fi connections in @connections that allow connection to
unencrypted or WEP-enabled SSIDs.  The returned list will not contain
Ethernet, Bluetooth, Wi-Fi WPA connections, or any other connection that is
incompatible with the device. To get the full list of connections see
nm_remote_settings_list_connections().</doc>
        <source-position filename="nm-device.h" line="172"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="2334">a
list of #NMConnection objects that could be activated with the given @device.
The elements of the list are owned by their creator and should not be freed
by the caller, but the returned list itself is owned by the caller and should
be freed with g_slist_free() when it is no longer required.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="NetworkManager.Connection"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="2322">an #NMDevice to filter connections for</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="connections" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="2323">a list of #NMConnection objects to filter</doc>
            <type name="GLib.SList" c:type="const GSList*">
              <type name="NetworkManager.Connection"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="get_active_connection"
              c:identifier="nm_device_get_active_connection">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1465">Gets the #NMActiveConnection object which owns this device during activation.</doc>
        <source-position filename="nm-device.h" line="142"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="1471">the #NMActiveConnection or %NULL if the device is
not part of an active connection</doc>
          <type name="ActiveConnection" c:type="NMActiveConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1467">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_autoconnect" c:identifier="nm_device_get_autoconnect">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1280">Whether the #NMDevice can be autoconnected.</doc>
        <source-position filename="nm-device.h" line="133"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="1286">%TRUE if the device is allowed to be autoconnected</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1282">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_available_connections"
              c:identifier="nm_device_get_available_connections"
              version="0.9.8">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1483">Gets the #NMRemoteConnections currently known to the daemon that could
be activated on @device.</doc>
        <source-position filename="nm-device.h" line="143"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="1490">the #GPtrArray
containing #NMRemoteConnections. This is the internal copy used by
the connection, and must not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="RemoteConnection"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1485">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_capabilities"
              c:identifier="nm_device_get_capabilities">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1217">Gets the device' capabilities.</doc>
        <source-position filename="nm-device.h" line="129"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="1223">the capabilities</doc>
          <type name="NetworkManager.DeviceCapabilities"
                c:type="NMDeviceCapabilities"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1219">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="nm_device_get_description"
              version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1789">Gets a description of @device, based on its vendor and product names.</doc>
        <source-position filename="nm-device.h" line="156"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="1795">a description of @device. If either the vendor or the
  product name is unknown, this returns the interface name.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1791">an #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_device_type" c:identifier="nm_device_get_device_type">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1069">Returns the numeric type of the #NMDevice, ie Ethernet, Wi-Fi, etc.</doc>
        <source-position filename="nm-device.h" line="120"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="1075">the device type</doc>
          <type name="NetworkManager.DeviceType" c:type="NMDeviceType"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1071">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dhcp4_config"
              c:identifier="nm_device_get_dhcp4_config">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1362">Gets the current #NMDHCP4Config associated with the #NMDevice.

Note that as of NetworkManager 0.9.10, you can alternatively use
nm_active_connection_get_dhcp4_config(), which also works with VPN
connections.</doc>
        <source-position filename="nm-device.h" line="137"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="1372">the #NMDHCP4Config or %NULL if the device is not activated or not
using DHCP.</doc>
          <type name="DHCP4Config" c:type="NMDHCP4Config*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1364">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dhcp6_config"
              c:identifier="nm_device_get_dhcp6_config">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1405">Gets the current #NMDHCP6Config associated with the #NMDevice.

Note that as of NetworkManager 0.9.10, you can alternatively use
nm_active_connection_get_dhcp6_config(), which also works with VPN
connections.</doc>
        <source-position filename="nm-device.h" line="139"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="1415">the #NMDHCP6Config or %NULL if the device is not activated or not
using DHCP.</doc>
          <type name="DHCP6Config" c:type="NMDHCP6Config*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1407">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_driver" c:identifier="nm_device_get_driver">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1104">Gets the driver of the #NMDevice.</doc>
        <source-position filename="nm-device.h" line="122"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="1110">the driver of the device. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1106">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_driver_version"
              c:identifier="nm_device_get_driver_version">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1122">Gets the driver version of the #NMDevice.</doc>
        <source-position filename="nm-device.h" line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="1128">the version of the device driver. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1124">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_firmware_missing"
              c:identifier="nm_device_get_firmware_missing">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1322">Indicates that firmware required for the device's operation is likely
to be missing.</doc>
        <source-position filename="nm-device.h" line="135"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="1329">%TRUE if firmware required for the device's operation is likely
to be missing.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1324">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_firmware_version"
              c:identifier="nm_device_get_firmware_version">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1140">Gets the firmware version of the #NMDevice.</doc>
        <source-position filename="nm-device.h" line="124"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="1146">the firmware version of the device. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1142">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hw_address"
              c:identifier="nm_device_get_hw_address"
              version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1195">Gets the current a hardware address (MAC) for the @device.</doc>
        <source-position filename="nm-device.h" line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="1201">the current MAC of the device, or %NULL.
This is the internal string used by the device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1197">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_iface" c:identifier="nm_device_get_iface">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1032">Gets the interface name of the #NMDevice.</doc>
        <source-position filename="nm-device.h" line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="1038">the interface of the device. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1034">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ip4_config" c:identifier="nm_device_get_ip4_config">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1341">Gets the current #NMIP4Config associated with the #NMDevice.

Note that as of NetworkManager 0.9.10, you can alternatively use
nm_active_connection_get_ip4_config(), which also works with VPN
connections.</doc>
        <source-position filename="nm-device.h" line="136"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="1351">the #NMIP4Config or %NULL if the device is not activated.</doc>
          <type name="IP4Config" c:type="NMIP4Config*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1343">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ip6_config" c:identifier="nm_device_get_ip6_config">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1384">Gets the current #NMIP6Config associated with the #NMDevice.

Note that as of NetworkManager 0.9.10, you can alternatively use
nm_active_connection_get_ip6_config(), which also works with VPN
connections.</doc>
        <source-position filename="nm-device.h" line="138"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="1394">the #NMIP6Config or %NULL if the device is not activated.</doc>
          <type name="IP6Config" c:type="NMIP6Config*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1386">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ip_iface" c:identifier="nm_device_get_ip_iface">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1050">Gets the IP interface name of the #NMDevice over which IP traffic flows
when the device is in the ACTIVATED state.</doc>
        <source-position filename="nm-device.h" line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="1057">the IP traffic interface of the device. This is the internal string
used by the device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1052">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_managed" c:identifier="nm_device_get_managed">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1234">Whether the #NMDevice is managed by NetworkManager.</doc>
        <source-position filename="nm-device.h" line="130"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="1240">%TRUE if the device is managed by NetworkManager</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1236">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mtu" c:identifier="nm_device_get_mtu" version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="2096">Gets the  MTU of the #NMDevice.</doc>
        <source-position filename="nm-device.h" line="147"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="2102">the MTU of the device in bytes.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="2098">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_physical_port_id"
              c:identifier="nm_device_get_physical_port_id"
              version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="2065">Gets the physical port ID of the #NMDevice. If non-%NULL, this is
an opaque string that can be used to recognize when
seemingly-unrelated #NMDevices are actually just different virtual
ports on a single physical port. (Eg, NPAR / SR-IOV.)</doc>
        <source-position filename="nm-device.h" line="145"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="2074">the physical port ID of the device, or %NULL if the port
  ID is unknown. This is the internal string used by the device and
  must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="2067">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_product" c:identifier="nm_device_get_product">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1566">Gets the product string of the #NMDevice.</doc>
        <source-position filename="nm-device.h" line="153"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="1572">the product name of the device. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1568">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_setting_type"
              c:identifier="nm_device_get_setting_type"
              version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="2357">Gets the (primary) #NMSetting subtype associated with connections
that can be used on @device.</doc>
        <source-position filename="nm-device.h" line="183"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="2364">@device's associated #NMSetting type</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="2359">an #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state" c:identifier="nm_device_get_state">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1427">Gets the current #NMDevice state.</doc>
        <source-position filename="nm-device.h" line="140"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="1433">the current device state</doc>
          <type name="NetworkManager.DeviceState" c:type="NMDeviceState"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1429">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state_reason"
              c:identifier="nm_device_get_state_reason">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1444">Gets the current #NMDevice state (return value) and the reason for entering
the state (@reason argument).</doc>
        <source-position filename="nm-device.h" line="141"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="1452">the current device state</doc>
          <type name="NetworkManager.DeviceState" c:type="NMDeviceState"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1446">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="reason"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1447">location to store reason (#NMDeviceStateReason), or %NULL</doc>
            <type name="NetworkManager.DeviceStateReason"
                  c:type="NMDeviceStateReason*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_type_description"
              c:identifier="nm_device_get_type_description"
              version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1158">Gets a (non-localized) description of the type of device that
@device is.</doc>
        <source-position filename="nm-device.h" line="126"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="1165">the type description of the device. This is the internal
string used by the device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1160">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_udi" c:identifier="nm_device_get_udi">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1085">Gets the Unique Device Identifier of the #NMDevice.</doc>
        <source-position filename="nm-device.h" line="121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="1091">the Unique Device Identifier of the device.  This identifier may be
used to gather more information about the device from various operating
system services like udev or sysfs.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1087">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vendor" c:identifier="nm_device_get_vendor">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1594">Gets the vendor string of the #NMDevice.</doc>
        <source-position filename="nm-device.h" line="154"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="1600">the vendor name of the device. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1596">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_real" c:identifier="nm_device_is_real" version="1.2">
        <source-position filename="nm-device.h" line="151"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="2119">%TRUE if the device exists, or %FALSE if it is a placeholder device
that could be automatically created by NetworkManager if one of its
#NMDevice:available-connections was activated.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="2117">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_software"
              c:identifier="nm_device_is_software"
              version="1.0">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="2134">Whether the device is a software device.</doc>
        <source-position filename="nm-device.h" line="149"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="2140">%TRUE if @device is a software device, %FALSE if it is a hardware device.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="2136">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_autoconnect" c:identifier="nm_device_set_autoconnect">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1297">Enables or disables automatic activation of the #NMDevice.</doc>
        <source-position filename="nm-device.h" line="134"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1299">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="autoconnect" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1300">%TRUE to enable autoconnecting</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_managed"
              c:identifier="nm_device_set_managed"
              version="1.2">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="1251">Enables or disables management of  #NMDevice by NetworkManager.</doc>
        <source-position filename="nm-device.h" line="132"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1253">a #NMDevice</doc>
            <type name="Device" c:type="NMDevice*"/>
          </instance-parameter>
          <parameter name="managed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1254">%TRUE to make the device managed by NetworkManager.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="active-connection" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="788">The #NMActiveConnection object that "owns" this device during activation.</doc>
        <type name="ActiveConnection"/>
      </property>
      <property name="autoconnect" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="691">Whether the device can auto-activate a connection.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="available-connections"
                version="0.9.8"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="800">The available connections (#NMRemoteConnection) of the device</doc>
        <type name="ObjectArray"/>
      </property>
      <property name="capabilities" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="651">The capabilities of the device.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="device-type" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="587">The numeric type of the device.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="dhcp4-config" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="728">The #NMDHCP4Config of the device.</doc>
        <type name="DHCP4Config"/>
      </property>
      <property name="dhcp6-config" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="752">The #NMDHCP6Config of the device.</doc>
        <type name="DHCP6Config"/>
      </property>
      <property name="driver" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="615">The driver of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="driver-version" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="627">The version of the device driver.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="firmware-missing" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="703">When %TRUE indicates the device is likely missing firmware required
for its operation.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="firmware-version" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="639">The firmware version of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="interface" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="562">The interface of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ip-interface" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="574">The IP interface of the device which should be used for all IP-related
operations like addressing and routing.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ip4-config" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="716">The #NMIP4Config of the device.</doc>
        <type name="IP4Config"/>
      </property>
      <property name="ip6-config" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="740">The #NMIP6Config of the device.</doc>
        <type name="IP6Config"/>
      </property>
      <property name="managed" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="679">Whether the device is managed by NetworkManager.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mtu" version="0.9.10" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="853">The MTU of the device.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="physical-port-id"
                version="0.9.10"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="838">The physical port ID of the device. (See
nm_device_get_physical_port_id().)</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="product" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="826">The product string of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="real" version="1.2" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="663">Whether the device is real or is a placeholder device that could
be created automatically by NetworkManager if one of its
#NMDevice:available-connections was activated.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="state" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="764">The state of the device.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="state-reason"
                introspectable="0"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="776">The state and reason of the device.</doc>
        <type/>
      </property>
      <property name="udi" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="598">An operating-system specific device hardware identifier; this is not
unique to a specific hardware device across reboots or hotplugs.  It
is an opaque string which for some device types (Bluetooth, Modem)
contains an identifier provided by the underlying hardware service daemon
such as Bluez or ModemManager, and clients can use this property to
request more information about the device from those services.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="vendor" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="814">The vendor string of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Object" c:type="NMObject"/>
      </field>
      <glib:signal name="state-changed" when="first">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="869">Notifies the state change of a #NMDevice.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="new_state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="872">the new state of the device</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="old_state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="873">the previous state of the device</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="874">the reason describing the state change</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <class name="DeviceAdsl"
           c:symbol-prefix="device_adsl"
           c:type="NMDeviceAdsl"
           parent="Device"
           glib:type-name="NMDeviceAdsl"
           glib:get-type="nm_device_adsl_get_type"
           glib:type-struct="DeviceAdslClass">
      <source-position filename="nm-device-adsl.h" line="66"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="nm_device_adsl_new">
        <doc xml:space="preserve"
             filename="nm-device-adsl.c"
             line="68">Creates a new #NMDeviceAdsl.</doc>
        <source-position filename="nm-device-adsl.h" line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-device-adsl.c"
               line="75">a new device</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-adsl.c"
                 line="70">the #DBusGConnection</doc>
            <type name="DBusGLib.Connection" c:type="DBusGConnection*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-adsl.c"
                 line="71">the DBus object path of the device</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_carrier" c:identifier="nm_device_adsl_get_carrier">
        <doc xml:space="preserve"
             filename="nm-device-adsl.c"
             line="93">Whether the device has carrier.</doc>
        <source-position filename="nm-device-adsl.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-adsl.c"
               line="99">%TRUE if the device has carrier</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-adsl.c"
                 line="95">a #NMDeviceAdsl</doc>
            <type name="DeviceAdsl" c:type="NMDeviceAdsl*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="carrier" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-adsl.c"
             line="234">Whether the device has carrier.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <record name="DeviceAdslClass"
            c:type="NMDeviceAdslClass"
            glib:is-gtype-struct-for="DeviceAdsl">
      <source-position filename="nm-device-adsl.h" line="66"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <source-position filename="nm-device-adsl.h" line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <source-position filename="nm-device-adsl.h" line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <source-position filename="nm-device-adsl.h" line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved4" introspectable="0">
        <callback name="_reserved4">
          <source-position filename="nm-device-adsl.h" line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved5" introspectable="0">
        <callback name="_reserved5">
          <source-position filename="nm-device-adsl.h" line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved6" introspectable="0">
        <callback name="_reserved6">
          <source-position filename="nm-device-adsl.h" line="65"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="DeviceAdslError"
                 glib:type-name="NMDeviceAdslError"
                 glib:get-type="nm_device_adsl_error_get_type"
                 c:type="NMDeviceAdslError"
                 glib:error-domain="nm-device-adsl-error-quark">
      <member name="UnknownError"
              value="0"
              c:identifier="NM_DEVICE_ADSL_ERROR_UNKNOWN"
              glib:nick="UnknownError">
        <doc xml:space="preserve"
             filename="nm-device-adsl.h"
             line="37">unknown or unclassified error</doc>
      </member>
      <member name="NotAdslConnection"
              value="1"
              c:identifier="NM_DEVICE_ADSL_ERROR_NOT_ADSL_CONNECTION"
              glib:nick="NotAdslConnection">
        <doc xml:space="preserve"
             filename="nm-device-adsl.h"
             line="38">the connection was not of ADSL type</doc>
      </member>
      <member name="InvalidAdslConnection"
              value="2"
              c:identifier="NM_DEVICE_ADSL_ERROR_INVALID_ADSL_CONNECTION"
              glib:nick="InvalidAdslConnection">
        <doc xml:space="preserve"
             filename="nm-device-adsl.h"
             line="39">the ADSL connection was invalid</doc>
      </member>
      <function name="quark" c:identifier="nm_device_adsl_error_quark">
        <doc xml:space="preserve"
             filename="nm-device-adsl.c"
             line="51">Registers an error quark for #NMDeviceAdsl if necessary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-adsl.c"
               line="56">the error quark used for #NMDeviceAdsl errors.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="DeviceBond"
           c:symbol-prefix="device_bond"
           c:type="NMDeviceBond"
           parent="Device"
           glib:type-name="NMDeviceBond"
           glib:get-type="nm_device_bond_get_type"
           glib:type-struct="DeviceBondClass">
      <source-position filename="nm-device-bond.h" line="70"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="nm_device_bond_new">
        <doc xml:space="preserve"
             filename="nm-device-bond.c"
             line="73">Creates a new #NMDeviceBond.</doc>
        <source-position filename="nm-device-bond.h" line="74"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-device-bond.c"
               line="80">a new device</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-bond.c"
                 line="75">the #DBusGConnection</doc>
            <type name="DBusGLib.Connection" c:type="DBusGConnection*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-bond.c"
                 line="76">the DBus object path of the device</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_carrier" c:identifier="nm_device_bond_get_carrier">
        <doc xml:space="preserve"
             filename="nm-device-bond.c"
             line="116">Whether the device has carrier.</doc>
        <source-position filename="nm-device-bond.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-bond.c"
               line="122">%TRUE if the device has carrier</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-bond.c"
                 line="118">a #NMDeviceBond</doc>
            <type name="DeviceBond" c:type="NMDeviceBond*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hw_address"
              c:identifier="nm_device_bond_get_hw_address">
        <doc xml:space="preserve"
             filename="nm-device-bond.c"
             line="98">Gets the hardware (MAC) address of the #NMDeviceBond</doc>
        <source-position filename="nm-device-bond.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-bond.c"
               line="104">the hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-bond.c"
                 line="100">a #NMDeviceBond</doc>
            <type name="DeviceBond" c:type="NMDeviceBond*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_slaves"
              c:identifier="nm_device_bond_get_slaves"
              version="0.9.6.4">
        <doc xml:space="preserve"
             filename="nm-device-bond.c"
             line="133">Gets the devices currently enslaved to @device.</doc>
        <source-position filename="nm-device-bond.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-bond.c"
               line="139">the #GPtrArray containing
#NMDevices that are slaves of @device. This is the internal
copy used by the device, and must not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="Device"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-bond.c"
                 line="135">a #NMDeviceBond</doc>
            <type name="DeviceBond" c:type="NMDeviceBond*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="carrier" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-bond.c"
             line="321">Whether the device has carrier.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hw-address" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-bond.c"
             line="309">The hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="slaves" version="0.9.8" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-bond.c"
             line="333">The devices (#NMDevice) enslaved to the bond device.</doc>
        <type name="ObjectArray"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <record name="DeviceBondClass"
            c:type="NMDeviceBondClass"
            glib:is-gtype-struct-for="DeviceBond">
      <source-position filename="nm-device-bond.h" line="70"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <source-position filename="nm-device-bond.h" line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <source-position filename="nm-device-bond.h" line="65"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <source-position filename="nm-device-bond.h" line="66"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved4" introspectable="0">
        <callback name="_reserved4">
          <source-position filename="nm-device-bond.h" line="67"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved5" introspectable="0">
        <callback name="_reserved5">
          <source-position filename="nm-device-bond.h" line="68"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved6" introspectable="0">
        <callback name="_reserved6">
          <source-position filename="nm-device-bond.h" line="69"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="DeviceBondError"
                 glib:type-name="NMDeviceBondError"
                 glib:get-type="nm_device_bond_error_get_type"
                 c:type="NMDeviceBondError"
                 glib:error-domain="nm-device-bond-error-quark">
      <member name="UnknownError"
              value="0"
              c:identifier="NM_DEVICE_BOND_ERROR_UNKNOWN"
              glib:nick="UnknownError">
        <doc xml:space="preserve"
             filename="nm-device-bond.h"
             line="37">unknown or unclassified error</doc>
      </member>
      <member name="NotBondConnection"
              value="1"
              c:identifier="NM_DEVICE_BOND_ERROR_NOT_BOND_CONNECTION"
              glib:nick="NotBondConnection">
        <doc xml:space="preserve"
             filename="nm-device-bond.h"
             line="38">the connection was not of bond type</doc>
      </member>
      <member name="InvalidBondConnection"
              value="2"
              c:identifier="NM_DEVICE_BOND_ERROR_INVALID_BOND_CONNECTION"
              glib:nick="InvalidBondConnection">
        <doc xml:space="preserve"
             filename="nm-device-bond.h"
             line="39">the bond connection was invalid</doc>
      </member>
      <member name="InterfaceMismatch"
              value="3"
              c:identifier="NM_DEVICE_BOND_ERROR_INTERFACE_MISMATCH"
              glib:nick="InterfaceMismatch">
        <doc xml:space="preserve"
             filename="nm-device-bond.h"
             line="40">the interfaces of the connection and the device mismatched</doc>
      </member>
      <function name="quark" c:identifier="nm_device_bond_error_quark">
        <doc xml:space="preserve"
             filename="nm-device-bond.c"
             line="56">Registers an error quark for #NMDeviceBond if necessary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-bond.c"
               line="61">the error quark used for #NMDeviceBond errors.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="DeviceBridge"
           c:symbol-prefix="device_bridge"
           c:type="NMDeviceBridge"
           parent="Device"
           glib:type-name="NMDeviceBridge"
           glib:get-type="nm_device_bridge_get_type"
           glib:type-struct="DeviceBridgeClass">
      <source-position filename="nm-device-bridge.h" line="72"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new"
                   c:identifier="nm_device_bridge_new"
                   version="0.9.8">
        <doc xml:space="preserve"
             filename="nm-device-bridge.c"
             line="75">Creates a new #NMDeviceBridge.</doc>
        <source-position filename="nm-device-bridge.h" line="76"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-device-bridge.c"
               line="82">a new device</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-bridge.c"
                 line="77">the #DBusGConnection</doc>
            <type name="DBusGLib.Connection" c:type="DBusGConnection*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-bridge.c"
                 line="78">the DBus object path of the device</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_carrier"
              c:identifier="nm_device_bridge_get_carrier"
              version="0.9.8">
        <doc xml:space="preserve"
             filename="nm-device-bridge.c"
             line="122">Whether the device has carrier.</doc>
        <source-position filename="nm-device-bridge.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-bridge.c"
               line="128">%TRUE if the device has carrier</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-bridge.c"
                 line="124">a #NMDeviceBridge</doc>
            <type name="DeviceBridge" c:type="NMDeviceBridge*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hw_address"
              c:identifier="nm_device_bridge_get_hw_address"
              version="0.9.8">
        <doc xml:space="preserve"
             filename="nm-device-bridge.c"
             line="102">Gets the hardware (MAC) address of the #NMDeviceBridge</doc>
        <source-position filename="nm-device-bridge.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-bridge.c"
               line="108">the hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-bridge.c"
                 line="104">a #NMDeviceBridge</doc>
            <type name="DeviceBridge" c:type="NMDeviceBridge*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_slaves"
              c:identifier="nm_device_bridge_get_slaves"
              version="0.9.8">
        <doc xml:space="preserve"
             filename="nm-device-bridge.c"
             line="141">Gets the devices currently enslaved to @device.</doc>
        <source-position filename="nm-device-bridge.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-bridge.c"
               line="147">the #GPtrArray containing
#NMDevices that are slaves of @device. This is the internal
copy used by the device, and must not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="Device"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-bridge.c"
                 line="143">a #NMDeviceBridge</doc>
            <type name="DeviceBridge" c:type="NMDeviceBridge*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="carrier" version="0.9.8" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-bridge.c"
             line="331">Whether the device has carrier.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hw-address" version="0.9.8" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-bridge.c"
             line="317">The hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="slaves" version="0.9.8" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-bridge.c"
             line="345">The devices (#NMDevice) enslaved to the bridge device.</doc>
        <type name="ObjectArray"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <record name="DeviceBridgeClass"
            c:type="NMDeviceBridgeClass"
            glib:is-gtype-struct-for="DeviceBridge">
      <source-position filename="nm-device-bridge.h" line="72"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <source-position filename="nm-device-bridge.h" line="66"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <source-position filename="nm-device-bridge.h" line="67"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <source-position filename="nm-device-bridge.h" line="68"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved4" introspectable="0">
        <callback name="_reserved4">
          <source-position filename="nm-device-bridge.h" line="69"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved5" introspectable="0">
        <callback name="_reserved5">
          <source-position filename="nm-device-bridge.h" line="70"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved6" introspectable="0">
        <callback name="_reserved6">
          <source-position filename="nm-device-bridge.h" line="71"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="DeviceBridgeError"
                 version="0.9.8"
                 glib:type-name="NMDeviceBridgeError"
                 glib:get-type="nm_device_bridge_error_get_type"
                 c:type="NMDeviceBridgeError"
                 glib:error-domain="nm-device-bridge-error-quark">
      <member name="UnknownError"
              value="0"
              c:identifier="NM_DEVICE_BRIDGE_ERROR_UNKNOWN"
              glib:nick="UnknownError">
        <doc xml:space="preserve"
             filename="nm-device-bridge.h"
             line="37">unknown or unclassified error</doc>
      </member>
      <member name="NotBridgeConnection"
              value="1"
              c:identifier="NM_DEVICE_BRIDGE_ERROR_NOT_BRIDGE_CONNECTION"
              glib:nick="NotBridgeConnection">
        <doc xml:space="preserve"
             filename="nm-device-bridge.h"
             line="38">the connection was not of bridge type</doc>
      </member>
      <member name="InvalidBridgeConnection"
              value="2"
              c:identifier="NM_DEVICE_BRIDGE_ERROR_INVALID_BRIDGE_CONNECTION"
              glib:nick="InvalidBridgeConnection">
        <doc xml:space="preserve"
             filename="nm-device-bridge.h"
             line="39">the bridge connection was invalid</doc>
      </member>
      <member name="InterfaceMismatch"
              value="3"
              c:identifier="NM_DEVICE_BRIDGE_ERROR_INTERFACE_MISMATCH"
              glib:nick="InterfaceMismatch">
        <doc xml:space="preserve"
             filename="nm-device-bridge.h"
             line="40">the interfaces of the connection and the device mismatched</doc>
      </member>
      <function name="quark"
                c:identifier="nm_device_bridge_error_quark"
                version="0.9.8">
        <doc xml:space="preserve"
             filename="nm-device-bridge.c"
             line="56">Registers an error quark for #NMDeviceBridge if necessary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-bridge.c"
               line="61">the error quark used for #NMDeviceBridge errors.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="DeviceBt"
           c:symbol-prefix="device_bt"
           c:type="NMDeviceBt"
           parent="Device"
           glib:type-name="NMDeviceBt"
           glib:get-type="nm_device_bt_get_type"
           glib:type-struct="DeviceBtClass">
      <source-position filename="nm-device-bt.h" line="76"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="nm_device_bt_new">
        <doc xml:space="preserve"
             filename="nm-device-bt.c"
             line="72">Creates a new #NMDeviceBt.</doc>
        <source-position filename="nm-device-bt.h" line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-device-bt.c"
               line="79">a new device</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-bt.c"
                 line="74">the #DBusGConnection</doc>
            <type name="DBusGLib.Connection" c:type="DBusGConnection*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-bt.c"
                 line="75">the DBus object path of the device</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_capabilities"
              c:identifier="nm_device_bt_get_capabilities">
        <doc xml:space="preserve"
             filename="nm-device-bt.c"
             line="128">Returns the Bluetooth device's usable capabilities.</doc>
        <source-position filename="nm-device-bt.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-bt.c"
               line="134">a combination of #NMBluetoothCapabilities</doc>
          <type name="NetworkManager.BluetoothCapabilities"
                c:type="NMBluetoothCapabilities"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-bt.c"
                 line="130">a #NMDeviceBt</doc>
            <type name="DeviceBt" c:type="NMDeviceBt*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hw_address" c:identifier="nm_device_bt_get_hw_address">
        <doc xml:space="preserve"
             filename="nm-device-bt.c"
             line="93">Gets the hardware (MAC) address of the #NMDeviceBt</doc>
        <source-position filename="nm-device-bt.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-bt.c"
               line="99">the hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-bt.c"
                 line="95">a #NMDeviceBt</doc>
            <type name="DeviceBt" c:type="NMDeviceBt*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="nm_device_bt_get_name">
        <doc xml:space="preserve"
             filename="nm-device-bt.c"
             line="111">Gets the name of the #NMDeviceBt.</doc>
        <source-position filename="nm-device-bt.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-bt.c"
               line="117">the name of the device</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-bt.c"
                 line="113">a #NMDeviceBt</doc>
            <type name="DeviceBt" c:type="NMDeviceBt*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="bt-capabilities" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-bt.c"
             line="360">The device's bluetooth capabilities, a combination of #NMBluetoothCapabilities.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="hw-address" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-bt.c"
             line="336">The hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-bt.c"
             line="348">The name of the bluetooth device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <record name="DeviceBtClass"
            c:type="NMDeviceBtClass"
            glib:is-gtype-struct-for="DeviceBt">
      <source-position filename="nm-device-bt.h" line="76"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <source-position filename="nm-device-bt.h" line="70"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <source-position filename="nm-device-bt.h" line="71"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <source-position filename="nm-device-bt.h" line="72"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved4" introspectable="0">
        <callback name="_reserved4">
          <source-position filename="nm-device-bt.h" line="73"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved5" introspectable="0">
        <callback name="_reserved5">
          <source-position filename="nm-device-bt.h" line="74"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved6" introspectable="0">
        <callback name="_reserved6">
          <source-position filename="nm-device-bt.h" line="75"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="DeviceBtError"
                 glib:type-name="NMDeviceBtError"
                 glib:get-type="nm_device_bt_error_get_type"
                 c:type="NMDeviceBtError"
                 glib:error-domain="nm-device-bt-error-quark">
      <member name="UnknownError"
              value="0"
              c:identifier="NM_DEVICE_BT_ERROR_UNKNOWN"
              glib:nick="UnknownError">
        <doc xml:space="preserve"
             filename="nm-device-bt.h"
             line="39">unknown or unclassified error</doc>
      </member>
      <member name="NotBtConnection"
              value="1"
              c:identifier="NM_DEVICE_BT_ERROR_NOT_BT_CONNECTION"
              glib:nick="NotBtConnection">
        <doc xml:space="preserve"
             filename="nm-device-bt.h"
             line="40">the connection was not of bluetooth type</doc>
      </member>
      <member name="InvalidBtConnection"
              value="2"
              c:identifier="NM_DEVICE_BT_ERROR_INVALID_BT_CONNECTION"
              glib:nick="InvalidBtConnection">
        <doc xml:space="preserve"
             filename="nm-device-bt.h"
             line="41">the bluetooth connection was invalid</doc>
      </member>
      <member name="InvalidDeviceMac"
              value="3"
              c:identifier="NM_DEVICE_BT_ERROR_INVALID_DEVICE_MAC"
              glib:nick="InvalidDeviceMac">
        <doc xml:space="preserve"
             filename="nm-device-bt.h"
             line="42">the device's MAC was invalid</doc>
      </member>
      <member name="MacMismatch"
              value="4"
              c:identifier="NM_DEVICE_BT_ERROR_MAC_MISMATCH"
              glib:nick="MacMismatch">
        <doc xml:space="preserve"
             filename="nm-device-bt.h"
             line="43">the MACs of the connection and the device mismatched</doc>
      </member>
      <member name="MissingDeviceCaps"
              value="5"
              c:identifier="NM_DEVICE_BT_ERROR_MISSING_DEVICE_CAPS"
              glib:nick="MissingDeviceCaps">
        <doc xml:space="preserve"
             filename="nm-device-bt.h"
             line="44">the device missed required capabilities</doc>
      </member>
      <function name="quark" c:identifier="nm_device_bt_error_quark">
        <doc xml:space="preserve"
             filename="nm-device-bt.c"
             line="55">Registers an error quark for #NMDeviceBt if necessary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-bt.c"
               line="60">the error quark used for #NMDeviceBt errors.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <callback name="DeviceCallbackFn" c:type="NMDeviceCallbackFn">
      <source-position filename="nm-device.h" line="161"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <type name="Device" c:type="NMDevice*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <type name="GLib.Error" c:type="GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="DeviceClass"
            c:type="NMDeviceClass"
            glib:is-gtype-struct-for="Device">
      <source-position filename="nm-device.h" line="112"/>
      <field name="parent">
        <type name="ObjectClass" c:type="NMObjectClass"/>
      </field>
      <field name="state_changed">
        <callback name="state_changed">
          <source-position filename="nm-device.h" line="94"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="device" transfer-ownership="none">
              <type name="Device" c:type="NMDevice*"/>
            </parameter>
            <parameter name="new_state" transfer-ownership="none">
              <type name="NetworkManager.DeviceState" c:type="NMDeviceState"/>
            </parameter>
            <parameter name="old_state" transfer-ownership="none">
              <type name="NetworkManager.DeviceState" c:type="NMDeviceState"/>
            </parameter>
            <parameter name="reason" transfer-ownership="none">
              <type name="NetworkManager.DeviceStateReason"
                    c:type="NMDeviceStateReason"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="connection_compatible">
        <callback name="connection_compatible" throws="1">
          <source-position filename="nm-device.h" line="99"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="2307">%TRUE if the connection may be activated with this device, %FALSE
if is incompatible with the device's capabilities and characteristics.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="device" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="nm-device.c"
                   line="2291">an #NMDevice to validate @connection against</doc>
              <type name="Device" c:type="NMDevice*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="nm-device.c"
                   line="2292">an #NMConnection to validate against @device</doc>
              <type name="NetworkManager.Connection" c:type="NMConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_type_description">
        <callback name="get_type_description">
          <source-position filename="nm-device.h" line="103"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1165">the type description of the device. This is the internal
string used by the device, and must not be modified.</doc>
            <type name="utf8" c:type="const char*"/>
          </return-value>
          <parameters>
            <parameter name="device" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="nm-device.c"
                   line="1160">a #NMDevice</doc>
              <type name="Device" c:type="NMDevice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_hw_address">
        <callback name="get_hw_address">
          <source-position filename="nm-device.h" line="104"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="1201">the current MAC of the device, or %NULL.
This is the internal string used by the device, and must not be modified.</doc>
            <type name="utf8" c:type="const char*"/>
          </return-value>
          <parameters>
            <parameter name="device" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="nm-device.c"
                   line="1197">a #NMDevice</doc>
              <type name="Device" c:type="NMDevice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_setting_type">
        <callback name="get_setting_type">
          <source-position filename="nm-device.h" line="106"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device.c"
                 line="2364">@device's associated #NMSetting type</doc>
            <type name="GType" c:type="GType"/>
          </return-value>
          <parameters>
            <parameter name="device" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="nm-device.c"
                   line="2359">an #NMDevice</doc>
              <type name="Device" c:type="NMDevice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <source-position filename="nm-device.h" line="109"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <source-position filename="nm-device.h" line="110"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <source-position filename="nm-device.h" line="111"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="DeviceDeactivateFn" c:type="NMDeviceDeactivateFn">
      <source-position filename="nm-device.h" line="187"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <type name="Device" c:type="NMDevice*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <type name="GLib.Error" c:type="GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="DeviceError"
                 glib:type-name="NMDeviceError"
                 glib:get-type="nm_device_error_get_type"
                 c:type="NMDeviceError"
                 glib:error-domain="nm-device-error-quark">
      <member name="UnknownError"
              value="0"
              c:identifier="NM_DEVICE_ERROR_UNKNOWN"
              glib:nick="UnknownError">
        <doc xml:space="preserve"
             filename="nm-device.h"
             line="48">unknown or unclassified error</doc>
      </member>
      <member name="InterfaceMismatch"
              value="1"
              c:identifier="NM_DEVICE_ERROR_INTERFACE_MISMATCH"
              glib:nick="InterfaceMismatch">
        <doc xml:space="preserve"
             filename="nm-device.h"
             line="49">the interface names of the connection and the
  device mismatched</doc>
      </member>
      <function name="quark"
                c:identifier="nm_device_error_quark"
                version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="144">Registers an error quark for #NMDevice if necessary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device.c"
               line="149">the error quark used for #NMDevice errors.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="DeviceEthernet"
           c:symbol-prefix="device_ethernet"
           c:type="NMDeviceEthernet"
           parent="Device"
           glib:type-name="NMDeviceEthernet"
           glib:get-type="nm_device_ethernet_get_type"
           glib:type-struct="DeviceEthernetClass">
      <source-position filename="nm-device-ethernet.h" line="74"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="nm_device_ethernet_new">
        <doc xml:space="preserve"
             filename="nm-device-ethernet.c"
             line="75">Creates a new #NMDeviceEthernet.</doc>
        <source-position filename="nm-device-ethernet.h" line="78"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-device-ethernet.c"
               line="82">a new device</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-ethernet.c"
                 line="77">the #DBusGConnection</doc>
            <type name="DBusGLib.Connection" c:type="DBusGConnection*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-ethernet.c"
                 line="78">the DBus object path of the device</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_carrier" c:identifier="nm_device_ethernet_get_carrier">
        <doc xml:space="preserve"
             filename="nm-device-ethernet.c"
             line="153">Whether the device has carrier.</doc>
        <source-position filename="nm-device-ethernet.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-ethernet.c"
               line="159">%TRUE if the device has carrier</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-ethernet.c"
                 line="155">a #NMDeviceEthernet</doc>
            <type name="DeviceEthernet" c:type="NMDeviceEthernet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hw_address"
              c:identifier="nm_device_ethernet_get_hw_address">
        <doc xml:space="preserve"
             filename="nm-device-ethernet.c"
             line="100">Gets the active hardware (MAC) address of the #NMDeviceEthernet</doc>
        <source-position filename="nm-device-ethernet.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-ethernet.c"
               line="106">the active hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-ethernet.c"
                 line="102">a #NMDeviceEthernet</doc>
            <type name="DeviceEthernet" c:type="NMDeviceEthernet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_permanent_hw_address"
              c:identifier="nm_device_ethernet_get_permanent_hw_address">
        <doc xml:space="preserve"
             filename="nm-device-ethernet.c"
             line="118">Gets the permanent hardware (MAC) address of the #NMDeviceEthernet</doc>
        <source-position filename="nm-device-ethernet.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-ethernet.c"
               line="124">the permanent hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-ethernet.c"
                 line="120">a #NMDeviceEthernet</doc>
            <type name="DeviceEthernet" c:type="NMDeviceEthernet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_speed" c:identifier="nm_device_ethernet_get_speed">
        <doc xml:space="preserve"
             filename="nm-device-ethernet.c"
             line="136">Gets the speed of the #NMDeviceEthernet in Mbit/s.</doc>
        <source-position filename="nm-device-ethernet.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-ethernet.c"
               line="142">the speed of the device in Mbit/s</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-ethernet.c"
                 line="138">a #NMDeviceEthernet</doc>
            <type name="DeviceEthernet" c:type="NMDeviceEthernet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="carrier" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-ethernet.c"
             line="379">Whether the device has carrier.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hw-address" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-ethernet.c"
             line="343">The active hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="perm-hw-address" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-ethernet.c"
             line="355">The permanent hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="speed" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-ethernet.c"
             line="367">The speed of the device.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <record name="DeviceEthernetClass"
            c:type="NMDeviceEthernetClass"
            glib:is-gtype-struct-for="DeviceEthernet">
      <source-position filename="nm-device-ethernet.h" line="74"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <source-position filename="nm-device-ethernet.h" line="68"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <source-position filename="nm-device-ethernet.h" line="69"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <source-position filename="nm-device-ethernet.h" line="70"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved4" introspectable="0">
        <callback name="_reserved4">
          <source-position filename="nm-device-ethernet.h" line="71"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved5" introspectable="0">
        <callback name="_reserved5">
          <source-position filename="nm-device-ethernet.h" line="72"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved6" introspectable="0">
        <callback name="_reserved6">
          <source-position filename="nm-device-ethernet.h" line="73"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="DeviceEthernetError"
                 glib:type-name="NMDeviceEthernetError"
                 glib:get-type="nm_device_ethernet_error_get_type"
                 c:type="NMDeviceEthernetError"
                 glib:error-domain="nm-device-ethernet-error-quark">
      <member name="UnknownError"
              value="0"
              c:identifier="NM_DEVICE_ETHERNET_ERROR_UNKNOWN"
              glib:nick="UnknownError">
        <doc xml:space="preserve"
             filename="nm-device-ethernet.h"
             line="38">unknown or unclassified error</doc>
      </member>
      <member name="NotEthernetConnection"
              value="1"
              c:identifier="NM_DEVICE_ETHERNET_ERROR_NOT_ETHERNET_CONNECTION"
              glib:nick="NotEthernetConnection">
        <doc xml:space="preserve"
             filename="nm-device-ethernet.h"
             line="39">the connection was not of Ethernet or PPPoE type</doc>
      </member>
      <member name="InvalidEthernetConnection"
              value="2"
              c:identifier="NM_DEVICE_ETHERNET_ERROR_INVALID_ETHERNET_CONNECTION"
              glib:nick="InvalidEthernetConnection">
        <doc xml:space="preserve"
             filename="nm-device-ethernet.h"
             line="40">the Ethernet connection was invalid</doc>
      </member>
      <member name="InvalidDeviceMac"
              value="3"
              c:identifier="NM_DEVICE_ETHERNET_ERROR_INVALID_DEVICE_MAC"
              glib:nick="InvalidDeviceMac">
        <doc xml:space="preserve"
             filename="nm-device-ethernet.h"
             line="41">the device's MAC was invalid</doc>
      </member>
      <member name="MacMismatch"
              value="4"
              c:identifier="NM_DEVICE_ETHERNET_ERROR_MAC_MISMATCH"
              glib:nick="MacMismatch">
        <doc xml:space="preserve"
             filename="nm-device-ethernet.h"
             line="42">the MACs of the connection and the device mismatched</doc>
      </member>
      <function name="quark" c:identifier="nm_device_ethernet_error_quark">
        <doc xml:space="preserve"
             filename="nm-device-ethernet.c"
             line="58">Registers an error quark for #NMDeviceEthernet if necessary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-ethernet.c"
               line="63">the error quark used for #NMDeviceEthernet errors.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="DeviceGeneric"
           c:symbol-prefix="device_generic"
           c:type="NMDeviceGeneric"
           parent="Device"
           glib:type-name="NMDeviceGeneric"
           glib:get-type="nm_device_generic_get_type"
           glib:type-struct="DeviceGenericClass">
      <source-position filename="nm-device-generic.h" line="67"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new"
                   c:identifier="nm_device_generic_new"
                   version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-device-generic.c"
             line="68">Creates a new #NMDeviceGeneric.</doc>
        <source-position filename="nm-device-generic.h" line="73"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-device-generic.c"
               line="75">a new device</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-generic.c"
                 line="70">the #DBusGConnection</doc>
            <type name="DBusGLib.Connection" c:type="DBusGConnection*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-generic.c"
                 line="71">the DBus object path of the device</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_hw_address"
              c:identifier="nm_device_generic_get_hw_address"
              version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-device-generic.c"
             line="95">Gets the hardware address of the #NMDeviceGeneric</doc>
        <source-position filename="nm-device-generic.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-generic.c"
               line="101">the hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-generic.c"
                 line="97">a #NMDeviceGeneric</doc>
            <type name="DeviceGeneric" c:type="NMDeviceGeneric*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="hw-address" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-generic.c"
             line="286">The hardware address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="type-description" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-generic.c"
             line="298">A description of the specific type of device this is, or %NULL
if not known.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <record name="DeviceGenericClass"
            c:type="NMDeviceGenericClass"
            glib:is-gtype-struct-for="DeviceGeneric">
      <source-position filename="nm-device-generic.h" line="67"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <source-position filename="nm-device-generic.h" line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <source-position filename="nm-device-generic.h" line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <source-position filename="nm-device-generic.h" line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved4" introspectable="0">
        <callback name="_reserved4">
          <source-position filename="nm-device-generic.h" line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved5" introspectable="0">
        <callback name="_reserved5">
          <source-position filename="nm-device-generic.h" line="65"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved6" introspectable="0">
        <callback name="_reserved6">
          <source-position filename="nm-device-generic.h" line="66"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="DeviceGenericError"
                 glib:type-name="NMDeviceGenericError"
                 glib:get-type="nm_device_generic_error_get_type"
                 c:type="NMDeviceGenericError"
                 glib:error-domain="nm-device-generic-error-quark">
      <member name="UnknownError"
              value="0"
              c:identifier="NM_DEVICE_GENERIC_ERROR_UNKNOWN"
              glib:nick="UnknownError">
        <doc xml:space="preserve"
             filename="nm-device-generic.h"
             line="37">unknown or unclassified error</doc>
      </member>
      <member name="NotGenericConnection"
              value="1"
              c:identifier="NM_DEVICE_GENERIC_ERROR_NOT_GENERIC_CONNECTION"
              glib:nick="NotGenericConnection">
        <doc xml:space="preserve"
             filename="nm-device-generic.h"
             line="38">the connection was not of generic type</doc>
      </member>
      <member name="MissingInterfaceName"
              value="2"
              c:identifier="NM_DEVICE_GENERIC_ERROR_MISSING_INTERFACE_NAME"
              glib:nick="MissingInterfaceName">
        <doc xml:space="preserve"
             filename="nm-device-generic.h"
             line="39">the connection did not specify the interface name</doc>
      </member>
      <function name="quark"
                c:identifier="nm_device_generic_error_quark"
                version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-device-generic.c"
             line="49">Registers an error quark for #NMDeviceGeneric if necessary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-generic.c"
               line="54">the error quark used for #NMDeviceGeneric errors.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="DeviceInfiniband"
           c:symbol-prefix="device_infiniband"
           c:type="NMDeviceInfiniband"
           parent="Device"
           glib:type-name="NMDeviceInfiniband"
           glib:get-type="nm_device_infiniband_get_type"
           glib:type-struct="DeviceInfinibandClass">
      <source-position filename="nm-device-infiniband.h" line="71"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="nm_device_infiniband_new">
        <doc xml:space="preserve"
             filename="nm-device-infiniband.c"
             line="71">Creates a new #NMDeviceInfiniband.</doc>
        <source-position filename="nm-device-infiniband.h" line="75"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-device-infiniband.c"
               line="78">a new device</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-infiniband.c"
                 line="73">the #DBusGConnection</doc>
            <type name="DBusGLib.Connection" c:type="DBusGConnection*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-infiniband.c"
                 line="74">the DBus object path of the device</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_carrier"
              c:identifier="nm_device_infiniband_get_carrier">
        <doc xml:space="preserve"
             filename="nm-device-infiniband.c"
             line="114">Whether the device has carrier.</doc>
        <source-position filename="nm-device-infiniband.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-infiniband.c"
               line="120">%TRUE if the device has carrier</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-infiniband.c"
                 line="116">a #NMDeviceInfiniband</doc>
            <type name="DeviceInfiniband" c:type="NMDeviceInfiniband*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hw_address"
              c:identifier="nm_device_infiniband_get_hw_address">
        <doc xml:space="preserve"
             filename="nm-device-infiniband.c"
             line="96">Gets the hardware (MAC) address of the #NMDeviceInfiniband</doc>
        <source-position filename="nm-device-infiniband.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-infiniband.c"
               line="102">the hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-infiniband.c"
                 line="98">a #NMDeviceInfiniband</doc>
            <type name="DeviceInfiniband" c:type="NMDeviceInfiniband*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="carrier" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-infiniband.c"
             line="298">Whether the device has carrier.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hw-address" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-infiniband.c"
             line="286">The hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <record name="DeviceInfinibandClass"
            c:type="NMDeviceInfinibandClass"
            glib:is-gtype-struct-for="DeviceInfiniband">
      <source-position filename="nm-device-infiniband.h" line="71"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <source-position filename="nm-device-infiniband.h" line="65"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <source-position filename="nm-device-infiniband.h" line="66"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <source-position filename="nm-device-infiniband.h" line="67"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved4" introspectable="0">
        <callback name="_reserved4">
          <source-position filename="nm-device-infiniband.h" line="68"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved5" introspectable="0">
        <callback name="_reserved5">
          <source-position filename="nm-device-infiniband.h" line="69"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved6" introspectable="0">
        <callback name="_reserved6">
          <source-position filename="nm-device-infiniband.h" line="70"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="DeviceInfinibandError"
                 glib:type-name="NMDeviceInfinibandError"
                 glib:get-type="nm_device_infiniband_error_get_type"
                 c:type="NMDeviceInfinibandError"
                 glib:error-domain="nm-device-infiniband-error-quark">
      <member name="UnknownError"
              value="0"
              c:identifier="NM_DEVICE_INFINIBAND_ERROR_UNKNOWN"
              glib:nick="UnknownError">
        <doc xml:space="preserve"
             filename="nm-device-infiniband.h"
             line="37">unknown or unclassified error</doc>
      </member>
      <member name="NotInfinibandConnection"
              value="1"
              c:identifier="NM_DEVICE_INFINIBAND_ERROR_NOT_INFINIBAND_CONNECTION"
              glib:nick="NotInfinibandConnection">
        <doc xml:space="preserve"
             filename="nm-device-infiniband.h"
             line="38">the connection was not of InfiniBand type</doc>
      </member>
      <member name="InvalidInfinibandConnection"
              value="2"
              c:identifier="NM_DEVICE_INFINIBAND_ERROR_INVALID_INFINIBAND_CONNECTION"
              glib:nick="InvalidInfinibandConnection">
        <doc xml:space="preserve"
             filename="nm-device-infiniband.h"
             line="39">the InfiniBand connection was invalid</doc>
      </member>
      <member name="InvalidDeviceMac"
              value="3"
              c:identifier="NM_DEVICE_INFINIBAND_ERROR_INVALID_DEVICE_MAC"
              glib:nick="InvalidDeviceMac">
        <doc xml:space="preserve"
             filename="nm-device-infiniband.h"
             line="40">the device's MAC was invalid</doc>
      </member>
      <member name="MacMismatch"
              value="4"
              c:identifier="NM_DEVICE_INFINIBAND_ERROR_MAC_MISMATCH"
              glib:nick="MacMismatch">
        <doc xml:space="preserve"
             filename="nm-device-infiniband.h"
             line="41">the MACs of the connection and the device mismatched</doc>
      </member>
      <function name="quark" c:identifier="nm_device_infiniband_error_quark">
        <doc xml:space="preserve"
             filename="nm-device-infiniband.c"
             line="54">Registers an error quark for #NMDeviceInfiniband if necessary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-infiniband.c"
               line="59">the error quark used for #NMDeviceInfiniband errors.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="DeviceModem"
           c:symbol-prefix="device_modem"
           c:type="NMDeviceModem"
           parent="Device"
           glib:type-name="NMDeviceModem"
           glib:get-type="nm_device_modem_get_type"
           glib:type-struct="DeviceModemClass">
      <source-position filename="nm-device-modem.h" line="70"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <method name="get_current_capabilities"
              c:identifier="nm_device_modem_get_current_capabilities">
        <doc xml:space="preserve"
             filename="nm-device-modem.c"
             line="88">Returns a bitfield of the generic access technology families the modem
supports without a firmware reload or reinitialization.  This value
represents the network types the modem can immediately connect to.</doc>
        <source-position filename="nm-device-modem.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-modem.c"
               line="96">the generic access technology families the modem supports without
a firmware reload or other reinitialization</doc>
          <type name="NetworkManager.DeviceModemCapabilities"
                c:type="NMDeviceModemCapabilities"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-modem.c"
                 line="90">a #NMDeviceModem</doc>
            <type name="DeviceModem" c:type="NMDeviceModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modem_capabilities"
              c:identifier="nm_device_modem_get_modem_capabilities">
        <doc xml:space="preserve"
             filename="nm-device-modem.c"
             line="69">Returns a bitfield of the generic access technology families the modem
supports.  Not all capabilities are available concurrently however; some
may require a firmware reload or reinitialization.</doc>
        <source-position filename="nm-device-modem.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-modem.c"
               line="77">the generic access technology families the modem supports</doc>
          <type name="NetworkManager.DeviceModemCapabilities"
                c:type="NMDeviceModemCapabilities"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-modem.c"
                 line="71">a #NMDeviceModem</doc>
            <type name="DeviceModem" c:type="NMDeviceModem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="current-capabilities" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-modem.c"
             line="278">The generic family of access technologies the modem currently supports
without a firmware reload or reinitialization.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="modem-capabilities" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-modem.c"
             line="263">The generic family of access technologies the modem supports.  Not all
capabilities are available at the same time however; some modems require
a firmware reload or other reinitialization to switch between eg
CDMA/EVDO and GSM/UMTS.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <record name="DeviceModemClass"
            c:type="NMDeviceModemClass"
            glib:is-gtype-struct-for="DeviceModem">
      <source-position filename="nm-device-modem.h" line="70"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <source-position filename="nm-device-modem.h" line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <source-position filename="nm-device-modem.h" line="65"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <source-position filename="nm-device-modem.h" line="66"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved4" introspectable="0">
        <callback name="_reserved4">
          <source-position filename="nm-device-modem.h" line="67"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved5" introspectable="0">
        <callback name="_reserved5">
          <source-position filename="nm-device-modem.h" line="68"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved6" introspectable="0">
        <callback name="_reserved6">
          <source-position filename="nm-device-modem.h" line="69"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="DeviceModemError"
                 glib:type-name="NMDeviceModemError"
                 glib:get-type="nm_device_modem_error_get_type"
                 c:type="NMDeviceModemError"
                 glib:error-domain="nm-device-modem-error-quark">
      <member name="UnknownError"
              value="0"
              c:identifier="NM_DEVICE_MODEM_ERROR_UNKNOWN"
              glib:nick="UnknownError">
        <doc xml:space="preserve"
             filename="nm-device-modem.h"
             line="38">unknown or unclassified error</doc>
      </member>
      <member name="NotModemConnection"
              value="1"
              c:identifier="NM_DEVICE_MODEM_ERROR_NOT_MODEM_CONNECTION"
              glib:nick="NotModemConnection">
        <doc xml:space="preserve"
             filename="nm-device-modem.h"
             line="39">the connection was not of modem type</doc>
      </member>
      <member name="InvalidModemConnection"
              value="2"
              c:identifier="NM_DEVICE_MODEM_ERROR_INVALID_MODEM_CONNECTION"
              glib:nick="InvalidModemConnection">
        <doc xml:space="preserve"
             filename="nm-device-modem.h"
             line="40">the modem connection was invalid</doc>
      </member>
      <member name="MissingDeviceCaps"
              value="3"
              c:identifier="NM_DEVICE_MODEM_ERROR_MISSING_DEVICE_CAPS"
              glib:nick="MissingDeviceCaps">
        <doc xml:space="preserve"
             filename="nm-device-modem.h"
             line="41">the device missed required capabilities</doc>
      </member>
      <function name="quark" c:identifier="nm_device_modem_error_quark">
        <doc xml:space="preserve"
             filename="nm-device-modem.c"
             line="52">Registers an error quark for #NMDeviceModem if necessary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-modem.c"
               line="57">the error quark used for #NMDeviceModem errors.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="DeviceOlpcMesh"
           c:symbol-prefix="device_olpc_mesh"
           c:type="NMDeviceOlpcMesh"
           parent="Device"
           glib:type-name="NMDeviceOlpcMesh"
           glib:get-type="nm_device_olpc_mesh_get_type"
           glib:type-struct="DeviceOlpcMeshClass">
      <source-position filename="nm-device-olpc-mesh.h" line="69"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="nm_device_olpc_mesh_new">
        <doc xml:space="preserve"
             filename="nm-device-olpc-mesh.c"
             line="71">Creates a new #NMDeviceOlpcMesh.</doc>
        <source-position filename="nm-device-olpc-mesh.h" line="73"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-device-olpc-mesh.c"
               line="78">a new OlpcMesh device</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-olpc-mesh.c"
                 line="73">the #DBusGConnection</doc>
            <type name="DBusGLib.Connection" c:type="DBusGConnection*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-olpc-mesh.c"
                 line="74">the DBus object path of the device</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_active_channel"
              c:identifier="nm_device_olpc_mesh_get_active_channel">
        <doc xml:space="preserve"
             filename="nm-device-olpc-mesh.c"
             line="132">Returns the active channel of the #NMDeviceOlpcMesh device.</doc>
        <source-position filename="nm-device-olpc-mesh.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-olpc-mesh.c"
               line="138">active channel of the device</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-olpc-mesh.c"
                 line="134">a #NMDeviceOlpcMesh</doc>
            <type name="DeviceOlpcMesh" c:type="NMDeviceOlpcMesh*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_companion"
              c:identifier="nm_device_olpc_mesh_get_companion">
        <doc xml:space="preserve"
             filename="nm-device-olpc-mesh.c"
             line="115">Gets the companion device of the #NMDeviceOlpcMesh.</doc>
        <source-position filename="nm-device-olpc-mesh.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-olpc-mesh.c"
               line="121">the companion of the device of %NULL</doc>
          <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-olpc-mesh.c"
                 line="117">a #NMDeviceOlpcMesh</doc>
            <type name="DeviceOlpcMesh" c:type="NMDeviceOlpcMesh*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hw_address"
              c:identifier="nm_device_olpc_mesh_get_hw_address">
        <doc xml:space="preserve"
             filename="nm-device-olpc-mesh.c"
             line="97">Gets the hardware (MAC) address of the #NMDeviceOlpcMesh</doc>
        <source-position filename="nm-device-olpc-mesh.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-olpc-mesh.c"
               line="103">the hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-olpc-mesh.c"
                 line="99">a #NMDeviceOlpcMesh</doc>
            <type name="DeviceOlpcMesh" c:type="NMDeviceOlpcMesh*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="active-channel" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-olpc-mesh.c"
             line="313">The device's active channel.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="companion" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-olpc-mesh.c"
             line="301">The companion device.</doc>
        <type name="DeviceWifi"/>
      </property>
      <property name="hw-address" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-olpc-mesh.c"
             line="289">The hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <record name="DeviceOlpcMeshClass"
            c:type="NMDeviceOlpcMeshClass"
            glib:is-gtype-struct-for="DeviceOlpcMesh">
      <source-position filename="nm-device-olpc-mesh.h" line="69"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <source-position filename="nm-device-olpc-mesh.h" line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <source-position filename="nm-device-olpc-mesh.h" line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <source-position filename="nm-device-olpc-mesh.h" line="65"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved4" introspectable="0">
        <callback name="_reserved4">
          <source-position filename="nm-device-olpc-mesh.h" line="66"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved5" introspectable="0">
        <callback name="_reserved5">
          <source-position filename="nm-device-olpc-mesh.h" line="67"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved6" introspectable="0">
        <callback name="_reserved6">
          <source-position filename="nm-device-olpc-mesh.h" line="68"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="DeviceOlpcMeshError"
                 glib:type-name="NMDeviceOlpcMeshError"
                 glib:get-type="nm_device_olpc_mesh_error_get_type"
                 c:type="NMDeviceOlpcMeshError"
                 glib:error-domain="nm-device-olpc-mesh-error-quark">
      <member name="UnknownError"
              value="0"
              c:identifier="NM_DEVICE_OLPC_MESH_ERROR_UNKNOWN"
              glib:nick="UnknownError">
        <doc xml:space="preserve"
             filename="nm-device-olpc-mesh.h"
             line="38">unknown or unclassified error</doc>
      </member>
      <member name="NotOlpcMeshConnection"
              value="1"
              c:identifier="NM_DEVICE_OLPC_MESH_ERROR_NOT_OLPC_MESH_CONNECTION"
              glib:nick="NotOlpcMeshConnection">
        <doc xml:space="preserve"
             filename="nm-device-olpc-mesh.h"
             line="39">the connection was not of Olpc Mesh type</doc>
      </member>
      <member name="InvalidOlpcMeshConnection"
              value="2"
              c:identifier="NM_DEVICE_OLPC_MESH_ERROR_INVALID_OLPC_MESH_CONNECTION"
              glib:nick="InvalidOlpcMeshConnection">
        <doc xml:space="preserve"
             filename="nm-device-olpc-mesh.h"
             line="40">the Olpc Mesh connection was invalid</doc>
      </member>
      <function name="quark" c:identifier="nm_device_olpc_mesh_error_quark">
        <doc xml:space="preserve"
             filename="nm-device-olpc-mesh.c"
             line="54">Registers an error quark for #NMDeviceOlpcMesh if necessary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-olpc-mesh.c"
               line="59">the error quark used for #NMDeviceOlpcMesh errors.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="DeviceTeam"
           c:symbol-prefix="device_team"
           c:type="NMDeviceTeam"
           parent="Device"
           glib:type-name="NMDeviceTeam"
           glib:get-type="nm_device_team_get_type"
           glib:type-struct="DeviceTeamClass">
      <source-position filename="nm-device-team.h" line="71"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new"
                   c:identifier="nm_device_team_new"
                   version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-device-team.c"
             line="75">Creates a new #NMDeviceTeam.</doc>
        <source-position filename="nm-device-team.h" line="77"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-device-team.c"
               line="82">a new device</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-team.c"
                 line="77">the #DBusGConnection</doc>
            <type name="DBusGLib.Connection" c:type="DBusGConnection*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-team.c"
                 line="78">the DBus object path of the device</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_carrier"
              c:identifier="nm_device_team_get_carrier"
              version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-device-team.c"
             line="122">Whether the device has carrier.</doc>
        <source-position filename="nm-device-team.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-team.c"
               line="128">%TRUE if the device has carrier</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-team.c"
                 line="124">a #NMDeviceTeam</doc>
            <type name="DeviceTeam" c:type="NMDeviceTeam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hw_address"
              c:identifier="nm_device_team_get_hw_address"
              version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-device-team.c"
             line="102">Gets the hardware (MAC) address of the #NMDeviceTeam</doc>
        <source-position filename="nm-device-team.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-team.c"
               line="108">the hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-team.c"
                 line="104">a #NMDeviceTeam</doc>
            <type name="DeviceTeam" c:type="NMDeviceTeam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_slaves"
              c:identifier="nm_device_team_get_slaves"
              version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-device-team.c"
             line="141">Gets the devices currently enslaved to @device.</doc>
        <source-position filename="nm-device-team.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-team.c"
               line="147">the #GPtrArray containing
#NMDevices that are slaves of @device. This is the internal
copy used by the device, and must not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="Device"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-team.c"
                 line="143">a #NMDeviceTeam</doc>
            <type name="DeviceTeam" c:type="NMDeviceTeam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="carrier" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-team.c"
             line="329">Whether the device has carrier.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hw-address" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-team.c"
             line="317">The hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="slaves" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-team.c"
             line="341">The devices (#NMDevice) enslaved to the team device.</doc>
        <type name="ObjectArray"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <record name="DeviceTeamClass"
            c:type="NMDeviceTeamClass"
            glib:is-gtype-struct-for="DeviceTeam">
      <source-position filename="nm-device-team.h" line="71"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <source-position filename="nm-device-team.h" line="65"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <source-position filename="nm-device-team.h" line="66"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <source-position filename="nm-device-team.h" line="67"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved4" introspectable="0">
        <callback name="_reserved4">
          <source-position filename="nm-device-team.h" line="68"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved5" introspectable="0">
        <callback name="_reserved5">
          <source-position filename="nm-device-team.h" line="69"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved6" introspectable="0">
        <callback name="_reserved6">
          <source-position filename="nm-device-team.h" line="70"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="DeviceTeamError"
                 glib:type-name="NMDeviceTeamError"
                 glib:get-type="nm_device_team_error_get_type"
                 c:type="NMDeviceTeamError"
                 glib:error-domain="nm-device-team-error-quark">
      <member name="UnknownError"
              value="0"
              c:identifier="NM_DEVICE_TEAM_ERROR_UNKNOWN"
              glib:nick="UnknownError">
        <doc xml:space="preserve"
             filename="nm-device-team.h"
             line="37">unknown or unclassified error</doc>
      </member>
      <member name="NotTeamConnection"
              value="1"
              c:identifier="NM_DEVICE_TEAM_ERROR_NOT_TEAM_CONNECTION"
              glib:nick="NotTeamConnection">
        <doc xml:space="preserve"
             filename="nm-device-team.h"
             line="38">the connection was not of team type</doc>
      </member>
      <member name="InvalidTeamConnection"
              value="2"
              c:identifier="NM_DEVICE_TEAM_ERROR_INVALID_TEAM_CONNECTION"
              glib:nick="InvalidTeamConnection">
        <doc xml:space="preserve"
             filename="nm-device-team.h"
             line="39">the team connection was invalid</doc>
      </member>
      <member name="InterfaceMismatch"
              value="3"
              c:identifier="NM_DEVICE_TEAM_ERROR_INTERFACE_MISMATCH"
              glib:nick="InterfaceMismatch">
        <doc xml:space="preserve"
             filename="nm-device-team.h"
             line="40">the interfaces of the connection and the device mismatched</doc>
      </member>
      <function name="quark"
                c:identifier="nm_device_team_error_quark"
                version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-device-team.c"
             line="56">Registers an error quark for #NMDeviceTeam if necessary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-team.c"
               line="61">the error quark used for #NMDeviceTeam errors.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="DeviceVlan"
           c:symbol-prefix="device_vlan"
           c:type="NMDeviceVlan"
           parent="Device"
           glib:type-name="NMDeviceVlan"
           glib:get-type="nm_device_vlan_get_type"
           glib:type-struct="DeviceVlanClass">
      <source-position filename="nm-device-vlan.h" line="75"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="nm_device_vlan_new">
        <doc xml:space="preserve"
             filename="nm-device-vlan.c"
             line="74">Creates a new #NMDeviceVlan.</doc>
        <source-position filename="nm-device-vlan.h" line="79"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-device-vlan.c"
               line="81">a new device</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-vlan.c"
                 line="76">the #DBusGConnection</doc>
            <type name="DBusGLib.Connection" c:type="DBusGConnection*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-vlan.c"
                 line="77">the DBus object path of the device</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_carrier" c:identifier="nm_device_vlan_get_carrier">
        <doc xml:space="preserve"
             filename="nm-device-vlan.c"
             line="117">Whether the device has carrier.</doc>
        <source-position filename="nm-device-vlan.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-vlan.c"
               line="123">%TRUE if the device has carrier</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-vlan.c"
                 line="119">a #NMDeviceVlan</doc>
            <type name="DeviceVlan" c:type="NMDeviceVlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hw_address"
              c:identifier="nm_device_vlan_get_hw_address">
        <doc xml:space="preserve"
             filename="nm-device-vlan.c"
             line="99">Gets the hardware (MAC) address of the #NMDeviceVlan</doc>
        <source-position filename="nm-device-vlan.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-vlan.c"
               line="105">the hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-vlan.c"
                 line="101">a #NMDeviceVlan</doc>
            <type name="DeviceVlan" c:type="NMDeviceVlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent"
              c:identifier="nm_device_vlan_get_parent"
              version="1.0">
        <source-position filename="nm-device-vlan.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-vlan.c"
               line="138">the device's parent device</doc>
          <type name="Device" c:type="NMDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-vlan.c"
                 line="136">a #NMDeviceVlan</doc>
            <type name="DeviceVlan" c:type="NMDeviceVlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vlan_id" c:identifier="nm_device_vlan_get_vlan_id">
        <source-position filename="nm-device-vlan.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-vlan.c"
               line="155">the device's VLAN ID</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-vlan.c"
                 line="153">a #NMDeviceVlan</doc>
            <type name="DeviceVlan" c:type="NMDeviceVlan*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="carrier" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-vlan.c"
             line="353">Whether the device has carrier.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hw-address" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-vlan.c"
             line="341">The hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="parent" version="1.0" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-vlan.c"
             line="365">The devices's parent device.</doc>
        <type name="Device"/>
      </property>
      <property name="vlan-id" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-vlan.c"
             line="379">The device's VLAN ID.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
    </class>
    <record name="DeviceVlanClass"
            c:type="NMDeviceVlanClass"
            glib:is-gtype-struct-for="DeviceVlan">
      <source-position filename="nm-device-vlan.h" line="75"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <source-position filename="nm-device-vlan.h" line="69"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <source-position filename="nm-device-vlan.h" line="70"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <source-position filename="nm-device-vlan.h" line="71"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved4" introspectable="0">
        <callback name="_reserved4">
          <source-position filename="nm-device-vlan.h" line="72"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved5" introspectable="0">
        <callback name="_reserved5">
          <source-position filename="nm-device-vlan.h" line="73"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved6" introspectable="0">
        <callback name="_reserved6">
          <source-position filename="nm-device-vlan.h" line="74"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="DeviceVlanError"
                 glib:type-name="NMDeviceVlanError"
                 glib:get-type="nm_device_vlan_error_get_type"
                 c:type="NMDeviceVlanError"
                 glib:error-domain="nm-device-vlan-error-quark">
      <member name="UnknownError"
              value="0"
              c:identifier="NM_DEVICE_VLAN_ERROR_UNKNOWN"
              glib:nick="UnknownError">
        <doc xml:space="preserve"
             filename="nm-device-vlan.h"
             line="37">unknown or unclassified error</doc>
      </member>
      <member name="NotVlanConnection"
              value="1"
              c:identifier="NM_DEVICE_VLAN_ERROR_NOT_VLAN_CONNECTION"
              glib:nick="NotVlanConnection">
        <doc xml:space="preserve"
             filename="nm-device-vlan.h"
             line="38">the connection was not of VLAN type</doc>
      </member>
      <member name="InvalidVlanConnection"
              value="2"
              c:identifier="NM_DEVICE_VLAN_ERROR_INVALID_VLAN_CONNECTION"
              glib:nick="InvalidVlanConnection">
        <doc xml:space="preserve"
             filename="nm-device-vlan.h"
             line="39">the VLAN connection was invalid</doc>
      </member>
      <member name="IdMismatch"
              value="3"
              c:identifier="NM_DEVICE_VLAN_ERROR_ID_MISMATCH"
              glib:nick="IdMismatch">
        <doc xml:space="preserve"
             filename="nm-device-vlan.h"
             line="40">the VLAN identifiers of the connection and the device mismatched</doc>
      </member>
      <member name="InterfaceMismatch"
              value="4"
              c:identifier="NM_DEVICE_VLAN_ERROR_INTERFACE_MISMATCH"
              glib:nick="InterfaceMismatch">
        <doc xml:space="preserve"
             filename="nm-device-vlan.h"
             line="41">the interfaces of the connection and the device mismatched</doc>
      </member>
      <member name="MacMismatch"
              value="5"
              c:identifier="NM_DEVICE_VLAN_ERROR_MAC_MISMATCH"
              glib:nick="MacMismatch">
        <doc xml:space="preserve"
             filename="nm-device-vlan.h"
             line="42">the MACs of the connection and the device mismatched</doc>
      </member>
      <function name="quark" c:identifier="nm_device_vlan_error_quark">
        <doc xml:space="preserve"
             filename="nm-device-vlan.c"
             line="57">Registers an error quark for #NMDeviceVlan if necessary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-vlan.c"
               line="62">the error quark used for #NMDeviceVlan errors.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="DeviceWifi"
           c:symbol-prefix="device_wifi"
           c:type="NMDeviceWifi"
           parent="Device"
           glib:type-name="NMDeviceWifi"
           glib:get-type="nm_device_wifi_get_type"
           glib:type-struct="DeviceWifiClass">
      <source-position filename="nm-device-wifi.h" line="88"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="nm_device_wifi_new">
        <doc xml:space="preserve"
             filename="nm-device-wifi.c"
             line="103">Creates a new #NMDeviceWifi.</doc>
        <source-position filename="nm-device-wifi.h" line="92"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-device-wifi.c"
               line="110">a new Wi-Fi device</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wifi.c"
                 line="105">the #DBusGConnection</doc>
            <type name="DBusGLib.Connection" c:type="DBusGConnection*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wifi.c"
                 line="106">the DBus object path of the device</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="access_point_added">
        <source-position filename="nm-device-wifi.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
          </instance-parameter>
          <parameter name="ap" transfer-ownership="none">
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="access_point_removed">
        <source-position filename="nm-device-wifi.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
          </instance-parameter>
          <parameter name="ap" transfer-ownership="none">
            <type name="AccessPoint" c:type="NMAccessPoint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_access_point_by_path"
              c:identifier="nm_device_wifi_get_access_point_by_path">
        <doc xml:space="preserve"
             filename="nm-device-wifi.c"
             line="283">Gets a #NMAccessPoint by path.</doc>
        <source-position filename="nm-device-wifi.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-wifi.c"
               line="290">the access point or %NULL if none is found.</doc>
          <type name="AccessPoint" c:type="NMAccessPoint*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wifi.c"
                 line="285">a #NMDeviceWifi</doc>
            <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wifi.c"
                 line="286">the object path of the access point</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_access_points"
              c:identifier="nm_device_wifi_get_access_points">
        <doc xml:space="preserve"
             filename="nm-device-wifi.c"
             line="264">Gets all the scanned access points of the #NMDeviceWifi.</doc>
        <source-position filename="nm-device-wifi.h" line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-wifi.c"
               line="270">a #GPtrArray containing all the
scanned #NMAccessPoints.
The returned array is owned by the client and should not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="AccessPoint"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wifi.c"
                 line="266">a #NMDeviceWifi</doc>
            <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_active_access_point"
              c:identifier="nm_device_wifi_get_active_access_point">
        <doc xml:space="preserve"
             filename="nm-device-wifi.c"
             line="229">Gets the active #NMAccessPoint.</doc>
        <source-position filename="nm-device-wifi.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-wifi.c"
               line="235">the access point or %NULL if none is active</doc>
          <type name="AccessPoint" c:type="NMAccessPoint*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wifi.c"
                 line="231">a #NMDeviceWifi</doc>
            <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bitrate" c:identifier="nm_device_wifi_get_bitrate">
        <doc xml:space="preserve"
             filename="nm-device-wifi.c"
             line="181">Gets the bit rate of the #NMDeviceWifi in kbit/s.</doc>
        <source-position filename="nm-device-wifi.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-wifi.c"
               line="187">the bit rate (kbit/s)</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wifi.c"
                 line="183">a #NMDeviceWifi</doc>
            <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_capabilities"
              c:identifier="nm_device_wifi_get_capabilities">
        <doc xml:space="preserve"
             filename="nm-device-wifi.c"
             line="212">Gets the Wi-Fi capabilities of the #NMDeviceWifi.</doc>
        <source-position filename="nm-device-wifi.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-wifi.c"
               line="218">the capabilities</doc>
          <type name="NetworkManager.DeviceWifiCapabilities"
                c:type="NMDeviceWifiCapabilities"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wifi.c"
                 line="214">a #NMDeviceWifi</doc>
            <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hw_address"
              c:identifier="nm_device_wifi_get_hw_address">
        <doc xml:space="preserve"
             filename="nm-device-wifi.c"
             line="128">Gets the actual hardware (MAC) address of the #NMDeviceWifi</doc>
        <source-position filename="nm-device-wifi.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-wifi.c"
               line="134">the actual hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wifi.c"
                 line="130">a #NMDeviceWifi</doc>
            <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode" c:identifier="nm_device_wifi_get_mode">
        <doc xml:space="preserve"
             filename="nm-device-wifi.c"
             line="164">Gets the #NMDeviceWifi mode.</doc>
        <source-position filename="nm-device-wifi.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-wifi.c"
               line="170">the mode</doc>
          <type name="NetworkManager.80211Mode" c:type="NM80211Mode"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wifi.c"
                 line="166">a #NMDeviceWifi</doc>
            <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_permanent_hw_address"
              c:identifier="nm_device_wifi_get_permanent_hw_address">
        <doc xml:space="preserve"
             filename="nm-device-wifi.c"
             line="146">Gets the permanent hardware (MAC) address of the #NMDeviceWifi</doc>
        <source-position filename="nm-device-wifi.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-wifi.c"
               line="152">the permanent hardware address. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wifi.c"
                 line="148">a #NMDeviceWifi</doc>
            <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="request_scan_simple"
              c:identifier="nm_device_wifi_request_scan_simple"
              version="0.9.8">
        <doc xml:space="preserve"
             filename="nm-device-wifi.c"
             line="339">Request NM to scan for access points on the #NMDeviceWifi. This function only
instructs NM to perform scanning. Use nm_device_wifi_get_access_points()
to get available access points.</doc>
        <source-position filename="nm-device-wifi.h" line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wifi.c"
                 line="341">a #NMDeviceWifi</doc>
            <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="nm-device-wifi.c"
                 line="342">the function to call when the call is done</doc>
            <type name="DeviceWifiRequestScanFn"
                  c:type="NMDeviceWifiRequestScanFn"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-device-wifi.c"
                 line="343">user data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <property name="access-points"
                version="0.9.10"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-wifi.c"
             line="788">List of all Wi-Fi access points the device can see.</doc>
        <type name="ObjectArray"/>
      </property>
      <property name="active-access-point" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-wifi.c"
             line="764">The active #NMAccessPoint of the device.</doc>
        <type name="AccessPoint"/>
      </property>
      <property name="bitrate" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-wifi.c"
             line="752">The bit rate of the device in kbit/s.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="hw-address" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-wifi.c"
             line="716">The hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mode" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-wifi.c"
             line="740">The mode of the device.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="perm-hw-address" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-wifi.c"
             line="728">The hardware (MAC) address of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="wireless-capabilities" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-wifi.c"
             line="776">The wireless capabilities of the device.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
      <glib:signal name="access-point-added" when="first">
        <doc xml:space="preserve"
             filename="nm-device-wifi.c"
             line="804">Notifies that a #NMAccessPoint is added to the Wi-Fi device.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wifi.c"
                 line="807">the new access point</doc>
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="access-point-removed" when="first">
        <doc xml:space="preserve"
             filename="nm-device-wifi.c"
             line="821">Notifies that a #NMAccessPoint is removed from the Wi-Fi device.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wifi.c"
                 line="824">the removed access point</doc>
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="DeviceWifiClass"
            c:type="NMDeviceWifiClass"
            glib:is-gtype-struct-for="DeviceWifi">
      <source-position filename="nm-device-wifi.h" line="88"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="access_point_added">
        <callback name="access_point_added">
          <source-position filename="nm-device-wifi.h" line="78"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="device" transfer-ownership="none">
              <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
            </parameter>
            <parameter name="ap" transfer-ownership="none">
              <type name="AccessPoint" c:type="NMAccessPoint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="access_point_removed">
        <callback name="access_point_removed">
          <source-position filename="nm-device-wifi.h" line="79"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="device" transfer-ownership="none">
              <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
            </parameter>
            <parameter name="ap" transfer-ownership="none">
              <type name="AccessPoint" c:type="NMAccessPoint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <source-position filename="nm-device-wifi.h" line="82"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <source-position filename="nm-device-wifi.h" line="83"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <source-position filename="nm-device-wifi.h" line="84"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved4" introspectable="0">
        <callback name="_reserved4">
          <source-position filename="nm-device-wifi.h" line="85"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved5" introspectable="0">
        <callback name="_reserved5">
          <source-position filename="nm-device-wifi.h" line="86"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved6" introspectable="0">
        <callback name="_reserved6">
          <source-position filename="nm-device-wifi.h" line="87"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="DeviceWifiError"
                 glib:type-name="NMDeviceWifiError"
                 glib:get-type="nm_device_wifi_error_get_type"
                 c:type="NMDeviceWifiError"
                 glib:error-domain="nm-device-wifi-error-quark">
      <member name="UnknownError"
              value="0"
              c:identifier="NM_DEVICE_WIFI_ERROR_UNKNOWN"
              glib:nick="UnknownError">
        <doc xml:space="preserve"
             filename="nm-device-wifi.h"
             line="39">unknown or unclassified error</doc>
      </member>
      <member name="NotWifiConnection"
              value="1"
              c:identifier="NM_DEVICE_WIFI_ERROR_NOT_WIFI_CONNECTION"
              glib:nick="NotWifiConnection">
        <doc xml:space="preserve"
             filename="nm-device-wifi.h"
             line="40">the connection was not of Wi-Fi type</doc>
      </member>
      <member name="InvalidWifiConnection"
              value="2"
              c:identifier="NM_DEVICE_WIFI_ERROR_INVALID_WIFI_CONNECTION"
              glib:nick="InvalidWifiConnection">
        <doc xml:space="preserve"
             filename="nm-device-wifi.h"
             line="41">the Wi-Fi connection was invalid</doc>
      </member>
      <member name="InvalidDeviceMac"
              value="3"
              c:identifier="NM_DEVICE_WIFI_ERROR_INVALID_DEVICE_MAC"
              glib:nick="InvalidDeviceMac">
        <doc xml:space="preserve"
             filename="nm-device-wifi.h"
             line="42">the device's MAC was invalid</doc>
      </member>
      <member name="MacMismatch"
              value="4"
              c:identifier="NM_DEVICE_WIFI_ERROR_MAC_MISMATCH"
              glib:nick="MacMismatch">
        <doc xml:space="preserve"
             filename="nm-device-wifi.h"
             line="43">the MACs of the connection and the device mismatched</doc>
      </member>
      <member name="MissingDeviceWpaCaps"
              value="5"
              c:identifier="NM_DEVICE_WIFI_ERROR_MISSING_DEVICE_WPA_CAPS"
              glib:nick="MissingDeviceWpaCaps">
        <doc xml:space="preserve"
             filename="nm-device-wifi.h"
             line="44">the device missed WPA capabilities
required by the connection</doc>
      </member>
      <member name="MissingDeviceRsnCaps"
              value="6"
              c:identifier="NM_DEVICE_WIFI_ERROR_MISSING_DEVICE_RSN_CAPS"
              glib:nick="MissingDeviceRsnCaps">
        <doc xml:space="preserve"
             filename="nm-device-wifi.h"
             line="46">the device missed RSN capabilities
required by the connection</doc>
      </member>
      <function name="quark" c:identifier="nm_device_wifi_error_quark">
        <doc xml:space="preserve"
             filename="nm-device-wifi.c"
             line="86">Registers an error quark for #NMDeviceWifi if necessary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-wifi.c"
               line="91">the error quark used for #NMDeviceWifi errors.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <callback name="DeviceWifiRequestScanFn"
              c:type="NMDeviceWifiRequestScanFn">
      <source-position filename="nm-device-wifi.h" line="106"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <type name="DeviceWifi" c:type="NMDeviceWifi*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <type name="GLib.Error" c:type="GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="DeviceWimax"
           c:symbol-prefix="device_wimax"
           c:type="NMDeviceWimax"
           parent="Device"
           glib:type-name="NMDeviceWimax"
           glib:get-type="nm_device_wimax_get_type"
           glib:type-struct="DeviceWimaxClass">
      <source-position filename="nm-device-wimax.h" line="76"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new"
                   c:identifier="nm_device_wimax_new"
                   deprecated="1"
                   deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="nm-device-wimax.c"
             line="98">Creates a new #NMDeviceWimax.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <source-position filename="nm-device-wimax.h" line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-device-wimax.c"
               line="105">a new WiMAX device</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wimax.c"
                 line="100">the #DBusGConnection</doc>
            <type name="DBusGLib.Connection" c:type="DBusGConnection*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wimax.c"
                 line="101">the D-Bus object path of the WiMAX device</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="nsp_added">
        <source-position filename="nm-device-wimax.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DeviceWimax" c:type="NMDeviceWimax*"/>
          </instance-parameter>
          <parameter name="nsp" transfer-ownership="none">
            <type name="WimaxNsp" c:type="NMWimaxNsp*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="nsp_removed">
        <source-position filename="nm-device-wimax.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DeviceWimax" c:type="NMDeviceWimax*"/>
          </instance-parameter>
          <parameter name="nsp" transfer-ownership="none">
            <type name="WimaxNsp" c:type="NMWimaxNsp*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_active_nsp"
              c:identifier="nm_device_wimax_get_active_nsp"
              deprecated="1"
              deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="nm-device-wimax.c"
             line="145">Gets the active #NMWimaxNsp.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <source-position filename="nm-device-wimax.h" line="88"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-device-wimax.c"
               line="151">the access point or %NULL if none is active</doc>
          <type name="WimaxNsp" c:type="NMWimaxNsp*"/>
        </return-value>
        <parameters>
          <instance-parameter name="wimax" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wimax.c"
                 line="147">a #NMDeviceWimax</doc>
            <type name="DeviceWimax" c:type="NMDeviceWimax*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bsid"
              c:identifier="nm_device_wimax_get_bsid"
              deprecated="1"
              deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="nm-device-wimax.c"
             line="353">Gets the ID of the serving Base Station when the device is connected.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <source-position filename="nm-device-wimax.h" line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-wimax.c"
               line="359">the ID of the serving Base Station, or %NULL</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wimax.c"
                 line="355">a #NMDeviceWimax</doc>
            <type name="DeviceWimax" c:type="NMDeviceWimax*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_center_frequency"
              c:identifier="nm_device_wimax_get_center_frequency"
              deprecated="1"
              deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="nm-device-wimax.c"
             line="268">Gets the center frequency (in KHz) of the radio channel the device is using
to communicate with the network when connected.  Has no meaning when the
device is not connected.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <source-position filename="nm-device-wimax.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-wimax.c"
               line="276">the center frequency in KHz, or 0</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wimax.c"
                 line="270">a #NMDeviceWimax</doc>
            <type name="DeviceWimax" c:type="NMDeviceWimax*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cinr"
              c:identifier="nm_device_wimax_get_cinr"
              deprecated="1"
              deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="nm-device-wimax.c"
             line="311">Gets the CINR (Carrier to Interference + Noise Ratio) of the current radio
link in dB.  CINR is a more accurate measure of radio link quality.  Has no
meaning when the device is not connected.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <source-position filename="nm-device-wimax.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-wimax.c"
               line="319">the CINR in dB, or 0</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wimax.c"
                 line="313">a #NMDeviceWimax</doc>
            <type name="DeviceWimax" c:type="NMDeviceWimax*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hw_address"
              c:identifier="nm_device_wimax_get_hw_address"
              deprecated="1"
              deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="nm-device-wimax.c"
             line="125">Gets the hardware (MAC) address of the #NMDeviceWimax</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <source-position filename="nm-device-wimax.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-wimax.c"
               line="131">the hardware address. This is the internal string used by the
         device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="wimax" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wimax.c"
                 line="127">a #NMDeviceWimax</doc>
            <type name="DeviceWimax" c:type="NMDeviceWimax*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nsp_by_path"
              c:identifier="nm_device_wimax_get_nsp_by_path"
              deprecated="1"
              deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="nm-device-wimax.c"
             line="203">Gets a #NMWimaxNsp by path.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <source-position filename="nm-device-wimax.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-wimax.c"
               line="210">the access point or %NULL if none is found.</doc>
          <type name="WimaxNsp" c:type="NMWimaxNsp*"/>
        </return-value>
        <parameters>
          <instance-parameter name="wimax" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wimax.c"
                 line="205">a #NMDeviceWimax</doc>
            <type name="DeviceWimax" c:type="NMDeviceWimax*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wimax.c"
                 line="206">the object path of the NSP</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_nsps"
              c:identifier="nm_device_wimax_get_nsps"
              deprecated="1"
              deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="nm-device-wimax.c"
             line="182">Gets all the scanned NSPs of the #NMDeviceWimax.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <source-position filename="nm-device-wimax.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-wimax.c"
               line="188">a #GPtrArray containing
         all the scanned #NMWimaxNsps.
The returned array is owned by the client and should not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="WimaxNsp"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="wimax" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wimax.c"
                 line="184">a #NMDeviceWimax</doc>
            <type name="DeviceWimax" c:type="NMDeviceWimax*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rssi"
              c:identifier="nm_device_wimax_get_rssi"
              deprecated="1"
              deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="nm-device-wimax.c"
             line="289">Gets the RSSI of the current radio link in dBm.  This value indicates how
strong the raw received RF signal from the base station is, but does not
indicate the overall quality of the radio link.  Has no meaning when the
device is not connected.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <source-position filename="nm-device-wimax.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-wimax.c"
               line="298">the RSSI in dBm, or 0</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wimax.c"
                 line="291">a #NMDeviceWimax</doc>
            <type name="DeviceWimax" c:type="NMDeviceWimax*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tx_power"
              c:identifier="nm_device_wimax_get_tx_power"
              deprecated="1"
              deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="nm-device-wimax.c"
             line="332">Average power of the last burst transmitted by the device, in units of
0.5 dBm.  i.e. a TxPower of -11 represents an actual device TX power of
-5.5 dBm.  Has no meaning when the device is not connected.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <source-position filename="nm-device-wimax.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-wimax.c"
               line="340">the TX power in dBm, or 0</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wimax.c"
                 line="334">a #NMDeviceWimax</doc>
            <type name="DeviceWimax" c:type="NMDeviceWimax*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="active-nsp"
                deprecated="1"
                deprecated-version="1.2"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-wimax.c"
             line="647">The active #NMWimaxNsp of the device.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <type name="WimaxNsp"/>
      </property>
      <property name="bsid"
                deprecated="1"
                deprecated-version="1.2"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-wimax.c"
             line="726">The ID of the serving base station as received from the network.  Has
no meaning when the device is not connected.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="center-frequency"
                deprecated="1"
                deprecated-version="1.2"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-wimax.c"
             line="661">The center frequency (in KHz) of the radio channel the device is using to
communicate with the network when connected.  Has no meaning when the
device is not connected.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="cinr"
                deprecated="1"
                deprecated-version="1.2"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-wimax.c"
             line="694">CINR (Carrier to Interference + Noise Ratio) of the current radio link
in dB.  CINR is a more accurate measure of radio link quality.  Has no
meaning when the device is not connected.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="hw-address"
                deprecated="1"
                deprecated-version="1.2"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-wimax.c"
             line="633">The hardware (MAC) address of the device.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="nsps"
                version="0.9.10"
                deprecated="1"
                deprecated-version="1.2"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-wimax.c"
             line="741">List of all WiMAX Network Service Providers the device can see.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <type name="ObjectArray"/>
      </property>
      <property name="rssi"
                deprecated="1"
                deprecated-version="1.2"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-wimax.c"
             line="677">RSSI of the current radio link in dBm.  This value indicates how strong
the raw received RF signal from the base station is, but does not
indicate the overall quality of the radio link.  Has no meaning when the
device is not connected.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="tx-power"
                deprecated="1"
                deprecated-version="1.2"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-wimax.c"
             line="710">Average power of the last burst transmitted by the device, in units of
0.5 dBm.  i.e. a TxPower of -11 represents an actual device TX power of
-5.5 dBm.  Has no meaning when the device is not connected.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent">
        <type name="Device" c:type="NMDevice"/>
      </field>
      <glib:signal name="nsp-added"
                   when="first"
                   deprecated="1"
                   deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="nm-device-wimax.c"
             line="758">Notifies that a #NMWimaxNsp is added to the wimax device.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="nsp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wimax.c"
                 line="761">the new NSP</doc>
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="nsp-removed"
                   when="first"
                   deprecated="1"
                   deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="nm-device-wimax.c"
             line="777">Notifies that a #NMWimaxNsp is removed from the wimax device.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="nsp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-device-wimax.c"
                 line="780">the removed NSP</doc>
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="DeviceWimaxClass"
            c:type="NMDeviceWimaxClass"
            glib:is-gtype-struct-for="DeviceWimax">
      <source-position filename="nm-device-wimax.h" line="76"/>
      <field name="parent">
        <type name="DeviceClass" c:type="NMDeviceClass"/>
      </field>
      <field name="nsp_added">
        <callback name="nsp_added">
          <source-position filename="nm-device-wimax.h" line="74"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DeviceWimax" c:type="NMDeviceWimax*"/>
            </parameter>
            <parameter name="nsp" transfer-ownership="none">
              <type name="WimaxNsp" c:type="NMWimaxNsp*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="nsp_removed">
        <callback name="nsp_removed">
          <source-position filename="nm-device-wimax.h" line="75"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DeviceWimax" c:type="NMDeviceWimax*"/>
            </parameter>
            <parameter name="nsp" transfer-ownership="none">
              <type name="WimaxNsp" c:type="NMWimaxNsp*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="DeviceWimaxError"
                 glib:type-name="NMDeviceWimaxError"
                 glib:get-type="nm_device_wimax_error_get_type"
                 c:type="NMDeviceWimaxError"
                 glib:error-domain="nm-device-wimax-error-quark">
      <member name="UnknownError"
              value="0"
              c:identifier="NM_DEVICE_WIMAX_ERROR_UNKNOWN"
              glib:nick="UnknownError">
        <doc xml:space="preserve"
             filename="nm-device-wimax.h"
             line="39">unknown or unclassified error</doc>
      </member>
      <member name="NotWimaxConnection"
              value="1"
              c:identifier="NM_DEVICE_WIMAX_ERROR_NOT_WIMAX_CONNECTION"
              glib:nick="NotWimaxConnection">
        <doc xml:space="preserve"
             filename="nm-device-wimax.h"
             line="40">the connection was not of WiMax type</doc>
      </member>
      <member name="InvalidWimaxConnection"
              value="2"
              c:identifier="NM_DEVICE_WIMAX_ERROR_INVALID_WIMAX_CONNECTION"
              glib:nick="InvalidWimaxConnection">
        <doc xml:space="preserve"
             filename="nm-device-wimax.h"
             line="41">the WiMax connection was invalid</doc>
      </member>
      <member name="InvalidDeviceMac"
              value="3"
              c:identifier="NM_DEVICE_WIMAX_ERROR_INVALID_DEVICE_MAC"
              glib:nick="InvalidDeviceMac">
        <doc xml:space="preserve"
             filename="nm-device-wimax.h"
             line="42">the device's MAC was invalid</doc>
      </member>
      <member name="MacMismatch"
              value="4"
              c:identifier="NM_DEVICE_WIMAX_ERROR_MAC_MISMATCH"
              glib:nick="MacMismatch">
        <doc xml:space="preserve"
             filename="nm-device-wimax.h"
             line="43">the MACs of the connection and the device mismatched</doc>
      </member>
      <function name="quark"
                c:identifier="nm_device_wimax_error_quark"
                deprecated="1"
                deprecated-version="1.2">
        <doc xml:space="preserve"
             filename="nm-device-wimax.c"
             line="79">Registers an error quark for #NMDeviceWimax if necessary.</doc>
        <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-device-wimax.c"
               line="84">the error quark used for #NMDeviceWimax errors.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="IP4Config"
           c:symbol-prefix="ip4_config"
           c:type="NMIP4Config"
           parent="Object"
           glib:type-name="NMIP4Config"
           glib:get-type="nm_ip4_config_get_type"
           glib:type-struct="IP4ConfigClass">
      <source-position filename="nm-ip4-config.h" line="53"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="nm_ip4_config_new">
        <doc xml:space="preserve"
             filename="nm-ip4-config.c"
             line="321">Creates a new #NMIP4Config.</doc>
        <source-position filename="nm-ip4-config.h" line="65"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-ip4-config.c"
               line="328">a new IP4 configuration</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-ip4-config.c"
                 line="323">the #DBusGConnection</doc>
            <type name="DBusGLib.Connection" c:type="DBusGConnection*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-ip4-config.c"
                 line="324">the DBus object path of the device</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_addresses" c:identifier="nm_ip4_config_get_addresses">
        <doc xml:space="preserve"
             filename="nm-ip4-config.c"
             line="361">Gets the IP4 addresses (containing the address, prefix, and gateway).</doc>
        <source-position filename="nm-ip4-config.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-ip4-config.c"
               line="367">the #GSList containing #NMIP4Address&lt;!-- --&gt;es.
This is the internal copy used by the configuration and must not be modified.</doc>
          <type name="GLib.SList" c:type="const GSList*">
            <type name="NetworkManager.IP4Address"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-ip4-config.c"
                 line="363">a #NMIP4Config</doc>
            <type name="IP4Config" c:type="NMIP4Config*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_domains" c:identifier="nm_ip4_config_get_domains">
        <doc xml:space="preserve"
             filename="nm-ip4-config.c"
             line="398">Gets the domain names.</doc>
        <source-position filename="nm-ip4-config.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-ip4-config.c"
               line="404">the #GPtrArray containing domains as strings. This is the
internal copy used by the configuration, and must not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-ip4-config.c"
                 line="400">a #NMIP4Config</doc>
            <type name="IP4Config" c:type="NMIP4Config*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gateway"
              c:identifier="nm_ip4_config_get_gateway"
              version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-ip4-config.c"
             line="342">Gets the IP4 gateway address.</doc>
        <source-position filename="nm-ip4-config.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-ip4-config.c"
               line="348">the IP4 address of the gateway.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-ip4-config.c"
                 line="344">a #NMIP4Config</doc>
            <type name="IP4Config" c:type="NMIP4Config*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nameservers"
              c:identifier="nm_ip4_config_get_nameservers">
        <doc xml:space="preserve"
             filename="nm-ip4-config.c"
             line="379">Gets the domain name servers (DNS).</doc>
        <source-position filename="nm-ip4-config.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-ip4-config.c"
               line="385">the #GArray containing #guint32s.
This is the internal copy used by the configuration and must not be
modified.</doc>
          <array name="GLib.Array" c:type="const GArray*">
            <type name="guint32"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-ip4-config.c"
                 line="381">a #NMIP4Config</doc>
            <type name="IP4Config" c:type="NMIP4Config*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_routes" c:identifier="nm_ip4_config_get_routes">
        <doc xml:space="preserve"
             filename="nm-ip4-config.c"
             line="455">Gets the routes.</doc>
        <source-position filename="nm-ip4-config.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-ip4-config.c"
               line="461">the #GSList containing
#NMIP4Route&lt;!-- --&gt;s. This is the internal copy used by the configuration,
and must not be modified.</doc>
          <type name="GLib.SList" c:type="const GSList*">
            <type name="NetworkManager.IP4Route"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-ip4-config.c"
                 line="457">a #NMIP4Config</doc>
            <type name="IP4Config" c:type="NMIP4Config*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_searches"
              c:identifier="nm_ip4_config_get_searches"
              version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-ip4-config.c"
             line="416">Gets the dns searches.</doc>
        <source-position filename="nm-ip4-config.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-ip4-config.c"
               line="422">the #GPtrArray containing dns searches as strings. This is the
internal copy used by the configuration, and must not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-ip4-config.c"
                 line="418">a #NMIP4Config</doc>
            <type name="IP4Config" c:type="NMIP4Config*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wins_servers"
              c:identifier="nm_ip4_config_get_wins_servers">
        <doc xml:space="preserve"
             filename="nm-ip4-config.c"
             line="436">Gets the Windows Internet Name Service servers (WINS).</doc>
        <source-position filename="nm-ip4-config.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-ip4-config.c"
               line="442">the #GArray containing #guint32s.
This is the internal copy used by the configuration and must not be
modified.</doc>
          <array name="GLib.Array" c:type="const GArray*">
            <type name="guint32"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-ip4-config.c"
                 line="438">a #NMIP4Config</doc>
            <type name="IP4Config" c:type="NMIP4Config*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="addresses" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-ip4-config.c"
             line="248">The #GPtrArray containing #NMIP4Address&lt;!-- --&gt;es of the configuration.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="domains" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-ip4-config.c"
             line="282">The #GPtrArray containing domain strings of the configuration.</doc>
        <type name="StringArray"/>
      </property>
      <property name="gateway" version="0.9.10" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-ip4-config.c"
             line="234">The IP4 gateway address of the configuration as string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="nameservers" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-ip4-config.c"
             line="270">The #GArray containing name servers (#guint32s) of the configuration.</doc>
        <type name="UintArray"/>
      </property>
      <property name="routes" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-ip4-config.c"
             line="259">The #GPtrArray containing #NMSettingIP4Route&lt;!-- --&gt;s of the configuration.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="searches" version="0.9.10" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-ip4-config.c"
             line="294">The #GPtrArray containing dns search strings of the configuration.</doc>
        <type name="StringArray"/>
      </property>
      <property name="wins-servers" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-ip4-config.c"
             line="308">The #GArray containing WINS servers (#guint32s) of the configuration.</doc>
        <type name="UintArray"/>
      </property>
      <field name="parent">
        <type name="Object" c:type="NMObject"/>
      </field>
    </class>
    <record name="IP4ConfigClass"
            c:type="NMIP4ConfigClass"
            glib:is-gtype-struct-for="IP4Config">
      <source-position filename="nm-ip4-config.h" line="53"/>
      <field name="parent">
        <type name="ObjectClass" c:type="NMObjectClass"/>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <source-position filename="nm-ip4-config.h" line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <source-position filename="nm-ip4-config.h" line="48"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <source-position filename="nm-ip4-config.h" line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved4" introspectable="0">
        <callback name="_reserved4">
          <source-position filename="nm-ip4-config.h" line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved5" introspectable="0">
        <callback name="_reserved5">
          <source-position filename="nm-ip4-config.h" line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved6" introspectable="0">
        <callback name="_reserved6">
          <source-position filename="nm-ip4-config.h" line="52"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <constant name="IP4_CONFIG_ADDRESSES"
              value="addresses"
              c:type="NM_IP4_CONFIG_ADDRESSES">
      <source-position filename="nm-ip4-config.h" line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP4_CONFIG_DOMAINS"
              value="domains"
              c:type="NM_IP4_CONFIG_DOMAINS">
      <source-position filename="nm-ip4-config.h" line="59"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP4_CONFIG_GATEWAY"
              value="gateway"
              c:type="NM_IP4_CONFIG_GATEWAY">
      <source-position filename="nm-ip4-config.h" line="55"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP4_CONFIG_NAMESERVERS"
              value="nameservers"
              c:type="NM_IP4_CONFIG_NAMESERVERS">
      <source-position filename="nm-ip4-config.h" line="58"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP4_CONFIG_ROUTES"
              value="routes"
              c:type="NM_IP4_CONFIG_ROUTES">
      <source-position filename="nm-ip4-config.h" line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP4_CONFIG_SEARCHES"
              value="searches"
              c:type="NM_IP4_CONFIG_SEARCHES">
      <source-position filename="nm-ip4-config.h" line="60"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP4_CONFIG_WINS_SERVERS"
              value="wins-servers"
              c:type="NM_IP4_CONFIG_WINS_SERVERS">
      <source-position filename="nm-ip4-config.h" line="61"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <glib:boxed glib:name="IP6AddressArray"
                c:symbol-prefix="ip6_address_array"
                glib:type-name="NMIP6AddressArray"
                glib:get-type="nm_ip6_address_array_get_type">
    </glib:boxed>
    <glib:boxed glib:name="IP6AddressObjectArray"
                c:symbol-prefix="ip6_address_object_array"
                glib:type-name="NMIP6AddressObjectArray"
                glib:get-type="nm_ip6_address_object_array_get_type">
    </glib:boxed>
    <class name="IP6Config"
           c:symbol-prefix="ip6_config"
           c:type="NMIP6Config"
           parent="Object"
           glib:type-name="NMIP6Config"
           glib:get-type="nm_ip6_config_get_type"
           glib:type-struct="IP6ConfigClass">
      <source-position filename="nm-ip6-config.h" line="53"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="nm_ip6_config_new">
        <doc xml:space="preserve"
             filename="nm-ip6-config.c"
             line="60">Creates a new #NMIP6Config.</doc>
        <source-position filename="nm-ip6-config.h" line="64"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-ip6-config.c"
               line="67">a new IP6 configuration</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-ip6-config.c"
                 line="62">the #DBusGConnection</doc>
            <type name="DBusGLib.Connection" c:type="DBusGConnection*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-ip6-config.c"
                 line="63">the DBus object path of the device</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_addresses" c:identifier="nm_ip6_config_get_addresses">
        <doc xml:space="preserve"
             filename="nm-ip6-config.c"
             line="179">Gets the IP6 addresses (containing the address, prefix, and gateway).</doc>
        <source-position filename="nm-ip6-config.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-ip6-config.c"
               line="185">the #GSList containing
#NMIP6Address&lt;!-- --&gt;es. This is the internal copy used by the configuration
and must not be modified.</doc>
          <type name="GLib.SList" c:type="const GSList*">
            <type name="NetworkManager.IP6Address"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-ip6-config.c"
                 line="181">a #NMIP6Config</doc>
            <type name="IP6Config" c:type="NMIP6Config*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_domains" c:identifier="nm_ip6_config_get_domains">
        <doc xml:space="preserve"
             filename="nm-ip6-config.c"
             line="268">Gets the domain names.</doc>
        <source-position filename="nm-ip6-config.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-ip6-config.c"
               line="274">the #GPtrArray containing domains as strings.
This is the internal copy used by the configuration, and must not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-ip6-config.c"
                 line="270">a #NMIP6Config</doc>
            <type name="IP6Config" c:type="NMIP6Config*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gateway"
              c:identifier="nm_ip6_config_get_gateway"
              version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-ip6-config.c"
             line="160">Gets the IP6 gateway.</doc>
        <source-position filename="nm-ip6-config.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-ip6-config.c"
               line="166">the IPv6 gateway of the configuration.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-ip6-config.c"
                 line="162">a #NMIP6Config</doc>
            <type name="IP6Config" c:type="NMIP6Config*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nameserver"
              c:identifier="nm_ip6_config_get_nameserver"
              version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-ip6-config.c"
             line="217">Gets the domain name server at index @idx in the configuration.</doc>
        <source-position filename="nm-ip6-config.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-ip6-config.c"
               line="224">
         the IPv6 address of domain name server at index @iidx</doc>
          <array zero-terminated="0" c:type="const in6_addr*" fixed-size="16">
            <type name="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-ip6-config.c"
                 line="219">a #NMIP6Config</doc>
            <type name="IP6Config" c:type="NMIP6Config*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-ip6-config.c"
                 line="220">index of the nameserver to return</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_nameservers"
              c:identifier="nm_ip6_config_get_nameservers"
              introspectable="0">
        <doc xml:space="preserve"
             filename="nm-ip6-config.c"
             line="249">Gets the domain name servers (DNS).</doc>
        <source-position filename="nm-ip6-config.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-ip6-config.c"
               line="255">a #GSList containing elements of type 'struct in6_addr' which
contain the addresses of nameservers of the configuration.  This is the
internal copy used by the configuration and must not be modified.</doc>
          <type name="GLib.SList" c:type="const GSList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-ip6-config.c"
                 line="251">a #NMIP6Config</doc>
            <type name="IP6Config" c:type="NMIP6Config*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_num_nameservers"
              c:identifier="nm_ip6_config_get_num_nameservers"
              version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-ip6-config.c"
             line="198">Gets the number of the domain name servers in the configuration.</doc>
        <source-position filename="nm-ip6-config.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-ip6-config.c"
               line="204">the number of domain name servers</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-ip6-config.c"
                 line="200">a #NMIP6Config</doc>
            <type name="IP6Config" c:type="NMIP6Config*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_routes" c:identifier="nm_ip6_config_get_routes">
        <doc xml:space="preserve"
             filename="nm-ip6-config.c"
             line="306">Gets the routes.</doc>
        <source-position filename="nm-ip6-config.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-ip6-config.c"
               line="312">the #GSList containing
#NMIP6Route&lt;!-- --&gt;s. This is the internal copy used by the configuration,
and must not be modified.</doc>
          <type name="GLib.SList" c:type="const GSList*">
            <type name="NetworkManager.IP6Route"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-ip6-config.c"
                 line="308">a #NMIP6Config</doc>
            <type name="IP6Config" c:type="NMIP6Config*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_searches"
              c:identifier="nm_ip6_config_get_searches"
              version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-ip6-config.c"
             line="286">Gets the dns searches.</doc>
        <source-position filename="nm-ip6-config.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-ip6-config.c"
               line="292">the #GPtrArray containing dns searches as strings.
This is the internal copy used by the configuration, and must not be modified.</doc>
          <array name="GLib.PtrArray" c:type="const GPtrArray*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-ip6-config.c"
                 line="288">a #NMIP6Config</doc>
            <type name="IP6Config" c:type="NMIP6Config*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="addresses" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-ip6-config.c"
             line="431">The #GPtrArray containing the IPv6 addresses;  use
nm_utils_ip6_addresses_from_gvalue() to return a #GSList of
#NMSettingIP6Address objects that is more usable than the raw data.</doc>
        <type name="IP6AddressObjectArray"/>
      </property>
      <property name="domains" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-ip6-config.c"
             line="472">The #GPtrArray containing domain strings of the configuration.</doc>
        <type name="StringArray"/>
      </property>
      <property name="gateway" version="0.9.10" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-ip6-config.c"
             line="417">The IPv6 gateway as string</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="nameservers" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-ip6-config.c"
             line="459">The #GPtrArray containing elements of type 'struct ip6_addr' which
contain the addresses of nameservers of the configuration.</doc>
        <type name="IP6AddressArray"/>
      </property>
      <property name="routes" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-ip6-config.c"
             line="445">The #GPtrArray containing the IPv6 routes;  use
nm_utils_ip6_routes_from_gvalue() to return a #GSList of
#NMSettingIP6Address objects that is more usable than the raw data.</doc>
        <type name="IP6RouteObjectArray"/>
      </property>
      <property name="searches" version="0.9.10" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-ip6-config.c"
             line="484">The #GPtrArray containing dns search strings of the configuration.</doc>
        <type name="StringArray"/>
      </property>
      <field name="parent">
        <type name="Object" c:type="NMObject"/>
      </field>
    </class>
    <record name="IP6ConfigClass"
            c:type="NMIP6ConfigClass"
            glib:is-gtype-struct-for="IP6Config">
      <source-position filename="nm-ip6-config.h" line="53"/>
      <field name="parent">
        <type name="ObjectClass" c:type="NMObjectClass"/>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <source-position filename="nm-ip6-config.h" line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <source-position filename="nm-ip6-config.h" line="48"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <source-position filename="nm-ip6-config.h" line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved4" introspectable="0">
        <callback name="_reserved4">
          <source-position filename="nm-ip6-config.h" line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved5" introspectable="0">
        <callback name="_reserved5">
          <source-position filename="nm-ip6-config.h" line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved6" introspectable="0">
        <callback name="_reserved6">
          <source-position filename="nm-ip6-config.h" line="52"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <glib:boxed glib:name="IP6RouteObjectArray"
                c:symbol-prefix="ip6_route_object_array"
                glib:type-name="NMIP6RouteObjectArray"
                glib:get-type="nm_ip6_route_object_array_get_type">
    </glib:boxed>
    <constant name="IP6_CONFIG_ADDRESSES"
              value="addresses"
              c:type="NM_IP6_CONFIG_ADDRESSES">
      <source-position filename="nm-ip6-config.h" line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP6_CONFIG_DOMAINS"
              value="domains"
              c:type="NM_IP6_CONFIG_DOMAINS">
      <source-position filename="nm-ip6-config.h" line="59"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP6_CONFIG_GATEWAY"
              value="gateway"
              c:type="NM_IP6_CONFIG_GATEWAY">
      <source-position filename="nm-ip6-config.h" line="55"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP6_CONFIG_NAMESERVERS"
              value="nameservers"
              c:type="NM_IP6_CONFIG_NAMESERVERS">
      <source-position filename="nm-ip6-config.h" line="58"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP6_CONFIG_ROUTES"
              value="routes"
              c:type="NM_IP6_CONFIG_ROUTES">
      <source-position filename="nm-ip6-config.h" line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IP6_CONFIG_SEARCHES"
              value="searches"
              c:type="NM_IP6_CONFIG_SEARCHES">
      <source-position filename="nm-ip6-config.h" line="60"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_DBUS_CONNECTION"
              value="dbus-connection"
              c:type="NM_OBJECT_DBUS_CONNECTION">
      <source-position filename="nm-object.h" line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OBJECT_DBUS_PATH"
              value="dbus-path"
              c:type="NM_OBJECT_DBUS_PATH">
      <source-position filename="nm-object.h" line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Object"
           c:symbol-prefix="object"
           c:type="NMObject"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="NMObject"
           glib:get-type="nm_object_get_type"
           glib:type-struct="ObjectClass">
      <source-position filename="nm-object.h" line="82"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <virtual-method name="object_creation_failed">
        <source-position filename="nm-object.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="master_object" transfer-ownership="none">
            <type name="Object" c:type="NMObject*"/>
          </instance-parameter>
          <parameter name="error" transfer-ownership="none">
            <type name="GLib.Error" c:type="GError*"/>
          </parameter>
          <parameter name="failed_path" transfer-ownership="none">
            <type name="utf8" c:type="char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_connection" c:identifier="nm_object_get_connection">
        <doc xml:space="preserve"
             filename="nm-object.c"
             line="485">Gets the #NMObject's DBusGConnection.</doc>
        <source-position filename="nm-object.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-object.c"
               line="491">the connection</doc>
          <type name="DBusGLib.Connection" c:type="DBusGConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-object.c"
                 line="487">a #NMObject</doc>
            <type name="Object" c:type="NMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="nm_object_get_path">
        <doc xml:space="preserve"
             filename="nm-object.c"
             line="501">Gets the DBus path of the #NMObject.</doc>
        <source-position filename="nm-object.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-object.c"
               line="507">the object's path. This is the internal string used by the
device, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-object.c"
                 line="503">a #NMObject</doc>
            <type name="Object" c:type="NMObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="dbus-connection"
                introspectable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type/>
      </property>
      <property name="dbus-path"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="object-creation-failed" when="first">
        <doc xml:space="preserve"
             filename="nm-object.c"
             line="451">Indicates that an error occurred while creating an #NMObject object
during property handling of @master_object.

Note: Be aware that the signal is private for libnm-glib's internal
      use.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="error"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-object.c"
                 line="454">the error that occurred while creating object</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="failed_path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-object.c"
                 line="455">object path of the failed object</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <glib:boxed glib:name="ObjectArray"
                c:symbol-prefix="object_array"
                glib:type-name="NMObjectArray"
                glib:get-type="nm_object_array_get_type">
    </glib:boxed>
    <record name="ObjectClass"
            c:type="NMObjectClass"
            glib:is-gtype-struct-for="Object">
      <source-position filename="nm-object.h" line="82"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="object_creation_failed">
        <callback name="object_creation_failed">
          <source-position filename="nm-object.h" line="71"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="master_object" transfer-ownership="none">
              <type name="Object" c:type="NMObject*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="GLib.Error" c:type="GError*"/>
            </parameter>
            <parameter name="failed_path" transfer-ownership="none">
              <type name="utf8" c:type="char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <source-position filename="nm-object.h" line="76"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <source-position filename="nm-object.h" line="77"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <source-position filename="nm-object.h" line="78"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved4" introspectable="0">
        <callback name="_reserved4">
          <source-position filename="nm-object.h" line="79"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved5" introspectable="0">
        <callback name="_reserved5">
          <source-position filename="nm-object.h" line="80"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved6" introspectable="0">
        <callback name="_reserved6">
          <source-position filename="nm-object.h" line="81"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="ObjectError"
                 glib:type-name="NMObjectError"
                 glib:get-type="nm_object_error_get_type"
                 c:type="NMObjectError"
                 glib:error-domain="nm-object-error-quark">
      <doc xml:space="preserve"
           filename="nm-object.h"
           line="40">Describes errors that may result from operations involving a #NMObject.</doc>
      <member name="unknown"
              value="0"
              c:identifier="NM_OBJECT_ERROR_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="nm-object.h"
             line="42">unknown or unclassified error</doc>
      </member>
      <member name="object_creation_failure"
              value="1"
              c:identifier="NM_OBJECT_ERROR_OBJECT_CREATION_FAILURE"
              glib:nick="object-creation-failure">
        <doc xml:space="preserve"
             filename="nm-object.h"
             line="43">an error ocured while creating an #NMObject</doc>
      </member>
      <function name="quark" c:identifier="nm_object_error_quark">
        <doc xml:space="preserve"
             filename="nm-object.c"
             line="100">Registers an error quark for #NMObject if necessary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-object.c"
               line="105">the error quark used for #NMObject errors.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <constant name="REMOTE_CONNECTION_REMOVED"
              value="removed"
              c:type="NM_REMOTE_CONNECTION_REMOVED">
      <source-position filename="nm-remote-connection.h" line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="REMOTE_CONNECTION_UNSAVED"
              value="unsaved"
              c:type="NM_REMOTE_CONNECTION_UNSAVED">
      <source-position filename="nm-remote-connection.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="REMOTE_CONNECTION_UPDATED"
              value="updated"
              c:type="NM_REMOTE_CONNECTION_UPDATED">
      <source-position filename="nm-remote-connection.h" line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="REMOTE_SETTINGS_BUS"
              value="bus"
              c:type="NM_REMOTE_SETTINGS_BUS">
      <source-position filename="nm-remote-settings.h" line="62"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="REMOTE_SETTINGS_CAN_MODIFY"
              value="can-modify"
              c:type="NM_REMOTE_SETTINGS_CAN_MODIFY">
      <source-position filename="nm-remote-settings.h" line="65"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="REMOTE_SETTINGS_CONNECTIONS_READ"
              value="connections-read"
              c:type="NM_REMOTE_SETTINGS_CONNECTIONS_READ">
      <source-position filename="nm-remote-settings.h" line="68"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="REMOTE_SETTINGS_HOSTNAME"
              value="hostname"
              c:type="NM_REMOTE_SETTINGS_HOSTNAME">
      <source-position filename="nm-remote-settings.h" line="64"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="REMOTE_SETTINGS_NEW_CONNECTION"
              value="new-connection"
              c:type="NM_REMOTE_SETTINGS_NEW_CONNECTION">
      <source-position filename="nm-remote-settings.h" line="67"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="REMOTE_SETTINGS_SERVICE_RUNNING"
              value="service-running"
              c:type="NM_REMOTE_SETTINGS_SERVICE_RUNNING">
      <source-position filename="nm-remote-settings.h" line="63"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="RemoteConnection"
           c:symbol-prefix="remote_connection"
           c:type="NMRemoteConnection"
           parent="NetworkManager.Connection"
           glib:type-name="NMRemoteConnection"
           glib:get-type="nm_remote_connection_get_type"
           glib:type-struct="RemoteConnectionClass">
      <source-position filename="nm-remote-connection.h" line="79"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="nm_remote_connection_new">
        <doc xml:space="preserve"
             filename="nm-remote-connection.c"
             line="534">Creates a new object representing the remote connection.</doc>
        <source-position filename="nm-remote-connection.h" line="117"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-remote-connection.c"
               line="541">the new remote connection object on success, or %NULL on failure</doc>
          <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
        </return-value>
        <parameters>
          <parameter name="bus" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-remote-connection.c"
                 line="536">a valid and connected D-Bus connection</doc>
            <type name="DBusGLib.Connection" c:type="DBusGConnection*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-remote-connection.c"
                 line="537">the D-Bus path of the connection as exported by the settings service</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="removed">
        <source-position filename="nm-remote-connection.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="updated">
        <source-position filename="nm-remote-connection.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </instance-parameter>
          <parameter name="new_settings" transfer-ownership="none">
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="commit_changes"
              c:identifier="nm_remote_connection_commit_changes">
        <doc xml:space="preserve"
             filename="nm-remote-connection.c"
             line="233">Send any local changes to the settings and properties of this connection to
NetworkManager, which will immediately save them to disk.</doc>
        <source-position filename="nm-remote-connection.h" line="120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-remote-connection.c"
                 line="235">the #NMRemoteConnection</doc>
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="nm-remote-connection.c"
                 line="236">a function to be called when the
commit completes</doc>
            <type name="RemoteConnectionResultFunc"
                  c:type="NMRemoteConnectionResultFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-remote-connection.c"
                 line="238">caller-specific data to be passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="commit_changes_unsaved"
              c:identifier="nm_remote_connection_commit_changes_unsaved"
              version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-remote-connection.c"
             line="269">Send any local changes to the settings and properties of this connection to
NetworkManager.  The changes are not saved to disk until either
nm_remote_connection_save() or nm_remote_connection_commit_changes() is
called.</doc>
        <source-position filename="nm-remote-connection.h" line="125"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-remote-connection.c"
                 line="271">the #NMRemoteConnection</doc>
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="nm-remote-connection.c"
                 line="272">a function to be called when the
commit completes</doc>
            <type name="RemoteConnectionResultFunc"
                  c:type="NMRemoteConnectionResultFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-remote-connection.c"
                 line="274">caller-specific data to be passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete" c:identifier="nm_remote_connection_delete">
        <doc xml:space="preserve"
             filename="nm-remote-connection.c"
             line="341">Delete the connection.</doc>
        <source-position filename="nm-remote-connection.h" line="134"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-remote-connection.c"
                 line="343">the #NMRemoteConnection</doc>
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="nm-remote-connection.c"
                 line="344">a function to be called when the delete completes</doc>
            <type name="RemoteConnectionResultFunc"
                  c:type="NMRemoteConnectionResultFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-remote-connection.c"
                 line="345">caller-specific data to be passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_secrets"
              c:identifier="nm_remote_connection_get_secrets">
        <doc xml:space="preserve"
             filename="nm-remote-connection.c"
             line="392">Request the connection's secrets.</doc>
        <source-position filename="nm-remote-connection.h" line="138"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-remote-connection.c"
                 line="394">the #NMRemoteConnection</doc>
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </instance-parameter>
          <parameter name="setting_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-remote-connection.c"
                 line="395">the #NMSetting object name to get secrets for</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="nm-remote-connection.c"
                 line="396">a function to be called when the update completes;
must not be %NULL</doc>
            <type name="RemoteConnectionGetSecretsFunc"
                  c:type="NMRemoteConnectionGetSecretsFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-remote-connection.c"
                 line="398">caller-specific data to be passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_unsaved"
              c:identifier="nm_remote_connection_get_unsaved"
              version="0.9.10">
        <source-position filename="nm-remote-connection.h" line="144"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-remote-connection.c"
               line="431">%TRUE if the remote connection contains changes that have not
been saved to disk, %FALSE if the connection is the same as its on-disk
representation.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-remote-connection.c"
                 line="429">the #NMRemoteConnection</doc>
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save"
              c:identifier="nm_remote_connection_save"
              version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-remote-connection.c"
             line="309">Saves the connection to disk if the connection has changes that have not yet
been written to disk, or if the connection has never been saved.</doc>
        <source-position filename="nm-remote-connection.h" line="130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-remote-connection.c"
                 line="311">the #NMRemoteConnection</doc>
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="nm-remote-connection.c"
                 line="312">a function to be called when the
save completes</doc>
            <type name="RemoteConnectionResultFunc"
                  c:type="NMRemoteConnectionResultFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-remote-connection.c"
                 line="314">caller-specific data to be passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <property name="bus"
                introspectable="0"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-remote-connection.c"
             line="856">The #DBusGConnection that the #NMRemoteConnection is connected to.</doc>
        <type/>
      </property>
      <property name="dbus-connection"
                introspectable="0"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type/>
      </property>
      <property name="dbus-path"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="unsaved" version="0.9.10" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-remote-connection.c"
             line="885">%TRUE if the remote connection contains changes that have not been saved
to disk, %FALSE if the connection is the same as its on-disk representation.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="NetworkManager.Connection" c:type="NMConnection"/>
      </field>
      <glib:signal name="removed" when="first">
        <doc xml:space="preserve"
             filename="nm-remote-connection.c"
             line="917">This signal is emitted when a connection is either deleted or becomes
invisible to the current user.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="updated" when="first">
        <doc xml:space="preserve"
             filename="nm-remote-connection.c"
             line="901">This signal is emitted when a connection changes, and it is
still visible to the user.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="visible" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="RemoteConnectionClass"
            c:type="NMRemoteConnectionClass"
            glib:is-gtype-struct-for="RemoteConnection">
      <source-position filename="nm-remote-connection.h" line="79"/>
      <field name="parent_class">
        <type name="NetworkManager.ConnectionClass"
              c:type="NMConnectionClass"/>
      </field>
      <field name="updated">
        <callback name="updated">
          <source-position filename="nm-remote-connection.h" line="67"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="connection" transfer-ownership="none">
              <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
            </parameter>
            <parameter name="new_settings" transfer-ownership="none">
              <type name="GLib.HashTable" c:type="GHashTable*">
                <type name="gpointer" c:type="gpointer"/>
                <type name="gpointer" c:type="gpointer"/>
              </type>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="removed">
        <callback name="removed">
          <source-position filename="nm-remote-connection.h" line="70"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="connection" transfer-ownership="none">
              <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <source-position filename="nm-remote-connection.h" line="73"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <source-position filename="nm-remote-connection.h" line="74"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <source-position filename="nm-remote-connection.h" line="75"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved4" introspectable="0">
        <callback name="_reserved4">
          <source-position filename="nm-remote-connection.h" line="76"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved5" introspectable="0">
        <callback name="_reserved5">
          <source-position filename="nm-remote-connection.h" line="77"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved6" introspectable="0">
        <callback name="_reserved6">
          <source-position filename="nm-remote-connection.h" line="78"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="RemoteConnectionError"
                 glib:type-name="NMRemoteConnectionError"
                 glib:get-type="nm_remote_connection_error_get_type"
                 c:type="NMRemoteConnectionError"
                 glib:error-domain="nm-remote-connection-error-quark">
      <member name="UnknownError"
              value="0"
              c:identifier="NM_REMOTE_CONNECTION_ERROR_UNKNOWN"
              glib:nick="UnknownError">
        <doc xml:space="preserve"
             filename="nm-remote-connection.h"
             line="41">unknown or unclassified error</doc>
      </member>
      <member name="Disconnected"
              value="1"
              c:identifier="NM_REMOTE_CONNECTION_ERROR_DISCONNECTED"
              glib:nick="Disconnected">
        <doc xml:space="preserve"
             filename="nm-remote-connection.h"
             line="42">dbus disconnected</doc>
      </member>
      <function name="quark" c:identifier="nm_remote_connection_error_quark">
        <doc xml:space="preserve"
             filename="nm-remote-connection.c"
             line="93">Registers an error quark for #NMRemoteConnection if necessary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-remote-connection.c"
               line="98">the error quark used for #NMRemoteConnection errors.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <callback name="RemoteConnectionGetSecretsFunc"
              c:type="NMRemoteConnectionGetSecretsFunc">
      <doc xml:space="preserve"
           filename="nm-remote-connection.h"
           line="98">Called when NetworkManager returns secrets in response to a request for
secrets via nm_remote_connection_get_secrets().</doc>
      <source-position filename="nm-remote-connection.h" line="110"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-remote-connection.h"
               line="100">the connection for which secrets were requested</doc>
          <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
        </parameter>
        <parameter name="secrets" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-remote-connection.h"
               line="101">on success, a hash table of
 hash tables, with each inner hash mapping a setting property to a #GValue
 containing that property's value</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="GLib.HashTable">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </type>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-remote-connection.h"
               line="104">on failure, a descriptive error</doc>
          <type name="GLib.Error" c:type="GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="nm-remote-connection.h"
               line="105">user data passed to nm_remote_connection_get_secrets()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="RemoteConnectionResultFunc"
              c:type="NMRemoteConnectionResultFunc">
      <doc xml:space="preserve"
           filename="nm-remote-connection.h"
           line="81">Called when NetworkManager has finished an asynchronous operation on a
connection, like commit changes, deleting, saving, etc.</doc>
      <source-position filename="nm-remote-connection.h" line="90"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-remote-connection.h"
               line="83">the connection for which an operation was performed</doc>
          <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-remote-connection.h"
               line="84">on failure, a descriptive error</doc>
          <type name="GLib.Error" c:type="GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="nm-remote-connection.h"
               line="85">user data passed to function which began the operation</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="RemoteSettings"
           c:symbol-prefix="remote_settings"
           c:type="NMRemoteSettings"
           parent="GObject.Object"
           glib:type-name="NMRemoteSettings"
           glib:get-type="nm_remote_settings_get_type"
           glib:type-struct="RemoteSettingsClass">
      <source-position filename="nm-remote-settings.h" line="107"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="nm_remote_settings_new">
        <doc xml:space="preserve"
             filename="nm-remote-settings.c"
             line="1062">Creates a new object representing the remote settings service.

Note that this will do blocking D-Bus calls to initialize the
settings object. You can use nm_remote_settings_new_async() if you
want to avoid that.</doc>
        <source-position filename="nm-remote-settings.h" line="111"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-remote-settings.c"
               line="1072">the new remote settings object on success, or %NULL on failure</doc>
          <type name="RemoteSettings" c:type="NMRemoteSettings*"/>
        </return-value>
        <parameters>
          <parameter name="bus"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="1064">a valid and connected D-Bus connection</doc>
            <type name="DBusGLib.Connection" c:type="DBusGConnection*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_finish"
                   c:identifier="nm_remote_settings_new_finish"
                   throws="1">
        <doc xml:space="preserve"
             filename="nm-remote-settings.c"
             line="1128">Gets the result of an nm_remote_settings_new_async() call.</doc>
        <source-position filename="nm-remote-settings.h" line="117"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-remote-settings.c"
               line="1135">a new #NMRemoteSettings object, or %NULL on error</doc>
          <type name="RemoteSettings" c:type="NMRemoteSettings*"/>
        </return-value>
        <parameters>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="1130">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new_async" c:identifier="nm_remote_settings_new_async">
        <doc xml:space="preserve"
             filename="nm-remote-settings.c"
             line="1098">Creates a new object representing the remote settings service and
begins asynchronously initializing it. @callback will be called
when it is done; use nm_remote_settings_new_finish() to get the
result.</doc>
        <source-position filename="nm-remote-settings.h" line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="1100">a valid and connected D-Bus connection</doc>
            <type name="DBusGLib.Connection" c:type="DBusGConnection*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="1101">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="1102">callback to call when the settings object is created</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="1103">data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="connections_read">
        <source-position filename="nm-remote-settings.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <type name="RemoteSettings" c:type="NMRemoteSettings*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="new_connection">
        <source-position filename="nm-remote-settings.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <type name="RemoteSettings" c:type="NMRemoteSettings*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_connection"
              c:identifier="nm_remote_settings_add_connection">
        <doc xml:space="preserve"
             filename="nm-remote-settings.c"
             line="656">Requests that the remote settings service add the given settings to a new
connection.  The connection is immediately written to disk.  @connection is
untouched by this function and only serves as a template of the settings to
add.  The #NMRemoteConnection object that represents what NetworkManager
actually added is returned to @callback when the addition operation is complete.

Note that the #NMRemoteConnection returned in @callback may not contain
identical settings to @connection as NetworkManager may perform automatic
completion and/or normalization of connection properties.</doc>
        <source-position filename="nm-remote-settings.h" line="131"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-remote-settings.c"
               line="674">%TRUE if the request was successful, %FALSE if it failed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="658">the %NMRemoteSettings</doc>
            <type name="RemoteSettings" c:type="NMRemoteSettings*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="659">the connection to add. Note that this object's settings will be
  added, not the object itself</doc>
            <type name="NetworkManager.Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="661">callback to be called when the add operation completes</doc>
            <type name="RemoteSettingsAddConnectionFunc"
                  c:type="NMRemoteSettingsAddConnectionFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="662">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_connection_unsaved"
              c:identifier="nm_remote_settings_add_connection_unsaved"
              version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-remote-settings.c"
             line="716">Requests that the remote settings service add the given settings to a new
connection.  The connection is not written to disk, which may be done at
a later time by calling the connection's nm_remote_connection_commit_changes()
method.</doc>
        <source-position filename="nm-remote-settings.h" line="137"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-remote-settings.c"
               line="729">%TRUE if the request was successful, %FALSE if it failed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="718">the %NMRemoteSettings</doc>
            <type name="RemoteSettings" c:type="NMRemoteSettings*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="719">the connection to add. Note that this object's settings will be
  added, not the object itself</doc>
            <type name="NetworkManager.Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="721">callback to be called when the add operation completes</doc>
            <type name="RemoteSettingsAddConnectionFunc"
                  c:type="NMRemoteSettingsAddConnectionFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="722">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connection_by_id"
              c:identifier="nm_remote_settings_get_connection_by_id"
              version="0.9.10">
        <doc xml:space="preserve"
             filename="nm-remote-settings.c"
             line="261">Returns the first matching %NMRemoteConnection matching a given @id.</doc>
        <source-position filename="nm-remote-settings.h" line="122"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-remote-settings.c"
               line="268">the remote connection object on success, or %NULL if no
 matching object was found.</doc>
          <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="263">the %NMRemoteSettings</doc>
            <type name="RemoteSettings" c:type="NMRemoteSettings*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="264">the id of the remote connection</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connection_by_path"
              c:identifier="nm_remote_settings_get_connection_by_path">
        <doc xml:space="preserve"
             filename="nm-remote-settings.c"
             line="300">Returns the %NMRemoteConnection representing the connection at @path.</doc>
        <source-position filename="nm-remote-settings.h" line="125"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-remote-settings.c"
               line="307">the remote connection object on success, or %NULL if the object was
 not known</doc>
          <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="302">the %NMRemoteSettings</doc>
            <type name="RemoteSettings" c:type="NMRemoteSettings*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="303">the D-Bus object path of the remote connection</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connection_by_uuid"
              c:identifier="nm_remote_settings_get_connection_by_uuid">
        <doc xml:space="preserve"
             filename="nm-remote-settings.c"
             line="325">Returns the %NMRemoteConnection identified by @uuid.</doc>
        <source-position filename="nm-remote-settings.h" line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-remote-settings.c"
               line="332">the remote connection object on success, or %NULL if the object was
 not known</doc>
          <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="327">the %NMRemoteSettings</doc>
            <type name="RemoteSettings" c:type="NMRemoteSettings*"/>
          </instance-parameter>
          <parameter name="uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="328">the UUID of the remote connection</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_connections"
              c:identifier="nm_remote_settings_list_connections">
        <source-position filename="nm-remote-settings.h" line="120"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="nm-remote-settings.c"
               line="608">a
list containing all connections provided by the remote settings service.
Each element of the returned list is a %NMRemoteConnection instance, which is
owned by the %NMRemoteSettings object and should not be freed by the caller.
The returned list is, however, owned by the caller and should be freed
using g_slist_free() when no longer required.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="RemoteConnection"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="606">the %NMRemoteSettings</doc>
            <type name="RemoteSettings" c:type="NMRemoteSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_connections"
              c:identifier="nm_remote_settings_load_connections"
              version="0.9.10"
              throws="1">
        <doc xml:space="preserve"
             filename="nm-remote-settings.c"
             line="773">Requests that the remote settings service load or reload the given files,
adding or updating the connections described within.

The changes to the indicated files will not yet be reflected in
@settings's connections array when the function returns.

If all of the indicated files were successfully loaded, the
function will return %TRUE, and @failures will be set to %NULL. If
NetworkManager tried to load the files, but some (or all) failed,
then @failures will be set to a %NULL-terminated array of the
filenames that failed to load.</doc>
        <source-position filename="nm-remote-settings.h" line="143"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-remote-settings.c"
               line="793">%TRUE if NetworkManager at least tried to load @filenames,
%FALSE if an error occurred (eg, permission denied).</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="775">the %NMRemoteSettings</doc>
            <type name="RemoteSettings" c:type="NMRemoteSettings*"/>
          </instance-parameter>
          <parameter name="filenames" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="776">%NULL-terminated array of filenames to load</doc>
            <type name="utf8" c:type="char**"/>
          </parameter>
          <parameter name="failures"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="777">on return, a %NULL-terminated array of
  filenames that failed to load</doc>
            <type name="utf8" c:type="char***"/>
          </parameter>
        </parameters>
      </method>
      <method name="reload_connections"
              c:identifier="nm_remote_settings_reload_connections"
              version="0.9.10"
              throws="1">
        <doc xml:space="preserve"
             filename="nm-remote-settings.c"
             line="840">Requests that the remote settings service reload all connection
files from disk, adding, updating, and removing connections until
the in-memory state matches the on-disk state.</doc>
        <source-position filename="nm-remote-settings.h" line="149"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-remote-settings.c"
               line="849">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="842">the #NMRemoteSettings</doc>
            <type name="RemoteSettings" c:type="NMRemoteSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save_hostname"
              c:identifier="nm_remote_settings_save_hostname">
        <doc xml:space="preserve"
             filename="nm-remote-settings.c"
             line="924">Requests that the machine's persistent hostname be set to the specified value
or cleared.</doc>
        <source-position filename="nm-remote-settings.h" line="152"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-remote-settings.c"
               line="936">%TRUE if the request was successful, %FALSE if it failed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="926">the %NMRemoteSettings</doc>
            <type name="RemoteSettings" c:type="NMRemoteSettings*"/>
          </instance-parameter>
          <parameter name="hostname" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="927">the new persistent hostname to set, or %NULL to clear any existing
 persistent hostname</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="929">callback to be called when the
hostname operation completes</doc>
            <type name="RemoteSettingsSaveHostnameFunc"
                  c:type="NMRemoteSettingsSaveHostnameFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-remote-settings.c"
                 line="931">caller-specific data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <property name="bus"
                introspectable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-remote-settings.c"
             line="1489">The #DBusGConnection that the #NMRemoteSettings is connected to. Defaults
to the system bus if not specified.</doc>
        <type/>
      </property>
      <property name="can-modify" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-remote-settings.c"
             line="1528">If %TRUE, adding and modifying connections is supported.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hostname" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-remote-settings.c"
             line="1515">The machine hostname stored in persistent configuration. This can be
modified by calling nm_remote_settings_save_hostname().</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="service-running" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-remote-settings.c"
             line="1503">Whether the settings service is running.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="connections-read" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="new-connection" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <callback name="RemoteSettingsAddConnectionFunc"
              c:type="NMRemoteSettingsAddConnectionFunc">
      <source-position filename="nm-remote-settings.h" line="73"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="settings" transfer-ownership="none">
          <type name="RemoteSettings" c:type="NMRemoteSettings*"/>
        </parameter>
        <parameter name="connection" transfer-ownership="none">
          <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <type name="GLib.Error" c:type="GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="RemoteSettingsClass"
            c:type="NMRemoteSettingsClass"
            glib:is-gtype-struct-for="RemoteSettings">
      <source-position filename="nm-remote-settings.h" line="107"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="new_connection">
        <callback name="new_connection">
          <source-position filename="nm-remote-settings.h" line="95"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="settings" transfer-ownership="none">
              <type name="RemoteSettings" c:type="NMRemoteSettings*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <type name="RemoteConnection" c:type="NMRemoteConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="connections_read">
        <callback name="connections_read">
          <source-position filename="nm-remote-settings.h" line="98"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="settings" transfer-ownership="none">
              <type name="RemoteSettings" c:type="NMRemoteSettings*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <source-position filename="nm-remote-settings.h" line="101"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <source-position filename="nm-remote-settings.h" line="102"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <source-position filename="nm-remote-settings.h" line="103"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved4" introspectable="0">
        <callback name="_reserved4">
          <source-position filename="nm-remote-settings.h" line="104"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved5" introspectable="0">
        <callback name="_reserved5">
          <source-position filename="nm-remote-settings.h" line="105"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved6" introspectable="0">
        <callback name="_reserved6">
          <source-position filename="nm-remote-settings.h" line="106"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="RemoteSettingsError"
                 glib:type-name="NMRemoteSettingsError"
                 glib:get-type="nm_remote_settings_error_get_type"
                 c:type="NMRemoteSettingsError"
                 glib:error-domain="nm-remote-settings-error-quark">
      <doc xml:space="preserve"
           filename="nm-remote-settings.h"
           line="39">Describes errors that may result from operations involving a #NMRemoteSettings.</doc>
      <member name="UnknownError"
              value="0"
              c:identifier="NM_REMOTE_SETTINGS_ERROR_UNKNOWN"
              glib:nick="UnknownError">
        <doc xml:space="preserve"
             filename="nm-remote-settings.h"
             line="41">unknown or unclassified error</doc>
      </member>
      <member name="ConnectionRemoved"
              value="1"
              c:identifier="NM_REMOTE_SETTINGS_ERROR_CONNECTION_REMOVED"
              glib:nick="ConnectionRemoved">
        <doc xml:space="preserve"
             filename="nm-remote-settings.h"
             line="42">the #NMRemoteConnection object
  was removed before it was completely initialized</doc>
      </member>
      <member name="ConnectionUnavailable"
              value="2"
              c:identifier="NM_REMOTE_SETTINGS_ERROR_CONNECTION_UNAVAILABLE"
              glib:nick="ConnectionUnavailable">
        <doc xml:space="preserve"
             filename="nm-remote-settings.h"
             line="44">the #NMRemoteConnection object
  is not visible or otherwise unreadable</doc>
      </member>
      <member name="ServiceUnavailable"
              value="3"
              c:identifier="NM_REMOTE_SETTINGS_ERROR_SERVICE_UNAVAILABLE"
              glib:nick="ServiceUnavailable">
        <doc xml:space="preserve"
             filename="nm-remote-settings.h"
             line="46">NetworkManager is not running.
  (Since 0.9.10)</doc>
      </member>
      <function name="quark" c:identifier="nm_remote_settings_error_quark">
        <doc xml:space="preserve"
             filename="nm-remote-settings.c"
             line="175">Registers an error quark for #NMRemoteSettings if necessary.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-remote-settings.c"
               line="180">the error quark used for #NMRemoteSettings errors.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <callback name="RemoteSettingsLoadConnectionsFunc"
              c:type="NMRemoteSettingsLoadConnectionsFunc">
      <source-position filename="nm-remote-settings.h" line="78"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="settings" transfer-ownership="none">
          <type name="RemoteSettings" c:type="NMRemoteSettings*"/>
        </parameter>
        <parameter name="failures" transfer-ownership="none">
          <type name="utf8" c:type="char**"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <type name="GLib.Error" c:type="GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="RemoteSettingsSaveHostnameFunc"
              c:type="NMRemoteSettingsSaveHostnameFunc">
      <source-position filename="nm-remote-settings.h" line="83"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="settings" transfer-ownership="none">
          <type name="RemoteSettings" c:type="NMRemoteSettings*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <type name="GLib.Error" c:type="GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <constant name="SECRET_AGENT_AUTO_REGISTER"
              value="auto-register"
              c:type="NM_SECRET_AGENT_AUTO_REGISTER">
      <source-position filename="nm-secret-agent.h" line="112"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SECRET_AGENT_CAPABILITIES"
              value="capabilities"
              c:type="NM_SECRET_AGENT_CAPABILITIES">
      <source-position filename="nm-secret-agent.h" line="114"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SECRET_AGENT_IDENTIFIER"
              value="identifier"
              c:type="NM_SECRET_AGENT_IDENTIFIER">
      <source-position filename="nm-secret-agent.h" line="111"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SECRET_AGENT_REGISTERED"
              value="registered"
              c:type="NM_SECRET_AGENT_REGISTERED">
      <source-position filename="nm-secret-agent.h" line="113"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SECRET_AGENT_REGISTRATION_RESULT"
              value="registration-result"
              c:type="NM_SECRET_AGENT_REGISTRATION_RESULT">
      <source-position filename="nm-secret-agent.h" line="116"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="SecretAgent"
           c:symbol-prefix="secret_agent"
           c:type="NMSecretAgent"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="NMSecretAgent"
           glib:get-type="nm_secret_agent_get_type"
           glib:type-struct="SecretAgentClass">
      <source-position filename="nm-secret-agent.h" line="277"/>
      <virtual-method name="cancel_get_secrets">
        <source-position filename="nm-secret-agent.h" line="239"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SecretAgent" c:type="NMSecretAgent*"/>
          </instance-parameter>
          <parameter name="connection_path" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="setting_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="delete_secrets" invoker="delete_secrets">
        <doc xml:space="preserve"
             filename="nm-secret-agent.c"
             line="765">Asynchronously ask the agent to delete all saved secrets belonging to
@connection.</doc>
        <source-position filename="nm-secret-agent.h" line="261"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="767">a #NMSecretAgent</doc>
            <type name="SecretAgent" c:type="NMSecretAgent*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="768">a #NMConnection</doc>
            <type name="NetworkManager.Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="connection_path" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="769">a callback, to be invoked when the operation is done</doc>
            <type name="SecretAgentDeleteSecretsFunc"
                  c:type="NMSecretAgentDeleteSecretsFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="770">caller-specific data to be passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_secrets" invoker="get_secrets">
        <doc xml:space="preserve"
             filename="nm-secret-agent.c"
             line="696">Asynchronously retrieve secrets belonging to @connection for the
setting @setting_name.  @flags indicate specific behavior that the secret
agent should use when performing the request, for example returning only
existing secrets without user interaction, or requesting entirely new
secrets from the user.</doc>
        <source-position filename="nm-secret-agent.h" line="224"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="698">a #NMSecretAgent</doc>
            <type name="SecretAgent" c:type="NMSecretAgent*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="699">the #NMConnection for which we're asked secrets</doc>
            <type name="NetworkManager.Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="connection_path" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="setting_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="700">the name of the secret setting</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="hints" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="701">hints to the agent</doc>
            <array c:type="const char**">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="702">flags that modify the behavior of the request</doc>
            <type name="SecretAgentGetSecretsFlags"
                  c:type="NMSecretAgentGetSecretsFlags"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="703">a callback, to be invoked when the operation is done</doc>
            <type name="SecretAgentGetSecretsFunc"
                  c:type="NMSecretAgentGetSecretsFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="6">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="704">caller-specific data to be passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="registration_result">
        <source-position filename="nm-secret-agent.h" line="268"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="agent" transfer-ownership="none">
            <type name="SecretAgent" c:type="NMSecretAgent*"/>
          </instance-parameter>
          <parameter name="error" transfer-ownership="none">
            <type name="GLib.Error" c:type="GError*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="save_secrets" invoker="save_secrets">
        <doc xml:space="preserve"
             filename="nm-secret-agent.c"
             line="738">Asynchronously ensure that all secrets inside @connection
are stored to disk.</doc>
        <source-position filename="nm-secret-agent.h" line="249"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="740">a #NMSecretAgent</doc>
            <type name="SecretAgent" c:type="NMSecretAgent*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="741">a #NMConnection</doc>
            <type name="NetworkManager.Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="connection_path" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="742">a callback, to be invoked when the operation is done</doc>
            <type name="SecretAgentSaveSecretsFunc"
                  c:type="NMSecretAgentSaveSecretsFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="743">caller-specific data to be passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="delete_secrets"
              c:identifier="nm_secret_agent_delete_secrets">
        <doc xml:space="preserve"
             filename="nm-secret-agent.c"
             line="765">Asynchronously ask the agent to delete all saved secrets belonging to
@connection.</doc>
        <source-position filename="nm-secret-agent.h" line="300"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="767">a #NMSecretAgent</doc>
            <type name="SecretAgent" c:type="NMSecretAgent*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="768">a #NMConnection</doc>
            <type name="NetworkManager.Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="769">a callback, to be invoked when the operation is done</doc>
            <type name="SecretAgentDeleteSecretsFunc"
                  c:type="NMSecretAgentDeleteSecretsFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="770">caller-specific data to be passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_registered"
              c:identifier="nm_secret_agent_get_registered">
        <source-position filename="nm-secret-agent.h" line="285"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-secret-agent.c"
               line="671">a %TRUE if the agent is registered, %FALSE if it is not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="669">a #NMSecretAgent</doc>
            <type name="SecretAgent" c:type="NMSecretAgent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_secrets" c:identifier="nm_secret_agent_get_secrets">
        <doc xml:space="preserve"
             filename="nm-secret-agent.c"
             line="696">Asynchronously retrieve secrets belonging to @connection for the
setting @setting_name.  @flags indicate specific behavior that the secret
agent should use when performing the request, for example returning only
existing secrets without user interaction, or requesting entirely new
secrets from the user.</doc>
        <source-position filename="nm-secret-agent.h" line="287"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="698">a #NMSecretAgent</doc>
            <type name="SecretAgent" c:type="NMSecretAgent*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="699">the #NMConnection for which we're asked secrets</doc>
            <type name="NetworkManager.Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="setting_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="700">the name of the secret setting</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="hints" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="701">hints to the agent</doc>
            <array c:type="const char**">
              <type name="utf8" c:type="char*"/>
            </array>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="702">flags that modify the behavior of the request</doc>
            <type name="SecretAgentGetSecretsFlags"
                  c:type="NMSecretAgentGetSecretsFlags"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="703">a callback, to be invoked when the operation is done</doc>
            <type name="SecretAgentGetSecretsFunc"
                  c:type="NMSecretAgentGetSecretsFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="704">caller-specific data to be passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="register" c:identifier="nm_secret_agent_register">
        <doc xml:space="preserve"
             filename="nm-secret-agent.c"
             line="576">Registers the #NMSecretAgent with the NetworkManager secret manager,
indicating to NetworkManager that the agent is able to provide and save
secrets for connections on behalf of its user.  Registration is an
asynchronous operation and its success or failure is indicated via the
'registration-result' signal.</doc>
        <source-position filename="nm-secret-agent.h" line="281"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-secret-agent.c"
               line="586">a new %TRUE if registration was successfully requested (this does
not mean registration itself was successful), %FALSE if registration was not
successfully requested.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="578">a #NMSecretAgent</doc>
            <type name="SecretAgent" c:type="NMSecretAgent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save_secrets" c:identifier="nm_secret_agent_save_secrets">
        <doc xml:space="preserve"
             filename="nm-secret-agent.c"
             line="738">Asynchronously ensure that all secrets inside @connection
are stored to disk.</doc>
        <source-position filename="nm-secret-agent.h" line="295"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="740">a #NMSecretAgent</doc>
            <type name="SecretAgent" c:type="NMSecretAgent*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="741">a #NMConnection</doc>
            <type name="NetworkManager.Connection" c:type="NMConnection*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="742">a callback, to be invoked when the operation is done</doc>
            <type name="SecretAgentSaveSecretsFunc"
                  c:type="NMSecretAgentSaveSecretsFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="743">caller-specific data to be passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unregister" c:identifier="nm_secret_agent_unregister">
        <doc xml:space="preserve"
             filename="nm-secret-agent.c"
             line="633">Unregisters the #NMSecretAgent with the NetworkManager secret manager,
indicating to NetworkManager that the agent is will no longer provide or
store secrets on behalf of this user.</doc>
        <source-position filename="nm-secret-agent.h" line="283"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-secret-agent.c"
               line="641">a new %TRUE if unregistration was successful, %FALSE if it was not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="635">a #NMSecretAgent</doc>
            <type name="SecretAgent" c:type="NMSecretAgent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="auto-register"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-secret-agent.c"
             line="986">If TRUE, the agent will attempt to automatically register itself after
it is created (via an idle handler) and to re-register itself if
NetworkManager restarts.  If FALSE, the agent does not automatically
register with NetworkManager, and nm_secret_agent_register() must be
called.  If 'auto-register' is TRUE, calling nm_secret_agent_unregister()
will suppress auto-registration until nm_secret_agent_register() is
called, which re-enables auto-registration.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="capabilities"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-secret-agent.c"
             line="1017">A bitfield of %NMSecretAgentCapabilities.</doc>
        <type name="SecretAgentCapabilities"/>
      </property>
      <property name="identifier"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-secret-agent.c"
             line="967">Identifies this agent; only one agent in each user session may use the
same identifier.  Identifier formatting follows the same rules as
D-Bus bus names with the exception that the ':' character is not
allowed.  The valid set of characters is "[A-Z][a-z][0-9]_-." and the
identifier is limited in length to 255 characters with a minimum
of 3 characters.  An example valid identifier is 'org.gnome.nm-applet'
(without quotes).</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="registered" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-secret-agent.c"
             line="1005">%TRUE if the agent is registered with NetworkManager, %FALSE if not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="registration-result" when="first">
        <doc xml:space="preserve"
             filename="nm-secret-agent.c"
             line="1031">Indicates the result of a registration request; if @error is NULL the
request was successful.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="error"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="nm-secret-agent.c"
                 line="1034">the error, if any, that occurred while registering</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <bitfield name="SecretAgentCapabilities"
              version="0.9.10"
              glib:type-name="NMSecretAgentCapabilities"
              glib:get-type="nm_secret_agent_capabilities_get_type"
              c:type="NMSecretAgentCapabilities">
      <doc xml:space="preserve"
           filename="nm-secret-agent.h"
           line="58">#NMSecretAgentCapabilities indicate various capabilities of the agent.</doc>
      <member name="none"
              value="0"
              c:identifier="NM_SECRET_AGENT_CAPABILITY_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="nm-secret-agent.h"
             line="60">the agent supports no special capabilities</doc>
      </member>
      <member name="vpn_hints"
              value="1"
              c:identifier="NM_SECRET_AGENT_CAPABILITY_VPN_HINTS"
              glib:nick="vpn-hints">
        <doc xml:space="preserve"
             filename="nm-secret-agent.h"
             line="61">the agent supports sending hints given
by the &lt;literal&gt;get_secrets&lt;/literal&gt; class method to VPN plugin
authentication dialogs.</doc>
      </member>
      <member name="last"
              value="1"
              c:identifier="NM_SECRET_AGENT_CAPABILITY_LAST"
              glib:nick="last">
        <doc xml:space="preserve"
             filename="nm-secret-agent.h"
             line="64">bounds checking value; should not be used.</doc>
      </member>
    </bitfield>
    <record name="SecretAgentClass"
            c:type="NMSecretAgentClass"
            glib:is-gtype-struct-for="SecretAgent">
      <source-position filename="nm-secret-agent.h" line="277"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="get_secrets">
        <callback name="get_secrets">
          <source-position filename="nm-secret-agent.h" line="224"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="nm-secret-agent.c"
                   line="698">a #NMSecretAgent</doc>
              <type name="SecretAgent" c:type="NMSecretAgent*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="nm-secret-agent.c"
                   line="699">the #NMConnection for which we're asked secrets</doc>
              <type name="NetworkManager.Connection" c:type="NMConnection*"/>
            </parameter>
            <parameter name="connection_path" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="setting_name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="nm-secret-agent.c"
                   line="700">the name of the secret setting</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="hints" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="nm-secret-agent.c"
                   line="701">hints to the agent</doc>
              <array c:type="const char**">
                <type name="utf8" c:type="char*"/>
              </array>
            </parameter>
            <parameter name="flags" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="nm-secret-agent.c"
                   line="702">flags that modify the behavior of the request</doc>
              <type name="SecretAgentGetSecretsFlags"
                    c:type="NMSecretAgentGetSecretsFlags"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       scope="async"
                       closure="7">
              <doc xml:space="preserve"
                   filename="nm-secret-agent.c"
                   line="703">a callback, to be invoked when the operation is done</doc>
              <type name="SecretAgentGetSecretsFunc"
                    c:type="NMSecretAgentGetSecretsFunc"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="7">
              <doc xml:space="preserve"
                   filename="nm-secret-agent.c"
                   line="704">caller-specific data to be passed to @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cancel_get_secrets">
        <callback name="cancel_get_secrets">
          <source-position filename="nm-secret-agent.h" line="239"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SecretAgent" c:type="NMSecretAgent*"/>
            </parameter>
            <parameter name="connection_path" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="setting_name" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="save_secrets">
        <callback name="save_secrets">
          <source-position filename="nm-secret-agent.h" line="249"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="nm-secret-agent.c"
                   line="740">a #NMSecretAgent</doc>
              <type name="SecretAgent" c:type="NMSecretAgent*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="nm-secret-agent.c"
                   line="741">a #NMConnection</doc>
              <type name="NetworkManager.Connection" c:type="NMConnection*"/>
            </parameter>
            <parameter name="connection_path" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       scope="async"
                       closure="4">
              <doc xml:space="preserve"
                   filename="nm-secret-agent.c"
                   line="742">a callback, to be invoked when the operation is done</doc>
              <type name="SecretAgentSaveSecretsFunc"
                    c:type="NMSecretAgentSaveSecretsFunc"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <doc xml:space="preserve"
                   filename="nm-secret-agent.c"
                   line="743">caller-specific data to be passed to @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="delete_secrets">
        <callback name="delete_secrets">
          <source-position filename="nm-secret-agent.h" line="261"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="nm-secret-agent.c"
                   line="767">a #NMSecretAgent</doc>
              <type name="SecretAgent" c:type="NMSecretAgent*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="nm-secret-agent.c"
                   line="768">a #NMConnection</doc>
              <type name="NetworkManager.Connection" c:type="NMConnection*"/>
            </parameter>
            <parameter name="connection_path" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       scope="async"
                       closure="4">
              <doc xml:space="preserve"
                   filename="nm-secret-agent.c"
                   line="769">a callback, to be invoked when the operation is done</doc>
              <type name="SecretAgentDeleteSecretsFunc"
                    c:type="NMSecretAgentDeleteSecretsFunc"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <doc xml:space="preserve"
                   filename="nm-secret-agent.c"
                   line="770">caller-specific data to be passed to @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="registration_result">
        <callback name="registration_result">
          <source-position filename="nm-secret-agent.h" line="268"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="agent" transfer-ownership="none">
              <type name="SecretAgent" c:type="NMSecretAgent*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="GLib.Error" c:type="GError*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <source-position filename="nm-secret-agent.h" line="271"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <source-position filename="nm-secret-agent.h" line="272"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <source-position filename="nm-secret-agent.h" line="273"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved4" introspectable="0">
        <callback name="_reserved4">
          <source-position filename="nm-secret-agent.h" line="274"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved5" introspectable="0">
        <callback name="_reserved5">
          <source-position filename="nm-secret-agent.h" line="275"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved6" introspectable="0">
        <callback name="_reserved6">
          <source-position filename="nm-secret-agent.h" line="276"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="SecretAgentDeleteSecretsFunc"
              c:type="NMSecretAgentDeleteSecretsFunc">
      <doc xml:space="preserve"
           filename="nm-secret-agent.h"
           line="193">Called as a result of a request by NM to delete secrets.  When the
#NMSecretAgent subclass has finished deleting the secrets, this function
should be called.</doc>
      <source-position filename="nm-secret-agent.h" line="207"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="agent" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-secret-agent.h"
               line="195">the secret agent object</doc>
          <type name="SecretAgent" c:type="NMSecretAgent*"/>
        </parameter>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-secret-agent.h"
               line="196">the connection for which secrets were to be deleted,
note that this object will be unrefed after the callback has returned, use
g_object_ref()/g_object_unref() if you want to use this object after the callback
has returned</doc>
          <type name="NetworkManager.Connection" c:type="NMConnection*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-secret-agent.h"
               line="200">if the deleting secrets failed, give a descriptive error here</doc>
          <type name="GLib.Error" c:type="GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="nm-secret-agent.h"
               line="201">caller-specific data to be passed to the function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="SecretAgentError"
                 glib:type-name="NMSecretAgentError"
                 glib:get-type="nm_secret_agent_error_get_type"
                 c:type="NMSecretAgentError"
                 glib:error-domain="nm-secret-agent-error">
      <doc xml:space="preserve"
           filename="nm-secret-agent.h"
           line="32">#NMSecretAgentError values are passed by secret agents back to NetworkManager
when they encounter problems retrieving secrets on behalf of NM.</doc>
      <member name="NotAuthorized"
              value="0"
              c:identifier="NM_SECRET_AGENT_ERROR_NOT_AUTHORIZED"
              glib:nick="NotAuthorized">
        <doc xml:space="preserve"
             filename="nm-secret-agent.h"
             line="34">the caller (ie, NetworkManager) is not
 authorized to make this request</doc>
      </member>
      <member name="InvalidConnection"
              value="1"
              c:identifier="NM_SECRET_AGENT_ERROR_INVALID_CONNECTION"
              glib:nick="InvalidConnection">
        <doc xml:space="preserve"
             filename="nm-secret-agent.h"
             line="36">the connection for which secrets
 were requested could not be found</doc>
      </member>
      <member name="UserCanceled"
              value="2"
              c:identifier="NM_SECRET_AGENT_ERROR_USER_CANCELED"
              glib:nick="UserCanceled">
        <doc xml:space="preserve"
             filename="nm-secret-agent.h"
             line="38">the request was canceled by the user</doc>
      </member>
      <member name="AgentCanceled"
              value="3"
              c:identifier="NM_SECRET_AGENT_ERROR_AGENT_CANCELED"
              glib:nick="AgentCanceled">
        <doc xml:space="preserve"
             filename="nm-secret-agent.h"
             line="39">the agent canceled the request
 because it was requested to do so by NetworkManager</doc>
      </member>
      <member name="InternalError"
              value="4"
              c:identifier="NM_SECRET_AGENT_ERROR_INTERNAL_ERROR"
              glib:nick="InternalError">
        <doc xml:space="preserve"
             filename="nm-secret-agent.h"
             line="41">some internal error in the agent caused
 the request to fail</doc>
      </member>
      <member name="NoSecrets"
              value="5"
              c:identifier="NM_SECRET_AGENT_ERROR_NO_SECRETS"
              glib:nick="NoSecrets">
        <doc xml:space="preserve"
             filename="nm-secret-agent.h"
             line="43">the agent cannot find any secrets for this
 connection</doc>
      </member>
      <function name="quark" c:identifier="nm_secret_agent_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <bitfield name="SecretAgentGetSecretsFlags"
              glib:type-name="NMSecretAgentGetSecretsFlags"
              glib:get-type="nm_secret_agent_get_secrets_flags_get_type"
              c:type="NMSecretAgentGetSecretsFlags">
      <doc xml:space="preserve"
           filename="nm-secret-agent.h"
           line="78">#NMSecretAgentGetSecretsFlags values modify the behavior of a GetSecrets request.</doc>
      <member name="none"
              value="0"
              c:identifier="NM_SECRET_AGENT_GET_SECRETS_FLAG_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="nm-secret-agent.h"
             line="80">no special behavior; by default no
user interaction is allowed and requests for secrets are fulfilled from
persistent storage, or if no secrets are available an error is returned.</doc>
      </member>
      <member name="allow_interaction"
              value="1"
              c:identifier="NM_SECRET_AGENT_GET_SECRETS_FLAG_ALLOW_INTERACTION"
              glib:nick="allow-interaction">
        <doc xml:space="preserve"
             filename="nm-secret-agent.h"
             line="83">allows the request to
interact with the user, possibly prompting via UI for secrets if any are
required, or if none are found in persistent storage.</doc>
      </member>
      <member name="request_new"
              value="2"
              c:identifier="NM_SECRET_AGENT_GET_SECRETS_FLAG_REQUEST_NEW"
              glib:nick="request-new">
        <doc xml:space="preserve"
             filename="nm-secret-agent.h"
             line="86">explicitly prompt for new
secrets from the user.  This flag signals that NetworkManager thinks any
existing secrets are invalid or wrong.  This flag implies that interaction
is allowed.</doc>
      </member>
      <member name="user_requested"
              value="4"
              c:identifier="NM_SECRET_AGENT_GET_SECRETS_FLAG_USER_REQUESTED"
              glib:nick="user-requested">
        <doc xml:space="preserve"
             filename="nm-secret-agent.h"
             line="90">set if the request was
initiated by user-requested action via the D-Bus interface, as opposed to
automatically initiated by NetworkManager in response to (for example) scan
results or carrier changes.</doc>
      </member>
    </bitfield>
    <callback name="SecretAgentGetSecretsFunc"
              c:type="NMSecretAgentGetSecretsFunc">
      <doc xml:space="preserve"
           filename="nm-secret-agent.h"
           line="122">Called as a result of a request by NM to retrieve secrets.  When the
#NMSecretAgent subclass has finished retrieving secrets and is ready to
return them, or to return an error, this function should be called with
those secrets or the error.

To easily create the hash table to return the Wi-Fi PSK, you could do
something like this:
&lt;example&gt;
 &lt;title&gt;Creating a secrets hash&lt;/title&gt;
 &lt;programlisting&gt;
  NMConnection *secrets;
  NMSettingWirelessSecurity *s_wsec;
  GHashTable *secrets_hash;

  secrets = nm_connection_new ();
  s_wsec = (NMSettingWirelessSecurity *) nm_setting_wireless_security_new ();
  g_object_set (G_OBJECT (s_wsec),
                NM_SETTING_WIRELESS_SECURITY_PSK, "my really cool PSK",
                NULL);
  nm_connection_add_setting (secrets, NM_SETTING (s_wsec));
  secrets_hash = nm_connection_to_hash (secrets, NM_SETTING_HASH_FLAG_ALL);

  (call the NMSecretAgentGetSecretsFunc with secrets_hash)

  g_object_unref (secrets);
  g_hash_table_unref (secrets_hash);
 &lt;/programlisting&gt;
&lt;/example&gt;</doc>
      <source-position filename="nm-secret-agent.h" line="168"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="agent" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-secret-agent.h"
               line="124">the secret agent object</doc>
          <type name="SecretAgent" c:type="NMSecretAgent*"/>
        </parameter>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-secret-agent.h"
               line="125">the connection for which secrets were requested,
note that this object will be unrefed after the callback has returned, use
g_object_ref()/g_object_unref() if you want to use this object after the callback
has returned</doc>
          <type name="NetworkManager.Connection" c:type="NMConnection*"/>
        </parameter>
        <parameter name="secrets" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-secret-agent.h"
               line="129">the #GHashTable containing
the requested secrets in the same format as an #NMConnection hash (as
created by nm_connection_to_hash() for example).  Each key in @secrets
should be the name of a #NMSetting object (like "802-11-wireless-security")
and each value should be a #GHashTable.  The sub-hashes map string:#GValue
where the string is the setting property name (like "psk") and the value
is the secret</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="GLib.HashTable">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </type>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-secret-agent.h"
               line="136">if the secrets request failed, give a descriptive error here</doc>
          <type name="GLib.Error" c:type="GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="4">
          <doc xml:space="preserve"
               filename="nm-secret-agent.h"
               line="137">caller-specific data to be passed to the function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="SecretAgentSaveSecretsFunc"
              c:type="NMSecretAgentSaveSecretsFunc">
      <doc xml:space="preserve"
           filename="nm-secret-agent.h"
           line="174">Called as a result of a request by NM to save secrets.  When the
#NMSecretAgent subclass has finished saving the secrets, this function
should be called.</doc>
      <source-position filename="nm-secret-agent.h" line="188"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="agent" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-secret-agent.h"
               line="176">the secret agent object</doc>
          <type name="SecretAgent" c:type="NMSecretAgent*"/>
        </parameter>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-secret-agent.h"
               line="177">the connection for which secrets were to be saved,
note that this object will be unrefed after the callback has returned, use
g_object_ref()/g_object_unref() if you want to use this object after the callback
has returned</doc>
          <type name="NetworkManager.Connection" c:type="NMConnection*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-secret-agent.h"
               line="181">if the saving secrets failed, give a descriptive error here</doc>
          <type name="GLib.Error" c:type="GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="nm-secret-agent.h"
               line="182">caller-specific data to be passed to the function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <glib:boxed glib:name="Ssid"
                c:symbol-prefix="ssid"
                glib:type-name="NMSsid"
                glib:get-type="nm_ssid_get_type">
    </glib:boxed>
    <glib:boxed glib:name="StringArray"
                c:symbol-prefix="string_array"
                glib:type-name="NMStringArray"
                glib:get-type="nm_string_array_get_type">
    </glib:boxed>
    <glib:boxed glib:name="UintArray"
                c:symbol-prefix="uint_array"
                glib:type-name="NMUintArray"
                glib:get-type="nm_uint_array_get_type">
    </glib:boxed>
    <class name="VPNConnection"
           c:symbol-prefix="vpn_connection"
           c:type="NMVPNConnection"
           parent="ActiveConnection"
           glib:type-name="NMVPNConnection"
           glib:get-type="nm_vpn_connection_get_type"
           glib:type-struct="VPNConnectionClass">
      <source-position filename="nm-vpn-connection.h" line="62"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="nm_vpn_connection_new">
        <doc xml:space="preserve"
             filename="nm-vpn-connection.c"
             line="58">Creates a new #NMVPNConnection.</doc>
        <source-position filename="nm-vpn-connection.h" line="66"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-vpn-connection.c"
               line="65">a new connection object</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-vpn-connection.c"
                 line="60">the #DBusGConnection</doc>
            <type name="DBusGLib.Connection" c:type="DBusGConnection*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-vpn-connection.c"
                 line="61">the DBus object path of the new connection</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="vpn_state_changed">
        <source-position filename="nm-vpn-connection.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <type name="VPNConnection" c:type="NMVPNConnection*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <type name="NetworkManager.VPNConnectionState"
                  c:type="NMVPNConnectionState"/>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <type name="NetworkManager.VPNConnectionStateReason"
                  c:type="NMVPNConnectionStateReason"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_banner" c:identifier="nm_vpn_connection_get_banner">
        <doc xml:space="preserve"
             filename="nm-vpn-connection.c"
             line="79">Gets the VPN login banner of the active #NMVPNConnection.</doc>
        <source-position filename="nm-vpn-connection.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-vpn-connection.c"
               line="85">the VPN login banner of the VPN connection. This is the internal
string used by the connection, and must not be modified.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vpn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-vpn-connection.c"
                 line="81">a #NMVPNConnection</doc>
            <type name="VPNConnection" c:type="NMVPNConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vpn_state"
              c:identifier="nm_vpn_connection_get_vpn_state">
        <doc xml:space="preserve"
             filename="nm-vpn-connection.c"
             line="106">Gets the current #NMVPNConnection state.</doc>
        <source-position filename="nm-vpn-connection.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-vpn-connection.c"
               line="112">the VPN state of the active VPN connection.</doc>
          <type name="NetworkManager.VPNConnectionState"
                c:type="NMVPNConnectionState"/>
        </return-value>
        <parameters>
          <instance-parameter name="vpn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-vpn-connection.c"
                 line="108">a #NMVPNConnection</doc>
            <type name="VPNConnection" c:type="NMVPNConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="banner" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-vpn-connection.c"
             line="249">The VPN login banner of the active VPN connection.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="vpn-state" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-vpn-connection.c"
             line="235">The VPN state of the active VPN connection.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="ActiveConnection" c:type="NMActiveConnection"/>
      </field>
      <glib:signal name="vpn-state-changed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="VPNConnectionClass"
            c:type="NMVPNConnectionClass"
            glib:is-gtype-struct-for="VPNConnection">
      <source-position filename="nm-vpn-connection.h" line="62"/>
      <field name="parent">
        <type name="ActiveConnectionClass" c:type="NMActiveConnectionClass"/>
      </field>
      <field name="vpn_state_changed">
        <callback name="vpn_state_changed">
          <source-position filename="nm-vpn-connection.h" line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="connection" transfer-ownership="none">
              <type name="VPNConnection" c:type="NMVPNConnection*"/>
            </parameter>
            <parameter name="state" transfer-ownership="none">
              <type name="NetworkManager.VPNConnectionState"
                    c:type="NMVPNConnectionState"/>
            </parameter>
            <parameter name="reason" transfer-ownership="none">
              <type name="NetworkManager.VPNConnectionStateReason"
                    c:type="NMVPNConnectionStateReason"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <source-position filename="nm-vpn-connection.h" line="56"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <source-position filename="nm-vpn-connection.h" line="57"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <source-position filename="nm-vpn-connection.h" line="58"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved4" introspectable="0">
        <callback name="_reserved4">
          <source-position filename="nm-vpn-connection.h" line="59"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved5" introspectable="0">
        <callback name="_reserved5">
          <source-position filename="nm-vpn-connection.h" line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved6" introspectable="0">
        <callback name="_reserved6">
          <source-position filename="nm-vpn-connection.h" line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <constant name="VPN_CONNECTION_BANNER"
              value="banner"
              c:type="NM_VPN_CONNECTION_BANNER">
      <source-position filename="nm-vpn-connection.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="VPN_CONNECTION_VPN_STATE"
              value="vpn-state"
              c:type="NM_VPN_CONNECTION_VPN_STATE">
      <source-position filename="nm-vpn-connection.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WIMAX_NSP_NAME" value="name" c:type="NM_WIMAX_NSP_NAME">
      <source-position filename="nm-wimax-nsp.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WIMAX_NSP_NETWORK_TYPE"
              value="network-type"
              c:type="NM_WIMAX_NSP_NETWORK_TYPE">
      <source-position filename="nm-wimax-nsp.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WIMAX_NSP_SIGNAL_QUALITY"
              value="signal-quality"
              c:type="NM_WIMAX_NSP_SIGNAL_QUALITY">
      <source-position filename="nm-wimax-nsp.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="WimaxNsp"
           c:symbol-prefix="wimax_nsp"
           c:type="NMWimaxNsp"
           parent="Object"
           glib:type-name="NMWimaxNsp"
           glib:get-type="nm_wimax_nsp_get_type"
           glib:type-struct="WimaxNspClass">
      <source-position filename="nm-wimax-nsp.h" line="73"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="nm_wimax_nsp_new">
        <doc xml:space="preserve"
             filename="nm-wimax-nsp.c"
             line="54">Creates a new #NMWimaxNsp.</doc>
        <source-position filename="nm-wimax-nsp.h" line="77"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="nm-wimax-nsp.c"
               line="61">a new WiMAX NSP</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-wimax-nsp.c"
                 line="56">the #DBusGConnection</doc>
            <type name="DBusGLib.Connection" c:type="DBusGConnection*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-wimax-nsp.c"
                 line="57">the D-Bus object path of the WiMAX NSP</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="connection_valid"
              c:identifier="nm_wimax_nsp_connection_valid">
        <doc xml:space="preserve"
             filename="nm-wimax-nsp.c"
             line="126">Validates a given connection against a given WiMAX NSP to ensure that the
connection may be activated with that NSP.  The connection must match the
@nsp's network name and other attributes.</doc>
        <source-position filename="nm-wimax-nsp.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-wimax-nsp.c"
               line="135">%TRUE if the connection may be activated with this WiMAX NSP,
%FALSE if it cannot be.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="nsp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-wimax-nsp.c"
                 line="128">an #NMWimaxNsp to validate @connection against</doc>
            <type name="WimaxNsp" c:type="NMWimaxNsp*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-wimax-nsp.c"
                 line="129">an #NMConnection to validate against @nsp</doc>
            <type name="NetworkManager.Connection" c:type="NMConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="filter_connections"
              c:identifier="nm_wimax_nsp_filter_connections">
        <doc xml:space="preserve"
             filename="nm-wimax-nsp.c"
             line="169">Filters a given list of connections for a given #NMWimaxNsp object and
return connections which may be activated with the access point.  Any
returned connections will match the @nsp's network name and other attributes.</doc>
        <source-position filename="nm-wimax-nsp.h" line="83"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="nm-wimax-nsp.c"
               line="179">a
list of #NMConnection objects that could be activated with the given @nsp.
The elements of the list are owned by their creator and should not be freed
by the caller, but the returned list itself is owned by the caller and should
be freed with g_slist_free() when it is no longer required.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="NetworkManager.Connection"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="nsp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-wimax-nsp.c"
                 line="171">an #NMWimaxNsp to filter connections for</doc>
            <type name="WimaxNsp" c:type="NMWimaxNsp*"/>
          </instance-parameter>
          <parameter name="connections" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-wimax-nsp.c"
                 line="172">a list of
#NMConnection objects to filter</doc>
            <type name="GLib.SList" c:type="const GSList*">
              <type name="NetworkManager.Connection"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="nm_wimax_nsp_get_name">
        <doc xml:space="preserve"
             filename="nm-wimax-nsp.c"
             line="75">Gets the name of the wimax NSP</doc>
        <source-position filename="nm-wimax-nsp.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-wimax-nsp.c"
               line="81">the name</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="nsp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-wimax-nsp.c"
                 line="77">a #NMWimaxNsp</doc>
            <type name="WimaxNsp" c:type="NMWimaxNsp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_network_type"
              c:identifier="nm_wimax_nsp_get_network_type">
        <doc xml:space="preserve"
             filename="nm-wimax-nsp.c"
             line="109">Gets the network type of the wimax NSP.</doc>
        <source-position filename="nm-wimax-nsp.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-wimax-nsp.c"
               line="115">the network type</doc>
          <type name="WimaxNspNetworkType" c:type="NMWimaxNspNetworkType"/>
        </return-value>
        <parameters>
          <instance-parameter name="nsp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-wimax-nsp.c"
                 line="111">a #NMWimaxNsp</doc>
            <type name="WimaxNsp" c:type="NMWimaxNsp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_signal_quality"
              c:identifier="nm_wimax_nsp_get_signal_quality">
        <doc xml:space="preserve"
             filename="nm-wimax-nsp.c"
             line="92">Gets the WPA signal quality of the wimax NSP.</doc>
        <source-position filename="nm-wimax-nsp.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="nm-wimax-nsp.c"
               line="98">the signal quality</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="nsp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="nm-wimax-nsp.c"
                 line="94">a #NMWimaxNsp</doc>
            <type name="WimaxNsp" c:type="NMWimaxNsp*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="name" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-wimax-nsp.c"
             line="296">The name of the WiMAX NSP.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="network-type" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-wimax-nsp.c"
             line="320">The network type of the WiMAX NSP.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="signal-quality" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-wimax-nsp.c"
             line="308">The signal quality of the WiMAX NSP.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="Object" c:type="NMObject"/>
      </field>
    </class>
    <record name="WimaxNspClass"
            c:type="NMWimaxNspClass"
            glib:is-gtype-struct-for="WimaxNsp">
      <source-position filename="nm-wimax-nsp.h" line="73"/>
      <field name="parent">
        <type name="ObjectClass" c:type="NMObjectClass"/>
      </field>
      <field name="_reserved1" introspectable="0">
        <callback name="_reserved1">
          <source-position filename="nm-wimax-nsp.h" line="67"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved2" introspectable="0">
        <callback name="_reserved2">
          <source-position filename="nm-wimax-nsp.h" line="68"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved3" introspectable="0">
        <callback name="_reserved3">
          <source-position filename="nm-wimax-nsp.h" line="69"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved4" introspectable="0">
        <callback name="_reserved4">
          <source-position filename="nm-wimax-nsp.h" line="70"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved5" introspectable="0">
        <callback name="_reserved5">
          <source-position filename="nm-wimax-nsp.h" line="71"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_reserved6" introspectable="0">
        <callback name="_reserved6">
          <source-position filename="nm-wimax-nsp.h" line="72"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="WimaxNspNetworkType"
                 glib:type-name="NMWimaxNspNetworkType"
                 glib:get-type="nm_wimax_nsp_network_type_get_type"
                 c:type="NMWimaxNspNetworkType">
      <doc xml:space="preserve"
           filename="nm-wimax-nsp.h"
           line="43">WiMAX network type.</doc>
      <member name="unknown"
              value="0"
              c:identifier="NM_WIMAX_NSP_NETWORK_TYPE_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="nm-wimax-nsp.h"
             line="45">unknown network type</doc>
      </member>
      <member name="home"
              value="1"
              c:identifier="NM_WIMAX_NSP_NETWORK_TYPE_HOME"
              glib:nick="home">
        <doc xml:space="preserve"
             filename="nm-wimax-nsp.h"
             line="46">home network</doc>
      </member>
      <member name="partner"
              value="2"
              c:identifier="NM_WIMAX_NSP_NETWORK_TYPE_PARTNER"
              glib:nick="partner">
        <doc xml:space="preserve"
             filename="nm-wimax-nsp.h"
             line="47">partner network</doc>
      </member>
      <member name="roaming_partner"
              value="3"
              c:identifier="NM_WIMAX_NSP_NETWORK_TYPE_ROAMING_PARTNER"
              glib:nick="roaming-partner">
        <doc xml:space="preserve"
             filename="nm-wimax-nsp.h"
             line="48">roaming partner network</doc>
      </member>
    </enumeration>
    <function name="client_error_quark"
              c:identifier="nm_client_error_quark"
              moved-to="ClientError.quark"
              version="0.9.10">
      <doc xml:space="preserve"
           filename="nm-client.c"
           line="132">Registers an error quark for #NMClient if necessary.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-client.c"
             line="137">the error quark used for #NMClient errors.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="device_adsl_error_quark"
              c:identifier="nm_device_adsl_error_quark"
              moved-to="DeviceAdslError.quark">
      <doc xml:space="preserve"
           filename="nm-device-adsl.c"
           line="51">Registers an error quark for #NMDeviceAdsl if necessary.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-adsl.c"
             line="56">the error quark used for #NMDeviceAdsl errors.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="device_bond_error_quark"
              c:identifier="nm_device_bond_error_quark"
              moved-to="DeviceBondError.quark">
      <doc xml:space="preserve"
           filename="nm-device-bond.c"
           line="56">Registers an error quark for #NMDeviceBond if necessary.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-bond.c"
             line="61">the error quark used for #NMDeviceBond errors.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="device_bridge_error_quark"
              c:identifier="nm_device_bridge_error_quark"
              moved-to="DeviceBridgeError.quark"
              version="0.9.8">
      <doc xml:space="preserve"
           filename="nm-device-bridge.c"
           line="56">Registers an error quark for #NMDeviceBridge if necessary.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-bridge.c"
             line="61">the error quark used for #NMDeviceBridge errors.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="device_bt_error_quark"
              c:identifier="nm_device_bt_error_quark"
              moved-to="DeviceBtError.quark">
      <doc xml:space="preserve"
           filename="nm-device-bt.c"
           line="55">Registers an error quark for #NMDeviceBt if necessary.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-bt.c"
             line="60">the error quark used for #NMDeviceBt errors.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="device_error_quark"
              c:identifier="nm_device_error_quark"
              moved-to="DeviceError.quark"
              version="0.9.10">
      <doc xml:space="preserve"
           filename="nm-device.c"
           line="144">Registers an error quark for #NMDevice if necessary.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device.c"
             line="149">the error quark used for #NMDevice errors.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="device_ethernet_error_quark"
              c:identifier="nm_device_ethernet_error_quark"
              moved-to="DeviceEthernetError.quark">
      <doc xml:space="preserve"
           filename="nm-device-ethernet.c"
           line="58">Registers an error quark for #NMDeviceEthernet if necessary.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-ethernet.c"
             line="63">the error quark used for #NMDeviceEthernet errors.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="device_generic_error_quark"
              c:identifier="nm_device_generic_error_quark"
              moved-to="DeviceGenericError.quark"
              version="0.9.10">
      <doc xml:space="preserve"
           filename="nm-device-generic.c"
           line="49">Registers an error quark for #NMDeviceGeneric if necessary.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-generic.c"
             line="54">the error quark used for #NMDeviceGeneric errors.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="device_infiniband_error_quark"
              c:identifier="nm_device_infiniband_error_quark"
              moved-to="DeviceInfinibandError.quark">
      <doc xml:space="preserve"
           filename="nm-device-infiniband.c"
           line="54">Registers an error quark for #NMDeviceInfiniband if necessary.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-infiniband.c"
             line="59">the error quark used for #NMDeviceInfiniband errors.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="device_modem_error_quark"
              c:identifier="nm_device_modem_error_quark"
              moved-to="DeviceModemError.quark">
      <doc xml:space="preserve"
           filename="nm-device-modem.c"
           line="52">Registers an error quark for #NMDeviceModem if necessary.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-modem.c"
             line="57">the error quark used for #NMDeviceModem errors.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="device_olpc_mesh_error_quark"
              c:identifier="nm_device_olpc_mesh_error_quark"
              moved-to="DeviceOlpcMeshError.quark">
      <doc xml:space="preserve"
           filename="nm-device-olpc-mesh.c"
           line="54">Registers an error quark for #NMDeviceOlpcMesh if necessary.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-olpc-mesh.c"
             line="59">the error quark used for #NMDeviceOlpcMesh errors.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="device_team_error_quark"
              c:identifier="nm_device_team_error_quark"
              moved-to="DeviceTeamError.quark"
              version="0.9.10">
      <doc xml:space="preserve"
           filename="nm-device-team.c"
           line="56">Registers an error quark for #NMDeviceTeam if necessary.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-team.c"
             line="61">the error quark used for #NMDeviceTeam errors.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="device_vlan_error_quark"
              c:identifier="nm_device_vlan_error_quark"
              moved-to="DeviceVlanError.quark">
      <doc xml:space="preserve"
           filename="nm-device-vlan.c"
           line="57">Registers an error quark for #NMDeviceVlan if necessary.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-vlan.c"
             line="62">the error quark used for #NMDeviceVlan errors.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="device_wifi_error_quark"
              c:identifier="nm_device_wifi_error_quark"
              moved-to="DeviceWifiError.quark">
      <doc xml:space="preserve"
           filename="nm-device-wifi.c"
           line="86">Registers an error quark for #NMDeviceWifi if necessary.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-wifi.c"
             line="91">the error quark used for #NMDeviceWifi errors.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="device_wimax_error_quark"
              c:identifier="nm_device_wimax_error_quark"
              moved-to="DeviceWimaxError.quark"
              deprecated="1"
              deprecated-version="1.2">
      <doc xml:space="preserve"
           filename="nm-device-wimax.c"
           line="79">Registers an error quark for #NMDeviceWimax if necessary.</doc>
      <doc-deprecated xml:space="preserve">WiMAX is no longer supported.</doc-deprecated>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-device-wimax.c"
             line="84">the error quark used for #NMDeviceWimax errors.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="object_error_quark"
              c:identifier="nm_object_error_quark"
              moved-to="ObjectError.quark">
      <doc xml:space="preserve"
           filename="nm-object.c"
           line="100">Registers an error quark for #NMObject if necessary.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-object.c"
             line="105">the error quark used for #NMObject errors.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="remote_connection_error_quark"
              c:identifier="nm_remote_connection_error_quark"
              moved-to="RemoteConnectionError.quark">
      <doc xml:space="preserve"
           filename="nm-remote-connection.c"
           line="93">Registers an error quark for #NMRemoteConnection if necessary.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-remote-connection.c"
             line="98">the error quark used for #NMRemoteConnection errors.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="remote_settings_error_quark"
              c:identifier="nm_remote_settings_error_quark"
              moved-to="RemoteSettingsError.quark">
      <doc xml:space="preserve"
           filename="nm-remote-settings.c"
           line="175">Registers an error quark for #NMRemoteSettings if necessary.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="nm-remote-settings.c"
             line="180">the error quark used for #NMRemoteSettings errors.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="secret_agent_error_quark"
              c:identifier="nm_secret_agent_error_quark"
              moved-to="SecretAgentError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
  </namespace>
</repository>
